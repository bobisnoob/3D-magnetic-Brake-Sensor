
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
0800a6f0 l    d  .rodata	00000000 .rodata
08019fa0 l    d  .ARM	00000000 .ARM
08019fa8 l    d  .init_array	00000000 .init_array
08019fb0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000aa4 l    d  .bss	00000000 .bss
20001d00 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801aa58 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
08005c68 l       .text	00000000 LoopCopyDataInit
08005c60 l       .text	00000000 CopyDataInit
08005c7c l       .text	00000000 LoopFillZerobss
08005c76 l       .text	00000000 FillZerobss
08005c8e l       .text	00000000 LoopForever
08005ca8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800a6d4 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 deregister_tm_clones
080001a8 l     F .text	00000000 register_tm_clones
080001cc l     F .text	00000000 __do_global_dtors_aux
20000aa4 l       .bss	00000000 completed.6266
08019fb0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001f4 l     F .text	00000000 frame_dummy
20000aa8 l       .bss	00000000 object.6271
08019fac l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
0800025c l       .text	00000000 turnOnLed
08000268 l       .text	00000000 resetCounter
08000294 l       .text	00000000 continue
0800028a l       .text	00000000 resetLED
0800029a l       .text	00000000 skip
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000ac0 l     O .bss	00000004 saved.5810
2000000c l     O .data	00000004 buf.5811
20000ac4 l     O .bss	00000004 count.5809
20000010 l     O .data	00000004 printPrompt.5812
0800aee7 l     O .rodata	00000006 __FUNCTION__.5826
00000000 l    df *ABS*	00000000 dump.c
20000018 l     O .data	00000004 count.5240
20000ac8 l     O .bss	00000004 address.5239
00000000 l    df *ABS*	00000000 syscall.c
20000acc l     O .bss	00000004 heap_end.5843
00000000 l    df *ABS*	00000000 terminal.c
08001884 l     F .text	00000080 USBD_CDC_DataIn
20000ad0 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08001be8 l     F .text	00000078 Uncompress
20000bf4 l     O .bss	00000014 buf.5798
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000c08 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
08003c90 l     F .text	0000002a I2C_TransferConfig
08003cbc l     F .text	00000090 I2C_IsAcknowledgeFailed
08003d4c l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
08003db4 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
08003e08 l     F .text	00000064 I2C_RequestMemoryWrite
08003e6c l     F .text	00000062 I2C_RequestMemoryRead
08003ece l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
080041e2 l     F .text	0000008c SPI_WaitFlagStateUntilTimeout
0800426e l     F .text	0000009c SPI_WaitFifoStateUntilTimeout
0800430a l     F .text	00000042 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000c0c l     O .bss	00000001 cfgidx.10117
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
08004cc8 l     F .text	00000012 USBD_CDC_DataIn
08004cda l     F .text	00000028 USBD_CDC_EP0_RxReady
08004d04 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08004d10 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
08004d1c l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
08004d34 l     F .text	0000002e USBD_CDC_DataOut
08004d62 l     F .text	0000005a USBD_CDC_Setup
08004dbc l     F .text	0000003a USBD_CDC_DeInit
08004df6 l     F .text	00000086 USBD_CDC_Init
2000009c l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000c10 l     O .bss	00000230 mem.10345
00000000 l    df *ABS*	00000000 usbd_desc.c
08005138 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
08005210 l     F .text	00000004 CDC_Itf_DeInit
08005214 l     F .text	00000020 CDC_Itf_Receive
08005234 l     F .text	00000018 CDC_Itf_Init
0800524c l     F .text	00000058 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
080052a4 l     F .text	00000080 SPIx_Init
08005324 l     F .text	00000040 SPIx_WriteRead
08005364 l     F .text	0000006c I2Cx_Init
20000e40 l     O .bss	00000060 SpiHandle
20000ea0 l     O .bss	00000038 I2cHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000ed8 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000edc l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
080076c0 l     F .text	00000076 __sbprintf
08019e20 l     O .rodata	00000010 zeroes.6926
08019e74 l     O .rodata	00000010 blanks.6925
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080078a0 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
080078b4 l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08008a14 l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
20000634 l     O .data	00000038 lconv
2000066c l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
08019f68 l     O .rodata	0000000c p05.5302
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a374 l     F .text	00000078 __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000208 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
08019fb4 l       .fini_array	00000000 __fini_array_end
20000aa4 l       .bss	00000000 __bss_start__
20001d00 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
08019fb0 l       .fini_array	00000000 __fini_array_start
08019fb0 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08019fa8 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08019fa8 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
08019fa8 l       .init_array	00000000 __preinit_array_start
08005ca8  w    F .text	00000002 RTC_Alarm_IRQHandler
080159f8 g     O .rodata	00000008 RTC_BKP19R_fields
08019c6c g     O .rodata	00000010 APBAHBPrescTable
0800c138 g     O .rodata	00000050 TIM2_SR_fields
08012f98 g     O .rodata	00000100 CAN_F10R1_fields
080167a8 g     O .rodata	00000008 TIM16_DMAR_fields
08005e04 g     F .text	00000014 putchar
08005ca8  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08015648 g     O .rodata	00000008 I2C1_RXDR_fields
08005830 g     F .text	0000001e LSM303DLHC_AccFilterCmd
08005ca8  w    F .text	00000002 TIM8_CC_IRQHandler
08015b90 g     O .rodata	00000030 TIM6_CR1_fields
0800bdb0 g     O .rodata	00000048 I2C1_ICR_fields
0800187c g     F .text	00000004 _isatty_r
20000f14 g     O .bss	00000050 input_b
08000c74 g     F .text	00000012 .hidden __aeabi_dcmple
080158d0 g     O .rodata	00000008 TIM2_PSC_fields
0800c8c8 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
08005fc8 g     F .text	000000ba strcpy
08015de8 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08000d60 g     F .text	0000002e .hidden __gnu_uldivmod_helper
08011970 g     O .rodata	00000008 I2C1_TXDR_fields
08005e18 g     F .text	00000064 _puts_r
080051d8 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800dd38 g     O .rodata	00000100 CAN_F19R1_fields
08000bb0 g     F .text	0000007a .hidden __cmpdf2
08001cb8 g     F .text	00000054 DecodeWriteRegister
08003b42 g     F .text	000000c8 HAL_PCD_EP_ClrStall
08012b48 g     O .rodata	00000008 TIM16_CCR1_fields
08005ca8  w    F .text	00000002 DebugMon_Handler
08001880 g     F .text	00000004 _lseek_r
080120d0 g     O .rodata	00000020 FPU_MVFR1_fields
08004fd0 g     F .text	0000001a HAL_PCD_ResetCallback
08003c3e g     F .text	0000002e PCD_WritePMA
08016a10 g     O .rodata	00000100 CAN_F22R1_fields
0800c340 g     O .rodata	000000e0 CAN_FA1R_fields
20000fb4 g     O .bss	00000224 hUSBDDevice
0800df30 g     O .rodata	00000048 TIM2_SMCR_fields
0800c888 g     O .rodata	00000020 NVIC_IPR1_fields
0801aa70 g     O .parsetable	0000000c CmdTestE
08000bb0 g     F .text	0000007a .hidden __eqdf2
08011de0 g     O .rodata	00000100 CAN_F14R1_fields
08012f90 g     O .rodata	00000008 TIM8_PSC_fields
08011228 g     O .rodata	00000030 TIM15_EGR_fields
08000d94 g     F .text	0000029c .hidden __divdi3
08001904 g     F .text	00000054 CmdStats
08005b24 g     F .text	0000002e L3GD20_FilterConfig
08003c0a g     F .text	00000034 HAL_PCDEx_PMAConfig
08013b70 g     O .rodata	00000140 TIM2_registers
08015308 g     O .rodata	00000058 TIM15_DIER_fields
0800d088 g     O .rodata	00000008 DMA1_CMAR3_fields
0800d828 g     O .rodata	00000100 GPIOA_BSRR_fields
08019824 g     O .rodata	00000060 DMA1_CCR7_fields
080031c4 g     F .text	000001b0 HAL_PCD_EP_Close
08012228 g     O .rodata	00000008 TSC_IOG6CR_fields
0800d090 g     O .rodata	00000028 ADC1_SQR1_fields
08000720 g     F .text	0000005a .hidden __floatdidf
0800cf68 g     O .rodata	000000e0 CAN_FS1R_fields
08012a90 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800bab8 g     O .rodata	00000010 RTC_SHIFTR_fields
08005ddc g     F .text	00000028 printf
08005aa8 g     F .text	00000040 L3GD20_EnableIT
08015a38 g     O .rodata	00000028 CAN_TI1R_fields
08004706 g     F .text	00000016 USBD_SetClassConfig
08012700 g     O .rodata	00000020 NVIC_IPR14_fields
0800a664 g     F .text	00000054 _wcrtomb_r
08005ca8  w    F .text	00000002 TIM1_CC_IRQHandler
08002b70 g     F .text	00000060 HAL_NVIC_SetPriority
0800e4e0 g     O .rodata	000001b0 ADC1_registers
08004fb8 g     F .text	00000010 HAL_PCD_DataInStageCallback
08015a00 g     O .rodata	00000018 TIM2_CR2_fields
08012648 g     O .rodata	00000008 Flash_WRPR_fields
0800a34c g     F .text	00000020 __sseek
08008b04 g     F .text	0000000a __sinit
0800dab0 g     O .rodata	00000060 DMA1_CCR2_fields
0800a404 g     F .text	000000a8 __swbuf_r
08005ca8  w    F .text	00000002 HardFault_Handler
0800c4d0 g     O .rodata	00000100 TSC_IOHCR_fields
08011840 g     O .rodata	00000020 CRC_CR_fields
0800c4c0 g     O .rodata	00000008 NVIC_ISER0_fields
08009860 g     F .text	00000002 __malloc_unlock
08014658 g     O .rodata	00000008 TIM15_ARR_fields
08011d08 g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
08011d00 g     O .rodata	00000008 TIM1_CCR3_fields
08019894 g     O .rodata	00000008 TIM1_DMAR_fields
0800d7b0 g     O .rodata	00000008 TIM15_CCR1_fields
08005ca8  w    F .text	00000002 USB_HP_IRQHandler
080158b8 g     O .rodata	00000010 USART1_RTOR_fields
0800ffc8 g     O .rodata	00000070 RCC_AHBENR_fields
080134f0 g     O .rodata	00000018 TIM2_CNT_fields
08014538 g     O .rodata	000000b0 I2C1_registers
0800143c g     F .text	0000000e SysTick_Handler
08010818 g     O .rodata	00000008 RTC_WPR_fields
08016488 g     O .rodata	00000008 RTC_SSR_fields
08002da8 g     F .text	0000000a HAL_GPIO_WritePin
08011fc0 g     O .rodata	00000008 TSC_IOG2CR_fields
08004ed4 g     F .text	00000026 USBD_CDC_ReceivePacket
08005ca8  w    F .text	00000002 PVD_IRQHandler
0800c4c8 g     O .rodata	00000008 DMA1_CPAR7_fields
080057f6 g     F .text	0000001c LSM303DLHC_AccRebootCmd
08013508 g     O .rodata	00000010 TIM6_CNT_fields
0800d5d0 g     O .rodata	00000078 TIM1_DIER_fields
08004fc8 g     F .text	00000008 HAL_PCD_SOFCallback
080112a0 g     O .rodata	00000008 NVIC_ICPR0_fields
08009794 g     F .text	000000c6 memmove
08005ca8  w    F .text	00000002 TAMP_STAMP_IRQHandler
08005514 g     F .text	00000068 GYRO_IO_Init
08016230 g     O .rodata	00000020 NVIC_IPR2_fields
08019fb4 g       *ABS*	00000000 _sidata
08002a90 g     F .text	00000038 HAL_RCC_GetHCLKFreq
08005ca8  w    F .text	00000002 PendSV_Handler
0801aa64 g     O .parsetable	0000000c CmdButtonE
08014980 g     O .rodata	00000008 NVIC_ICPR1_fields
08005ca8  w    F .text	00000002 NMI_Handler
08002bd0 g     F .text	00000018 HAL_NVIC_EnableIRQ
08009864 g     F .text	0000004c _Balloc
08019fa8 g       .ARM	00000000 __exidx_end
080060f0 g     F .text	00000064 __strtok_r
08005ca8  w    F .text	00000002 EXTI3_IRQHandler
08002a24 g     F .text	0000006c HAL_RCC_GetSysClockFreq
08005454 g     F .text	0000001c BSP_LED_Off
080195a4 g     O .rodata	00000008 DMA1_CNDTR5_fields
08010310 g     O .rodata	00000098 TIM8_CCER_fields
08010b38 g     O .rodata	00000100 CAN_F8R2_fields
08000ba0 g     F .text	0000008a .hidden __gtdf2
0801aadc g       .parsetable	00000000 _parsetable_end
08015190 g     O .rodata	00000048 RCC_AHBRSTR_fields
08005cb8 g     F .text	0000000c __errno
0800c420 g     O .rodata	00000008 RTC_BKP6R_fields
0800c9b0 g     O .rodata	00000028 CAN_TI2R_fields
08004908 g     F .text	00000218 USBD_StdDevReq
08003f20 g     F .text	00000090 HAL_I2C_Init
080147a0 g     O .rodata	00000008 NVIC_ISER2_fields
0801aac4 g     O .parsetable	0000000c CmdWE
08003fb0  w    F .text	00000002 HAL_I2C_MspDeInit
0800f790 g     O .rodata	00000020 CAN_RDH0R_fields
08011cc8 g     O .rodata	00000020 FPU_FPDSCR_fields
08005120 g     F .text	0000000c USBD_VCP_DeviceDescriptor
08002ac8  w    F .text	00000002 HAL_MspInit
0800dc30 g     O .rodata	00000100 CAN_F0R2_fields
0800ba18 g     O .rodata	00000008 TSC_IOG8CR_fields
080050b8 g     F .text	00000026 USBD_LL_IsStallEP
08015ce8 g     O .rodata	00000100 CAN_F0R1_fields
08010c38 g     O .rodata	00000020 TIM15_SMCR_fields
0800506c g     F .text	0000000e USBD_LL_Start
0800566c g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
08005730 g     F .text	00000030 BSP_ACCELERO_Init
080046fc g     F .text	0000000a USBD_Start
08001872 g     F .text	0000000a _fstat_r
08002db2 g     F .text	00000008 HAL_GPIO_TogglePin
08014ab0 g     O .rodata	00000048 TIM8_CR1_fields
080128f8 g     O .rodata	00000008 Flash_AR_fields
0800ed68 g     O .rodata	00000100 CAN_F2R1_fields
080119d8 g     O .rodata	00000058 COMP_COMP4_CSR_fields
0800d3f8 g     O .rodata	00000040 GPIOB_AFRH_fields
0800a6ec g       .text	00000000 _etext
080119a8 g     O .rodata	00000010 EXTI_PR2_fields
08012730 g     O .rodata	00000028 USB_FS_FNR_fields
20000aa4 g       .bss	00000000 _sbss
08011768 g     O .rodata	00000070 COMP_registers
08014988 g     O .rodata	00000100 CAN_F4R2_fields
0800511c g     F .text	00000002 USBD_static_free
08011220 g     O .rodata	00000008 DMA1_CMAR1_fields
0800eb00 g     O .rodata	00000060 TIM2_DIER_fields
08000c3c g     F .text	00000010 .hidden __aeabi_cdcmple
0800f980 g     O .rodata	00000008 TSC_IOG1CR_fields
08016778 g     O .rodata	00000020 TIM17_CCER_fields
08016578 g     O .rodata	00000008 TIM8_RCR_fields
08012d00 g     O .rodata	00000010 TIM16_CNT_fields
08012be0 g     O .rodata	00000100 GPIOB_BSRR_fields
0800fe10 g     O .rodata	00000100 CAN_F16R2_fields
0800da58 g     O .rodata	00000018 ADC1_OFR1_fields
08015360 g     O .rodata	00000100 CAN_F24R2_fields
0800f0e8 g     O .rodata	00000008 RTC_BKP23R_fields
08012410 g     O .rodata	00000008 TIM15_CCR2_fields
0800ccd8 g     O .rodata	00000098 ADC1_CFGR_fields
0800c808 g     O .rodata	00000008 RTC_BKP13R_fields
080046ee g     F .text	0000000e USBD_RegisterClass
08010040 g     O .rodata	00000100 CAN_F20R1_fields
0800ff10 g     O .rodata	00000060 USART1_ICR_fields
08019b1c g     O .rodata	00000100 CAN_F25R2_fields
08016798 g     O .rodata	00000008 TSC_IOG4CR_fields
08010140 g     O .rodata	00000100 CAN_F27R2_fields
08019a9c g     O .rodata	00000078 TIM8_SR_fields
0800bd60 g     O .rodata	00000050 USB_FS_ISTR_fields
08014638 g     O .rodata	00000008 DMA1_CMAR2_fields
0800d648 g     O .rodata	00000008 RTC_BKP26R_fields
08011278 g     O .rodata	00000028 ADC1_SQR2_fields
08010820 g     O .rodata	00000010 TIM17_CNT_fields
0800d4a8 g     O .rodata	00000008 WWDG_SR_fields
08002c14 g     F .text	00000188 HAL_GPIO_Init
0800ec60 g     O .rodata	000000c0 EXTI_registers
080048aa g     F .text	00000006 USBD_LL_SetSpeed
20000184 g     O .data	00000004 BUTTON_PORT
08005760 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800f0d8 g     O .rodata	00000008 NVIC_ICTR_fields
0800c6d0 g     O .rodata	00000008 TIM6_ARR_fields
0800f7b0 g     O .rodata	000000b0 CAN_TSR_fields
08001730 g     F .text	000000b4 DumpBuffer
08010ab8 g     O .rodata	00000080 GPIOA_IDR_fields
0800b948 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
08004fec g     F .text	00000002 HAL_PCD_ResumeCallback
080002d8 g     F .text	00000134 memcpy
08000c2c g     F .text	00000020 .hidden __aeabi_cdrcmple
080158d8 g     O .rodata	00000100 CAN_F7R2_fields
080154f0 g     O .rodata	00000010 TIM1_CNT_fields
0800557c g     F .text	00000044 GYRO_IO_Write
08005e8c g     F .text	000000f8 setvbuf
0800129c g     F .text	0000005c CmdLED
20000aa4 g     O .data	00000000 .hidden __TMC_END__
0800ef78 g     O .rodata	00000078 TIM1_SR_fields
0800db10 g     O .rodata	00000020 NVIC_IPR13_fields
0800c8a8 g     O .rodata	00000008 TIM15_PSC_fields
08004b50 g     F .text	000000b2 USBD_StdEPReq
08008a08 g     F .text	0000000c _cleanup_r
08013138 g     O .rodata	00000040 GPIOA_AFRH_fields
080006b0 g     F .text	00000022 .hidden __floatsidf
080147e8 g     O .rodata	00000010 DAC_DHR12RD_fields
08014b30 g     O .rodata	00000058 COMP_COMP2_CSR_fields
080147f8 g     O .rodata	00000078 TIM8_DIER_fields
08019884 g     O .rodata	00000010 ADC1_DIFSEL_fields
08000ba8 g     F .text	00000082 .hidden __ltdf2
0800548c g     F .text	00000074 BSP_PB_Init
08005ca8  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
08005ca8  w    F .text	00000002 EXTI0_IRQHandler
08015ea8 g     O .rodata	00000010 TIM8_OR_fields
08005ca8  w    F .text	00000002 I2C2_EV_IRQHandler
0800c980 g     O .rodata	00000020 CAN_TDH0R_fields
0800ee70 g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08000d00 g     F .text	00000000 .hidden __aeabi_uldivmod
08011978 g     O .rodata	00000030 WWDG_registers
0800bc58 g     O .rodata	00000008 TIM17_RCR_fields
08005e7c g     F .text	00000010 puts
08004c9c g     F .text	00000016 USBD_CtlSendStatus
08005ca8  w    F .text	00000002 FPU_IRQHandler
08002b30  w    F .text	0000001a HAL_Delay
08004b20 g     F .text	00000030 USBD_StdItfReq
0800ee68 g     O .rodata	00000008 TIM8_CCR4_fields
2000001c g     O .data	00000004 SystemCoreClock
0800a294 g     F .text	0000005c __fpclassifyd
08015500 g     O .rodata	00000120 TIM15_registers
08003478 g     F .text	00000182 HAL_PCD_EP_Transmit
08000244 g     F .text	0000005c my_Tick
08011bc8 g     O .rodata	00000100 CAN_F3R1_fields
080048c8 g     F .text	00000028 USBD_ParseSetupRequest
08012a40 g     O .rodata	00000010 TIM2_CCR1_fields
0800fc60 g     O .rodata	00000010 DAC_SWTRIGR_fields
08005ca8  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800e8e0 g     O .rodata	00000100 CAN_F13R1_fields
080091cc g     F .text	00000010 malloc
08011050 g     O .rodata	00000008 IWDG_RLR_fields
08003c6c g     F .text	00000022 PCD_ReadPMA
08001320 g     F .text	00000054 CmdGyro
08016460 g     O .rodata	00000010 CAN_FMR_fields
08019ea0 g     O .rodata	000000c8 __mprec_tens
080198f4 g     O .rodata	00000040 OPAMP_registers
08014360 g     O .rodata	00000008 DMA1_CNDTR4_fields
08015c60 g     O .rodata	00000008 NVIC_IABR1_fields
08015b60 g     O .rodata	00000030 ADC1_2_registers
20000130 g     O .data	0000001c VCP_Desc
08015680 g     O .rodata	000000d0 EXTI_PR1_fields
08005ca8  w    F .text	00000002 UsageFault_Handler
080090d0 g     F .text	00000008 __locale_charset
08013f40 g     O .rodata	00000020 TIM8_CCR5_fields
08005ca8  w    F .text	00000002 ADC1_2_IRQHandler
20000ee8 g     O .bss	00000004 __malloc_top_pad
20000f64 g     O .bss	00000050 input
08014b88 g     O .rodata	00000100 CAN_F4R1_fields
08012720 g     O .rodata	00000010 ADC1_TR3_fields
0800eff0 g     O .rodata	00000008 DMA1_CPAR2_fields
0800d4b0 g     O .rodata	00000048 TIM16_DIER_fields
08002d9c g     F .text	0000000c HAL_GPIO_ReadPin
08011960 g     O .rodata	00000008 NVIC_ICER2_fields
0800627c g     F .text	00000018 strtoul
20001454 g     O .bss	00000004 BuffLength
2000068c g     O .data	00000004 __mb_cur_max
08000690 g     F .text	0000001e .hidden __aeabi_ui2d
080090e4 g     F .text	00000008 _localeconv_r
0800d4a0 g     O .rodata	00000008 TIM8_CCR1_fields
20001458 g     O .bss	0000006c UartHandle
08016048 g     O .rodata	00000100 CAN_F9R2_fields
08013b68 g     O .rodata	00000008 DAC_DHR12L2_fields
080099e4 g     F .text	00000012 __i2b
08008d64 g     F .text	00000318 __sfvwrite_r
080048b0 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08005ca8  w    F .text	00000002 SPI1_IRQHandler
08011d10 g     O .rodata	00000028 CAN_TI0R_fields
08005ca8  w    F .text	00000002 CAN_SCE_IRQHandler
0800040c g     F .text	00000000 .hidden __aeabi_drsub
08016198 g     O .rodata	00000048 ADC1_SMPR2_fields
08012bc0 g     O .rodata	00000020 NVIC_IPR4_fields
08001838 g     F .text	00000034 _sbrk_r
0800c7e8 g     O .rodata	00000020 NVIC_IPR18_fields
08004efc g     F .text	0000009c HAL_PCD_MspInit
08013dc0 g     O .rodata	00000010 TIM6_DIER_fields
0800d278 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801948c g     O .rodata	000000b0 USART1_ISR_fields
08005ca8  w    F .text	00000002 TIM6_DAC_IRQHandler
0800dfe8 g     O .rodata	00000068 I2C1_CR2_fields
08011fb8 g     O .rodata	00000008 TIM8_CCR2_fields
08003aa0 g     F .text	000000a2 HAL_PCD_EP_SetStall
08001a20 g     F .text	0000000a _read_r
0800ba70 g     O .rodata	00000048 TIM1_SMCR_fields
08012198 g     O .rodata	00000030 CAN_ESR_fields
080046c4 g     F .text	0000002a USBD_Init
08014c98 g     O .rodata	00000080 GPIOB_BRR_fields
200011dc g     O .bss	00000178 hpcd
08000c60 g     F .text	00000012 .hidden __aeabi_dcmplt
0800a50c g     F .text	00000084 _fclose_r
08012b50 g     O .rodata	00000018 ADC1_OFR2_fields
0800c8f0 g     O .rodata	00000010 TIM2_ARR_fields
08005608 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000ee4 g     O .bss	00000004 __malloc_max_sbrked_mem
080167e0 g     O .rodata	00000100 CAN_F9R1_fields
08012900 g     O .rodata	00000038 RTC_DR_fields
08015470 g     O .rodata	00000008 TIM1_CCR1_fields
08002be8 g     F .text	0000002c HAL_SYSTICK_Config
080006d4 g     F .text	0000003a .hidden __extendsfdf2
08014258 g     O .rodata	00000008 Flash_OPTKEYR_fields
0800f5d0 g     O .rodata	00000018 ADC1_OFR4_fields
200011d8 g     O .bss	00000004 USBDDataIn
080009d0 g     F .text	000001d0 .hidden __aeabi_ddiv
08005ca8  w    F .text	00000002 TIM8_UP_IRQHandler
2000014c g     O .data	0000001a USBD_StringSerial
0800fa90 g     O .rodata	00000100 CAN_F25R1_fields
080165a8 g     O .rodata	00000018 SPI1_I2SPR_fields
08013e38 g     O .rodata	00000008 ADC1_JDR1_fields
08014978 g     O .rodata	00000008 IWDG_KR_fields
08015bc0 g     O .rodata	00000050 USB_FS_USB_EP0R_fields
08000418 g     F .text	00000276 .hidden __adddf3
080056b4 g     F .text	0000003c COMPASSACCELERO_IO_Write
08011fc8 g     O .rodata	00000100 CAN_F23R2_fields
08011d58 g     O .rodata	00000050 CRC_registers
0800e838 g     O .rodata	000000a0 USART1_CR1_fields
0800f110 g     O .rodata	00000320 RTC_registers
0800f880 g     O .rodata	00000100 CAN_F5R2_fields
0800e690 g     O .rodata	00000028 TIM17_CR2_fields
08019fa0 g       .ARM	00000000 __exidx_start
0800df18 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
0800cc58 g     O .rodata	00000008 Flash_KEYR_fields
0800077c g     F .text	00000254 .hidden __aeabi_dmul
080059b6 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
080125e0 g     O .rodata	00000060 TIM8_CCMR2_Output_fields
0800d3d0 g     O .rodata	00000028 PWR_CSR_fields
080152f8 g     O .rodata	00000010 RTC_ALRMASSR_fields
200000a8 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080159d8 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
0800ea30 g     O .rodata	00000008 NVIC_IABR0_fields
08019e18 g     O .rodata	00000004 _global_impure_ptr
0800ebb0 g     O .rodata	00000040 FPU_MVFR0_fields
08014520 g     O .rodata	00000008 TIM16_RCR_fields
08009ea8 g     F .text	000003ec _realloc_r
08005cf0 g     F .text	00000050 __libc_init_array
08004c8a g     F .text	00000012 USBD_CtlContinueRx
080158c8 g     O .rodata	00000008 RTC_BKP12R_fields
0800c228 g     O .rodata	00000010 USART1_GTPR_fields
08002e8c g     F .text	00000338 HAL_PCD_EP_Open
08005ca8  w    F .text	00000002 DMA2_Channel2_IRQHandler
08001030 g     F .text	0000026a .hidden __udivdi3
08005ca8  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800d2e0 g     O .rodata	00000010 TIM1_OR_fields
0800b998 g     O .rodata	00000080 GPIOB_PUPDR_fields
080035fa g     F .text	000004a6 HAL_PCD_IRQHandler
08001498 g     F .text	00000020 CmdR
0800a640 g     F .text	00000024 _fputwc_r
08019f78 g     O .rodata	00000028 __mprec_bigtens
08016490 g     O .rodata	00000008 TIM1_CCR4_fields
08000690 g     F .text	0000001e .hidden __floatunsidf
080111f8 g     O .rodata	00000020 CAN_TDL1R_fields
08009c78 g     F .text	00000046 __mcmp
08014b10 g     O .rodata	00000020 NVIC_IPR7_fields
08005b52 g     F .text	0000002e L3GD20_FilterCmd
08015650 g     O .rodata	00000008 TIM17_DMAR_fields
08003fb2 g     F .text	0000002e HAL_I2C_DeInit
08013db0 g     O .rodata	00000010 TIM15_CNT_fields
0800434e g     F .text	000000a6 HAL_SPI_Init
0800e198 g     O .rodata	00000008 RTC_BKP10R_fields
0800eb60 g     O .rodata	00000048 CAN_MSR_fields
080127a8 g     O .rodata	000000d0 RCC_registers
0800a6d4 g     F .text	00000000 _init
0800f860 g     O .rodata	00000020 CAN_TDL0R_fields
08011ce8 g     O .rodata	00000008 DAC_DHR8R2_fields
08013178 g     O .rodata	00000090 RCC_APB1RSTR_fields
080057b4 g     F .text	00000010 BSP_GYRO_GetXYZ
0800dd30 g     O .rodata	00000008 RTC_BKP0R_fields
080135a8 g     O .rodata	00000590 CAN_registers
0801aa58 g       .parsetable	00000000 _parsetable_start
0800f718 g     O .rodata	00000060 DMA1_CCR5_fields
0800ed60 g     O .rodata	00000008 RTC_BKP8R_fields
0800e3d0 g     O .rodata	00000110 TSC_registers
08011a30 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800509c g     F .text	0000000e USBD_LL_StallEP
0800cf38 g     O .rodata	00000008 NVIC_ICER1_fields
08015658 g     O .rodata	00000028 TIM16_EGR_fields
0801aaac g     O .parsetable	0000000c CmdRE
0800434c  w    F .text	00000002 HAL_SPI_MspInit
08013cb0 g     O .rodata	00000100 CAN_F8R1_fields
08005ca8  w    F .text	00000002 USART3_IRQHandler
080110e0 g     O .rodata	00000100 CAN_F21R1_fields
0800e9e0 g     O .rodata	00000050 RCC_CSR_fields
08005160 g     F .text	00000040 USBD_VCP_SerialStrDescriptor
080115b0 g     O .rodata	00000080 GPIOA_OTYPER_fields
080167b0 g     O .rodata	00000010 DAC_DHR12LD_fields
0800d928 g     O .rodata	00000030 TIM16_SR_fields
08013208 g     O .rodata	000001a0 TIM1_registers
08005cc4 g     F .text	0000002c __libc_fini_array
08015e70 g     O .rodata	00000038 ADC1_JSQR_fields
20001d00 g       .bss	00000000 _ebss
0800144c g     F .text	00000030 CmdTest
080056f0 g     F .text	00000040 COMPASSACCELERO_IO_Read
200001d8 g     O .data	0000002c L3gd20Drv
08011a78 g     O .rodata	00000050 FPU_CPACR_fields
08005ca8  w    F .text	00000002 DMA1_Channel7_IRQHandler
08011ef0 g     O .rodata	00000020 CAN_TDL2R_fields
080040d8 g     F .text	00000104 HAL_I2C_Mem_Read
0800d048 g     O .rodata	00000040 GPIOA_AFRL_fields
08005c58  w    F .text	00000038 Reset_Handler
20000020 g     O .data	00000043 USBD_CDC_CfgFSDesc
08019704 g     O .rodata	00000008 RTC_BKP29R_fields
08005770 g     F .text	00000044 BSP_GYRO_Init
0800ce18 g     O .rodata	00000020 NVIC_IPR0_fields
080112d0 g     O .rodata	00000080 GPIOA_ODR_fields
08009948 g     F .text	00000040 __hi0bits
0800eff8 g     O .rodata	00000020 NVIC_IPR15_fields
0800d2d8 g     O .rodata	00000008 TIM1_CCR2_fields
0800e6e0 g     O .rodata	000000d0 EXTI_RTSR1_fields
0800f710 g     O .rodata	00000008 DAC_DOR2_fields
08011218 g     O .rodata	00000008 CRC_DR_fields
08000cb0 g     F .text	0000004e .hidden __fixdfsi
0800ce60 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801aaa0 g     O .parsetable	0000000c CmdLEDE
08005ca8  w    F .text	00000002 UART5_IRQHandler
08001db4 g     F .text	00000050 DecodePeripheral
08015628 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
0800e1a8 g     O .rodata	00000100 CAN_F11R2_fields
08005ca8  w    F .text	00000002 ADC3_IRQHandler
08011058 g     O .rodata	00000038 RTC_TSTR_fields
08012150 g     O .rodata	00000048 TIM2_CR1_fields
08002af0 g     F .text	00000024 HAL_Init
08010ce0 g     O .rodata	00000100 CAN_F1R2_fields
08009e50 g     F .text	00000058 _putc_r
08004c6a g     F .text	00000020 USBD_CtlPrepareRx
080108b0 g     O .rodata	00000008 RTC_BKP17R_fields
080133a8 g     O .rodata	00000020 CAN_RDL1R_fields
08014420 g     O .rodata	00000100 CAN_F23R1_fields
080043f6 g     F .text	0000002e HAL_SPI_DeInit
08005ca8  w    F .text	00000002 TIM4_IRQHandler
0800f608 g     O .rodata	00000100 CAN_F18R1_fields
08016498 g     O .rodata	000000d0 USB_FS_registers
08000418 g     F .text	00000276 .hidden __aeabi_dadd
08016770 g     O .rodata	00000008 TIM8_CCR3_fields
08000ba8 g     F .text	00000082 .hidden __ledf2
08014260 g     O .rodata	00000100 CAN_F13R2_fields
0800ad56 g     O .rodata	00000008 LEDs
08012878 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
08019b14 g     O .rodata	00000008 DAC_DHR12R1_fields
080169e0 g     O .rodata	00000028 I2C1_OAR1_fields
08005114 g     F .text	00000008 USBD_static_malloc
0800cf48 g     O .rodata	00000020 CAN_RF0R_fields
08005ca8  w    F .text	00000002 CAN_RX1_IRQHandler
08005ca8  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800cf40 g     O .rodata	00000008 RTC_BKP7R_fields
08009b2c g     F .text	000000a0 __pow5mult
08011630 g     O .rodata	00000010 ADC1_TR1_fields
08016390 g     O .rodata	00000008 DMA1_CNDTR7_fields
08000710 g     F .text	0000006a .hidden __aeabi_ul2d
08004ea6 g     F .text	0000002e USBD_CDC_TransmitPacket
20000188 g     O .data	00000004 I2cxTimeout
0800f708 g     O .rodata	00000008 TSC_IOG5CR_fields
0800ffc0 g     O .rodata	00000008 DAC_DHR12R2_fields
08011cf8 g     O .rodata	00000008 RTC_BKP18R_fields
0800022c g     F .text	00000016 mytest
0800e1a0 g     O .rodata	00000008 DMA1_CMAR6_fields
0800ff90 g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08001374 g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
08004cb2 g     F .text	00000016 USBD_CtlReceiveStatus
0800f540 g     O .rodata	00000010 TIM2_CCR4_fields
20001d00 g       ._user_heap_stack	00000000 end
20000168 g     O .data	00000008 LineCoding
0800ebf0 g     O .rodata	00000070 SPI1_CR1_fields
08005ca8  w    F .text	00000002 I2C1_EV_IRQHandler
08013518 g     O .rodata	00000090 SPI1_registers
0800507a g     F .text	00000014 USBD_LL_OpenEP
08012b68 g     O .rodata	00000010 TIM8_DCR_fields
08001e4c g     F .text	00000058 DecodePrintRegisters
080114d0 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0800fbb0 g     O .rodata	000000b0 USART1_registers
08005ae8 g     F .text	0000003c L3GD20_DisableIT
0800d2f0 g     O .rodata	00000008 USART1_TDR_fields
080130a0 g     O .rodata	00000078 RCC_APB1ENR_fields
080043f4  w    F .text	00000002 HAL_SPI_MspDeInit
08016a08 g     O .rodata	00000008 DMA1_CNDTR2_fields
08014870 g     O .rodata	00000070 CAN_IER_fields
08015c68 g     O .rodata	00000060 DMA1_CCR1_fields
08016040 g     O .rodata	00000008 NVIC_ICER0_fields
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
080110d0 g     O .rodata	00000008 NVIC_ISER1_fields
080047e4 g     F .text	00000088 USBD_LL_DataInStage
080196fc g     O .rodata	00000008 RTC_BKP31R_fields
08011488 g     O .rodata	00000048 TIM1_EGR_fields
08015490 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
08014660 g     O .rodata	00000010 DAC_SR_fields
080124b8 g     O .rodata	00000010 TIM2_CCR2_fields
08004ff0 g     F .text	0000007c USBD_LL_Init
08014aa8 g     O .rodata	00000008 RTC_BKP3R_fields
08005438 g     F .text	0000001c BSP_LED_On
080059d2 g     F .text	00000032 L3GD20_Init
08000c9c g     F .text	00000012 .hidden __aeabi_dcmpgt
08005ca8  w    F .text	00000002 DMA1_Channel6_IRQHandler
080048f0 g     F .text	00000016 USBD_CtlError
20000064 g     O .data	00000038 USBD_CDC
0800471c g     F .text	0000000e USBD_ClrClassConfig
0801953c g     O .rodata	00000008 RTC_BKP5R_fields
08005ca8  w    F .text	00000002 UART4_IRQHandler
08005ca8  w    F .text	00000002 DMA2_Channel4_IRQHandler
08004e7c g     F .text	0000000e USBD_CDC_RegisterInterface
08008b10 g     F .text	00000002 __sfp_lock_acquire
08009700 g     F .text	00000092 memchr
08008bb4 g     F .text	000001b0 _free_r
08005ca8  w    F .text	00000002 TIM3_IRQHandler
08005ca8  w    F .text	00000002 RCC_IRQHandler
0800c118 g     O .rodata	00000020 RTC_CALR_fields
080090d8 g     F .text	0000000c __locale_mb_cur_max
08000c88 g     F .text	00000012 .hidden __aeabi_dcmpge
0800eba8 g     O .rodata	00000008 DAC_DHR12L1_fields
0800c1f8 g     O .rodata	00000030 TIM17_SR_fields
00001000 g       *ABS*	00000000 _Min_Heap_Size
080113d0 g     O .rodata	00000080 GPIOB_OTYPER_fields
08005ca8  w    F .text	00000002 DMA1_Channel1_IRQHandler
080157d0 g     O .rodata	00000008 RTC_BKP9R_fields
080165c0 g     O .rodata	00000100 CAN_F14R2_fields
08000414 g     F .text	0000027a .hidden __aeabi_dsub
08004fa6 g     F .text	00000012 HAL_PCD_DataOutStageCallback
08005ca8 g       .text	00000002 Default_Handler
20000a9c g     O .data	00000004 __malloc_sbrk_base
080051bc g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
08012ac0 g     O .rodata	00000088 GPIOA_LCKR_fields
0800fd78 g     O .rodata	00000090 RTC_TAFCR_fields
20000170 g     O .data	00000010 USBD_CDC_fops
080166c0 g     O .rodata	000000b0 GPIOA_registers
0800f530 g     O .rodata	00000008 NVIC_ISPR2_fields
08005ca8  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08013dd8 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
0800d1e8 g     O .rodata	00000088 GPIOB_LCKR_fields
0800cc60 g     O .rodata	00000078 TIM8_CR2_fields
08003468 g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800c810 g     O .rodata	00000030 CAN_BTR_fields
08000710 g     F .text	0000006a .hidden __floatundidf
08019544 g     O .rodata	00000060 DMA1_CCR4_fields
0800d790 g     O .rodata	00000020 NVIC_IPR10_fields
0800fe08 g     O .rodata	00000008 TIM17_ARR_fields
0800fc70 g     O .rodata	00000100 CAN_F12R2_fields
08009bcc g     F .text	000000aa __lshift
080140b0 g     O .rodata	00000028 USART1_RQR_fields
08012760 g     O .rodata	00000048 TIM17_DIER_fields
0800bbf0 g     O .rodata	00000008 RTC_BKP22R_fields
080140d8 g     O .rodata	00000020 CAN_TDH2R_fields
080117e8 g     O .rodata	00000008 TIM1_RCR_fields
080050aa g     F .text	0000000e USBD_LL_ClearStallEP
08019a7c g     O .rodata	00000020 NVIC_IPR5_fields
0800d650 g     O .rodata	00000058 Flash_OBR_fields
08005ca8  w    F .text	00000002 EXTI15_10_IRQHandler
0800df78 g     O .rodata	00000018 CAN_TDT1R_fields
08005b80 g     F .text	000000d8 L3GD20_ReadXYZAngRate
08012270 g     O .rodata	00000038 RTC_TR_fields
08012ce0 g     O .rodata	00000020 NVIC_IPR17_fields
080077fc g     F .text	000000a4 __register_exitproc
0800d578 g     O .rodata	00000058 Flash_CR_fields
0800f078 g     O .rodata	00000058 SPI1_SR_fields
0800ed20 g     O .rodata	00000040 USB_FS_DADDR_fields
0800f780 g     O .rodata	00000010 EXTI_SWIER2_fields
08002e60 g     F .text	0000002c HAL_PCD_SetAddress
08011258 g     O .rodata	00000020 NVIC_IPR19_fields
08010240 g     O .rodata	00000008 TIM6_SR_fields
0800c240 g     O .rodata	00000100 CAN_F1R1_fields
08014c90 g     O .rodata	00000008 TIM17_PSC_fields
0800c188 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
080099f8 g     F .text	00000134 __multiply
08016b98 g     O .rodata	00000008 SPI1_CRCPR_fields
08005812 g     F .text	0000001e LSM303DLHC_AccFilterConfig
08002758 g     F .text	000002cc HAL_RCC_ClockConfig
08002b4c g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
20000014 g     O .data	00000004 Commands
08016148 g     O .rodata	00000010 ADC1_TR2_fields
20000eec g     O .bss	00000028 __malloc_current_mallinfo
08005934 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
08011d50 g     O .rodata	00000008 RTC_TSSSR_fields
080015bc g     F .text	0000012c TaskInput
0800fa88 g     O .rodata	00000008 TIM6_CR2_fields
080143c8 g     O .rodata	00000050 RCC_CR_fields
08011640 g     O .rodata	000000e0 CAN_FM1R_fields
080120c8 g     O .rodata	00000008 TIM1_CCR6_fields
08009d94 g     F .text	000000ba __d2b
08016398 g     O .rodata	00000098 USART1_CR2_fields
08013fb0 g     O .rodata	00000060 TIM1_BDTR_fields
08005f84 g     F .text	00000044 strcasecmp
0800bff0 g     O .rodata	00000008 IWDG_WINR_fields
08011720 g     O .rodata	00000048 ADC1_SMPR1_fields
080055c0 g     F .text	00000048 GYRO_IO_Read
080002c8 g     F .text	00000004 my_Init
0800f0f0 g     O .rodata	00000018 I2C1_OAR2_fields
08015eb8 g     O .rodata	00000100 CAN_F26R1_fields
08006154 g     F .text	00000128 _strtoul_r
08012640 g     O .rodata	00000008 CRC_POL_fields
0801970c g     O .rodata	00000008 DMA1_CMAR4_fields
08005ca8  w    F .text	00000002 TIM7_IRQHandler
08005a4c g     F .text	0000005c L3GD20_INT1InterruptConfig
08004fea g     F .text	00000002 HAL_PCD_SuspendCallback
08014100 g     O .rodata	00000008 DMA1_CPAR3_fields
08010038 g     O .rodata	00000008 RTC_BKP14R_fields
08004d28 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
0800186c g     F .text	00000006 _close_r
0800b890 g     O .rodata	00000008 SPI1_DR_fields
0800cc38 g     O .rodata	00000018 RCC_CFGR2_fields
080006b0 g     F .text	00000022 .hidden __aeabi_i2d
0800c7d8 g     O .rodata	00000010 TIM15_DCR_fields
0800c8b0 g     O .rodata	00000018 Flash_ACR_fields
08019814 g     O .rodata	00000008 CRC_IDR_fields
200001ac g     O .data	0000002c Lsm303dlhcDrv
0800f538 g     O .rodata	00000008 DMA1_CPAR5_fields
08015a60 g     O .rodata	00000100 CAN_F18R2_fields
08013f60 g     O .rodata	00000050 IWDG_registers
080060e0 g     F .text	00000010 strtok
0801aa94 g     O .parsetable	0000000c CmdGyroE
080110d8 g     O .rodata	00000008 IWDG_PR_fields
080123f0 g     O .rodata	00000020 NVIC_IPR11_fields
080117f0 g     O .rodata	00000050 COMP_COMP7_CSR_fields
0800c0f8 g     O .rodata	00000020 CAN_RF1R_fields
08001958 g     F .text	0000007c TerminalInit
08007738 g     F .text	000000c4 __swsetup_r
0800e6d8 g     O .rodata	00000008 TIM8_ARR_fields
08000d90  w    F .text	00000002 .hidden __aeabi_ldiv0
08005ca8  w    F .text	00000002 EXTI9_5_IRQHandler
080046be g     F .text	00000006 HAL_SPI_GetState
080009d0 g     F .text	000001d0 .hidden __divdf3
0800e2c8 g     O .rodata	00000008 ADC1_DR_fields
08005ca8  w    F .text	00000002 RTC_WKUP_IRQHandler
080196ec g     O .rodata	00000010 USART1_BRR_fields
08015c10 g     O .rodata	00000050 TIM15_CCMR1_Output_fields
20000690 g     O .data	00000408 __malloc_av_
080129b0 g     O .rodata	00000088 SYSCFG_CFGR1_fields
08001a2a g     F .text	00000010 TerminalReadNonBlock
0800077c g     F .text	00000254 .hidden __muldf3
080167c8 g     O .rodata	00000018 CAN_TDT0R_fields
080017e4 g     F .text	00000054 CmdDump
0800a2f0 g     F .text	00000022 __sread
080112a8 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
08014640 g     O .rodata	00000018 WWDG_CFR_fields
08014e20 g     O .rodata	00000370 Peripherals
20000008 g       .data	00000000 LEDsAddress
08015750 g     O .rodata	00000080 GPIOB_ODR_fields
08002b24  w    F .text	0000000c HAL_GetTick
08012650 g     O .rodata	00000050 USB_FS_USB_EP5R_fields
0800f988 g     O .rodata	00000100 CAN_F11R1_fields
0800985c g     F .text	00000002 __malloc_lock
080140f8 g     O .rodata	00000008 NVIC_ISPR0_fields
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0800cee0 g     O .rodata	00000058 ADC1_ISR_fields
0800d438 g     O .rodata	00000048 FPU_FPCCR_fields
08016568 g     O .rodata	00000010 TSC_ICR_fields
0800584e g     F .text	000000e6 LSM303DLHC_AccReadXYZ
0800daa8 g     O .rodata	00000008 NVIC_IABR2_fields
080089dc g     F .text	0000002c _fflush_r
08001a3a g     F .text	00000012 TerminalReadAnyNonBlock
080051a0 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
0800a4ac g     F .text	0000005e _calloc_r
08016b10 g     O .rodata	00000080 GPIOA_PUPDR_fields
08005ca8  w    F .text	00000002 SPI2_IRQHandler
08014af8 g     O .rodata	00000008 RTC_BKP21R_fields
08019ced g     O .rodata	00000012 hUSBDDeviceDesc
0800bbc8 g     O .rodata	00000028 RTC_TSDR_fields
08001bdc g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
080146d0 g     O .rodata	00000048 RCC_CFGR3_fields
08005d40 g     F .text	0000009a memset
08005ca8  w    F .text	00000002 MemManage_Handler
080013a0 g     F .text	0000009c main
08014108 g     O .rodata	00000100 TSC_IOSCR_fields
0800b6b0 g     O .rodata	000001e0 DMA1_registers
08005500 g     F .text	00000014 BSP_PB_GetState
08012418 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000ee0 g     O .bss	00000004 __malloc_max_total_mem
20000004 g       .data	00000000 ledCounter
0800f0d0 g     O .rodata	00000008 ADC1_JDR3_fields
080123e8 g     O .rodata	00000008 SPI1_TXCRCR_fields
08004424 g     F .text	0000029a HAL_SPI_TransmitReceive
20000180 g     O .data	00000004 SpixTimeout
0801aa58 g       *ABS*	00000000 _siccmram
080198a4 g     O .rodata	00000050 COMP_COMP3_CSR_fields
080102f0 g     O .rodata	00000020 NVIC_IPR9_fields
08010590 g     O .rodata	00000040 DBGMCU_registers
08014a88 g     O .rodata	00000020 NVIC_IPR16_fields
0800f430 g     O .rodata	00000100 CAN_F2R2_fields
08005ca8  w    F .text	00000002 SVC_Handler
0800a36c g     F .text	00000008 __sclose
08005ca8  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800de38 g     O .rodata	000000e0 DMA1_IFCR_fields
0800cd98 g     O .rodata	00000080 TSC_IOGCSR_fields
08001b6c g     F .text	00000070 TerminalInputBufferWrite
080167a0 g     O .rodata	00000008 DMA1_CPAR1_fields
080079e0 g     F .text	00000ea2 _dtoa_r
080091dc g     F .text	00000524 _malloc_r
08012230 g     O .rodata	00000040 GPIOB_AFRL_fields
0800a6b8 g     F .text	0000001a __ascii_wctomb
0800c9d8 g     O .rodata	00000058 ADC1_IER_fields
08000720 g     F .text	0000005a .hidden __aeabi_l2d
0800d270 g     O .rodata	00000008 DAC_DHR8R1_fields
08013b38 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
0800cb38 g     O .rodata	00000100 TSC_IOASCR_fields
0800e2a8 g     O .rodata	00000020 NVIC_IPR20_fields
0800486c g     F .text	0000003e USBD_LL_Reset
080133c8 g     O .rodata	00000018 CAN_RDT1R_fields
08010830 g     O .rodata	00000080 GPIOA_BRR_fields
08014d20 g     O .rodata	00000100 CAN_F20R2_fields
080117d8 g     O .rodata	00000010 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
08005108 g     F .text	0000000c USBD_LL_GetRxDataSize
08005ca8  w    F .text	00000002 DMA1_Channel5_IRQHandler
080057c4 g     F .text	00000020 LSM303DLHC_AccInit
08005ca8  w    F .text	00000002 USB_LP_IRQHandler
200014c4 g     O .bss	00000800 UserRxBuffer
080123a8 g     O .rodata	00000040 SPI1_I2SCFGR_fields
08019c9c g     O .rodata	00000004 USBD_LangIDDesc
0800d0b8 g     O .rodata	00000100 CAN_F15R2_fields
08005ca8  w    F .text	00000002 EXTI4_IRQHandler
080145e8 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
2000018c g     O .data	00000020 LED_PORT
0800be90 g     O .rodata	00000008 TIM8_CCR6_fields
08005970 g     F .text	00000046 LSM303DLHC_AccClickITEnable
08004784 g     F .text	00000060 USBD_LL_DataOutStage
0800fd70 g     O .rodata	00000008 RTC_BKP4R_fields
08008b18 g     F .text	0000009c _malloc_trim_r
08015620 g     O .rodata	00000008 TSC_IOG7CR_fields
08014248 g     O .rodata	00000008 RTC_BKP16R_fields
08011450 g     O .rodata	00000028 DBGMCU_CR_fields
08011d38 g     O .rodata	00000018 CAN_RDT0R_fields
0800d6a8 g     O .rodata	00000008 ADC1_AWD2CR_fields
08015fb8 g     O .rodata	00000008 DMA1_CMAR5_fields
0800fb90 g     O .rodata	00000020 CAN_RDL0R_fields
08016ba0 g     O .rodata	00000008 DMA1_CPAR4_fields
080148e0 g     O .rodata	00000080 TIM6_registers
080012f8 g     F .text	00000028 CmdAccel
08011a70 g     O .rodata	00000008 RTC_BKP11R_fields
080041dc g     F .text	00000006 HAL_I2C_GetState
0800211c g     F .text	00000068 SystemInit
08012b78 g     O .rodata	00000048 TIM16_BDTR_fields
08000bb0 g     F .text	0000007a .hidden __nedf2
08011540 g     O .rodata	00000070 RTC_ALRMBR_fields
08011ee0 g     O .rodata	00000010 TIM2_DCR_fields
08019c1c g     O .rodata	00000050 ADC1_CR_fields
0800a6e0 g     F .text	00000000 _fini
0800147c g     F .text	0000001c CmdW
08002e54 g     F .text	0000000c HAL_PCD_Start
08005ca8  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
080105d0 g     O .rodata	00000020 EXTI_EMR2_fields
080057e4 g     F .text	00000012 LSM303DLHC_AccReadID
0800ce58 g     O .rodata	00000008 RTC_WUTR_fields
08014418 g     O .rodata	00000008 DMA1_CPAR6_fields
08015e68 g     O .rodata	00000008 CRC_INIT_fields
0800be00 g     O .rodata	00000088 RTC_ISR_fields
0800c9a0 g     O .rodata	00000010 TIM1_DCR_fields
0800c488 g     O .rodata	00000038 PWR_CR_fields
0800ea38 g     O .rodata	00000030 TIM2_EGR_fields
08005cac g     F .text	0000000c atexit
08015fc0 g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0800d6b0 g     O .rodata	00000060 FPU_registers
0800ca38 g     O .rodata	00000100 EXTI_IMR1_fields
08001b34 g     F .text	00000038 _write_r
0800d350 g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08016430 g     O .rodata	00000028 ADC1_SQR3_fields
08005ca8  w    F .text	00000002 DMA1_Channel3_IRQHandler
08016960 g     O .rodata	00000080 DBGMCU_APB1FZ_fields
080120f0 g     O .rodata	00000060 SPI1_CR2_fields
08016478 g     O .rodata	00000010 ADC1_CALFACT_fields
08014c88 g     O .rodata	00000008 RTC_BKP28R_fields
08002aca  w    F .text	00000024 HAL_InitTick
0800d4f8 g     O .rodata	00000020 TIM1_CCR5_fields
080050de g     F .text	0000000e USBD_LL_SetUSBAddress
08015cc8 g     O .rodata	00000020 NVIC_IPR12_fields
08019d00 g     O .rodata	00000010 LED_PIN
20000630 g     O .data	00000004 _impure_ptr
080119b8 g     O .rodata	00000018 CAN_TDT2R_fields
08014250 g     O .rodata	00000008 ADC1_JDR4_fields
08014208 g     O .rodata	00000040 TIM15_CR2_fields
08008888 g     F .text	00000154 __sflush_r
0800c428 g     O .rodata	00000060 RCC_CFGR_fields
08002b14  w    F .text	00000010 HAL_IncTick
0800cd70 g     O .rodata	00000028 TIM17_EGR_fields
0800508e g     F .text	0000000e USBD_LL_CloseEP
08005ca8  w    F .text	00000002 ADC4_IRQHandler
08014010 g     O .rodata	000000a0 RTC_CR_fields
08004c58 g     F .text	00000012 USBD_CtlContinueSendData
080157d8 g     O .rodata	000000e0 DMA1_ISR_fields
0800d958 g     O .rodata	00000100 CAN_F6R1_fields
08005a04 g     F .text	0000001c L3GD20_ReadID
08005ca8  w    F .text	00000002 WWDG_IRQHandler
08003f1e  w    F .text	00000002 HAL_I2C_MspInit
0800bc60 g     O .rodata	00000100 EXTI_EMR1_fields
0800ff70 g     O .rodata	00000020 NVIC_IPR6_fields
08016ba8 g     O .rodata	00000010 TIM2_CCR3_fields
08014670 g     O .rodata	00000060 DMA1_CCR6_fields
08011350 g     O .rodata	00000080 GPIOA_MODER_fields
08014720 g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08012938 g     O .rodata	00000078 TIM1_CR2_fields
0800ef68 g     O .rodata	00000010 RTC_PRER_fields
080050ec g     F .text	0000000e USBD_LL_Transmit
08005ca8  w    F .text	00000002 TIM2_IRQHandler
080002c4 g     F .text	00000004 my_Loop
08015e38 g     O .rodata	00000020 TIM16_CCER_fields
08002dba g     F .text	0000009a HAL_PCD_Init
200000ec g     O .data	00000043 USBD_CDC_CfgHSDesc
0801aa88 g     O .parsetable	0000000c CmdDecodeE
0800e098 g     O .rodata	00000100 CAN_F26R2_fields
080124c8 g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
0800e2d0 g     O .rodata	00000100 CAN_F16R1_fields
0800be88 g     O .rodata	00000008 RTC_BKP27R_fields
08011a60 g     O .rodata	00000010 EXTI_RTSR2_fields
08016580 g     O .rodata	00000028 TIM16_CR2_fields
0800d7b8 g     O .rodata	00000070 RTC_ALRMAR_fields
08014970 g     O .rodata	00000008 TIM1_ARR_fields
08004c02 g     F .text	0000003a USBD_GetString
08005470 g     F .text	0000001c BSP_LED_Toggle
0800db30 g     O .rodata	00000100 CAN_F22R2_fields
0800bac8 g     O .rodata	00000100 CAN_F24R1_fields
08004f98 g     F .text	0000000e HAL_PCD_SetupStageCallback
08019714 g     O .rodata	00000100 CAN_F5R1_fields
08005ca8  w    F .text	00000002 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
080014b8 g     F .text	00000104 parse
08013098 g     O .rodata	00000008 RTC_BKP2R_fields
08005ca8  w    F .text	00000002 COMP1_2_3_IRQHandler
080122a8 g     O .rodata	00000100 CAN_F17R1_fields
08005ca8  w    F .text	00000002 EXTI1_IRQHandler
0800d518 g     O .rodata	00000060 TIM8_BDTR_fields
08000c4c g     F .text	00000012 .hidden __aeabi_dcmpeq
080128a8 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0800b898 g     O .rodata	000000b0 ADC1_2_CSR_fields
08012758 g     O .rodata	00000008 FPU_FPCAR_fields
20000aa4 g       .data	00000000 _edata
08010de0 g     O .rodata	000001a0 TIM8_registers
0800f0e0 g     O .rodata	00000008 RTC_BKP30R_fields
080125c8 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
08011da8 g     O .rodata	00000038 TIM16_CR1_fields
08019934 g     O .rodata	00000100 CAN_F17R2_fields
0800da70 g     O .rodata	00000038 TIM15_CR1_fields
0800a590 g     F .text	000000b0 __fputwc
08001ea4 g     F .text	00000278 CmdDecode
080119d0 g     O .rodata	00000008 TIM15_RCR_fields
0800f550 g     O .rodata	00000080 GPIOB_IDR_fields
0800ba20 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
08011538 g     O .rodata	00000008 TIM8_DMAR_fields
0800c900 g     O .rodata	00000080 Flash_registers
08010740 g     O .rodata	00000010 TIM16_DCR_fields
080196ac g     O .rodata	00000040 RCC_APB2RSTR_fields
080016e8 g     F .text	00000028 fetch_uint32_arg
08014960 g     O .rodata	00000010 RTC_ALRMBSSR_fields
080147a8 g     O .rodata	00000040 SYSCFG_RCR_fields
08005ca8  w    F .text	00000002 USART2_IRQHandler
08016160 g     O .rodata	00000038 TIM17_CR1_fields
08012d30 g     O .rodata	00000260 NVIC_registers
08005ca8  w    F .text	00000002 COMP4_5_6_IRQHandler
0800a314 g     F .text	00000038 __swrite
08002184 g     F .text	000005d4 HAL_RCC_OscConfig
20000a98 g     O .data	00000004 __malloc_trim_threshold
08011968 g     O .rodata	00000008 TIM17_CCR1_fields
0800e810 g     O .rodata	00000028 I2C1_TIMINGR_fields
08014d18 g     O .rodata	00000008 USB_FS_BTABLE_fields
080102d0 g     O .rodata	00000020 CAN_TDH1R_fields
08011f10 g     O .rodata	000000a8 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
08004c3c g     F .text	0000001c USBD_CtlSendData
080151f8 g     O .rodata	00000100 CAN_F15R1_fields
08014528 g     O .rodata	00000010 ADC1_2_CDR_fields
0800907c g     F .text	00000052 _fwalk_reent
08009cc0 g     F .text	000000d2 __mdiff
08016158 g     O .rodata	00000008 TIM6_PSC_fields
08000cb0 g     F .text	0000004e .hidden __aeabi_d2iz
08013dd0 g     O .rodata	00000008 RTC_BKP15R_fields
0800e6b8 g     O .rodata	00000020 PWR_registers
080151d8 g     O .rodata	00000020 Flash_SR_fields
080167c0 g     O .rodata	00000008 ADC1_JDR2_fields
080111f0 g     O .rodata	00000008 RTC_BKP20R_fields
20000204 g     O .data	00000004 __ctype_ptr__
0800f778 g     O .rodata	00000008 DMA1_CNDTR6_fields
0800bff8 g     O .rodata	00000100 CAN_F19R2_fields
08005ca8  w    F .text	00000002 I2C2_ER_IRQHandler
08010750 g     O .rodata	00000040 ADC1_2_CCR_fields
08005ca8  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800bf10 g     O .rodata	000000e0 DAC_registers
080168e0 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801967c g     O .rodata	00000030 TIM8_CCMR2_Input_fields
08008b14 g     F .text	00000002 __sfp_lock_release
0800be98 g     O .rodata	00000048 TIM17_BDTR_fields
08012d10 g     O .rodata	00000020 CAN_RDH1R_fields
080121c8 g     O .rodata	00000060 TIM2_CCER_fields
08015e58 g     O .rodata	00000010 DAC_DHR8RD_fields
08001710 g     F .text	00000020 fetch_string_arg
080053d0 g     F .text	00000068 BSP_LED_Init
080109b8 g     O .rodata	00000080 GPIOB_MODER_fields
0801aa7c g     O .parsetable	0000000c CmdDumpE
08019c8c g     O .rodata	00000010 PLLMULFactorTable
0800ea68 g     O .rodata	00000098 USART1_CR3_fields
08001d0c g     F .text	0000004c DecodeField
08015a18 g     O .rodata	00000020 CAN_RI0R_fields
08005ca8  w    F .text	00000002 TIM8_BRK_IRQHandler
0800d480 g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0800cc50 g     O .rodata	00000008 TIM1_PSC_fields
08001e04 g     F .text	00000048 DecodePrintPeripherals
08010790 g     O .rodata	00000038 TIM15_CCER_fields
08019d10 g     O .rodata	00000101 _ctype_
08012a38 g     O .rodata	00000008 DMA1_CMAR7_fields
08000d90  w    F .text	00000002 .hidden __aeabi_idiv0
0800f5e8 g     O .rodata	00000020 CAN_RI1R_fields
08016250 g     O .rodata	00000028 SYSCFG_CFGR2_fields
08010248 g     O .rodata	00000088 RCC_CIR_fields
0801aab8 g     O .parsetable	0000000c CmdStatsE
08005ca8  w    F .text	00000002 FLASH_IRQHandler
08010588 g     O .rodata	00000008 TIM15_DMAR_fields
08016278 g     O .rodata	00000010 EXTI_FTSR2_fields
08010638 g     O .rodata	00000100 CAN_F10R2_fields
0800e7f0 g     O .rodata	00000020 NVIC_IPR3_fields
08016470 g     O .rodata	00000008 DMA1_CNDTR1_fields
0800d1c0 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
0800c840 g     O .rodata	00000048 TIM15_BDTR_fields
0800512c g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001354 g     O .bss	00000100 USBD_StrDesc
08001a4c g     F .text	000000e8 TerminalOutputBufferWrite
08005ca8  w    F .text	00000002 BusFault_Handler
08005ca8  w    F .text	00000002 USART1_IRQHandler
080107c8 g     O .rodata	00000050 COMP_COMP1_CSR_fields
08019a34 g     O .rodata	00000048 TIM8_EGR_fields
080090ec g     F .text	000000e0 __smakebuf_r
08011090 g     O .rodata	00000040 TIM15_SR_fields
08006084 g     F .text	0000005c strlen
0800e7b0 g     O .rodata	00000040 RCC_APB2ENR_fields
08005ca8  w    F .text	00000002 SPI3_IRQHandler
08000c3c g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000ba0 g     F .text	0000008a .hidden __gedf2
20001cc4 g     O .bss	0000003c TimHandle
080126a0 g     O .rodata	00000060 DMA1_CCR3_fields
0800e050 g     O .rodata	00000048 TIM1_CR1_fields
08015478 g     O .rodata	00000018 IWDG_SR_fields
080161e0 g     O .rodata	00000050 USB_FS_USB_EP6R_fields
080133e0 g     O .rodata	00000110 TIM16_registers
08003c8e  w    F .text	00000002 HAL_PCDEx_SetConnectionState
08010488 g     O .rodata	00000100 TIM17_registers
08003fe0 g     F .text	000000f8 HAL_I2C_Mem_Write
0800eec0 g     O .rodata	00000098 TIM1_CCER_fields
20000aa0 g     O .data	00000004 __wctomb
08011ac8 g     O .rodata	00000100 CAN_F3R2_fields
08000d30 g     F .text	0000002e .hidden __gnu_ldivmod_helper
0800d710 g     O .rodata	00000080 DAC_CR_fields
08005ca8  w    F .text	00000002 I2C1_ER_IRQHandler
0800a3ec g     F .text	00000018 __sprint_r
0800d300 g     O .rodata	00000050 USB_FS_USB_EP7R_fields
08010c58 g     O .rodata	00000088 I2C1_ISR_fields
0800bbf8 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
0800ce38 g     O .rodata	00000020 NVIC_IPR8_fields
08019c7c g     O .rodata	00000010 PredivFactorTable
08016288 g     O .rodata	00000008 TSC_IOG3CR_fields
080006d4 g     F .text	0000003a .hidden __aeabi_f2d
080050fa g     F .text	0000000e USBD_LL_PrepareReceive
0800f108 g     O .rodata	00000008 DMA1_CNDTR3_fields
08005a20 g     F .text	0000002c L3GD20_RebootCmd
0800c5d0 g     O .rodata	00000100 CAN_F27R1_fields
08011478 g     O .rodata	00000010 TSC_IER_fields
080103a8 g     O .rodata	000000e0 CAN_FFA1R_fields
0800ef58 g     O .rodata	00000010 TIM8_CNT_fields
08010738 g     O .rodata	00000008 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08016458 g     O .rodata	00000008 RTC_BKP25R_fields
08011860 g     O .rodata	00000100 TSC_IOCCR_fields
08012438 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
08004e9a g     F .text	0000000c USBD_CDC_SetRxBuffer
080195ac g     O .rodata	000000d0 EXTI_SWIER1_fields
08000414 g     F .text	0000027a .hidden __subdf3
0800bdf8 g     O .rodata	00000008 TIM16_ARR_fields
080111e0 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08006298 g     F .text	00001424 _vfprintf_r
08009988 g     F .text	0000005a __lo0bits
08013118 g     O .rodata	00000020 EXTI_IMR2_fields
08014718 g     O .rodata	00000008 TIM6_EGR_fields
08012a88 g     O .rodata	00000008 SPI1_RXCRCR_fields
0801989c g     O .rodata	00000008 I2C1_PECR_fields
08003374 g     F .text	000000f4 HAL_PCD_EP_Receive
08019474 g     O .rodata	00000018 ADC1_OFR3_fields
0800df90 g     O .rodata	00000058 COMP_COMP6_CSR_fields
08011cf0 g     O .rodata	00000008 RTC_BKP1R_fields
08014368 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08013e90 g     O .rodata	000000b0 GPIOB_registers
08001d58 g     F .text	0000005c DecodeRegister
080105f0 g     O .rodata	00000048 TIM8_SMCR_fields
08001c60 g     F .text	00000058 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
0800c1a8 g     O .rodata	00000050 CAN_MCR_fields
0800c238 g     O .rodata	00000008 DAC_DOR1_fields
080019d4 g     F .text	0000004c TerminalRead
0800f018 g     O .rodata	00000060 TSC_CR_fields
0800d1b8 g     O .rodata	00000008 TIM2_DMAR_fields
0800bee0 g     O .rodata	00000030 TIM8_CCMR1_Input_fields
08005952 g     F .text	0000001e LSM303DLHC_AccIT1Enable
0800c6d8 g     O .rodata	00000100 CAN_F12R1_fields
08005ca8  w    F .text	00000002 USBWakeUp_IRQHandler
0801981c g     O .rodata	00000008 TIM16_PSC_fields
0800e8d8 g     O .rodata	00000008 USART1_RDR_fields
08012a50 g     O .rodata	00000038 RCC_BDCR_fields
08014b00 g     O .rodata	00000010 TIM17_DCR_fields
08016b90 g     O .rodata	00000008 NVIC_ISPR1_fields
0800ca30 g     O .rodata	00000008 NVIC_ICPR2_fields
080002a0 g     F .text	00000022 my_LED_Function
0801aa58 g     O .parsetable	0000000c CmdAccelE
08016290 g     O .rodata	00000100 CAN_F21R2_fields
08004e8a g     F .text	00000010 USBD_CDC_SetTxBuffer
0800d360 g     O .rodata	00000070 SYSCFG_registers
08010a38 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08005ca8  w    F .text	00000002 DMA2_Channel3_IRQHandler
08010f80 g     O .rodata	000000d0 EXTI_FTSR1_fields
080051f4 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
080108b8 g     O .rodata	00000100 CAN_F7R1_fields
080098c4 g     F .text	00000082 __multadd
0800472a g     F .text	0000005a USBD_LL_SetupStage
080098b0 g     F .text	00000012 _Bfree
08015460 g     O .rodata	00000010 WWDG_CR_fields
08005ca8  w    F .text	00000002 EXTI2_TSC_IRQHandler
0800d2f8 g     O .rodata	00000008 NVIC_STIR_fields
08005ca8  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
08013e40 g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000aa7 	.word	0x20000aa7
 80001a0:	20000aa4 	.word	0x20000aa4
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	20000aa4 	.word	0x20000aa4
 80001c4:	20000aa4 	.word	0x20000aa4
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000aa4 	.word	0x20000aa4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a6d4 	.word	0x0800a6d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4908      	ldr	r1, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	0800a6d4 	.word	0x0800a6d4
 8000220:	20000aa8 	.word	0x20000aa8
 8000224:	20000aa4 	.word	0x20000aa4
 8000228:	00000000 	.word	0x00000000

0800022c <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 800022c:	b500      	push	{lr}
    push {r1}
 800022e:	b402      	push	{r1}
    push {r0-r7}
 8000230:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =7
 8000232:	2007      	movs	r0, #7
    bl   BSP_LED_Toggle           @@ call BSP function
 8000234:	f005 f91c 	bl	8005470 <BSP_LED_Toggle>
    pop  {r0-r7}
 8000238:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 800023a:	4924      	ldr	r1, [pc, #144]	; (80002cc <my_Init+0x4>)
    ldr  r0, [r1]
 800023c:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 800023e:	bc02      	pop	{r1}
    pop  {pc}
 8000240:	bd00      	pop	{pc}
 8000242:	bf00      	nop

08000244 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 8000244:	b500      	push	{lr}
    push {r4-r11}
 8000246:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ldr  r1,=myTickCount
 800024a:	4920      	ldr	r1, [pc, #128]	; (80002cc <my_Init+0x4>)
    ldr  r0, [r1]
 800024c:	6808      	ldr	r0, [r1, #0]
	ldr  r3,=ledCounter
 800024e:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <my_Init+0x8>)
	cmp  r0,#0
 8000250:	2800      	cmp	r0, #0
	beq	 turnOnLed
 8000252:	d003      	beq.n	800025c <turnOnLed>
	cmp  r0,#500
 8000254:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
	beq  resetCounter
 8000258:	d006      	beq.n	8000268 <resetCounter>
	b    continue
 800025a:	e01b      	b.n	8000294 <continue>

0800025c <turnOnLed>:
turnOnLed:						  @@Turn on LED[x] at 0 ms
	push {r0,r1,r3}
 800025c:	b40b      	push	{r0, r1, r3}
	ldr  r0,[r3]
 800025e:	6818      	ldr	r0, [r3, #0]
    bl   my_LED_Function         @@ turn off LED[x] after 500 ms
 8000260:	f000 f81e 	bl	80002a0 <my_LED_Function>
    pop  {r0,r1,r3}
 8000264:	bc0b      	pop	{r0, r1, r3}
	b    continue
 8000266:	e015      	b.n	8000294 <continue>

08000268 <resetCounter>:
resetCounter:
	mov r0,#0
 8000268:	f04f 0000 	mov.w	r0, #0
	str r0,[r1]					  @@ reset myTickCount to zero
 800026c:	6008      	str	r0, [r1, #0]
	push {r0,r1,r3}
 800026e:	b40b      	push	{r0, r1, r3}
	ldr  r0,[r3]
 8000270:	6818      	ldr	r0, [r3, #0]
    bl   my_LED_Function         @@ turn off LED[x] after 500 ms
 8000272:	f000 f815 	bl	80002a0 <my_LED_Function>
    pop  {r0,r1,r3}
 8000276:	bc0b      	pop	{r0, r1, r3}
	ldr r3,=ledCounter
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <my_Init+0x8>)
	ldr r3,[r3]
 800027a:	681b      	ldr	r3, [r3, #0]
	add r3,r3,#1
 800027c:	f103 0301 	add.w	r3, r3, #1
	ldr r4,=ledCounter
 8000280:	4c13      	ldr	r4, [pc, #76]	; (80002d0 <my_Init+0x8>)
	str r3,[r4]					  @@ increment Led index
 8000282:	6023      	str	r3, [r4, #0]
	cmp r3,#7
 8000284:	2b07      	cmp	r3, #7
	bgt resetLED				  @@ branch to resetLED when led index is >7
 8000286:	dc00      	bgt.n	800028a <resetLED>
	b	skip
 8000288:	e007      	b.n	800029a <skip>

0800028a <resetLED>:
resetLED:
	mov r3,#0				
 800028a:	f04f 0300 	mov.w	r3, #0
	ldr r4,=ledCounter
 800028e:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <my_Init+0x8>)
	str r3,[r4]					  @@ reset led index to 0
 8000290:	6023      	str	r3, [r4, #0]
	b skip
 8000292:	e002      	b.n	800029a <skip>

08000294 <continue>:
continue:	
	add  r0, r0, #1				  @@ increment myTickCount by 1
 8000294:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000298:	6008      	str	r0, [r1, #0]

0800029a <skip>:
skip:
    pop  {r4-r11}
 800029a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    pop  {pc}
 800029e:	bd00      	pop	{pc}

080002a0 <my_LED_Function>:
    .global my_LED_Function          @@ - Symbol name for function
    .code   16              @@ - 16bit THUMB code (BOTH are required!)
    .thumb_func             @@ /
    .type   my_LED_Function, %function   @@ - symbol type (not req)
my_LED_Function:      @@ This function replaces BSP_LEDToggle function for toggling on board leds
	push {r4-r12,lr}
 80002a0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	ldr r1,=LEDsAddress
 80002a4:	490b      	ldr	r1, [pc, #44]	; (80002d4 <my_Init+0xc>)
	ldr r1,[r1]
 80002a6:	6809      	ldr	r1, [r1, #0]
	ldrh r3,[r1] 
 80002a8:	880b      	ldrh	r3, [r1, #0]
	mov r2,#0x1     
 80002aa:	f04f 0201 	mov.w	r2, #1
	add r0,#8			   @@ add offset to the LED wants to be toggled by 8
 80002ae:	f100 0008 	add.w	r0, r0, #8
	lsl r2,r2,r0		   @@ shift r0 to the left by led place + offset
 80002b2:	fa02 f200 	lsl.w	r2, r2, r0

	eor r3,r3,r2           @@ toggle LED
 80002b6:	ea83 0302 	eor.w	r3, r3, r2
	strh r3,[r1]		   @@ store xored value into LEDsAddress register	
 80002ba:	800b      	strh	r3, [r1, #0]
	pop {r4-r12,lr}
 80002bc:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	bx lr	
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop

080002c4 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 80002c4:	b500      	push	{lr}
    pop  {pc}
 80002c6:	bd00      	pop	{pc}

080002c8 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 80002c8:	b500      	push	{lr}
    pop  {pc}
 80002ca:	bd00      	pop	{pc}
    push {r1}
    push {r0-r7}
    ldr  r0, =7
    bl   BSP_LED_Toggle           @@ call BSP function
    pop  {r0-r7}
    ldr  r1, =myTickCount
 80002cc:	20000000 	.word	0x20000000
my_Tick:
    push {lr}
    push {r4-r11}
    ldr  r1,=myTickCount
    ldr  r0, [r1]
	ldr  r3,=ledCounter
 80002d0:	20000004 	.word	0x20000004
    .code   16              @@ - 16bit THUMB code (BOTH are required!)
    .thumb_func             @@ /
    .type   my_LED_Function, %function   @@ - symbol type (not req)
my_LED_Function:      @@ This function replaces BSP_LEDToggle function for toggling on board leds
	push {r4-r12,lr}
	ldr r1,=LEDsAddress
 80002d4:	20000008 	.word	0x20000008

080002d8 <memcpy>:
 80002d8:	4684      	mov	ip, r0
 80002da:	ea41 0300 	orr.w	r3, r1, r0
 80002de:	f013 0303 	ands.w	r3, r3, #3
 80002e2:	d16d      	bne.n	80003c0 <memcpy+0xe8>
 80002e4:	3a40      	subs	r2, #64	; 0x40
 80002e6:	d341      	bcc.n	800036c <memcpy+0x94>
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	3a40      	subs	r2, #64	; 0x40
 800036a:	d2bd      	bcs.n	80002e8 <memcpy+0x10>
 800036c:	3230      	adds	r2, #48	; 0x30
 800036e:	d311      	bcc.n	8000394 <memcpy+0xbc>
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	f851 3b04 	ldr.w	r3, [r1], #4
 800038c:	f840 3b04 	str.w	r3, [r0], #4
 8000390:	3a10      	subs	r2, #16
 8000392:	d2ed      	bcs.n	8000370 <memcpy+0x98>
 8000394:	320c      	adds	r2, #12
 8000396:	d305      	bcc.n	80003a4 <memcpy+0xcc>
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	3a04      	subs	r2, #4
 80003a2:	d2f9      	bcs.n	8000398 <memcpy+0xc0>
 80003a4:	3204      	adds	r2, #4
 80003a6:	d008      	beq.n	80003ba <memcpy+0xe2>
 80003a8:	07d2      	lsls	r2, r2, #31
 80003aa:	bf1c      	itt	ne
 80003ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003b0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003b4:	d301      	bcc.n	80003ba <memcpy+0xe2>
 80003b6:	880b      	ldrh	r3, [r1, #0]
 80003b8:	8003      	strh	r3, [r0, #0]
 80003ba:	4660      	mov	r0, ip
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	2a08      	cmp	r2, #8
 80003c2:	d313      	bcc.n	80003ec <memcpy+0x114>
 80003c4:	078b      	lsls	r3, r1, #30
 80003c6:	d08d      	beq.n	80002e4 <memcpy+0xc>
 80003c8:	f010 0303 	ands.w	r3, r0, #3
 80003cc:	d08a      	beq.n	80002e4 <memcpy+0xc>
 80003ce:	f1c3 0304 	rsb	r3, r3, #4
 80003d2:	1ad2      	subs	r2, r2, r3
 80003d4:	07db      	lsls	r3, r3, #31
 80003d6:	bf1c      	itt	ne
 80003d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003dc:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e0:	d380      	bcc.n	80002e4 <memcpy+0xc>
 80003e2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003e6:	f820 3b02 	strh.w	r3, [r0], #2
 80003ea:	e77b      	b.n	80002e4 <memcpy+0xc>
 80003ec:	3a04      	subs	r2, #4
 80003ee:	d3d9      	bcc.n	80003a4 <memcpy+0xcc>
 80003f0:	3a01      	subs	r2, #1
 80003f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003f6:	f800 3b01 	strb.w	r3, [r0], #1
 80003fa:	d2f9      	bcs.n	80003f0 <memcpy+0x118>
 80003fc:	780b      	ldrb	r3, [r1, #0]
 80003fe:	7003      	strb	r3, [r0, #0]
 8000400:	784b      	ldrb	r3, [r1, #1]
 8000402:	7043      	strb	r3, [r0, #1]
 8000404:	788b      	ldrb	r3, [r1, #2]
 8000406:	7083      	strb	r3, [r0, #2]
 8000408:	4660      	mov	r0, ip
 800040a:	4770      	bx	lr

0800040c <__aeabi_drsub>:
 800040c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000410:	e002      	b.n	8000418 <__adddf3>
 8000412:	bf00      	nop

08000414 <__aeabi_dsub>:
 8000414:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000418 <__adddf3>:
 8000418:	b530      	push	{r4, r5, lr}
 800041a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800041e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000422:	ea94 0f05 	teq	r4, r5
 8000426:	bf08      	it	eq
 8000428:	ea90 0f02 	teqeq	r0, r2
 800042c:	bf1f      	itttt	ne
 800042e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000432:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000436:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800043a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043e:	f000 80e2 	beq.w	8000606 <__adddf3+0x1ee>
 8000442:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000446:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800044a:	bfb8      	it	lt
 800044c:	426d      	neglt	r5, r5
 800044e:	dd0c      	ble.n	800046a <__adddf3+0x52>
 8000450:	442c      	add	r4, r5
 8000452:	ea80 0202 	eor.w	r2, r0, r2
 8000456:	ea81 0303 	eor.w	r3, r1, r3
 800045a:	ea82 0000 	eor.w	r0, r2, r0
 800045e:	ea83 0101 	eor.w	r1, r3, r1
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	2d36      	cmp	r5, #54	; 0x36
 800046c:	bf88      	it	hi
 800046e:	bd30      	pophi	{r4, r5, pc}
 8000470:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000474:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000478:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800047c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000480:	d002      	beq.n	8000488 <__adddf3+0x70>
 8000482:	4240      	negs	r0, r0
 8000484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000488:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800048c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000490:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000494:	d002      	beq.n	800049c <__adddf3+0x84>
 8000496:	4252      	negs	r2, r2
 8000498:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800049c:	ea94 0f05 	teq	r4, r5
 80004a0:	f000 80a7 	beq.w	80005f2 <__adddf3+0x1da>
 80004a4:	f1a4 0401 	sub.w	r4, r4, #1
 80004a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004ac:	db0d      	blt.n	80004ca <__adddf3+0xb2>
 80004ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004b2:	fa22 f205 	lsr.w	r2, r2, r5
 80004b6:	1880      	adds	r0, r0, r2
 80004b8:	f141 0100 	adc.w	r1, r1, #0
 80004bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004c0:	1880      	adds	r0, r0, r2
 80004c2:	fa43 f305 	asr.w	r3, r3, r5
 80004c6:	4159      	adcs	r1, r3
 80004c8:	e00e      	b.n	80004e8 <__adddf3+0xd0>
 80004ca:	f1a5 0520 	sub.w	r5, r5, #32
 80004ce:	f10e 0e20 	add.w	lr, lr, #32
 80004d2:	2a01      	cmp	r2, #1
 80004d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004d8:	bf28      	it	cs
 80004da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004de:	fa43 f305 	asr.w	r3, r3, r5
 80004e2:	18c0      	adds	r0, r0, r3
 80004e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	d507      	bpl.n	80004fe <__adddf3+0xe6>
 80004ee:	f04f 0e00 	mov.w	lr, #0
 80004f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80004f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80004fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000502:	d31b      	bcc.n	800053c <__adddf3+0x124>
 8000504:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000508:	d30c      	bcc.n	8000524 <__adddf3+0x10c>
 800050a:	0849      	lsrs	r1, r1, #1
 800050c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000510:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000514:	f104 0401 	add.w	r4, r4, #1
 8000518:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800051c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000520:	f080 809a 	bcs.w	8000658 <__adddf3+0x240>
 8000524:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000528:	bf08      	it	eq
 800052a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800052e:	f150 0000 	adcs.w	r0, r0, #0
 8000532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000536:	ea41 0105 	orr.w	r1, r1, r5
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000540:	4140      	adcs	r0, r0
 8000542:	eb41 0101 	adc.w	r1, r1, r1
 8000546:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800054a:	f1a4 0401 	sub.w	r4, r4, #1
 800054e:	d1e9      	bne.n	8000524 <__adddf3+0x10c>
 8000550:	f091 0f00 	teq	r1, #0
 8000554:	bf04      	itt	eq
 8000556:	4601      	moveq	r1, r0
 8000558:	2000      	moveq	r0, #0
 800055a:	fab1 f381 	clz	r3, r1
 800055e:	bf08      	it	eq
 8000560:	3320      	addeq	r3, #32
 8000562:	f1a3 030b 	sub.w	r3, r3, #11
 8000566:	f1b3 0220 	subs.w	r2, r3, #32
 800056a:	da0c      	bge.n	8000586 <__adddf3+0x16e>
 800056c:	320c      	adds	r2, #12
 800056e:	dd08      	ble.n	8000582 <__adddf3+0x16a>
 8000570:	f102 0c14 	add.w	ip, r2, #20
 8000574:	f1c2 020c 	rsb	r2, r2, #12
 8000578:	fa01 f00c 	lsl.w	r0, r1, ip
 800057c:	fa21 f102 	lsr.w	r1, r1, r2
 8000580:	e00c      	b.n	800059c <__adddf3+0x184>
 8000582:	f102 0214 	add.w	r2, r2, #20
 8000586:	bfd8      	it	le
 8000588:	f1c2 0c20 	rsble	ip, r2, #32
 800058c:	fa01 f102 	lsl.w	r1, r1, r2
 8000590:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000594:	bfdc      	itt	le
 8000596:	ea41 010c 	orrle.w	r1, r1, ip
 800059a:	4090      	lslle	r0, r2
 800059c:	1ae4      	subs	r4, r4, r3
 800059e:	bfa2      	ittt	ge
 80005a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005a4:	4329      	orrge	r1, r5
 80005a6:	bd30      	popge	{r4, r5, pc}
 80005a8:	ea6f 0404 	mvn.w	r4, r4
 80005ac:	3c1f      	subs	r4, #31
 80005ae:	da1c      	bge.n	80005ea <__adddf3+0x1d2>
 80005b0:	340c      	adds	r4, #12
 80005b2:	dc0e      	bgt.n	80005d2 <__adddf3+0x1ba>
 80005b4:	f104 0414 	add.w	r4, r4, #20
 80005b8:	f1c4 0220 	rsb	r2, r4, #32
 80005bc:	fa20 f004 	lsr.w	r0, r0, r4
 80005c0:	fa01 f302 	lsl.w	r3, r1, r2
 80005c4:	ea40 0003 	orr.w	r0, r0, r3
 80005c8:	fa21 f304 	lsr.w	r3, r1, r4
 80005cc:	ea45 0103 	orr.w	r1, r5, r3
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	f1c4 040c 	rsb	r4, r4, #12
 80005d6:	f1c4 0220 	rsb	r2, r4, #32
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 f304 	lsl.w	r3, r1, r4
 80005e2:	ea40 0003 	orr.w	r0, r0, r3
 80005e6:	4629      	mov	r1, r5
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	fa21 f004 	lsr.w	r0, r1, r4
 80005ee:	4629      	mov	r1, r5
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f094 0f00 	teq	r4, #0
 80005f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005fa:	bf06      	itte	eq
 80005fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000600:	3401      	addeq	r4, #1
 8000602:	3d01      	subne	r5, #1
 8000604:	e74e      	b.n	80004a4 <__adddf3+0x8c>
 8000606:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060a:	bf18      	it	ne
 800060c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000610:	d029      	beq.n	8000666 <__adddf3+0x24e>
 8000612:	ea94 0f05 	teq	r4, r5
 8000616:	bf08      	it	eq
 8000618:	ea90 0f02 	teqeq	r0, r2
 800061c:	d005      	beq.n	800062a <__adddf3+0x212>
 800061e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000622:	bf04      	itt	eq
 8000624:	4619      	moveq	r1, r3
 8000626:	4610      	moveq	r0, r2
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	ea91 0f03 	teq	r1, r3
 800062e:	bf1e      	ittt	ne
 8000630:	2100      	movne	r1, #0
 8000632:	2000      	movne	r0, #0
 8000634:	bd30      	popne	{r4, r5, pc}
 8000636:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800063a:	d105      	bne.n	8000648 <__adddf3+0x230>
 800063c:	0040      	lsls	r0, r0, #1
 800063e:	4149      	adcs	r1, r1
 8000640:	bf28      	it	cs
 8000642:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd30      	pop	{r4, r5, pc}
 8000648:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800064c:	bf3c      	itt	cc
 800064e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000652:	bd30      	popcc	{r4, r5, pc}
 8000654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000658:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800065c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf1a      	itte	ne
 800066c:	4619      	movne	r1, r3
 800066e:	4610      	movne	r0, r2
 8000670:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000674:	bf1c      	itt	ne
 8000676:	460b      	movne	r3, r1
 8000678:	4602      	movne	r2, r0
 800067a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800067e:	bf06      	itte	eq
 8000680:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000684:	ea91 0f03 	teqeq	r1, r3
 8000688:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	bf00      	nop

08000690 <__aeabi_ui2d>:
 8000690:	f090 0f00 	teq	r0, #0
 8000694:	bf04      	itt	eq
 8000696:	2100      	moveq	r1, #0
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006a4:	f04f 0500 	mov.w	r5, #0
 80006a8:	f04f 0100 	mov.w	r1, #0
 80006ac:	e750      	b.n	8000550 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_i2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006c8:	bf48      	it	mi
 80006ca:	4240      	negmi	r0, r0
 80006cc:	f04f 0100 	mov.w	r1, #0
 80006d0:	e73e      	b.n	8000550 <__adddf3+0x138>
 80006d2:	bf00      	nop

080006d4 <__aeabi_f2d>:
 80006d4:	0042      	lsls	r2, r0, #1
 80006d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006da:	ea4f 0131 	mov.w	r1, r1, rrx
 80006de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006e2:	bf1f      	itttt	ne
 80006e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006f0:	4770      	bxne	lr
 80006f2:	f092 0f00 	teq	r2, #0
 80006f6:	bf14      	ite	ne
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000704:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	e720      	b.n	8000550 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_ul2d>:
 8000710:	ea50 0201 	orrs.w	r2, r0, r1
 8000714:	bf08      	it	eq
 8000716:	4770      	bxeq	lr
 8000718:	b530      	push	{r4, r5, lr}
 800071a:	f04f 0500 	mov.w	r5, #0
 800071e:	e00a      	b.n	8000736 <__aeabi_l2d+0x16>

08000720 <__aeabi_l2d>:
 8000720:	ea50 0201 	orrs.w	r2, r0, r1
 8000724:	bf08      	it	eq
 8000726:	4770      	bxeq	lr
 8000728:	b530      	push	{r4, r5, lr}
 800072a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800072e:	d502      	bpl.n	8000736 <__aeabi_l2d+0x16>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800073a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000742:	f43f aedc 	beq.w	80004fe <__adddf3+0xe6>
 8000746:	f04f 0203 	mov.w	r2, #3
 800074a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800074e:	bf18      	it	ne
 8000750:	3203      	addne	r2, #3
 8000752:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000756:	bf18      	it	ne
 8000758:	3203      	addne	r2, #3
 800075a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800075e:	f1c2 0320 	rsb	r3, r2, #32
 8000762:	fa00 fc03 	lsl.w	ip, r0, r3
 8000766:	fa20 f002 	lsr.w	r0, r0, r2
 800076a:	fa01 fe03 	lsl.w	lr, r1, r3
 800076e:	ea40 000e 	orr.w	r0, r0, lr
 8000772:	fa21 f102 	lsr.w	r1, r1, r2
 8000776:	4414      	add	r4, r2
 8000778:	e6c1      	b.n	80004fe <__adddf3+0xe6>
 800077a:	bf00      	nop

0800077c <__aeabi_dmul>:
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000782:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000786:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800078a:	bf1d      	ittte	ne
 800078c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000790:	ea94 0f0c 	teqne	r4, ip
 8000794:	ea95 0f0c 	teqne	r5, ip
 8000798:	f000 f8de 	bleq	8000958 <__aeabi_dmul+0x1dc>
 800079c:	442c      	add	r4, r5
 800079e:	ea81 0603 	eor.w	r6, r1, r3
 80007a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80007a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80007aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80007ae:	bf18      	it	ne
 80007b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80007b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007bc:	d038      	beq.n	8000830 <__aeabi_dmul+0xb4>
 80007be:	fba0 ce02 	umull	ip, lr, r0, r2
 80007c2:	f04f 0500 	mov.w	r5, #0
 80007c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80007ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007d2:	f04f 0600 	mov.w	r6, #0
 80007d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007da:	f09c 0f00 	teq	ip, #0
 80007de:	bf18      	it	ne
 80007e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80007e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007f0:	d204      	bcs.n	80007fc <__aeabi_dmul+0x80>
 80007f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007f6:	416d      	adcs	r5, r5
 80007f8:	eb46 0606 	adc.w	r6, r6, r6
 80007fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000800:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000804:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000808:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800080c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000810:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000814:	bf88      	it	hi
 8000816:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800081a:	d81e      	bhi.n	800085a <__aeabi_dmul+0xde>
 800081c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000820:	bf08      	it	eq
 8000822:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000826:	f150 0000 	adcs.w	r0, r0, #0
 800082a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800082e:	bd70      	pop	{r4, r5, r6, pc}
 8000830:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000834:	ea46 0101 	orr.w	r1, r6, r1
 8000838:	ea40 0002 	orr.w	r0, r0, r2
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000844:	bfc2      	ittt	gt
 8000846:	ebd4 050c 	rsbsgt	r5, r4, ip
 800084a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800084e:	bd70      	popgt	{r4, r5, r6, pc}
 8000850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000854:	f04f 0e00 	mov.w	lr, #0
 8000858:	3c01      	subs	r4, #1
 800085a:	f300 80ab 	bgt.w	80009b4 <__aeabi_dmul+0x238>
 800085e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000862:	bfde      	ittt	le
 8000864:	2000      	movle	r0, #0
 8000866:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800086a:	bd70      	pople	{r4, r5, r6, pc}
 800086c:	f1c4 0400 	rsb	r4, r4, #0
 8000870:	3c20      	subs	r4, #32
 8000872:	da35      	bge.n	80008e0 <__aeabi_dmul+0x164>
 8000874:	340c      	adds	r4, #12
 8000876:	dc1b      	bgt.n	80008b0 <__aeabi_dmul+0x134>
 8000878:	f104 0414 	add.w	r4, r4, #20
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f305 	lsl.w	r3, r0, r5
 8000884:	fa20 f004 	lsr.w	r0, r0, r4
 8000888:	fa01 f205 	lsl.w	r2, r1, r5
 800088c:	ea40 0002 	orr.w	r0, r0, r2
 8000890:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000894:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000898:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800089c:	fa21 f604 	lsr.w	r6, r1, r4
 80008a0:	eb42 0106 	adc.w	r1, r2, r6
 80008a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008a8:	bf08      	it	eq
 80008aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	f1c4 040c 	rsb	r4, r4, #12
 80008b4:	f1c4 0520 	rsb	r5, r4, #32
 80008b8:	fa00 f304 	lsl.w	r3, r0, r4
 80008bc:	fa20 f005 	lsr.w	r0, r0, r5
 80008c0:	fa01 f204 	lsl.w	r2, r1, r4
 80008c4:	ea40 0002 	orr.w	r0, r0, r2
 80008c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008d0:	f141 0100 	adc.w	r1, r1, #0
 80008d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008d8:	bf08      	it	eq
 80008da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f1c4 0520 	rsb	r5, r4, #32
 80008e4:	fa00 f205 	lsl.w	r2, r0, r5
 80008e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80008ec:	fa20 f304 	lsr.w	r3, r0, r4
 80008f0:	fa01 f205 	lsl.w	r2, r1, r5
 80008f4:	ea43 0302 	orr.w	r3, r3, r2
 80008f8:	fa21 f004 	lsr.w	r0, r1, r4
 80008fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000900:	fa21 f204 	lsr.w	r2, r1, r4
 8000904:	ea20 0002 	bic.w	r0, r0, r2
 8000908:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800090c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000910:	bf08      	it	eq
 8000912:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f094 0f00 	teq	r4, #0
 800091c:	d10f      	bne.n	800093e <__aeabi_dmul+0x1c2>
 800091e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000922:	0040      	lsls	r0, r0, #1
 8000924:	eb41 0101 	adc.w	r1, r1, r1
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf08      	it	eq
 800092e:	3c01      	subeq	r4, #1
 8000930:	d0f7      	beq.n	8000922 <__aeabi_dmul+0x1a6>
 8000932:	ea41 0106 	orr.w	r1, r1, r6
 8000936:	f095 0f00 	teq	r5, #0
 800093a:	bf18      	it	ne
 800093c:	4770      	bxne	lr
 800093e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	eb43 0303 	adc.w	r3, r3, r3
 8000948:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800094c:	bf08      	it	eq
 800094e:	3d01      	subeq	r5, #1
 8000950:	d0f7      	beq.n	8000942 <__aeabi_dmul+0x1c6>
 8000952:	ea43 0306 	orr.w	r3, r3, r6
 8000956:	4770      	bx	lr
 8000958:	ea94 0f0c 	teq	r4, ip
 800095c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000960:	bf18      	it	ne
 8000962:	ea95 0f0c 	teqne	r5, ip
 8000966:	d00c      	beq.n	8000982 <__aeabi_dmul+0x206>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	d1d1      	bne.n	8000918 <__aeabi_dmul+0x19c>
 8000974:	ea81 0103 	eor.w	r1, r1, r3
 8000978:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	bd70      	pop	{r4, r5, r6, pc}
 8000982:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000986:	bf06      	itte	eq
 8000988:	4610      	moveq	r0, r2
 800098a:	4619      	moveq	r1, r3
 800098c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000990:	d019      	beq.n	80009c6 <__aeabi_dmul+0x24a>
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	d102      	bne.n	800099e <__aeabi_dmul+0x222>
 8000998:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800099c:	d113      	bne.n	80009c6 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	d105      	bne.n	80009b0 <__aeabi_dmul+0x234>
 80009a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80009a8:	bf1c      	itt	ne
 80009aa:	4610      	movne	r0, r2
 80009ac:	4619      	movne	r1, r3
 80009ae:	d10a      	bne.n	80009c6 <__aeabi_dmul+0x24a>
 80009b0:	ea81 0103 	eor.w	r1, r1, r3
 80009b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80009c0:	f04f 0000 	mov.w	r0, #0
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
 80009c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80009ce:	bd70      	pop	{r4, r5, r6, pc}

080009d0 <__aeabi_ddiv>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80009da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009de:	bf1d      	ittte	ne
 80009e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009e4:	ea94 0f0c 	teqne	r4, ip
 80009e8:	ea95 0f0c 	teqne	r5, ip
 80009ec:	f000 f8a7 	bleq	8000b3e <__aeabi_ddiv+0x16e>
 80009f0:	eba4 0405 	sub.w	r4, r4, r5
 80009f4:	ea81 0e03 	eor.w	lr, r1, r3
 80009f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a00:	f000 8088 	beq.w	8000b14 <__aeabi_ddiv+0x144>
 8000a04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a14:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a20:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a28:	429d      	cmp	r5, r3
 8000a2a:	bf08      	it	eq
 8000a2c:	4296      	cmpeq	r6, r2
 8000a2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000a32:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000a36:	d202      	bcs.n	8000a3e <__aeabi_ddiv+0x6e>
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3e:	1ab6      	subs	r6, r6, r2
 8000a40:	eb65 0503 	sbc.w	r5, r5, r3
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a5a:	bf22      	ittt	cs
 8000a5c:	1ab6      	subcs	r6, r6, r2
 8000a5e:	4675      	movcs	r5, lr
 8000a60:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a64:	085b      	lsrs	r3, r3, #1
 8000a66:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a72:	bf22      	ittt	cs
 8000a74:	1ab6      	subcs	r6, r6, r2
 8000a76:	4675      	movcs	r5, lr
 8000a78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a7c:	085b      	lsrs	r3, r3, #1
 8000a7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a82:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a8a:	bf22      	ittt	cs
 8000a8c:	1ab6      	subcs	r6, r6, r2
 8000a8e:	4675      	movcs	r5, lr
 8000a90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a94:	085b      	lsrs	r3, r3, #1
 8000a96:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000aa2:	bf22      	ittt	cs
 8000aa4:	1ab6      	subcs	r6, r6, r2
 8000aa6:	4675      	movcs	r5, lr
 8000aa8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000aac:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ab0:	d018      	beq.n	8000ae4 <__aeabi_ddiv+0x114>
 8000ab2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000ab6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000aba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000abe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ac2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ac6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000aca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ace:	d1c0      	bne.n	8000a52 <__aeabi_ddiv+0x82>
 8000ad0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ad4:	d10b      	bne.n	8000aee <__aeabi_ddiv+0x11e>
 8000ad6:	ea41 0100 	orr.w	r1, r1, r0
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000ae2:	e7b6      	b.n	8000a52 <__aeabi_ddiv+0x82>
 8000ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ae8:	bf04      	itt	eq
 8000aea:	4301      	orreq	r1, r0
 8000aec:	2000      	moveq	r0, #0
 8000aee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000af2:	bf88      	it	hi
 8000af4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000af8:	f63f aeaf 	bhi.w	800085a <__aeabi_dmul+0xde>
 8000afc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000b00:	bf04      	itt	eq
 8000b02:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000b06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000b0a:	f150 0000 	adcs.w	r0, r0, #0
 8000b0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
 8000b14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b20:	bfc2      	ittt	gt
 8000b22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b2a:	bd70      	popgt	{r4, r5, r6, pc}
 8000b2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b30:	f04f 0e00 	mov.w	lr, #0
 8000b34:	3c01      	subs	r4, #1
 8000b36:	e690      	b.n	800085a <__aeabi_dmul+0xde>
 8000b38:	ea45 0e06 	orr.w	lr, r5, r6
 8000b3c:	e68d      	b.n	800085a <__aeabi_dmul+0xde>
 8000b3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b42:	ea94 0f0c 	teq	r4, ip
 8000b46:	bf08      	it	eq
 8000b48:	ea95 0f0c 	teqeq	r5, ip
 8000b4c:	f43f af3b 	beq.w	80009c6 <__aeabi_dmul+0x24a>
 8000b50:	ea94 0f0c 	teq	r4, ip
 8000b54:	d10a      	bne.n	8000b6c <__aeabi_ddiv+0x19c>
 8000b56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b5a:	f47f af34 	bne.w	80009c6 <__aeabi_dmul+0x24a>
 8000b5e:	ea95 0f0c 	teq	r5, ip
 8000b62:	f47f af25 	bne.w	80009b0 <__aeabi_dmul+0x234>
 8000b66:	4610      	mov	r0, r2
 8000b68:	4619      	mov	r1, r3
 8000b6a:	e72c      	b.n	80009c6 <__aeabi_dmul+0x24a>
 8000b6c:	ea95 0f0c 	teq	r5, ip
 8000b70:	d106      	bne.n	8000b80 <__aeabi_ddiv+0x1b0>
 8000b72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b76:	f43f aefd 	beq.w	8000974 <__aeabi_dmul+0x1f8>
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	e722      	b.n	80009c6 <__aeabi_dmul+0x24a>
 8000b80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b84:	bf18      	it	ne
 8000b86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b8a:	f47f aec5 	bne.w	8000918 <__aeabi_dmul+0x19c>
 8000b8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b92:	f47f af0d 	bne.w	80009b0 <__aeabi_dmul+0x234>
 8000b96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b9a:	f47f aeeb 	bne.w	8000974 <__aeabi_dmul+0x1f8>
 8000b9e:	e712      	b.n	80009c6 <__aeabi_dmul+0x24a>

08000ba0 <__gedf2>:
 8000ba0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ba4:	e006      	b.n	8000bb4 <__cmpdf2+0x4>
 8000ba6:	bf00      	nop

08000ba8 <__ledf2>:
 8000ba8:	f04f 0c01 	mov.w	ip, #1
 8000bac:	e002      	b.n	8000bb4 <__cmpdf2+0x4>
 8000bae:	bf00      	nop

08000bb0 <__cmpdf2>:
 8000bb0:	f04f 0c01 	mov.w	ip, #1
 8000bb4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc4:	bf18      	it	ne
 8000bc6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bca:	d01b      	beq.n	8000c04 <__cmpdf2+0x54>
 8000bcc:	b001      	add	sp, #4
 8000bce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bd2:	bf0c      	ite	eq
 8000bd4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bd8:	ea91 0f03 	teqne	r1, r3
 8000bdc:	bf02      	ittt	eq
 8000bde:	ea90 0f02 	teqeq	r0, r2
 8000be2:	2000      	moveq	r0, #0
 8000be4:	4770      	bxeq	lr
 8000be6:	f110 0f00 	cmn.w	r0, #0
 8000bea:	ea91 0f03 	teq	r1, r3
 8000bee:	bf58      	it	pl
 8000bf0:	4299      	cmppl	r1, r3
 8000bf2:	bf08      	it	eq
 8000bf4:	4290      	cmpeq	r0, r2
 8000bf6:	bf2c      	ite	cs
 8000bf8:	17d8      	asrcs	r0, r3, #31
 8000bfa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bfe:	f040 0001 	orr.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c0c:	d102      	bne.n	8000c14 <__cmpdf2+0x64>
 8000c0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c12:	d107      	bne.n	8000c24 <__cmpdf2+0x74>
 8000c14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c1c:	d1d6      	bne.n	8000bcc <__cmpdf2+0x1c>
 8000c1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c22:	d0d3      	beq.n	8000bcc <__cmpdf2+0x1c>
 8000c24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_cdrcmple>:
 8000c2c:	4684      	mov	ip, r0
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4662      	mov	r2, ip
 8000c32:	468c      	mov	ip, r1
 8000c34:	4619      	mov	r1, r3
 8000c36:	4663      	mov	r3, ip
 8000c38:	e000      	b.n	8000c3c <__aeabi_cdcmpeq>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_cdcmpeq>:
 8000c3c:	b501      	push	{r0, lr}
 8000c3e:	f7ff ffb7 	bl	8000bb0 <__cmpdf2>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	bf48      	it	mi
 8000c46:	f110 0f00 	cmnmi.w	r0, #0
 8000c4a:	bd01      	pop	{r0, pc}

08000c4c <__aeabi_dcmpeq>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff fff4 	bl	8000c3c <__aeabi_cdcmpeq>
 8000c54:	bf0c      	ite	eq
 8000c56:	2001      	moveq	r0, #1
 8000c58:	2000      	movne	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_dcmplt>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff ffea 	bl	8000c3c <__aeabi_cdcmpeq>
 8000c68:	bf34      	ite	cc
 8000c6a:	2001      	movcc	r0, #1
 8000c6c:	2000      	movcs	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_dcmple>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffe0 	bl	8000c3c <__aeabi_cdcmpeq>
 8000c7c:	bf94      	ite	ls
 8000c7e:	2001      	movls	r0, #1
 8000c80:	2000      	movhi	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_dcmpge>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffce 	bl	8000c2c <__aeabi_cdrcmple>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_dcmpgt>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffc4 	bl	8000c2c <__aeabi_cdrcmple>
 8000ca4:	bf34      	ite	cc
 8000ca6:	2001      	movcc	r0, #1
 8000ca8:	2000      	movcs	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_d2iz>:
 8000cb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb8:	d215      	bcs.n	8000ce6 <__aeabi_d2iz+0x36>
 8000cba:	d511      	bpl.n	8000ce0 <__aeabi_d2iz+0x30>
 8000cbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cc4:	d912      	bls.n	8000cec <__aeabi_d2iz+0x3c>
 8000cc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	4770      	bx	lr
 8000ce0:	f04f 0000 	mov.w	r0, #0
 8000ce4:	4770      	bx	lr
 8000ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cea:	d105      	bne.n	8000cf8 <__aeabi_d2iz+0x48>
 8000cec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cf6:	4770      	bx	lr
 8000cf8:	f04f 0000 	mov.w	r0, #0
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <__aeabi_uldivmod>:
 8000d00:	b953      	cbnz	r3, 8000d18 <__aeabi_uldivmod+0x18>
 8000d02:	b94a      	cbnz	r2, 8000d18 <__aeabi_uldivmod+0x18>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bf08      	it	eq
 8000d08:	2800      	cmpeq	r0, #0
 8000d0a:	bf1c      	itt	ne
 8000d0c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d14:	f000 b83c 	b.w	8000d90 <__aeabi_idiv0>
 8000d18:	b082      	sub	sp, #8
 8000d1a:	46ec      	mov	ip, sp
 8000d1c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d20:	f000 f81e 	bl	8000d60 <__gnu_uldivmod_helper>
 8000d24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d28:	b002      	add	sp, #8
 8000d2a:	bc0c      	pop	{r2, r3}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <__gnu_ldivmod_helper>:
 8000d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d34:	9c06      	ldr	r4, [sp, #24]
 8000d36:	4615      	mov	r5, r2
 8000d38:	4606      	mov	r6, r0
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4698      	mov	r8, r3
 8000d3e:	f000 f829 	bl	8000d94 <__divdi3>
 8000d42:	fb05 f301 	mul.w	r3, r5, r1
 8000d46:	fb00 3808 	mla	r8, r0, r8, r3
 8000d4a:	fba5 2300 	umull	r2, r3, r5, r0
 8000d4e:	1ab2      	subs	r2, r6, r2
 8000d50:	4443      	add	r3, r8
 8000d52:	eb67 0303 	sbc.w	r3, r7, r3
 8000d56:	e9c4 2300 	strd	r2, r3, [r4]
 8000d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d5e:	bf00      	nop

08000d60 <__gnu_uldivmod_helper>:
 8000d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d64:	9c06      	ldr	r4, [sp, #24]
 8000d66:	4690      	mov	r8, r2
 8000d68:	4606      	mov	r6, r0
 8000d6a:	460f      	mov	r7, r1
 8000d6c:	461d      	mov	r5, r3
 8000d6e:	f000 f95f 	bl	8001030 <__udivdi3>
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	fba0 2308 	umull	r2, r3, r0, r8
 8000d7a:	fb08 5501 	mla	r5, r8, r1, r5
 8000d7e:	1ab2      	subs	r2, r6, r2
 8000d80:	442b      	add	r3, r5
 8000d82:	eb67 0303 	sbc.w	r3, r7, r3
 8000d86:	e9c4 2300 	strd	r2, r3, [r4]
 8000d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <__divdi3>:
 8000d94:	2900      	cmp	r1, #0
 8000d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d9a:	f2c0 80a6 	blt.w	8000eea <__divdi3+0x156>
 8000d9e:	2600      	movs	r6, #0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f2c0 809c 	blt.w	8000ede <__divdi3+0x14a>
 8000da6:	4688      	mov	r8, r1
 8000da8:	4694      	mov	ip, r2
 8000daa:	469e      	mov	lr, r3
 8000dac:	4615      	mov	r5, r2
 8000dae:	4604      	mov	r4, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d13d      	bne.n	8000e32 <__divdi3+0x9e>
 8000db6:	428a      	cmp	r2, r1
 8000db8:	d959      	bls.n	8000e6e <__divdi3+0xda>
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	b13b      	cbz	r3, 8000dd0 <__divdi3+0x3c>
 8000dc0:	f1c3 0220 	rsb	r2, r3, #32
 8000dc4:	409f      	lsls	r7, r3
 8000dc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000dca:	409d      	lsls	r5, r3
 8000dcc:	4317      	orrs	r7, r2
 8000dce:	409c      	lsls	r4, r3
 8000dd0:	0c29      	lsrs	r1, r5, #16
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fbb7 fef1 	udiv	lr, r7, r1
 8000dd8:	b2a8      	uxth	r0, r5
 8000dda:	fb01 771e 	mls	r7, r1, lr, r7
 8000dde:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000de2:	fb00 f30e 	mul.w	r3, r0, lr
 8000de6:	42bb      	cmp	r3, r7
 8000de8:	d90a      	bls.n	8000e00 <__divdi3+0x6c>
 8000dea:	197f      	adds	r7, r7, r5
 8000dec:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8000df0:	f080 8105 	bcs.w	8000ffe <__divdi3+0x26a>
 8000df4:	42bb      	cmp	r3, r7
 8000df6:	f240 8102 	bls.w	8000ffe <__divdi3+0x26a>
 8000dfa:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfe:	442f      	add	r7, r5
 8000e00:	1aff      	subs	r7, r7, r3
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb7 f3f1 	udiv	r3, r7, r1
 8000e08:	fb01 7713 	mls	r7, r1, r3, r7
 8000e0c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000e10:	fb00 f003 	mul.w	r0, r0, r3
 8000e14:	42b8      	cmp	r0, r7
 8000e16:	d908      	bls.n	8000e2a <__divdi3+0x96>
 8000e18:	197f      	adds	r7, r7, r5
 8000e1a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000e1e:	f080 80f0 	bcs.w	8001002 <__divdi3+0x26e>
 8000e22:	42b8      	cmp	r0, r7
 8000e24:	f240 80ed 	bls.w	8001002 <__divdi3+0x26e>
 8000e28:	3b02      	subs	r3, #2
 8000e2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	e003      	b.n	8000e3a <__divdi3+0xa6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d90f      	bls.n	8000e56 <__divdi3+0xc2>
 8000e36:	2200      	movs	r2, #0
 8000e38:	4613      	mov	r3, r2
 8000e3a:	1c34      	adds	r4, r6, #0
 8000e3c:	bf18      	it	ne
 8000e3e:	2401      	movne	r4, #1
 8000e40:	4260      	negs	r0, r4
 8000e42:	f04f 0500 	mov.w	r5, #0
 8000e46:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000e4a:	4058      	eors	r0, r3
 8000e4c:	4051      	eors	r1, r2
 8000e4e:	1900      	adds	r0, r0, r4
 8000e50:	4169      	adcs	r1, r5
 8000e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e56:	fab3 f283 	clz	r2, r3
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	f040 8086 	bne.w	8000f6c <__divdi3+0x1d8>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d302      	bcc.n	8000e6a <__divdi3+0xd6>
 8000e64:	4584      	cmp	ip, r0
 8000e66:	f200 80db 	bhi.w	8001020 <__divdi3+0x28c>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e7e5      	b.n	8000e3a <__divdi3+0xa6>
 8000e6e:	b912      	cbnz	r2, 8000e76 <__divdi3+0xe2>
 8000e70:	2301      	movs	r3, #1
 8000e72:	fbb3 f5f2 	udiv	r5, r3, r2
 8000e76:	fab5 f085 	clz	r0, r5
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d13b      	bne.n	8000ef6 <__divdi3+0x162>
 8000e7e:	1b78      	subs	r0, r7, r5
 8000e80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e84:	fa1f fc85 	uxth.w	ip, r5
 8000e88:	2201      	movs	r2, #1
 8000e8a:	fbb0 f8fe 	udiv	r8, r0, lr
 8000e8e:	0c21      	lsrs	r1, r4, #16
 8000e90:	fb0e 0718 	mls	r7, lr, r8, r0
 8000e94:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000e98:	fb0c f308 	mul.w	r3, ip, r8
 8000e9c:	42bb      	cmp	r3, r7
 8000e9e:	d907      	bls.n	8000eb0 <__divdi3+0x11c>
 8000ea0:	197f      	adds	r7, r7, r5
 8000ea2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__divdi3+0x11a>
 8000ea8:	42bb      	cmp	r3, r7
 8000eaa:	f200 80bd 	bhi.w	8001028 <__divdi3+0x294>
 8000eae:	4688      	mov	r8, r1
 8000eb0:	1aff      	subs	r7, r7, r3
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb7 f3fe 	udiv	r3, r7, lr
 8000eb8:	fb0e 7713 	mls	r7, lr, r3, r7
 8000ebc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000ec0:	fb0c fc03 	mul.w	ip, ip, r3
 8000ec4:	45bc      	cmp	ip, r7
 8000ec6:	d907      	bls.n	8000ed8 <__divdi3+0x144>
 8000ec8:	197f      	adds	r7, r7, r5
 8000eca:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000ece:	d202      	bcs.n	8000ed6 <__divdi3+0x142>
 8000ed0:	45bc      	cmp	ip, r7
 8000ed2:	f200 80a7 	bhi.w	8001024 <__divdi3+0x290>
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000edc:	e7ad      	b.n	8000e3a <__divdi3+0xa6>
 8000ede:	4252      	negs	r2, r2
 8000ee0:	ea6f 0606 	mvn.w	r6, r6
 8000ee4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ee8:	e75d      	b.n	8000da6 <__divdi3+0x12>
 8000eea:	4240      	negs	r0, r0
 8000eec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000ef4:	e754      	b.n	8000da0 <__divdi3+0xc>
 8000ef6:	f1c0 0220 	rsb	r2, r0, #32
 8000efa:	fa24 f102 	lsr.w	r1, r4, r2
 8000efe:	fa07 f300 	lsl.w	r3, r7, r0
 8000f02:	4085      	lsls	r5, r0
 8000f04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f08:	40d7      	lsrs	r7, r2
 8000f0a:	4319      	orrs	r1, r3
 8000f0c:	fbb7 f2fe 	udiv	r2, r7, lr
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	fb0e 7712 	mls	r7, lr, r2, r7
 8000f16:	fa1f fc85 	uxth.w	ip, r5
 8000f1a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000f1e:	fb0c f702 	mul.w	r7, ip, r2
 8000f22:	429f      	cmp	r7, r3
 8000f24:	fa04 f400 	lsl.w	r4, r4, r0
 8000f28:	d907      	bls.n	8000f3a <__divdi3+0x1a6>
 8000f2a:	195b      	adds	r3, r3, r5
 8000f2c:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8000f30:	d274      	bcs.n	800101c <__divdi3+0x288>
 8000f32:	429f      	cmp	r7, r3
 8000f34:	d972      	bls.n	800101c <__divdi3+0x288>
 8000f36:	3a02      	subs	r2, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	1bdf      	subs	r7, r3, r7
 8000f3c:	b289      	uxth	r1, r1
 8000f3e:	fbb7 f8fe 	udiv	r8, r7, lr
 8000f42:	fb0e 7318 	mls	r3, lr, r8, r7
 8000f46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f4a:	fb0c f708 	mul.w	r7, ip, r8
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__divdi3+0x1d0>
 8000f52:	195b      	adds	r3, r3, r5
 8000f54:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000f58:	d25c      	bcs.n	8001014 <__divdi3+0x280>
 8000f5a:	429f      	cmp	r7, r3
 8000f5c:	d95a      	bls.n	8001014 <__divdi3+0x280>
 8000f5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f62:	442b      	add	r3, r5
 8000f64:	1bd8      	subs	r0, r3, r7
 8000f66:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000f6a:	e78e      	b.n	8000e8a <__divdi3+0xf6>
 8000f6c:	f1c2 0320 	rsb	r3, r2, #32
 8000f70:	fa2c f103 	lsr.w	r1, ip, r3
 8000f74:	fa0e fe02 	lsl.w	lr, lr, r2
 8000f78:	fa20 f703 	lsr.w	r7, r0, r3
 8000f7c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000f80:	fa08 f002 	lsl.w	r0, r8, r2
 8000f84:	fa28 f103 	lsr.w	r1, r8, r3
 8000f88:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000f8c:	4338      	orrs	r0, r7
 8000f8e:	fbb1 f8f5 	udiv	r8, r1, r5
 8000f92:	0c03      	lsrs	r3, r0, #16
 8000f94:	fb05 1118 	mls	r1, r5, r8, r1
 8000f98:	fa1f f78e 	uxth.w	r7, lr
 8000f9c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fa0:	fb07 f308 	mul.w	r3, r7, r8
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000faa:	d909      	bls.n	8000fc0 <__divdi3+0x22c>
 8000fac:	eb11 010e 	adds.w	r1, r1, lr
 8000fb0:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8000fb4:	d230      	bcs.n	8001018 <__divdi3+0x284>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d92e      	bls.n	8001018 <__divdi3+0x284>
 8000fba:	f1a8 0802 	sub.w	r8, r8, #2
 8000fbe:	4471      	add	r1, lr
 8000fc0:	1ac9      	subs	r1, r1, r3
 8000fc2:	b280      	uxth	r0, r0
 8000fc4:	fbb1 f3f5 	udiv	r3, r1, r5
 8000fc8:	fb05 1113 	mls	r1, r5, r3, r1
 8000fcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fd0:	fb07 f703 	mul.w	r7, r7, r3
 8000fd4:	428f      	cmp	r7, r1
 8000fd6:	d908      	bls.n	8000fea <__divdi3+0x256>
 8000fd8:	eb11 010e 	adds.w	r1, r1, lr
 8000fdc:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000fe0:	d216      	bcs.n	8001010 <__divdi3+0x27c>
 8000fe2:	428f      	cmp	r7, r1
 8000fe4:	d914      	bls.n	8001010 <__divdi3+0x27c>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	4471      	add	r1, lr
 8000fea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fee:	1bc9      	subs	r1, r1, r7
 8000ff0:	fba3 890c 	umull	r8, r9, r3, ip
 8000ff4:	4549      	cmp	r1, r9
 8000ff6:	d309      	bcc.n	800100c <__divdi3+0x278>
 8000ff8:	d005      	beq.n	8001006 <__divdi3+0x272>
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	e71d      	b.n	8000e3a <__divdi3+0xa6>
 8000ffe:	4696      	mov	lr, r2
 8001000:	e6fe      	b.n	8000e00 <__divdi3+0x6c>
 8001002:	4613      	mov	r3, r2
 8001004:	e711      	b.n	8000e2a <__divdi3+0x96>
 8001006:	4094      	lsls	r4, r2
 8001008:	4544      	cmp	r4, r8
 800100a:	d2f6      	bcs.n	8000ffa <__divdi3+0x266>
 800100c:	3b01      	subs	r3, #1
 800100e:	e7f4      	b.n	8000ffa <__divdi3+0x266>
 8001010:	4603      	mov	r3, r0
 8001012:	e7ea      	b.n	8000fea <__divdi3+0x256>
 8001014:	4688      	mov	r8, r1
 8001016:	e7a5      	b.n	8000f64 <__divdi3+0x1d0>
 8001018:	46c8      	mov	r8, r9
 800101a:	e7d1      	b.n	8000fc0 <__divdi3+0x22c>
 800101c:	4602      	mov	r2, r0
 800101e:	e78c      	b.n	8000f3a <__divdi3+0x1a6>
 8001020:	4613      	mov	r3, r2
 8001022:	e70a      	b.n	8000e3a <__divdi3+0xa6>
 8001024:	3b02      	subs	r3, #2
 8001026:	e757      	b.n	8000ed8 <__divdi3+0x144>
 8001028:	f1a8 0802 	sub.w	r8, r8, #2
 800102c:	442f      	add	r7, r5
 800102e:	e73f      	b.n	8000eb0 <__divdi3+0x11c>

08001030 <__udivdi3>:
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	2b00      	cmp	r3, #0
 8001036:	d144      	bne.n	80010c2 <__udivdi3+0x92>
 8001038:	428a      	cmp	r2, r1
 800103a:	4615      	mov	r5, r2
 800103c:	4604      	mov	r4, r0
 800103e:	d94f      	bls.n	80010e0 <__udivdi3+0xb0>
 8001040:	fab2 f782 	clz	r7, r2
 8001044:	460e      	mov	r6, r1
 8001046:	b14f      	cbz	r7, 800105c <__udivdi3+0x2c>
 8001048:	f1c7 0320 	rsb	r3, r7, #32
 800104c:	40b9      	lsls	r1, r7
 800104e:	fa20 f603 	lsr.w	r6, r0, r3
 8001052:	fa02 f507 	lsl.w	r5, r2, r7
 8001056:	430e      	orrs	r6, r1
 8001058:	fa00 f407 	lsl.w	r4, r0, r7
 800105c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001060:	0c23      	lsrs	r3, r4, #16
 8001062:	fbb6 f0fe 	udiv	r0, r6, lr
 8001066:	b2af      	uxth	r7, r5
 8001068:	fb0e 6110 	mls	r1, lr, r0, r6
 800106c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001070:	fb07 f100 	mul.w	r1, r7, r0
 8001074:	4299      	cmp	r1, r3
 8001076:	d909      	bls.n	800108c <__udivdi3+0x5c>
 8001078:	195b      	adds	r3, r3, r5
 800107a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800107e:	f080 80ec 	bcs.w	800125a <__udivdi3+0x22a>
 8001082:	4299      	cmp	r1, r3
 8001084:	f240 80e9 	bls.w	800125a <__udivdi3+0x22a>
 8001088:	3802      	subs	r0, #2
 800108a:	442b      	add	r3, r5
 800108c:	1a5a      	subs	r2, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb2 f3fe 	udiv	r3, r2, lr
 8001094:	fb0e 2213 	mls	r2, lr, r3, r2
 8001098:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800109c:	fb07 f703 	mul.w	r7, r7, r3
 80010a0:	4297      	cmp	r7, r2
 80010a2:	d908      	bls.n	80010b6 <__udivdi3+0x86>
 80010a4:	1952      	adds	r2, r2, r5
 80010a6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80010aa:	f080 80d8 	bcs.w	800125e <__udivdi3+0x22e>
 80010ae:	4297      	cmp	r7, r2
 80010b0:	f240 80d5 	bls.w	800125e <__udivdi3+0x22e>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80010ba:	2600      	movs	r6, #0
 80010bc:	4631      	mov	r1, r6
 80010be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d847      	bhi.n	8001156 <__udivdi3+0x126>
 80010c6:	fab3 f683 	clz	r6, r3
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d148      	bne.n	8001160 <__udivdi3+0x130>
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d302      	bcc.n	80010d8 <__udivdi3+0xa8>
 80010d2:	4282      	cmp	r2, r0
 80010d4:	f200 80cd 	bhi.w	8001272 <__udivdi3+0x242>
 80010d8:	2001      	movs	r0, #1
 80010da:	4631      	mov	r1, r6
 80010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e0:	b912      	cbnz	r2, 80010e8 <__udivdi3+0xb8>
 80010e2:	2501      	movs	r5, #1
 80010e4:	fbb5 f5f2 	udiv	r5, r5, r2
 80010e8:	fab5 f885 	clz	r8, r5
 80010ec:	f1b8 0f00 	cmp.w	r8, #0
 80010f0:	d177      	bne.n	80011e2 <__udivdi3+0x1b2>
 80010f2:	1b4a      	subs	r2, r1, r5
 80010f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010f8:	b2af      	uxth	r7, r5
 80010fa:	2601      	movs	r6, #1
 80010fc:	fbb2 f0fe 	udiv	r0, r2, lr
 8001100:	0c23      	lsrs	r3, r4, #16
 8001102:	fb0e 2110 	mls	r1, lr, r0, r2
 8001106:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800110a:	fb07 f300 	mul.w	r3, r7, r0
 800110e:	428b      	cmp	r3, r1
 8001110:	d907      	bls.n	8001122 <__udivdi3+0xf2>
 8001112:	1949      	adds	r1, r1, r5
 8001114:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001118:	d202      	bcs.n	8001120 <__udivdi3+0xf0>
 800111a:	428b      	cmp	r3, r1
 800111c:	f200 80ba 	bhi.w	8001294 <__udivdi3+0x264>
 8001120:	4610      	mov	r0, r2
 8001122:	1ac9      	subs	r1, r1, r3
 8001124:	b2a4      	uxth	r4, r4
 8001126:	fbb1 f3fe 	udiv	r3, r1, lr
 800112a:	fb0e 1113 	mls	r1, lr, r3, r1
 800112e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001132:	fb07 f703 	mul.w	r7, r7, r3
 8001136:	42a7      	cmp	r7, r4
 8001138:	d908      	bls.n	800114c <__udivdi3+0x11c>
 800113a:	1964      	adds	r4, r4, r5
 800113c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8001140:	f080 808f 	bcs.w	8001262 <__udivdi3+0x232>
 8001144:	42a7      	cmp	r7, r4
 8001146:	f240 808c 	bls.w	8001262 <__udivdi3+0x232>
 800114a:	3b02      	subs	r3, #2
 800114c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001150:	4631      	mov	r1, r6
 8001152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001156:	2600      	movs	r6, #0
 8001158:	4630      	mov	r0, r6
 800115a:	4631      	mov	r1, r6
 800115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001160:	f1c6 0420 	rsb	r4, r6, #32
 8001164:	fa22 f504 	lsr.w	r5, r2, r4
 8001168:	40b3      	lsls	r3, r6
 800116a:	432b      	orrs	r3, r5
 800116c:	fa20 fc04 	lsr.w	ip, r0, r4
 8001170:	fa01 f706 	lsl.w	r7, r1, r6
 8001174:	fa21 f504 	lsr.w	r5, r1, r4
 8001178:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800117c:	ea4c 0707 	orr.w	r7, ip, r7
 8001180:	fbb5 f8fe 	udiv	r8, r5, lr
 8001184:	0c39      	lsrs	r1, r7, #16
 8001186:	fb0e 5518 	mls	r5, lr, r8, r5
 800118a:	fa1f fc83 	uxth.w	ip, r3
 800118e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8001192:	fb0c f108 	mul.w	r1, ip, r8
 8001196:	42a9      	cmp	r1, r5
 8001198:	fa02 f206 	lsl.w	r2, r2, r6
 800119c:	d904      	bls.n	80011a8 <__udivdi3+0x178>
 800119e:	18ed      	adds	r5, r5, r3
 80011a0:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80011a4:	d367      	bcc.n	8001276 <__udivdi3+0x246>
 80011a6:	46a0      	mov	r8, r4
 80011a8:	1a6d      	subs	r5, r5, r1
 80011aa:	b2bf      	uxth	r7, r7
 80011ac:	fbb5 f4fe 	udiv	r4, r5, lr
 80011b0:	fb0e 5514 	mls	r5, lr, r4, r5
 80011b4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80011b8:	fb0c fc04 	mul.w	ip, ip, r4
 80011bc:	458c      	cmp	ip, r1
 80011be:	d904      	bls.n	80011ca <__udivdi3+0x19a>
 80011c0:	18c9      	adds	r1, r1, r3
 80011c2:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 80011c6:	d35c      	bcc.n	8001282 <__udivdi3+0x252>
 80011c8:	462c      	mov	r4, r5
 80011ca:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80011ce:	ebcc 0101 	rsb	r1, ip, r1
 80011d2:	fba4 2302 	umull	r2, r3, r4, r2
 80011d6:	4299      	cmp	r1, r3
 80011d8:	d348      	bcc.n	800126c <__udivdi3+0x23c>
 80011da:	d044      	beq.n	8001266 <__udivdi3+0x236>
 80011dc:	4620      	mov	r0, r4
 80011de:	2600      	movs	r6, #0
 80011e0:	e76c      	b.n	80010bc <__udivdi3+0x8c>
 80011e2:	f1c8 0420 	rsb	r4, r8, #32
 80011e6:	fa01 f308 	lsl.w	r3, r1, r8
 80011ea:	fa05 f508 	lsl.w	r5, r5, r8
 80011ee:	fa20 f704 	lsr.w	r7, r0, r4
 80011f2:	40e1      	lsrs	r1, r4
 80011f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011f8:	431f      	orrs	r7, r3
 80011fa:	fbb1 f6fe 	udiv	r6, r1, lr
 80011fe:	0c3a      	lsrs	r2, r7, #16
 8001200:	fb0e 1116 	mls	r1, lr, r6, r1
 8001204:	fa1f fc85 	uxth.w	ip, r5
 8001208:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800120c:	fb0c f206 	mul.w	r2, ip, r6
 8001210:	429a      	cmp	r2, r3
 8001212:	fa00 f408 	lsl.w	r4, r0, r8
 8001216:	d907      	bls.n	8001228 <__udivdi3+0x1f8>
 8001218:	195b      	adds	r3, r3, r5
 800121a:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800121e:	d237      	bcs.n	8001290 <__udivdi3+0x260>
 8001220:	429a      	cmp	r2, r3
 8001222:	d935      	bls.n	8001290 <__udivdi3+0x260>
 8001224:	3e02      	subs	r6, #2
 8001226:	442b      	add	r3, r5
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	b2bf      	uxth	r7, r7
 800122c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001230:	fb0e 3310 	mls	r3, lr, r0, r3
 8001234:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8001238:	fb0c f100 	mul.w	r1, ip, r0
 800123c:	4299      	cmp	r1, r3
 800123e:	d907      	bls.n	8001250 <__udivdi3+0x220>
 8001240:	195b      	adds	r3, r3, r5
 8001242:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001246:	d221      	bcs.n	800128c <__udivdi3+0x25c>
 8001248:	4299      	cmp	r1, r3
 800124a:	d91f      	bls.n	800128c <__udivdi3+0x25c>
 800124c:	3802      	subs	r0, #2
 800124e:	442b      	add	r3, r5
 8001250:	1a5a      	subs	r2, r3, r1
 8001252:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001256:	4667      	mov	r7, ip
 8001258:	e750      	b.n	80010fc <__udivdi3+0xcc>
 800125a:	4610      	mov	r0, r2
 800125c:	e716      	b.n	800108c <__udivdi3+0x5c>
 800125e:	460b      	mov	r3, r1
 8001260:	e729      	b.n	80010b6 <__udivdi3+0x86>
 8001262:	4613      	mov	r3, r2
 8001264:	e772      	b.n	800114c <__udivdi3+0x11c>
 8001266:	40b0      	lsls	r0, r6
 8001268:	4290      	cmp	r0, r2
 800126a:	d2b7      	bcs.n	80011dc <__udivdi3+0x1ac>
 800126c:	1e60      	subs	r0, r4, #1
 800126e:	2600      	movs	r6, #0
 8001270:	e724      	b.n	80010bc <__udivdi3+0x8c>
 8001272:	4630      	mov	r0, r6
 8001274:	e722      	b.n	80010bc <__udivdi3+0x8c>
 8001276:	42a9      	cmp	r1, r5
 8001278:	d995      	bls.n	80011a6 <__udivdi3+0x176>
 800127a:	f1a8 0802 	sub.w	r8, r8, #2
 800127e:	441d      	add	r5, r3
 8001280:	e792      	b.n	80011a8 <__udivdi3+0x178>
 8001282:	458c      	cmp	ip, r1
 8001284:	d9a0      	bls.n	80011c8 <__udivdi3+0x198>
 8001286:	3c02      	subs	r4, #2
 8001288:	4419      	add	r1, r3
 800128a:	e79e      	b.n	80011ca <__udivdi3+0x19a>
 800128c:	4610      	mov	r0, r2
 800128e:	e7df      	b.n	8001250 <__udivdi3+0x220>
 8001290:	460e      	mov	r6, r1
 8001292:	e7c9      	b.n	8001228 <__udivdi3+0x1f8>
 8001294:	3802      	subs	r0, #2
 8001296:	4429      	add	r1, r5
 8001298:	e743      	b.n	8001122 <__udivdi3+0xf2>
 800129a:	bf00      	nop

0800129c <CmdLED>:
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode)
{
 800129c:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 800129e:	b9f8      	cbnz	r0, 80012e0 <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 80012a0:	4668      	mov	r0, sp
 80012a2:	f000 fa21 	bl	80016e8 <fetch_uint32_arg>
  if(rc) {
 80012a6:	b108      	cbz	r0, 80012ac <CmdLED+0x10>
    printf("Missing LED index\n");
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <CmdLED+0x4c>)
 80012aa:	e004      	b.n	80012b6 <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 80012ac:	a801      	add	r0, sp, #4
 80012ae:	f000 fa1b 	bl	80016e8 <fetch_uint32_arg>
  if(rc) {
 80012b2:	b118      	cbz	r0, 80012bc <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <CmdLED+0x50>)
 80012b6:	f004 fde1 	bl	8005e7c <puts>
    return;
 80012ba:	e011      	b.n	80012e0 <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 80012bc:	9900      	ldr	r1, [sp, #0]
 80012be:	1ecb      	subs	r3, r1, #3
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	d903      	bls.n	80012cc <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <CmdLED+0x54>)
 80012c6:	f004 fd89 	bl	8005ddc <printf>
	   (unsigned int)led);
    return;
 80012ca:	e009      	b.n	80012e0 <CmdLED+0x44>
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 80012ce:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 80012d0:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 80012d2:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 80012d4:	b111      	cbz	r1, 80012dc <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 80012d6:	f004 f8af 	bl	8005438 <BSP_LED_On>
 80012da:	e001      	b.n	80012e0 <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 80012dc:	f004 f8ba 	bl	8005454 <BSP_LED_Off>
  }

} 
 80012e0:	b003      	add	sp, #12
 80012e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012e6:	bf00      	nop
 80012e8:	0800ab84 	.word	0x0800ab84
 80012ec:	0800ab96 	.word	0x0800ab96
 80012f0:	0800abbf 	.word	0x0800abbf
 80012f4:	0800ad56 	.word	0x0800ad56

080012f8 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80012f8:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80012fa:	b958      	cbnz	r0, 8001314 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80012fc:	4668      	mov	r0, sp
 80012fe:	f004 fa2f 	bl	8005760 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <CmdAccel+0x24>)
 8001304:	f9bd 1000 	ldrsh.w	r1, [sp]
 8001308:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800130c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001310:	f004 fd64 	bl	8005ddc <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8001314:	b003      	add	sp, #12
 8001316:	f85d fb04 	ldr.w	pc, [sp], #4
 800131a:	bf00      	nop
 800131c:	0800abec 	.word	0x0800abec

08001320 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8001320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8001322:	b9f8      	cbnz	r0, 8001364 <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8001324:	a801      	add	r0, sp, #4
 8001326:	f004 fa45 	bl	80057b4 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800132a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800136c <CmdGyro+0x4c>
 800132e:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 8001332:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 8001336:	eddd 7a03 	vldr	s15, [sp, #12]
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <CmdGyro+0x50>)
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800133c:	ee66 6a86 	vmul.f32	s13, s13, s12
	 (int)(xyz[1]*256),
 8001340:	ee27 7a06 	vmul.f32	s14, s14, s12
	 (int)(xyz[2]*256));
 8001344:	ee67 7a86 	vmul.f32	s15, s15, s12
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8001348:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800134c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001354:	ee16 1a90 	vmov	r1, s13
 8001358:	ee17 2a10 	vmov	r2, s14
 800135c:	ee17 3a90 	vmov	r3, s15
 8001360:	f004 fd3c 	bl	8005ddc <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8001364:	b005      	add	sp, #20
 8001366:	f85d fb04 	ldr.w	pc, [sp], #4
 800136a:	bf00      	nop
 800136c:	43800000 	.word	0x43800000
 8001370:	0800ac1f 	.word	0x0800ac1f

08001374 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8001374:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8001376:	b958      	cbnz	r0, 8001390 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8001378:	f004 f8c2 	bl	8005500 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <CmdButton+0x20>)
 800137e:	4906      	ldr	r1, [pc, #24]	; (8001398 <CmdButton+0x24>)
 8001380:	2800      	cmp	r0, #0
 8001382:	bf18      	it	ne
 8001384:	4619      	movne	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8001388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 800138c:	f004 bd26 	b.w	8005ddc <printf>
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	0800ac4e 	.word	0x0800ac4e
 8001398:	0800ac56 	.word	0x0800ac56
 800139c:	0800ac5f 	.word	0x0800ac5f

080013a0 <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);
extern void my_LED_Function(uint8_t);
int main(int argc, char **argv)
{
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b090      	sub	sp, #64	; 0x40
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80013b6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013be:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80013c0:	f000 fee0 	bl	8002184 <HAL_RCC_OscConfig>
 80013c4:	b100      	cbz	r0, 80013c8 <main+0x28>
 80013c6:	e7fe      	b.n	80013c6 <main+0x26>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013c8:	230f      	movs	r3, #15
 80013ca:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013cc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80013ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d2:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80013d4:	4621      	mov	r1, r4
 80013d6:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80013da:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80013dc:	f001 f9bc 	bl	8002758 <HAL_RCC_ClockConfig>
 80013e0:	4604      	mov	r4, r0
 80013e2:	b100      	cbz	r0, 80013e6 <main+0x46>
 80013e4:	e7fe      	b.n	80013e4 <main+0x44>
  uint32_t i;
  uint8_t accelRc, gyroRc;
  /* Configure the system clock */
  SystemClock_Config();

  HAL_Init();
 80013e6:	f001 fb83 	bl	8002af0 <HAL_Init>

  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
 80013ea:	f000 fab5 	bl	8001958 <TerminalInit>
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
    BSP_LED_Init(LEDs[i]);
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <main+0x90>)
 80013f0:	5d18      	ldrb	r0, [r3, r4]
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80013f2:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 80013f4:	f003 ffec 	bl	80053d0 <BSP_LED_Init>
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80013f8:	2c08      	cmp	r4, #8
 80013fa:	d1f8      	bne.n	80013ee <main+0x4e>
    BSP_LED_Init(LEDs[i]);
  }

  /* Initialize the pushbutton */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80013fc:	2000      	movs	r0, #0
 80013fe:	4601      	mov	r1, r0
 8001400:	f004 f844 	bl	800548c <BSP_PB_Init>

  /* Initialize the Accelerometer */
  accelRc = BSP_ACCELERO_Init();
 8001404:	f004 f994 	bl	8005730 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8001408:	b118      	cbz	r0, 8001412 <main+0x72>
    printf("Failed to initialize acceleromter\n");
 800140a:	480a      	ldr	r0, [pc, #40]	; (8001434 <main+0x94>)
 800140c:	f004 fd36 	bl	8005e7c <puts>
 8001410:	e7fe      	b.n	8001410 <main+0x70>
    Error_Handler();
  }

  /* Initialize the Gyroscope */
  gyroRc = BSP_GYRO_Init();
 8001412:	f004 f9ad 	bl	8005770 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8001416:	b118      	cbz	r0, 8001420 <main+0x80>
    printf("Failed to initialize Gyroscope\n");
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <main+0x98>)
 800141a:	f004 fd2f 	bl	8005e7c <puts>
 800141e:	e7fe      	b.n	800141e <main+0x7e>
    Error_Handler();
  }

  my_Init();
 8001420:	f7fe ff52 	bl	80002c8 <my_Init>
  
  while(1) {
   TaskInput();
 8001424:	f000 f8ca 	bl	80015bc <TaskInput>
    my_Loop();
 8001428:	f7fe ff4c 	bl	80002c4 <my_Loop>
	//my_LED_Function(1);
    /* Tickle the watchdog */
  }
 800142c:	e7fa      	b.n	8001424 <main+0x84>
 800142e:	bf00      	nop
 8001430:	0800ad56 	.word	0x0800ad56
 8001434:	0800ac78 	.word	0x0800ac78
 8001438:	0800ac9a 	.word	0x0800ac9a

0800143c <SysTick_Handler>:
  {
  }
}

void SysTick_Handler(void)
{
 800143c:	b508      	push	{r3, lr}
    HAL_IncTick();
 800143e:	f001 fb69 	bl	8002b14 <HAL_IncTick>
    my_Tick();
}
 8001442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void SysTick_Handler(void)
{
    HAL_IncTick();
    my_Tick();
 8001446:	f7fe befd 	b.w	8000244 <my_Tick>
	...

0800144c <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 800144c:	2801      	cmp	r0, #1
#include "common.h"

int mytest( int x );

void CmdTest(int action)
{
 800144e:	b508      	push	{r3, lr}

  if(action==CMD_SHORT_HELP) return;
 8001450:	d00f      	beq.n	8001472 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8001452:	2802      	cmp	r0, #2
 8001454:	d104      	bne.n	8001460 <CmdTest+0x14>
    printf("testasm\n\n"
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 8001458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
  if(action==CMD_LONG_HELP) {
    printf("testasm\n\n"
 800145c:	f004 bd0e 	b.w	8005e7c <puts>
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 8001460:	204d      	movs	r0, #77	; 0x4d
 8001462:	f7fe fee3 	bl	800022c <mytest>
}
 8001466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 800146a:	4601      	mov	r1, r0
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <CmdTest+0x2c>)
 800146e:	f004 bcb5 	b.w	8005ddc <printf>
 8001472:	bd08      	pop	{r3, pc}
 8001474:	0800ad5e 	.word	0x0800ad5e
 8001478:	0800ad97 	.word	0x0800ad97

0800147c <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 800147c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 800147e:	b940      	cbnz	r0, 8001492 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8001480:	4668      	mov	r0, sp
 8001482:	f000 f931 	bl	80016e8 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8001486:	a801      	add	r0, sp, #4
 8001488:	f000 f92e 	bl	80016e8 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 800148c:	9b00      	ldr	r3, [sp, #0]
 800148e:	9a01      	ldr	r2, [sp, #4]
 8001490:	601a      	str	r2, [r3, #0]
}
 8001492:	b003      	add	sp, #12
 8001494:	f85d fb04 	ldr.w	pc, [sp], #4

08001498 <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 8001498:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 800149a:	b938      	cbnz	r0, 80014ac <CmdR+0x14>

  fetch_uint32_arg(&addr);
 800149c:	a801      	add	r0, sp, #4
 800149e:	f000 f923 	bl	80016e8 <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 80014a2:	9901      	ldr	r1, [sp, #4]
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <CmdR+0x1c>)
 80014a6:	680a      	ldr	r2, [r1, #0]
 80014a8:	f004 fc98 	bl	8005ddc <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 80014ac:	b003      	add	sp, #12
 80014ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b2:	bf00      	nop
 80014b4:	0800adbb 	.word	0x0800adbb

080014b8 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 80014b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014bc:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80014be:	b908      	cbnz	r0, 80014c4 <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80014c0:	4833      	ldr	r0, [pc, #204]	; (8001590 <parse+0xd8>)
 80014c2:	e020      	b.n	8001506 <parse+0x4e>
    return -1;
  }

  if(len==0) {
 80014c4:	b909      	cbnz	r1, 80014ca <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 80014c6:	4833      	ldr	r0, [pc, #204]	; (8001594 <parse+0xdc>)
 80014c8:	e01d      	b.n	8001506 <parse+0x4e>
    return -1;
  }

  if(table == NULL) {
 80014ca:	b122      	cbz	r2, 80014d6 <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <parse+0xe0>)
 80014ce:	1e4c      	subs	r4, r1, #1
 80014d0:	681e      	ldr	r6, [r3, #0]
 80014d2:	4603      	mov	r3, r0
 80014d4:	e00a      	b.n	80014ec <parse+0x34>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 80014d6:	4831      	ldr	r0, [pc, #196]	; (800159c <parse+0xe4>)
 80014d8:	e015      	b.n	8001506 <parse+0x4e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80014da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d04d      	beq.n	800157e <parse+0xc6>
 80014e2:	4432      	add	r2, r6
 80014e4:	3c01      	subs	r4, #1
 80014e6:	7852      	ldrb	r2, [r2, #1]
 80014e8:	0712      	lsls	r2, r2, #28
 80014ea:	d54b      	bpl.n	8001584 <parse+0xcc>
 80014ec:	1c67      	adds	r7, r4, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	d1f2      	bne.n	80014da <parse+0x22>
  if((i==0) || (*buf==0)) {
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d047      	beq.n	800158a <parse+0xd2>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 80014fa:	4929      	ldr	r1, [pc, #164]	; (80015a0 <parse+0xe8>)
 80014fc:	f004 fdf0 	bl	80060e0 <strtok>
  if(p==NULL) {
 8001500:	4606      	mov	r6, r0
 8001502:	b910      	cbnz	r0, 800150a <parse+0x52>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8001504:	4827      	ldr	r0, [pc, #156]	; (80015a4 <parse+0xec>)
 8001506:	4928      	ldr	r1, [pc, #160]	; (80015a8 <parse+0xf0>)
 8001508:	e037      	b.n	800157a <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 800150a:	4928      	ldr	r1, [pc, #160]	; (80015ac <parse+0xf4>)
 800150c:	f004 fd3a 	bl	8005f84 <strcasecmp>
 8001510:	4604      	mov	r4, r0
 8001512:	b9a0      	cbnz	r0, 800153e <parse+0x86>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 8001514:	4922      	ldr	r1, [pc, #136]	; (80015a0 <parse+0xe8>)
 8001516:	f004 fde3 	bl	80060e0 <strtok>
    if(p == NULL) {
 800151a:	4606      	mov	r6, r0
 800151c:	b990      	cbnz	r0, 8001544 <parse+0x8c>
 800151e:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 8001520:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8001524:	b389      	cbz	r1, 800158a <parse+0xd2>
	if(t->help != NULL) {
 8001526:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800152a:	b11a      	cbz	r2, 8001534 <parse+0x7c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800152c:	4820      	ldr	r0, [pc, #128]	; (80015b0 <parse+0xf8>)
 800152e:	f004 fc55 	bl	8005ddc <printf>
 8001532:	e7f4      	b.n	800151e <parse+0x66>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8001534:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8001538:	2001      	movs	r0, #1
 800153a:	4798      	blx	r3
 800153c:	e7ef      	b.n	800151e <parse+0x66>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 800153e:	f04f 0800 	mov.w	r8, #0
 8001542:	e009      	b.n	8001558 <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 8001544:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8001548:	e006      	b.n	8001558 <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 800154a:	4630      	mov	r0, r6
 800154c:	4639      	mov	r1, r7
 800154e:	f004 fd19 	bl	8005f84 <strcasecmp>
 8001552:	4604      	mov	r4, r0
 8001554:	b120      	cbz	r0, 8001560 <parse+0xa8>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8001556:	350c      	adds	r5, #12
 8001558:	682f      	ldr	r7, [r5, #0]
 800155a:	2f00      	cmp	r7, #0
 800155c:	d1f5      	bne.n	800154a <parse+0x92>
 800155e:	e00a      	b.n	8001576 <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8001560:	f1b8 0f00 	cmp.w	r8, #0
 8001564:	d003      	beq.n	800156e <parse+0xb6>
	printf("%s:\n",t->cmdname);
 8001566:	4813      	ldr	r0, [pc, #76]	; (80015b4 <parse+0xfc>)
 8001568:	4639      	mov	r1, r7
 800156a:	f004 fc37 	bl	8005ddc <printf>
      }
      t->func(arg);
 800156e:	686b      	ldr	r3, [r5, #4]
 8001570:	4640      	mov	r0, r8
 8001572:	4798      	blx	r3
      return 0;
 8001574:	e009      	b.n	800158a <parse+0xd2>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8001576:	4810      	ldr	r0, [pc, #64]	; (80015b8 <parse+0x100>)
 8001578:	4631      	mov	r1, r6
 800157a:	f004 fc2f 	bl	8005ddc <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 800157e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001582:	e002      	b.n	800158a <parse+0xd2>


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
  if((i==0) || (*buf==0)) {
 8001584:	2900      	cmp	r1, #0
 8001586:	d1b8      	bne.n	80014fa <parse+0x42>
 8001588:	e7f9      	b.n	800157e <parse+0xc6>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 800158a:	4620      	mov	r0, r4
 800158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001590:	0800ae06 	.word	0x0800ae06
 8001594:	0800ae27 	.word	0x0800ae27
 8001598:	20000204 	.word	0x20000204
 800159c:	0800ae37 	.word	0x0800ae37
 80015a0:	0800ae5a 	.word	0x0800ae5a
 80015a4:	0800ae61 	.word	0x0800ae61
 80015a8:	0800aee7 	.word	0x0800aee7
 80015ac:	0800ae91 	.word	0x0800ae91
 80015b0:	0800ae96 	.word	0x0800ae96
 80015b4:	0800aea2 	.word	0x0800aea2
 80015b8:	0800aea7 	.word	0x0800aea7

080015bc <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 80015bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 80015be:	4d3f      	ldr	r5, [pc, #252]	; (80016bc <TaskInput+0x100>)
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	b123      	cbz	r3, 80015ce <TaskInput+0x12>
    printf("ARMON>");
 80015c4:	483e      	ldr	r0, [pc, #248]	; (80016c0 <TaskInput+0x104>)
 80015c6:	f004 fc09 	bl	8005ddc <printf>
    printPrompt = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 80015ce:	f10d 0007 	add.w	r0, sp, #7
 80015d2:	f000 fa32 	bl	8001a3a <TerminalReadAnyNonBlock>
  if(rc) {
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d16e      	bne.n	80016b8 <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 80015da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d001      	beq.n	80015e6 <TaskInput+0x2a>
 80015e2:	2b7f      	cmp	r3, #127	; 0x7f
 80015e4:	d10d      	bne.n	8001602 <TaskInput+0x46>
 80015e6:	4c37      	ldr	r4, [pc, #220]	; (80016c4 <TaskInput+0x108>)
 80015e8:	6822      	ldr	r2, [r4, #0]
 80015ea:	b152      	cbz	r2, 8001602 <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 80015ec:	4836      	ldr	r0, [pc, #216]	; (80016c8 <TaskInput+0x10c>)
 80015ee:	f004 fbf5 	bl	8005ddc <printf>
    buf--;     /* Then remove it from the buffer */
 80015f2:	4a36      	ldr	r2, [pc, #216]	; (80016cc <TaskInput+0x110>)
 80015f4:	6813      	ldr	r3, [r2, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	6023      	str	r3, [r4, #0]
 8001600:	e05a      	b.n	80016b8 <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 8001602:	2b21      	cmp	r3, #33	; 0x21
 8001604:	d115      	bne.n	8001632 <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <TaskInput+0x114>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d054      	beq.n	80016b8 <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 800160e:	4c31      	ldr	r4, [pc, #196]	; (80016d4 <TaskInput+0x118>)
 8001610:	4931      	ldr	r1, [pc, #196]	; (80016d8 <TaskInput+0x11c>)
 8001612:	4620      	mov	r0, r4
 8001614:	f004 fcd8 	bl	8005fc8 <strcpy>
      printf("%s",input);
 8001618:	4621      	mov	r1, r4
 800161a:	4830      	ldr	r0, [pc, #192]	; (80016dc <TaskInput+0x120>)
 800161c:	f004 fbde 	bl	8005ddc <printf>
      count = strlen(input);
 8001620:	4620      	mov	r0, r4
 8001622:	f004 fd2f 	bl	8006084 <strlen>
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <TaskInput+0x108>)
 8001628:	6018      	str	r0, [r3, #0]
      buf = input+count;
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <TaskInput+0x110>)
 800162c:	4404      	add	r4, r0
 800162e:	601c      	str	r4, [r3, #0]
      goto parseme;
 8001630:	e025      	b.n	800167e <TaskInput+0xc2>
    }
  } else if(isprint((unsigned int)c)) {
 8001632:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <TaskInput+0x124>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	441a      	add	r2, r3
 8001638:	7852      	ldrb	r2, [r2, #1]
 800163a:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 800163e:	d012      	beq.n	8001666 <TaskInput+0xaa>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 8001640:	4920      	ldr	r1, [pc, #128]	; (80016c4 <TaskInput+0x108>)
 8001642:	680a      	ldr	r2, [r1, #0]
 8001644:	2a4f      	cmp	r2, #79	; 0x4f
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 8001646:	bf9f      	itttt	ls
 8001648:	4c20      	ldrls	r4, [pc, #128]	; (80016cc <TaskInput+0x110>)
 800164a:	6820      	ldrls	r0, [r4, #0]
 800164c:	7003      	strbls	r3, [r0, #0]
 800164e:	1c45      	addls	r5, r0, #1
      count++;
 8001650:	bf97      	itett	ls
 8001652:	3201      	addls	r2, #1
    }
  } else if(isprint((unsigned int)c)) {
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
 8001654:	2007      	movhi	r0, #7
      return;
    } else {
      *buf++ = c;
      count++;
      /* Echo it back to the user */
      printf("%c",c);
 8001656:	f89d 0007 	ldrbls.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 800165a:	6025      	strls	r5, [r4, #0]
      count++;
 800165c:	bf98      	it	ls
 800165e:	600a      	strls	r2, [r1, #0]
      /* Echo it back to the user */
      printf("%c",c);
 8001660:	f004 fbd0 	bl	8005e04 <putchar>
 8001664:	e028      	b.n	80016b8 <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 8001666:	2b0d      	cmp	r3, #13
 8001668:	d126      	bne.n	80016b8 <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 800166c:	481a      	ldr	r0, [pc, #104]	; (80016d8 <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800166e:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001670:	4918      	ldr	r1, [pc, #96]	; (80016d4 <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001672:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001674:	f004 fca8 	bl	8005fc8 <strcpy>
    saved = 1;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <TaskInput+0x114>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 800167e:	200a      	movs	r0, #10
 8001680:	4c12      	ldr	r4, [pc, #72]	; (80016cc <TaskInput+0x110>)
 8001682:	f004 fbbf 	bl	8005e04 <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <TaskInput+0x108>)
 8001688:	6820      	ldr	r0, [r4, #0]
 800168a:	681e      	ldr	r6, [r3, #0]
 800168c:	4602      	mov	r2, r0
 800168e:	1a31      	subs	r1, r6, r0
 8001690:	4411      	add	r1, r2
 8001692:	294f      	cmp	r1, #79	; 0x4f
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	d802      	bhi.n	80016a0 <TaskInput+0xe4>
 800169a:	f802 1b01 	strb.w	r1, [r2], #1
 800169e:	e7f6      	b.n	800168e <TaskInput+0xd2>
    count = 0;
 80016a0:	6019      	str	r1, [r3, #0]
    parse(input, sizeof(input), Commands);
 80016a2:	4e0c      	ldr	r6, [pc, #48]	; (80016d4 <TaskInput+0x118>)
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <TaskInput+0x128>)
 80016a6:	6022      	str	r2, [r4, #0]
 80016a8:	4630      	mov	r0, r6
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2150      	movs	r1, #80	; 0x50
 80016ae:	f7ff ff03 	bl	80014b8 <parse>
    buf = input;
    printPrompt = 1;
 80016b2:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 80016b4:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 80016b6:	602b      	str	r3, [r5, #0]
  }
}
 80016b8:	b002      	add	sp, #8
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
 80016bc:	20000010 	.word	0x20000010
 80016c0:	0800aedc 	.word	0x0800aedc
 80016c4:	20000ac4 	.word	0x20000ac4
 80016c8:	0800aee3 	.word	0x0800aee3
 80016cc:	2000000c 	.word	0x2000000c
 80016d0:	20000ac0 	.word	0x20000ac0
 80016d4:	20000f64 	.word	0x20000f64
 80016d8:	20000f14 	.word	0x20000f14
 80016dc:	0800b1d8 	.word	0x0800b1d8
 80016e0:	20000204 	.word	0x20000204
 80016e4:	20000014 	.word	0x20000014

080016e8 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80016e8:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80016ec:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f004 fcf6 	bl	80060e0 <strtok>
  if(p == NULL) {
 80016f4:	b130      	cbz	r0, 8001704 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 80016f6:	2100      	movs	r1, #0
 80016f8:	460a      	mov	r2, r1
 80016fa:	f004 fdbf 	bl	800627c <strtoul>
 80016fe:	6020      	str	r0, [r4, #0]
  return 0;
 8001700:	2000      	movs	r0, #0
 8001702:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8001704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 8001708:	bd10      	pop	{r4, pc}
 800170a:	bf00      	nop
 800170c:	0800ae5a 	.word	0x0800ae5a

08001710 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001710:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001712:	4906      	ldr	r1, [pc, #24]	; (800172c <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001714:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8001716:	2000      	movs	r0, #0
 8001718:	f004 fce2 	bl	80060e0 <strtok>
  if(p == NULL) {
 800171c:	b110      	cbz	r0, 8001724 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 800171e:	6020      	str	r0, [r4, #0]
  return 0;
 8001720:	2000      	movs	r0, #0
 8001722:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 8001728:	bd10      	pop	{r4, pc}
 800172a:	bf00      	nop
 800172c:	0800ae5a 	.word	0x0800ae5a

08001730 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8001730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001734:	4680      	mov	r8, r0
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 800173a:	460d      	mov	r5, r1
 800173c:	2900      	cmp	r1, #0
 800173e:	d044      	beq.n	80017ca <DumpBuffer+0x9a>
 8001740:	ac03      	add	r4, sp, #12
 8001742:	eb00 0901 	add.w	r9, r0, r1
 8001746:	4606      	mov	r6, r0
 8001748:	4627      	mov	r7, r4
 800174a:	ebc8 010a 	rsb	r1, r8, sl

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 800174e:	454e      	cmp	r6, r9
 8001750:	4431      	add	r1, r6
 8001752:	ebc8 0306 	rsb	r3, r8, r6
 8001756:	d025      	beq.n	80017a4 <DumpBuffer+0x74>
    if((i% BYTES_PER_LINE) == 0) {
 8001758:	f013 0b0f 	ands.w	fp, r3, #15
 800175c:	d103      	bne.n	8001766 <DumpBuffer+0x36>
      printf("%08x:",(unsigned int)address);
 800175e:	481c      	ldr	r0, [pc, #112]	; (80017d0 <DumpBuffer+0xa0>)
 8001760:	f004 fb3c 	bl	8005ddc <printf>
      bufp = buf;
 8001764:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <DumpBuffer+0xa4>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 8001768:	f816 1b01 	ldrb.w	r1, [r6], #1
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 800176c:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800176e:	481a      	ldr	r0, [pc, #104]	; (80017d8 <DumpBuffer+0xa8>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001770:	440b      	add	r3, r1
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8001778:	bf08      	it	eq
 800177a:	222e      	moveq	r2, #46	; 0x2e
 800177c:	f104 0301 	add.w	r3, r4, #1
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 8001780:	bf14      	ite	ne
 8001782:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 8001784:	7022      	strbeq	r2, [r4, #0]
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	461c      	mov	r4, r3
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800178a:	f004 fb27 	bl	8005ddc <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 800178e:	f1bb 0f0f 	cmp.w	fp, #15
 8001792:	9b01      	ldr	r3, [sp, #4]
 8001794:	d1d9      	bne.n	800174a <DumpBuffer+0x1a>
      *bufp = '\0';  /* NULL terminate buffer */
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 800179a:	4639      	mov	r1, r7
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <DumpBuffer+0xac>)
 800179e:	f004 fb1d 	bl	8005ddc <printf>
 80017a2:	e7d2      	b.n	800174a <DumpBuffer+0x1a>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 80017a4:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 80017a6:	f015 050f 	ands.w	r5, r5, #15
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 80017aa:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 80017ac:	d00d      	beq.n	80017ca <DumpBuffer+0x9a>
 80017ae:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80017b0:	f1c5 0310 	rsb	r3, r5, #16
 80017b4:	429c      	cmp	r4, r3
 80017b6:	d204      	bcs.n	80017c2 <DumpBuffer+0x92>
      printf("   ");
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <DumpBuffer+0xb0>)
 80017ba:	f004 fb0f 	bl	8005ddc <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80017be:	3401      	adds	r4, #1
 80017c0:	e7f6      	b.n	80017b0 <DumpBuffer+0x80>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <DumpBuffer+0xac>)
 80017c4:	4639      	mov	r1, r7
 80017c6:	f004 fb09 	bl	8005ddc <printf>
  }



}
 80017ca:	b009      	add	sp, #36	; 0x24
 80017cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d0:	0800aeed 	.word	0x0800aeed
 80017d4:	20000204 	.word	0x20000204
 80017d8:	0800aef3 	.word	0x0800aef3
 80017dc:	0800aef9 	.word	0x0800aef9
 80017e0:	0800aeff 	.word	0x0800aeff

080017e4 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 80017e4:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 80017e6:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 80017e8:	d01d      	beq.n	8001826 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 80017ea:	2802      	cmp	r0, #2
 80017ec:	4c0e      	ldr	r4, [pc, #56]	; (8001828 <CmdDump+0x44>)
 80017ee:	4d0f      	ldr	r5, [pc, #60]	; (800182c <CmdDump+0x48>)
 80017f0:	d109      	bne.n	8001806 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 80017f2:	480f      	ldr	r0, [pc, #60]	; (8001830 <CmdDump+0x4c>)
 80017f4:	f004 fb42 	bl	8005e7c <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80017f8:	6821      	ldr	r1, [r4, #0]
 80017fa:	682a      	ldr	r2, [r5, #0]
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 80017fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001802:	f004 baeb 	b.w	8005ddc <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff ff6e 	bl	80016e8 <fetch_uint32_arg>
  if(rc == 0) {
 800180c:	b910      	cbnz	r0, 8001814 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 800180e:	4628      	mov	r0, r5
 8001810:	f7ff ff6a 	bl	80016e8 <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 8001814:	6820      	ldr	r0, [r4, #0]
 8001816:	6829      	ldr	r1, [r5, #0]
 8001818:	4602      	mov	r2, r0
 800181a:	f7ff ff89 	bl	8001730 <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	682a      	ldr	r2, [r5, #0]
 8001822:	4413      	add	r3, r2
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	bd38      	pop	{r3, r4, r5, pc}
 8001828:	20000ac8 	.word	0x20000ac8
 800182c:	20000018 	.word	0x20000018
 8001830:	0800af03 	.word	0x0800af03
 8001834:	0800b09b 	.word	0x0800b09b

08001838 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8001838:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <_sbrk_r+0x2c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	b90a      	cbnz	r2, 8001844 <_sbrk_r+0xc>
                heap_end = &end;
 8001840:	4a09      	ldr	r2, [pc, #36]	; (8001868 <_sbrk_r+0x30>)
 8001842:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8001844:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8001846:	466b      	mov	r3, sp
 8001848:	4401      	add	r1, r0
 800184a:	4299      	cmp	r1, r3
 800184c:	d906      	bls.n	800185c <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 800184e:	f004 fa33 	bl	8005cb8 <__errno>
 8001852:	230c      	movs	r3, #12
 8001854:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8001856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185a:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 800185c:	4b01      	ldr	r3, [pc, #4]	; (8001864 <_sbrk_r+0x2c>)
 800185e:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8001860:	bd08      	pop	{r3, pc}
 8001862:	bf00      	nop
 8001864:	20000acc 	.word	0x20000acc
 8001868:	20001d00 	.word	0x20001d00

0800186c <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 800186c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001870:	4770      	bx	lr

08001872 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001876:	6053      	str	r3, [r2, #4]
        return 0;
}
 8001878:	2000      	movs	r0, #0
 800187a:	4770      	bx	lr

0800187c <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 800187c:	2001      	movs	r0, #1
 800187e:	4770      	bx	lr

08001880 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8001880:	2000      	movs	r0, #0
 8001882:	4770      	bx	lr

08001884 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <USBD_CDC_DataIn+0x74>)
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001886:	b570      	push	{r4, r5, r6, lr}
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001888:	681b      	ldr	r3, [r3, #0]
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800188a:	4604      	mov	r4, r0
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 800188c:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <USBD_CDC_DataIn+0x78>)
 8001890:	429c      	cmp	r4, r3
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001892:	4606      	mov	r6, r0

  if(pdev == &hUSBDDevice) {
 8001894:	d12d      	bne.n	80018f2 <USBD_CDC_DataIn+0x6e>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <USBD_CDC_DataIn+0x7c>)
 8001898:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 800189c:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 80018a0:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 80018a2:	fa12 f181 	uxtah	r1, r2, r1
 80018a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80018aa:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 80018ae:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 80018b2:	1a8a      	subs	r2, r1, r2
 80018b4:	b292      	uxth	r2, r2
 80018b6:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 80018ba:	2200      	movs	r2, #0
 80018bc:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 80018c0:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 80018c4:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 80018c8:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
    TerminalState[index].outCount -= count;
    TerminalState[index].outSending = 0;

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 80018ca:	b289      	uxth	r1, r1
 80018cc:	461c      	mov	r4, r3
    count = TerminalState[index].outCount;
    if(count != 0) {
 80018ce:	b182      	cbz	r2, 80018f2 <USBD_CDC_DataIn+0x6e>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 80018d0:	188b      	adds	r3, r1, r2
 80018d2:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 80018d4:	bf88      	it	hi
 80018d6:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80018da:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 80018dc:	4421      	add	r1, r4
    if(count != 0) {
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
	count = TERMINALBUFFERSIZE - tail;
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80018de:	3186      	adds	r1, #134	; 0x86
 80018e0:	462a      	mov	r2, r5
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <USBD_CDC_DataIn+0x78>)
 80018e4:	f003 fad1 	bl	8004e8a <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <USBD_CDC_DataIn+0x78>)
 80018ea:	f003 fadc 	bl	8004ea6 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 80018ee:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 80018f2:	4630      	mov	r0, r6
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
 80018f6:	bf00      	nop
 80018f8:	200011d8 	.word	0x200011d8
 80018fc:	20000fb4 	.word	0x20000fb4
 8001900:	20000ad0 	.word	0x20000ad0

08001904 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8001904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8001908:	4604      	mov	r4, r0

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 800190a:	b085      	sub	sp, #20
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 800190c:	b9e8      	cbnz	r0, 800194a <CmdStats+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190e:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001910:	480f      	ldr	r0, [pc, #60]	; (8001950 <CmdStats+0x4c>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001912:	4621      	mov	r1, r4
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001914:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8001918:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
 800191c:	f8d0 9118 	ldr.w	r9, [r0, #280]	; 0x118
 8001920:	f8d0 811c 	ldr.w	r8, [r0, #284]	; 0x11c
 8001924:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001928:	2214      	movs	r2, #20
 800192a:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800192e:	f004 fa07 	bl	8005d40 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001932:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <CmdStats+0x50>)
 8001936:	f8cd 9000 	str.w	r9, [sp]
 800193a:	f8cd 8004 	str.w	r8, [sp, #4]
 800193e:	9702      	str	r7, [sp, #8]
 8001940:	4621      	mov	r1, r4
 8001942:	4632      	mov	r2, r6
 8001944:	462b      	mov	r3, r5
 8001946:	f004 fa49 	bl	8005ddc <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 800194a:	b005      	add	sp, #20
 800194c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001950:	20000ad0 	.word	0x20000ad0
 8001954:	0800b0e9 	.word	0x0800b0e9

08001958 <TerminalInit>:
/* Private functions */
uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len);
uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len);

void TerminalInit(void)
{
 8001958:	b510      	push	{r4, lr}
#ifdef USE_UART
  GPIO_InitTypeDef  GPIO_InitStruct;
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
 800195a:	4c17      	ldr	r4, [pc, #92]	; (80019b8 <TerminalInit+0x60>)
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	2100      	movs	r1, #0
 8001960:	6858      	ldr	r0, [r3, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	460b      	mov	r3, r1
 8001966:	f004 fa91 	bl	8005e8c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	2100      	movs	r1, #0
 800196e:	6898      	ldr	r0, [r3, #8]
 8001970:	2202      	movs	r2, #2
 8001972:	460b      	mov	r3, r1
 8001974:	f004 fa8a 	bl	8005e8c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8001978:	6823      	ldr	r3, [r4, #0]
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 800197a:	4c10      	ldr	r4, [pc, #64]	; (80019bc <TerminalInit+0x64>)
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
 800197c:	68d8      	ldr	r0, [r3, #12]
 800197e:	2100      	movs	r1, #0
 8001980:	460b      	mov	r3, r1
 8001982:	2202      	movs	r2, #2
 8001984:	f004 fa82 	bl	8005e8c <setvbuf>
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001988:	4620      	mov	r0, r4
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <TerminalInit+0x68>)
 800198c:	2200      	movs	r2, #0
 800198e:	f002 fe99 	bl	80046c4 <USBD_Init>
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
 8001992:	490c      	ldr	r1, [pc, #48]	; (80019c4 <TerminalInit+0x6c>)
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <TerminalInit+0x70>)
 8001996:	694a      	ldr	r2, [r1, #20]
 8001998:	601a      	str	r2, [r3, #0]
  USBD_CDC.DataIn = USBD_CDC_DataIn;
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 800199a:	4620      	mov	r0, r4
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <TerminalInit+0x74>)
 800199e:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80019a0:	f002 fea5 	bl	80046ee <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 80019a4:	4620      	mov	r0, r4
 80019a6:	490a      	ldr	r1, [pc, #40]	; (80019d0 <TerminalInit+0x78>)
 80019a8:	f003 fa68 	bl	8004e7c <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 80019ac:	4620      	mov	r0, r4
#endif

}
 80019ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 80019b2:	f002 bea3 	b.w	80046fc <USBD_Start>
 80019b6:	bf00      	nop
 80019b8:	20000630 	.word	0x20000630
 80019bc:	20000fb4 	.word	0x20000fb4
 80019c0:	20000130 	.word	0x20000130
 80019c4:	20000064 	.word	0x20000064
 80019c8:	200011d8 	.word	0x200011d8
 80019cc:	08001885 	.word	0x08001885
 80019d0:	20000170 	.word	0x20000170

080019d4 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d6:	b672      	cpsid	i
 80019d8:	440a      	add	r2, r1
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 80019da:	460e      	mov	r6, r1
 80019dc:	4f0f      	ldr	r7, [pc, #60]	; (8001a1c <TerminalRead+0x48>)
 80019de:	f44f 7592 	mov.w	r5, #292	; 0x124
 80019e2:	4345      	muls	r5, r0
 80019e4:	197c      	adds	r4, r7, r5
 80019e6:	3480      	adds	r4, #128	; 0x80
 80019e8:	88a3      	ldrh	r3, [r4, #4]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	ebc1 0e06 	rsb	lr, r1, r6
 80019f0:	b183      	cbz	r3, 8001a14 <TerminalRead+0x40>
 80019f2:	4296      	cmp	r6, r2
 80019f4:	d00e      	beq.n	8001a14 <TerminalRead+0x40>
    tail   = TerminalState[index].inTail;
 80019f6:	8863      	ldrh	r3, [r4, #2]
 80019f8:	b29b      	uxth	r3, r3
    *ptr++ = TerminalState[index].inBuffer[tail];
 80019fa:	441d      	add	r5, r3
    TerminalState[index].inTail = TERMINALINCR(tail);
 80019fc:	3301      	adds	r3, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 80019fe:	5d7d      	ldrb	r5, [r7, r5]
 8001a00:	f806 5b01 	strb.w	r5, [r6], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a08:	8063      	strh	r3, [r4, #2]
    TerminalState[index].inCount--;
 8001a0a:	88a3      	ldrh	r3, [r4, #4]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	80a3      	strh	r3, [r4, #4]
 8001a12:	e7e3      	b.n	80019dc <TerminalRead+0x8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001a14:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8001a16:	4670      	mov	r0, lr
 8001a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000ad0 	.word	0x20000ad0

08001a20 <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8001a20:	4611      	mov	r1, r2
 8001a22:	2000      	movs	r0, #0
 8001a24:	461a      	mov	r2, r3
 8001a26:	f7ff bfd5 	b.w	80019d4 <TerminalRead>

08001a2a <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 8001a2a:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f7ff ffd1 	bl	80019d4 <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 8001a32:	fab0 f080 	clz	r0, r0
 8001a36:	0940      	lsrs	r0, r0, #5
 8001a38:	bd08      	pop	{r3, pc}

08001a3a <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fff3 	bl	8001a2a <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 8001a44:	3000      	adds	r0, #0
 8001a46:	bf18      	it	ne
 8001a48:	2001      	movne	r0, #1
 8001a4a:	bd08      	pop	{r3, pc}

08001a4c <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4e:	4e37      	ldr	r6, [pc, #220]	; (8001b2c <TerminalOutputBufferWrite+0xe0>)
 8001a50:	f44f 7392 	mov.w	r3, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001a54:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001a56:	fb03 6300 	mla	r3, r3, r0, r6
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001a5a:	d906      	bls.n	8001a6a <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001a5c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001a60:	3201      	adds	r2, #1
 8001a62:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8001a66:	2001      	movs	r0, #1
 8001a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001a6a:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8001a6e:	fa12 f484 	uxtah	r4, r2, r4
 8001a72:	2c7f      	cmp	r4, #127	; 0x7f
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8001a74:	bf82      	ittt	hi
 8001a76:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8001a7a:	3401      	addhi	r4, #1
 8001a7c:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8001a80:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001a84:	fb03 6300 	mla	r3, r3, r0, r6
 8001a88:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8001a8c:	fa12 f484 	uxtah	r4, r2, r4
 8001a90:	2c7f      	cmp	r4, #127	; 0x7f
 8001a92:	d8f5      	bhi.n	8001a80 <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8001a96:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8001a9a:	4414      	add	r4, r2
 8001a9c:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 8001aa0:	440a      	add	r2, r1
  while((len != 0) 
 8001aa2:	4291      	cmp	r1, r2
 8001aa4:	d01c      	beq.n	8001ae0 <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001aa6:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001aaa:	fb03 6300 	mla	r3, r3, r0, r6
 8001aae:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8001ab2:	886c      	ldrh	r4, [r5, #2]
 8001ab4:	b2a4      	uxth	r4, r4
 8001ab6:	2c7f      	cmp	r4, #127	; 0x7f
 8001ab8:	d812      	bhi.n	8001ae0 <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8001aba:	f8b3 4106 	ldrh.w	r4, [r3, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8001abe:	f811 eb01 	ldrb.w	lr, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8001ac2:	b2a4      	uxth	r4, r4
 8001ac4:	f503 7780 	add.w	r7, r3, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8001ac8:	4423      	add	r3, r4
    TerminalState[index].outHead = TERMINALINCR(head);
 8001aca:	3401      	adds	r4, #1
 8001acc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8001ad0:	80fc      	strh	r4, [r7, #6]
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8001ad2:	f883 e086 	strb.w	lr, [r3, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
 8001ad6:	886b      	ldrh	r3, [r5, #2]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	806b      	strh	r3, [r5, #2]
 8001ade:	e7e0      	b.n	8001aa2 <TerminalOutputBufferWrite+0x56>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8001ae0:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001ae4:	fb03 6300 	mla	r3, r3, r0, r6
 8001ae8:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8001aec:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8001aee:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8001af2:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8001af4:	1953      	adds	r3, r2, r5
 8001af6:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8001af8:	bf88      	it	hi
 8001afa:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  }
  switch(index) {
 8001afe:	b990      	cbnz	r0, 8001b26 <TerminalOutputBufferWrite+0xda>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8001b00:	4f0b      	ldr	r7, [pc, #44]	; (8001b30 <TerminalOutputBufferWrite+0xe4>)
 8001b02:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d10d      	bne.n	8001b26 <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001b0a:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8001b0c:	1971      	adds	r1, r6, r5
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001b0e:	4638      	mov	r0, r7
 8001b10:	3186      	adds	r1, #134	; 0x86
 8001b12:	4622      	mov	r2, r4
 8001b14:	f003 f9b9 	bl	8004e8a <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8001b18:	4638      	mov	r0, r7
 8001b1a:	f003 f9c4 	bl	8004ea6 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8001b1e:	b910      	cbnz	r0, 8001b26 <TerminalOutputBufferWrite+0xda>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <TerminalOutputBufferWrite+0xe0>)
 8001b22:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001b26:	b662      	cpsie	i
 8001b28:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8001b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2c:	20000ad0 	.word	0x20000ad0
 8001b30:	20000fb4 	.word	0x20000fb4

08001b34 <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b36:	461d      	mov	r5, r3
 8001b38:	4614      	mov	r4, r2
 8001b3a:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8001b3c:	42bc      	cmp	r4, r7
 8001b3e:	4626      	mov	r6, r4
 8001b40:	d00f      	beq.n	8001b62 <_write_r+0x2e>
    if(*ptr == '\n') {
 8001b42:	7833      	ldrb	r3, [r6, #0]
 8001b44:	2b0a      	cmp	r3, #10
 8001b46:	f104 0401 	add.w	r4, r4, #1
 8001b4a:	d104      	bne.n	8001b56 <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4906      	ldr	r1, [pc, #24]	; (8001b68 <_write_r+0x34>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	f7ff ff7b 	bl	8001a4c <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8001b56:	4631      	mov	r1, r6
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff ff76 	bl	8001a4c <TerminalOutputBufferWrite>
 8001b60:	e7ec      	b.n	8001b3c <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8001b62:	4628      	mov	r0, r5
 8001b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	0800ae5f 	.word	0x0800ae5f

08001b6c <TerminalInputBufferWrite>:
  __enable_irq();
  return 0;
}

uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t head;

  /* Critical Section begin */
  //__disable_irq();
  /* Check that our block will fit, if not, return fail */
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001b6e:	4d1a      	ldr	r5, [pc, #104]	; (8001bd8 <TerminalInputBufferWrite+0x6c>)
 8001b70:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001b74:	fb03 5300 	mla	r3, r3, r0, r5
 8001b78:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 8001b7c:	fa12 f484 	uxtah	r4, r2, r4
 8001b80:	2c7f      	cmp	r4, #127	; 0x7f
 8001b82:	d906      	bls.n	8001b92 <TerminalInputBufferWrite+0x26>
    //__enable_irq();
    TerminalState[index].stats.receiveTooBig++;
 8001b84:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8001b88:	3201      	adds	r2, #1
 8001b8a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    return 1;
 8001b8e:	2001      	movs	r0, #1
 8001b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
 8001b92:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001b96:	4414      	add	r4, r2
 8001b98:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 8001b9c:	440a      	add	r2, r1
  while(len != 0) {
 8001b9e:	4291      	cmp	r1, r2
 8001ba0:	d017      	beq.n	8001bd2 <TerminalInputBufferWrite+0x66>
    head = TerminalState[index].inHead;
 8001ba2:	f44f 7492 	mov.w	r4, #292	; 0x124
 8001ba6:	4344      	muls	r4, r0
 8001ba8:	192f      	adds	r7, r5, r4
    TerminalState[index].inBuffer[head] = *p++;
 8001baa:	f811 eb01 	ldrb.w	lr, [r1], #1
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 8001bae:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001bb2:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8001bb4:	441c      	add	r4, r3
    TerminalState[index].inHead = TERMINALINCR(head);
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bbc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    TerminalState[index].inCount++;
 8001bc0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
    TerminalState[index].inBuffer[head] = *p++;
 8001bc4:	f805 e004 	strb.w	lr, [r5, r4]
    TerminalState[index].inHead = TERMINALINCR(head);
    TerminalState[index].inCount++;
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8001bd0:	e7e5      	b.n	8001b9e <TerminalInputBufferWrite+0x32>
    len--;
  }
  
  /* Critical section end */
  //__enable_irq();
  return 0;
 8001bd2:	2000      	movs	r0, #0
}
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000ad0 	.word	0x20000ad0

08001bdc <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8001bdc:	4801      	ldr	r0, [pc, #4]	; (8001be4 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001bde:	f001 bd0c 	b.w	80035fa <HAL_PCD_IRQHandler>
 8001be2:	bf00      	nop
 8001be4:	200011dc 	.word	0x200011dc

08001be8 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001be8:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <Uncompress+0x70>)

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001bec:	b08a      	sub	sp, #40	; 0x28
 8001bee:	4605      	mov	r5, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001bf0:	466a      	mov	r2, sp
 8001bf2:	f103 0620 	add.w	r6, r3, #32
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	6859      	ldr	r1, [r3, #4]
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	c403      	stmia	r4!, {r0, r1}
 8001bfe:	3308      	adds	r3, #8
 8001c00:	42b3      	cmp	r3, r6
 8001c02:	4622      	mov	r2, r4
 8001c04:	d1f7      	bne.n	8001bf6 <Uncompress+0xe>
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	889b      	ldrh	r3, [r3, #4]
 8001c0a:	6020      	str	r0, [r4, #0]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8001c0c:	4629      	mov	r1, r5
/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001c0e:	80a3      	strh	r3, [r4, #4]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8001c10:	f811 2b02 	ldrb.w	r2, [r1], #2
  data <<= 8;
  data |= (uint8_t)(*str++);
 8001c14:	786b      	ldrb	r3, [r5, #1]
 8001c16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  bits = 0;
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001c1a:	2200      	movs	r2, #0

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
  bits = 0;
 8001c1c:	4614      	mov	r4, r2
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001c1e:	f413 457c 	ands.w	r5, r3, #64512	; 0xfc00
 8001c22:	480e      	ldr	r0, [pc, #56]	; (8001c5c <Uncompress+0x74>)
 8001c24:	d014      	beq.n	8001c50 <Uncompress+0x68>
    data <<= 6;
 8001c26:	019b      	lsls	r3, r3, #6
    data &= 0x3fffff;
 8001c28:	f3c3 0315 	ubfx	r3, r3, #0, #22
    c = decoderRing[(data>>16)-1];
 8001c2c:	ad0a      	add	r5, sp, #40	; 0x28
 8001c2e:	eb05 4513 	add.w	r5, r5, r3, lsr #16
    buf[i++] = c;
 8001c32:	f815 5c29 	ldrb.w	r5, [r5, #-41]
 8001c36:	5485      	strb	r5, [r0, r2]
    /* keep track of how many bits we have used */
    bits += 6;
 8001c38:	1da0      	adds	r0, r4, #6
    //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
    /* Once we have consumed at least 8 bits, fill in the bottom */
    if(bits >= 8) {
 8001c3a:	2807      	cmp	r0, #7
      bits -= 8;
 8001c3c:	bf81      	itttt	hi
 8001c3e:	1ea0      	subhi	r0, r4, #2
      data |= ((uint32_t)(*str++)) << bits; 
 8001c40:	780c      	ldrbhi	r4, [r1, #0]
 8001c42:	4084      	lslhi	r4, r0
 8001c44:	4323      	orrhi	r3, r4
 8001c46:	bf88      	it	hi
 8001c48:	3101      	addhi	r1, #1
 8001c4a:	3201      	adds	r2, #1
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	e7e6      	b.n	8001c1e <Uncompress+0x36>
    }
  }
  buf[i]='\0';
 8001c50:	5485      	strb	r5, [r0, r2]
  return buf;
}
 8001c52:	b00a      	add	sp, #40	; 0x28
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
 8001c56:	bf00      	nop
 8001c58:	0800b193 	.word	0x0800b193
 8001c5c:	20000bf4 	.word	0x20000bf4

08001c60 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001c60:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8001c62:	4604      	mov	r4, r0
 8001c64:	b300      	cbz	r0, 8001ca8 <DecodeReadRegister+0x48>
  if(r == NULL) return 0;
 8001c66:	b301      	cbz	r1, 8001caa <DecodeReadRegister+0x4a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001c68:	798d      	ldrb	r5, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8001c6a:	888a      	ldrh	r2, [r1, #4]
 8001c6c:	6843      	ldr	r3, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8001c6e:	2d10      	cmp	r5, #16
 8001c70:	d005      	beq.n	8001c7e <DecodeReadRegister+0x1e>
 8001c72:	2d20      	cmp	r5, #32
 8001c74:	d005      	beq.n	8001c82 <DecodeReadRegister+0x22>
 8001c76:	2d08      	cmp	r5, #8
 8001c78:	d105      	bne.n	8001c86 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8001c7a:	5cd0      	ldrb	r0, [r2, r3]
    break;
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
  case 16:
    val = *(uint16_t *)address;
 8001c7e:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001c80:	bd38      	pop	{r3, r4, r5, pc}
  case 32:
    val = *(uint32_t *)address;
 8001c82:	58d0      	ldr	r0, [r2, r3]
    break;
 8001c84:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 8001c86:	6808      	ldr	r0, [r1, #0]
 8001c88:	f7ff ffae 	bl	8001be8 <Uncompress>
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <DecodeReadRegister+0x50>)
 8001c92:	f004 f8a3 	bl	8005ddc <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 8001c96:	6820      	ldr	r0, [r4, #0]
 8001c98:	f7ff ffa6 	bl	8001be8 <Uncompress>
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <DecodeReadRegister+0x54>)
 8001ca0:	f004 f89c 	bl	8005ddc <printf>
	   Uncompress(p->name));
    return 0;
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	bd38      	pop	{r3, r4, r5, pc}
 8001ca8:	bd38      	pop	{r3, r4, r5, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 8001caa:	4608      	mov	r0, r1
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001cac:	bd38      	pop	{r3, r4, r5, pc}
 8001cae:	bf00      	nop
 8001cb0:	0800b1b9 	.word	0x0800b1b9
 8001cb4:	0800b1db 	.word	0x0800b1db

08001cb8 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8001cb8:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8001cba:	4605      	mov	r5, r0
 8001cbc:	b1f8      	cbz	r0, 8001cfe <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8001cbe:	b1f1      	cbz	r1, 8001cfe <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001cc0:	798c      	ldrb	r4, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8001cc2:	8888      	ldrh	r0, [r1, #4]
 8001cc4:	686b      	ldr	r3, [r5, #4]

  /* read register according to size */
  switch(r->size) {
 8001cc6:	2c10      	cmp	r4, #16
 8001cc8:	d005      	beq.n	8001cd6 <DecodeWriteRegister+0x1e>
 8001cca:	2c20      	cmp	r4, #32
 8001ccc:	d005      	beq.n	8001cda <DecodeWriteRegister+0x22>
 8001cce:	2c08      	cmp	r4, #8
 8001cd0:	d106      	bne.n	8001ce0 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8001cd2:	54c2      	strb	r2, [r0, r3]
 8001cd4:	e002      	b.n	8001cdc <DecodeWriteRegister+0x24>
    break;
  case 16:
    *(uint16_t *)address = val;
 8001cd6:	52c2      	strh	r2, [r0, r3]
 8001cd8:	e000      	b.n	8001cdc <DecodeWriteRegister+0x24>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8001cda:	50c2      	str	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8001cdc:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 8001cde:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 8001ce0:	6808      	ldr	r0, [r1, #0]
 8001ce2:	f7ff ff81 	bl	8001be8 <Uncompress>
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <DecodeWriteRegister+0x4c>)
 8001cec:	f004 f876 	bl	8005ddc <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 8001cf0:	6828      	ldr	r0, [r5, #0]
 8001cf2:	f7ff ff79 	bl	8001be8 <Uncompress>
 8001cf6:	4601      	mov	r1, r0
 8001cf8:	4803      	ldr	r0, [pc, #12]	; (8001d08 <DecodeWriteRegister+0x50>)
 8001cfa:	f004 f86f 	bl	8005ddc <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 8001cfe:	2001      	movs	r0, #1
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 8001d00:	bd38      	pop	{r3, r4, r5, pc}
 8001d02:	bf00      	nop
 8001d04:	0800b1b9 	.word	0x0800b1b9
 8001d08:	0800b1db 	.word	0x0800b1db

08001d0c <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8001d0c:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8001d0e:	4604      	mov	r4, r0
  return 0;
}

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8001d10:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 8001d12:	b1c8      	cbz	r0, 8001d48 <DecodeField+0x3c>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001d14:	7943      	ldrb	r3, [r0, #5]
 8001d16:	2501      	movs	r5, #1
 8001d18:	409d      	lsls	r5, r3
 8001d1a:	7903      	ldrb	r3, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001d1c:	6800      	ldr	r0, [r0, #0]
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001d1e:	40d9      	lsrs	r1, r3
 8001d20:	3d01      	subs	r5, #1
 8001d22:	400d      	ands	r5, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001d24:	f7ff ff60 	bl	8001be8 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8001d28:	7962      	ldrb	r2, [r4, #5]
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <DecodeField+0x40>)
 8001d2c:	4601      	mov	r1, r0
 8001d2e:	4808      	ldr	r0, [pc, #32]	; (8001d50 <DecodeField+0x44>)
 8001d30:	2a01      	cmp	r2, #1
 8001d32:	bf98      	it	ls
 8001d34:	4603      	movls	r3, r0
 8001d36:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001d3a:	7923      	ldrb	r3, [r4, #4]
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <DecodeField+0x48>)
 8001d40:	462a      	mov	r2, r5
 8001d42:	462b      	mov	r3, r5
 8001d44:	f004 f84a 	bl	8005ddc <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8001d48:	b005      	add	sp, #20
 8001d4a:	bd30      	pop	{r4, r5, pc}
 8001d4c:	0800b1ee 	.word	0x0800b1ee
 8001d50:	0800b1f4 	.word	0x0800b1f4
 8001d54:	0800b1fa 	.word	0x0800b1fa

08001d58 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d5a:	460f      	mov	r7, r1
 8001d5c:	4616      	mov	r6, r2
 8001d5e:	461d      	mov	r5, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001d60:	4604      	mov	r4, r0
 8001d62:	b310      	cbz	r0, 8001daa <DecodeRegister+0x52>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001d64:	6800      	ldr	r0, [r0, #0]
 8001d66:	f7ff ff3f 	bl	8001be8 <Uncompress>
 8001d6a:	79a3      	ldrb	r3, [r4, #6]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	88a3      	ldrh	r3, [r4, #4]
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001d70:	443b      	add	r3, r7
  uint32_t i;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001d72:	4601      	mov	r1, r0
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	480e      	ldr	r0, [pc, #56]	; (8001db0 <DecodeRegister+0x58>)
 8001d78:	4632      	mov	r2, r6
 8001d7a:	4633      	mov	r3, r6
 8001d7c:	f004 f82e 	bl	8005ddc <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001d80:	68a7      	ldr	r7, [r4, #8]
 8001d82:	b15f      	cbz	r7, 8001d9c <DecodeRegister+0x44>
 8001d84:	b18d      	cbz	r5, 8001daa <DecodeRegister+0x52>
 8001d86:	2500      	movs	r5, #0
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	429d      	cmp	r5, r3
 8001d8c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8001d90:	d205      	bcs.n	8001d9e <DecodeRegister+0x46>
      DecodeField(f,val);
 8001d92:	4631      	mov	r1, r6
 8001d94:	f7ff ffba 	bl	8001d0c <DecodeField>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8001d98:	3501      	adds	r5, #1
 8001d9a:	e7f5      	b.n	8001d88 <DecodeRegister+0x30>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
 8001d9c:	b12d      	cbz	r5, 8001daa <DecodeRegister+0x52>
    printf("\n");
 8001d9e:	200a      	movs	r0, #10
  }

}
 8001da0:	b003      	add	sp, #12
 8001da2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8001da6:	f004 b82d 	b.w	8005e04 <putchar>
  }

}
 8001daa:	b003      	add	sp, #12
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	0800b223 	.word	0x0800b223

08001db4 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001db8:	4688      	mov	r8, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8001dba:	4604      	mov	r4, r0
 8001dbc:	b1e8      	cbz	r0, 8001dfa <DecodePeripheral+0x46>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001dbe:	6800      	ldr	r0, [r0, #0]
 8001dc0:	f7ff ff12 	bl	8001be8 <Uncompress>
 8001dc4:	6862      	ldr	r2, [r4, #4]
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <DecodePeripheral+0x4c>)
 8001dca:	f004 f807 	bl	8005ddc <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001dce:	68a7      	ldr	r7, [r4, #8]
 8001dd0:	b90f      	cbnz	r7, 8001dd6 <DecodePeripheral+0x22>
 8001dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dd6:	2500      	movs	r5, #0
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 8001dd8:	89a3      	ldrh	r3, [r4, #12]
 8001dda:	429d      	cmp	r5, r3
 8001ddc:	eb07 1605 	add.w	r6, r7, r5, lsl #4
 8001de0:	d20b      	bcs.n	8001dfa <DecodePeripheral+0x46>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8001de2:	4631      	mov	r1, r6
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff ff3b 	bl	8001c60 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8001dea:	6861      	ldr	r1, [r4, #4]
  /* Dump out registers */
  if(p->registers != NULL) {
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8001dec:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8001dee:	4643      	mov	r3, r8
 8001df0:	4630      	mov	r0, r6
 8001df2:	f7ff ffb1 	bl	8001d58 <DecodeRegister>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 8001df6:	3501      	adds	r5, #1
 8001df8:	e7ee      	b.n	8001dd8 <DecodePeripheral+0x24>
 8001dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800b25e 	.word	0x0800b25e

08001e04 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8001e08:	2009      	movs	r0, #9
 8001e0a:	f003 fffb 	bl	8005e04 <putchar>

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 8001e0e:	2408      	movs	r4, #8
  printf("\t");
  for(; p->name != NULL; p++) {
 8001e10:	6828      	ldr	r0, [r5, #0]
 8001e12:	b1a0      	cbz	r0, 8001e3e <DecodePrintPeripherals+0x3a>
    col += printf("%s",Uncompress(p->name));
 8001e14:	f7ff fee8 	bl	8001be8 <Uncompress>
 8001e18:	4601      	mov	r1, r0
 8001e1a:	4809      	ldr	r0, [pc, #36]	; (8001e40 <DecodePrintPeripherals+0x3c>)
 8001e1c:	f003 ffde 	bl	8005ddc <printf>
    if((p+1)->name != NULL) {
 8001e20:	692b      	ldr	r3, [r5, #16]
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8001e22:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8001e24:	b14b      	cbz	r3, 8001e3a <DecodePrintPeripherals+0x36>
      col += printf(", ");
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <DecodePrintPeripherals+0x40>)
 8001e28:	f003 ffd8 	bl	8005ddc <printf>
 8001e2c:	4404      	add	r4, r0
      if(col > 70) {
 8001e2e:	2c46      	cmp	r4, #70	; 0x46
 8001e30:	d903      	bls.n	8001e3a <DecodePrintPeripherals+0x36>
	col = 8;
	printf("\n\t");
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <DecodePrintPeripherals+0x44>)
 8001e34:	f003 ffd2 	bl	8005ddc <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8001e38:	2408      	movs	r4, #8
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
 8001e3a:	3510      	adds	r5, #16
 8001e3c:	e7e8      	b.n	8001e10 <DecodePrintPeripherals+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
 8001e40:	0800b1d8 	.word	0x0800b1d8
 8001e44:	0800b1f7 	.word	0x0800b1f7
 8001e48:	0800b286 	.word	0x0800b286

08001e4c <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001e50:	2009      	movs	r0, #9
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001e52:	460d      	mov	r5, r1
  uint8_t col;
  col = 8;
  printf("\t");
 8001e54:	f003 ffd6 	bl	8005e04 <putchar>
 8001e58:	3d01      	subs	r5, #1
 8001e5a:	3610      	adds	r6, #16
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
  uint8_t col;
  col = 8;
 8001e5c:	2408      	movs	r4, #8
  printf("\t");
  while(count--) {
 8001e5e:	1c6b      	adds	r3, r5, #1
 8001e60:	d018      	beq.n	8001e94 <DecodePrintRegisters+0x48>
    col += printf("%s",Uncompress(r->name));
 8001e62:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8001e66:	f7ff febf 	bl	8001be8 <Uncompress>
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	480a      	ldr	r0, [pc, #40]	; (8001e98 <DecodePrintRegisters+0x4c>)
 8001e6e:	f003 ffb5 	bl	8005ddc <printf>
 8001e72:	4420      	add	r0, r4
 8001e74:	b2c4      	uxtb	r4, r0
    if(count) {
 8001e76:	b155      	cbz	r5, 8001e8e <DecodePrintRegisters+0x42>
      col += printf(", ");
 8001e78:	4808      	ldr	r0, [pc, #32]	; (8001e9c <DecodePrintRegisters+0x50>)
 8001e7a:	f003 ffaf 	bl	8005ddc <printf>
 8001e7e:	4420      	add	r0, r4
 8001e80:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8001e82:	2c46      	cmp	r4, #70	; 0x46
 8001e84:	d903      	bls.n	8001e8e <DecodePrintRegisters+0x42>
	col = 8;
	printf("\n\t");
 8001e86:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <DecodePrintRegisters+0x54>)
 8001e88:	f003 ffa8 	bl	8005ddc <printf>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
    if(count) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8001e8c:	2408      	movs	r4, #8
 8001e8e:	3d01      	subs	r5, #1
 8001e90:	3610      	adds	r6, #16
 8001e92:	e7e4      	b.n	8001e5e <DecodePrintRegisters+0x12>
	printf("\n\t");
      }
    }
    r++;
  }
}
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
 8001e96:	bf00      	nop
 8001e98:	0800b1d8 	.word	0x0800b1d8
 8001e9c:	0800b1f7 	.word	0x0800b1f7
 8001ea0:	0800b286 	.word	0x0800b286

08001ea4 <CmdDecode>:

void CmdDecode(int mode)
{
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8001ea6:	2802      	cmp	r0, #2
    r++;
  }
}

void CmdDecode(int mode)
{
 8001ea8:	b085      	sub	sp, #20
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8001eaa:	d131      	bne.n	8001f10 <CmdDecode+0x6c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8001eac:	a803      	add	r0, sp, #12
 8001eae:	f7ff fc2f 	bl	8001710 <fetch_string_arg>
    if(rc) {
 8001eb2:	b138      	cbz	r0, 8001ec4 <CmdDecode+0x20>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8001eb4:	4888      	ldr	r0, [pc, #544]	; (80020d8 <CmdDecode+0x234>)
 8001eb6:	f003 ffe1 	bl	8005e7c <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8001eba:	4888      	ldr	r0, [pc, #544]	; (80020dc <CmdDecode+0x238>)
 8001ebc:	f7ff ffa2 	bl	8001e04 <DecodePrintPeripherals>
      printf("\n\n"
 8001ec0:	4887      	ldr	r0, [pc, #540]	; (80020e0 <CmdDecode+0x23c>)
 8001ec2:	e022      	b.n	8001f0a <CmdDecode+0x66>
 8001ec4:	4c85      	ldr	r4, [pc, #532]	; (80020dc <CmdDecode+0x238>)
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8001ec6:	6820      	ldr	r0, [r4, #0]
 8001ec8:	b948      	cbnz	r0, 8001ede <CmdDecode+0x3a>
	p++;
      }

      if(p->name == NULL) {
 8001eca:	6820      	ldr	r0, [r4, #0]
 8001ecc:	b990      	cbnz	r0, 8001ef4 <CmdDecode+0x50>
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8001ece:	9903      	ldr	r1, [sp, #12]
 8001ed0:	4884      	ldr	r0, [pc, #528]	; (80020e4 <CmdDecode+0x240>)
 8001ed2:	f003 ff83 	bl	8005ddc <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
 8001ed6:	4881      	ldr	r0, [pc, #516]	; (80020dc <CmdDecode+0x238>)
 8001ed8:	f7ff ff94 	bl	8001e04 <DecodePrintPeripherals>
	return;
 8001edc:	e0f9      	b.n	80020d2 <CmdDecode+0x22e>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8001ede:	9d03      	ldr	r5, [sp, #12]
 8001ee0:	f7ff fe82 	bl	8001be8 <Uncompress>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	f004 f84c 	bl	8005f84 <strcasecmp>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d0ec      	beq.n	8001eca <CmdDecode+0x26>
	p++;
 8001ef0:	3410      	adds	r4, #16
 8001ef2:	e7e8      	b.n	8001ec6 <CmdDecode+0x22>
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
	return;
      }
      printf("Valid registers for peripheral %s:\n"
 8001ef4:	f7ff fe78 	bl	8001be8 <Uncompress>
 8001ef8:	4601      	mov	r1, r0
 8001efa:	487b      	ldr	r0, [pc, #492]	; (80020e8 <CmdDecode+0x244>)
 8001efc:	f003 ff6e 	bl	8005ddc <printf>
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
 8001f00:	68a0      	ldr	r0, [r4, #8]
 8001f02:	89a1      	ldrh	r1, [r4, #12]
 8001f04:	f7ff ffa2 	bl	8001e4c <DecodePrintRegisters>
      printf("\n\n");
 8001f08:	4878      	ldr	r0, [pc, #480]	; (80020ec <CmdDecode+0x248>)
 8001f0a:	f003 ffb7 	bl	8005e7c <puts>
 8001f0e:	e0e0      	b.n	80020d2 <CmdDecode+0x22e>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8001f10:	4668      	mov	r0, sp
 8001f12:	f7ff fbfd 	bl	8001710 <fetch_string_arg>
  if(rc) {
 8001f16:	b118      	cbz	r0, 8001f20 <CmdDecode+0x7c>
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8001f18:	4875      	ldr	r0, [pc, #468]	; (80020f0 <CmdDecode+0x24c>)
 8001f1a:	f003 ffaf 	bl	8005e7c <puts>
 8001f1e:	e014      	b.n	8001f4a <CmdDecode+0xa6>
 8001f20:	4c6e      	ldr	r4, [pc, #440]	; (80020dc <CmdDecode+0x238>)
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	b930      	cbnz	r0, 8001f34 <CmdDecode+0x90>
    p++;
  }

  if(p->name == NULL) {
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	b99b      	cbnz	r3, 8001f52 <CmdDecode+0xae>
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8001f2a:	9900      	ldr	r1, [sp, #0]
 8001f2c:	4871      	ldr	r0, [pc, #452]	; (80020f4 <CmdDecode+0x250>)
 8001f2e:	f003 ff55 	bl	8005ddc <printf>
 8001f32:	e00a      	b.n	8001f4a <CmdDecode+0xa6>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8001f34:	9d00      	ldr	r5, [sp, #0]
 8001f36:	f7ff fe57 	bl	8001be8 <Uncompress>
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f004 f821 	bl	8005f84 <strcasecmp>
 8001f42:	2800      	cmp	r0, #0
 8001f44:	d0ef      	beq.n	8001f26 <CmdDecode+0x82>
    p++;
 8001f46:	3410      	adds	r4, #16
 8001f48:	e7eb      	b.n	8001f22 <CmdDecode+0x7e>

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
	   pname);
    DecodePrintPeripherals(Peripherals);
 8001f4a:	4864      	ldr	r0, [pc, #400]	; (80020dc <CmdDecode+0x238>)
 8001f4c:	f7ff ff5a 	bl	8001e04 <DecodePrintPeripherals>
 8001f50:	e7da      	b.n	8001f08 <CmdDecode+0x64>
    printf("\n\n");
    return;
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8001f52:	a801      	add	r0, sp, #4
 8001f54:	f7ff fbdc 	bl	8001710 <fetch_string_arg>
  if(rc) {
 8001f58:	b110      	cbz	r0, 8001f60 <CmdDecode+0xbc>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	e017      	b.n	8001f90 <CmdDecode+0xec>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8001f60:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 8001f62:	89a7      	ldrh	r7, [r4, #12]
 8001f64:	9e01      	ldr	r6, [sp, #4]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8001f66:	b157      	cbz	r7, 8001f7e <CmdDecode+0xda>
 8001f68:	6828      	ldr	r0, [r5, #0]
 8001f6a:	f7ff fe3d 	bl	8001be8 <Uncompress>
 8001f6e:	4601      	mov	r1, r0
 8001f70:	4630      	mov	r0, r6
 8001f72:	f004 f807 	bl	8005f84 <strcasecmp>
 8001f76:	3f01      	subs	r7, #1
 8001f78:	b168      	cbz	r0, 8001f96 <CmdDecode+0xf2>
    r++;
 8001f7a:	3510      	adds	r5, #16
 8001f7c:	e7f2      	b.n	8001f64 <CmdDecode+0xc0>
  }

  if(i == -1) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 8001f7e:	4630      	mov	r0, r6
 8001f80:	495d      	ldr	r1, [pc, #372]	; (80020f8 <CmdDecode+0x254>)
 8001f82:	f003 ffff 	bl	8005f84 <strcasecmp>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	f040 809a 	bne.w	80020c0 <CmdDecode+0x21c>
      DecodePeripheral(p,1);
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f7ff ff10 	bl	8001db4 <DecodePeripheral>
      return;
 8001f94:	e09d      	b.n	80020d2 <CmdDecode+0x22e>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8001f96:	a802      	add	r0, sp, #8
 8001f98:	f7ff fbba 	bl	8001710 <fetch_string_arg>
  if(rc == 0) {
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	f040 8083 	bne.w	80020a8 <CmdDecode+0x204>
    /* if the user says 'val', decode the value given, as if it came
     * from the named register.
     */
    if(strcasecmp(fname,"val") == 0) {
 8001fa2:	9802      	ldr	r0, [sp, #8]
 8001fa4:	4955      	ldr	r1, [pc, #340]	; (80020fc <CmdDecode+0x258>)
 8001fa6:	f003 ffed 	bl	8005f84 <strcasecmp>
 8001faa:	b948      	cbnz	r0, 8001fc0 <CmdDecode+0x11c>
      rc = fetch_uint32_arg(&val);
 8001fac:	a803      	add	r0, sp, #12
 8001fae:	f7ff fb9b 	bl	80016e8 <fetch_uint32_arg>
      if(rc) {
 8001fb2:	b108      	cbz	r0, 8001fb8 <CmdDecode+0x114>
	printf("Missing value to use in decode\n");
 8001fb4:	4852      	ldr	r0, [pc, #328]	; (8002100 <CmdDecode+0x25c>)
 8001fb6:	e7a8      	b.n	8001f0a <CmdDecode+0x66>
	return;
      }
      DecodeRegister(r,p->base,val,1);
 8001fb8:	4628      	mov	r0, r5
 8001fba:	6861      	ldr	r1, [r4, #4]
 8001fbc:	9a03      	ldr	r2, [sp, #12]
 8001fbe:	e07b      	b.n	80020b8 <CmdDecode+0x214>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
 8001fc0:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8001fc2:	6830      	ldr	r0, [r6, #0]
 8001fc4:	b910      	cbnz	r0, 8001fcc <CmdDecode+0x128>
      f++;
    }
    if(f->name != NULL) {
 8001fc6:	6837      	ldr	r7, [r6, #0]
 8001fc8:	b95f      	cbnz	r7, 8001fe2 <CmdDecode+0x13e>
 8001fca:	e046      	b.n	800205a <CmdDecode+0x1b6>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8001fcc:	9f02      	ldr	r7, [sp, #8]
 8001fce:	f7ff fe0b 	bl	8001be8 <Uncompress>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	f003 ffd5 	bl	8005f84 <strcasecmp>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d0f3      	beq.n	8001fc6 <CmdDecode+0x122>
      f++;
 8001fde:	3608      	adds	r6, #8
 8001fe0:	e7ef      	b.n	8001fc2 <CmdDecode+0x11e>
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8001fe2:	a803      	add	r0, sp, #12
 8001fe4:	f7ff fb80 	bl	80016e8 <fetch_uint32_arg>
      if(rc) {
 8001fe8:	b128      	cbz	r0, 8001ff6 <CmdDecode+0x152>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8001fea:	6828      	ldr	r0, [r5, #0]
 8001fec:	f7ff fdfc 	bl	8001be8 <Uncompress>
 8001ff0:	4601      	mov	r1, r0
 8001ff2:	4844      	ldr	r0, [pc, #272]	; (8002104 <CmdDecode+0x260>)
 8001ff4:	e040      	b.n	8002078 <CmdDecode+0x1d4>
	       Uncompress(r->name));
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7ff fe31 	bl	8001c60 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 8001ffe:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 8002000:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8002004:	9903      	ldr	r1, [sp, #12]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8002006:	2301      	movs	r3, #1
 8002008:	4093      	lsls	r3, r2

      oval = (t >> f->offset) & m; /* Save old value */
 800200a:	fa20 f70e 	lsr.w	r7, r0, lr
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 800200e:	3b01      	subs	r3, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8002010:	fa03 f20e 	lsl.w	r2, r3, lr
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 8002014:	401f      	ands	r7, r3

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8002016:	400b      	ands	r3, r1
 8002018:	fa03 f30e 	lsl.w	r3, r3, lr
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 800201c:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 8002020:	431a      	orrs	r2, r3
 8002022:	4629      	mov	r1, r5
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff fe47 	bl	8001cb8 <DecodeWriteRegister>
      printf("%s.",
 800202a:	6820      	ldr	r0, [r4, #0]
 800202c:	f7ff fddc 	bl	8001be8 <Uncompress>
 8002030:	4601      	mov	r1, r0
 8002032:	4835      	ldr	r0, [pc, #212]	; (8002108 <CmdDecode+0x264>)
 8002034:	f003 fed2 	bl	8005ddc <printf>
	     Uncompress(p->name));
      printf("%s.",
 8002038:	6828      	ldr	r0, [r5, #0]
 800203a:	f7ff fdd5 	bl	8001be8 <Uncompress>
 800203e:	4601      	mov	r1, r0
 8002040:	4831      	ldr	r0, [pc, #196]	; (8002108 <CmdDecode+0x264>)
 8002042:	f003 fecb 	bl	8005ddc <printf>
	     Uncompress(r->name));
      printf("%s (%d) -> (%d)\n",
 8002046:	6830      	ldr	r0, [r6, #0]
 8002048:	f7ff fdce 	bl	8001be8 <Uncompress>
 800204c:	463a      	mov	r2, r7
 800204e:	4601      	mov	r1, r0
 8002050:	9b03      	ldr	r3, [sp, #12]
 8002052:	482e      	ldr	r0, [pc, #184]	; (800210c <CmdDecode+0x268>)
 8002054:	f003 fec2 	bl	8005ddc <printf>
	     Uncompress(f->name),
	     (unsigned)oval, (unsigned)val);
      return;
 8002058:	e03b      	b.n	80020d2 <CmdDecode+0x22e>

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 800205a:	f003 fe2d 	bl	8005cb8 <__errno>
    val = strtoul(fname,NULL,0);
 800205e:	4639      	mov	r1, r7
      return;

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 8002060:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002062:	463a      	mov	r2, r7
 8002064:	9802      	ldr	r0, [sp, #8]
 8002066:	f004 f909 	bl	800627c <strtoul>
 800206a:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 800206c:	f003 fe24 	bl	8005cb8 <__errno>
 8002070:	6803      	ldr	r3, [r0, #0]
 8002072:	b123      	cbz	r3, 800207e <CmdDecode+0x1da>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 8002074:	4826      	ldr	r0, [pc, #152]	; (8002110 <CmdDecode+0x26c>)
 8002076:	9902      	ldr	r1, [sp, #8]
 8002078:	f003 feb0 	bl	8005ddc <printf>
	     fname);
      return;
 800207c:	e029      	b.n	80020d2 <CmdDecode+0x22e>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 800207e:	9a03      	ldr	r2, [sp, #12]
 8002080:	4629      	mov	r1, r5
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff fe18 	bl	8001cb8 <DecodeWriteRegister>
    printf("%s.",
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	f7ff fdad 	bl	8001be8 <Uncompress>
 800208e:	4601      	mov	r1, r0
 8002090:	481d      	ldr	r0, [pc, #116]	; (8002108 <CmdDecode+0x264>)
 8002092:	f003 fea3 	bl	8005ddc <printf>
	   Uncompress(p->name));
    printf("%s = 0x%08x\n",
 8002096:	6828      	ldr	r0, [r5, #0]
 8002098:	f7ff fda6 	bl	8001be8 <Uncompress>
 800209c:	9a03      	ldr	r2, [sp, #12]
 800209e:	4601      	mov	r1, r0
 80020a0:	481c      	ldr	r0, [pc, #112]	; (8002114 <CmdDecode+0x270>)
 80020a2:	f003 fe9b 	bl	8005ddc <printf>
	   Uncompress(r->name),
	   (unsigned)val);
    return;
 80020a6:	e014      	b.n	80020d2 <CmdDecode+0x22e>

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 80020a8:	4629      	mov	r1, r5
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7ff fdd8 	bl	8001c60 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80020b0:	6861      	ldr	r1, [r4, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 80020b2:	9003      	str	r0, [sp, #12]
 80020b4:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 80020b6:	4628      	mov	r0, r5
 80020b8:	2301      	movs	r3, #1
 80020ba:	f7ff fe4d 	bl	8001d58 <DecodeRegister>

  return;
 80020be:	e008      	b.n	80020d2 <CmdDecode+0x22e>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	f7ff fd91 	bl	8001be8 <Uncompress>
 80020c6:	4631      	mov	r1, r6
 80020c8:	4602      	mov	r2, r0
 80020ca:	4813      	ldr	r0, [pc, #76]	; (8002118 <CmdDecode+0x274>)
 80020cc:	f003 fe86 	bl	8005ddc <printf>
 80020d0:	e716      	b.n	8001f00 <CmdDecode+0x5c>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 80020d2:	b005      	add	sp, #20
 80020d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d6:	bf00      	nop
 80020d8:	0800b289 	.word	0x0800b289
 80020dc:	08014e20 	.word	0x08014e20
 80020e0:	0800b49c 	.word	0x0800b49c
 80020e4:	0800b4f1 	.word	0x0800b4f1
 80020e8:	0800b52c 	.word	0x0800b52c
 80020ec:	0800b5ba 	.word	0x0800b5ba
 80020f0:	0800b551 	.word	0x0800b551
 80020f4:	0800b580 	.word	0x0800b580
 80020f8:	0800b687 	.word	0x0800b687
 80020fc:	0800b5f9 	.word	0x0800b5f9
 8002100:	0800b5fd 	.word	0x0800b5fd
 8002104:	0800b61c 	.word	0x0800b61c
 8002108:	0800b647 	.word	0x0800b647
 800210c:	0800b64b 	.word	0x0800b64b
 8002110:	0800b65c 	.word	0x0800b65c
 8002114:	0800b67a 	.word	0x0800b67a
 8002118:	0800b5bc 	.word	0x0800b5bc

0800211c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800211c:	4915      	ldr	r1, [pc, #84]	; (8002174 <SystemInit+0x58>)
 800211e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002122:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <SystemInit+0x5c>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002134:	6858      	ldr	r0, [r3, #4]
 8002136:	4a11      	ldr	r2, [pc, #68]	; (800217c <SystemInit+0x60>)
 8002138:	4002      	ands	r2, r0
 800213a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002142:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002146:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800214e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002156:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215a:	f022 020f 	bic.w	r2, r2, #15
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002160:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <SystemInit+0x64>)
 8002164:	4002      	ands	r2, r0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800216c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002170:	608b      	str	r3, [r1, #8]
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00
 8002178:	40021000 	.word	0x40021000
 800217c:	f87fc00c 	.word	0xf87fc00c
 8002180:	ff00fccc 	.word	0xff00fccc

08002184 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	6803      	ldr	r3, [r0, #0]
 8002188:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218c:	d404      	bmi.n	8002198 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	079f      	lsls	r7, r3, #30
 8002192:	f100 80c6 	bmi.w	8002322 <HAL_RCC_OscConfig+0x19e>
 8002196:	e157      	b.n	8002448 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002198:	4dc1      	ldr	r5, [pc, #772]	; (80024a0 <HAL_RCC_OscConfig+0x31c>)
 800219a:	686b      	ldr	r3, [r5, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d007      	beq.n	80021b4 <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a4:	686b      	ldr	r3, [r5, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d127      	bne.n	80021fe <HAL_RCC_OscConfig+0x7a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ae:	686b      	ldr	r3, [r5, #4]
 80021b0:	03de      	lsls	r6, r3, #15
 80021b2:	d524      	bpl.n	80021fe <HAL_RCC_OscConfig+0x7a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021b8:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80021c0:	f043 0320 	orr.w	r3, r3, #32
 80021c4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4c>
 80021cc:	6829      	ldr	r1, [r5, #0]
 80021ce:	e004      	b.n	80021da <HAL_RCC_OscConfig+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021de:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	2201      	movs	r2, #1
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	420b      	tst	r3, r1
 80021f2:	d0cc      	beq.n	800218e <HAL_RCC_OscConfig+0xa>
 80021f4:	6863      	ldr	r3, [r4, #4]
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d0c9      	beq.n	800218e <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 80021fa:	2001      	movs	r0, #1
 80021fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80021fe:	4ea9      	ldr	r6, [pc, #676]	; (80024a4 <HAL_RCC_OscConfig+0x320>)
 8002200:	2300      	movs	r3, #0
 8002202:	7033      	strb	r3, [r6, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002204:	f000 fc8e 	bl	8002b24 <HAL_GetTick>
 8002208:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800220e:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002212:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0xa2>
 8002222:	6829      	ldr	r1, [r5, #0]
 8002224:	e004      	b.n	8002230 <HAL_RCC_OscConfig+0xac>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800222a:	fab2 f282 	clz	r2, r2
 800222e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002234:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	2201      	movs	r2, #1
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	420b      	tst	r3, r1
 8002248:	d008      	beq.n	800225c <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800224a:	f000 fc6b 	bl	8002b24 <HAL_GetTick>
 800224e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002252:	1bc0      	subs	r0, r0, r7
 8002254:	4298      	cmp	r0, r3
 8002256:	d9d8      	bls.n	800220a <HAL_RCC_OscConfig+0x86>
        {
          return HAL_TIMEOUT;
 8002258:	2003      	movs	r0, #3
 800225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	7923      	ldrb	r3, [r4, #4]
 800225e:	7033      	strb	r3, [r6, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002260:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002262:	f023 020f 	bic.w	r2, r3, #15
 8002266:	68a3      	ldr	r3, [r4, #8]
 8002268:	4313      	orrs	r3, r2
 800226a:	62eb      	str	r3, [r5, #44]	; 0x2c

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 800226c:	6863      	ldr	r3, [r4, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d12b      	bne.n	80022ca <HAL_RCC_OscConfig+0x146>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002272:	f000 fc57 	bl	8002b24 <HAL_GetTick>
 8002276:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800227c:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002280:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002284:	f043 0320 	orr.w	r3, r3, #32
 8002288:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x110>
 8002290:	6829      	ldr	r1, [r5, #0]
 8002292:	e004      	b.n	800229e <HAL_RCC_OscConfig+0x11a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002298:	fab2 f282 	clz	r2, r2
 800229c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	2201      	movs	r2, #1
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	420b      	tst	r3, r1
 80022b6:	f47f af6a 	bne.w	800218e <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80022ba:	f000 fc33 	bl	8002b24 <HAL_GetTick>
 80022be:	f241 3388 	movw	r3, #5000	; 0x1388
 80022c2:	1b80      	subs	r0, r0, r6
 80022c4:	4298      	cmp	r0, r3
 80022c6:	d9d7      	bls.n	8002278 <HAL_RCC_OscConfig+0xf4>
 80022c8:	e7c6      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ca:	f000 fc2b 	bl	8002b24 <HAL_GetTick>
 80022ce:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022d4:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022dc:	f043 0320 	orr.w	r3, r3, #32
 80022e0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
 80022e8:	6829      	ldr	r1, [r5, #0]
 80022ea:	e004      	b.n	80022f6 <HAL_RCC_OscConfig+0x172>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	fab2 f282 	clz	r2, r2
 80022f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fa:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	2201      	movs	r2, #1
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	420b      	tst	r3, r1
 800230e:	f43f af3e 	beq.w	800218e <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8002312:	f000 fc07 	bl	8002b24 <HAL_GetTick>
 8002316:	f241 3388 	movw	r3, #5000	; 0x1388
 800231a:	1b80      	subs	r0, r0, r6
 800231c:	4298      	cmp	r0, r3
 800231e:	d9d7      	bls.n	80022d0 <HAL_RCC_OscConfig+0x14c>
 8002320:	e79a      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002322:	4d5f      	ldr	r5, [pc, #380]	; (80024a0 <HAL_RCC_OscConfig+0x31c>)
 8002324:	686b      	ldr	r3, [r5, #4]
 8002326:	f013 0f0c 	tst.w	r3, #12
 800232a:	d007      	beq.n	800233c <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800232c:	686b      	ldr	r3, [r5, #4]
 800232e:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002332:	2b08      	cmp	r3, #8
 8002334:	d125      	bne.n	8002382 <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002336:	686b      	ldr	r3, [r5, #4]
 8002338:	03d8      	lsls	r0, r3, #15
 800233a:	d422      	bmi.n	8002382 <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	2202      	movs	r2, #2
 800233e:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002342:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x1d2>
 8002352:	6829      	ldr	r1, [r5, #0]
 8002354:	e004      	b.n	8002360 <HAL_RCC_OscConfig+0x1dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800235a:	fab2 f282 	clz	r2, r2
 800235e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	2302      	movs	r3, #2
 8002362:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	2201      	movs	r2, #1
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	420b      	tst	r3, r1
 8002376:	d030      	beq.n	80023da <HAL_RCC_OscConfig+0x256>
 8002378:	6923      	ldr	r3, [r4, #16]
 800237a:	4293      	cmp	r3, r2
 800237c:	f47f af3d 	bne.w	80021fa <HAL_RCC_OscConfig+0x76>
 8002380:	e02b      	b.n	80023da <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002382:	6922      	ldr	r2, [r4, #16]
 8002384:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_RCC_OscConfig+0x324>)
 8002386:	b3ba      	cbz	r2, 80023f8 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800238c:	f000 fbca 	bl	8002b24 <HAL_GetTick>
 8002390:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	2202      	movs	r2, #2
 8002394:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002398:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_OscConfig+0x228>
 80023a8:	6829      	ldr	r1, [r5, #0]
 80023aa:	e004      	b.n	80023b6 <HAL_RCC_OscConfig+0x232>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	fab2 f282 	clz	r2, r2
 80023b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	2302      	movs	r3, #2
 80023b8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	2201      	movs	r2, #1
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	420b      	tst	r3, r1
 80023cc:	d105      	bne.n	80023da <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f000 fba9 	bl	8002b24 <HAL_GetTick>
 80023d2:	1b80      	subs	r0, r0, r6
 80023d4:	2864      	cmp	r0, #100	; 0x64
 80023d6:	d9dc      	bls.n	8002392 <HAL_RCC_OscConfig+0x20e>
 80023d8:	e73e      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	23f8      	movs	r3, #248	; 0xf8
 80023de:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	6961      	ldr	r1, [r4, #20]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4099      	lsls	r1, r3
 80023ec:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80023f0:	ea41 0302 	orr.w	r3, r1, r2
 80023f4:	602b      	str	r3, [r5, #0]
 80023f6:	e027      	b.n	8002448 <HAL_RCC_OscConfig+0x2c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fa:	f000 fb93 	bl	8002b24 <HAL_GetTick>
 80023fe:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	2202      	movs	r2, #2
 8002402:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002406:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	f043 0320 	orr.w	r3, r3, #32
 800240e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x296>
 8002416:	6829      	ldr	r1, [r5, #0]
 8002418:	e004      	b.n	8002424 <HAL_RCC_OscConfig+0x2a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	2302      	movs	r3, #2
 8002426:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	2201      	movs	r2, #1
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	420b      	tst	r3, r1
 800243a:	d005      	beq.n	8002448 <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f000 fb72 	bl	8002b24 <HAL_GetTick>
 8002440:	1b80      	subs	r0, r0, r6
 8002442:	2864      	cmp	r0, #100	; 0x64
 8002444:	d9dc      	bls.n	8002400 <HAL_RCC_OscConfig+0x27c>
 8002446:	e707      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	0719      	lsls	r1, r3, #28
 800244c:	d404      	bmi.n	8002458 <HAL_RCC_OscConfig+0x2d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	075a      	lsls	r2, r3, #29
 8002452:	f140 80a7 	bpl.w	80025a4 <HAL_RCC_OscConfig+0x420>
 8002456:	e04a      	b.n	80024ee <HAL_RCC_OscConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002458:	69a2      	ldr	r2, [r4, #24]
 800245a:	4d11      	ldr	r5, [pc, #68]	; (80024a0 <HAL_RCC_OscConfig+0x31c>)
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_RCC_OscConfig+0x328>)
 800245e:	b33a      	cbz	r2, 80024b0 <HAL_RCC_OscConfig+0x32c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002464:	f000 fb5e 	bl	8002b24 <HAL_GetTick>
 8002468:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	2302      	movs	r3, #2
 800246c:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002470:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002478:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	2201      	movs	r2, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	420b      	tst	r3, r1
 8002492:	d1dc      	bne.n	800244e <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f000 fb46 	bl	8002b24 <HAL_GetTick>
 8002498:	1b80      	subs	r0, r0, r6
 800249a:	2864      	cmp	r0, #100	; 0x64
 800249c:	d9e5      	bls.n	800246a <HAL_RCC_OscConfig+0x2e6>
 800249e:	e6db      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40021002 	.word	0x40021002
 80024a8:	42420000 	.word	0x42420000
 80024ac:	42420480 	.word	0x42420480
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80024b2:	f000 fb37 	bl	8002b24 <HAL_GetTick>
 80024b6:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	2302      	movs	r3, #2
 80024ba:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024be:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	2201      	movs	r2, #1
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	420b      	tst	r3, r1
 80024e0:	d0b5      	beq.n	800244e <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80024e2:	f000 fb1f 	bl	8002b24 <HAL_GetTick>
 80024e6:	1b80      	subs	r0, r0, r6
 80024e8:	2864      	cmp	r0, #100	; 0x64
 80024ea:	d9e5      	bls.n	80024b8 <HAL_RCC_OscConfig+0x334>
 80024ec:	e6b4      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 80024ee:	4d97      	ldr	r5, [pc, #604]	; (800274c <HAL_RCC_OscConfig+0x5c8>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f0:	4a97      	ldr	r2, [pc, #604]	; (8002750 <HAL_RCC_OscConfig+0x5cc>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 80024f2:	69eb      	ldr	r3, [r5, #28]
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61eb      	str	r3, [r5, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002502:	f000 fb0f 	bl	8002b24 <HAL_GetTick>
 8002506:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002508:	4b91      	ldr	r3, [pc, #580]	; (8002750 <HAL_RCC_OscConfig+0x5cc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	05db      	lsls	r3, r3, #23
 800250e:	d54d      	bpl.n	80025ac <HAL_RCC_OscConfig+0x428>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002510:	6a2b      	ldr	r3, [r5, #32]
 8002512:	f023 0305 	bic.w	r3, r3, #5
 8002516:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002518:	f000 fb04 	bl	8002b24 <HAL_GetTick>
 800251c:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	2302      	movs	r3, #2
 8002520:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002524:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800252c:	fab2 f282 	clz	r2, r2
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002534:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002538:	429a      	cmp	r2, r3
 800253a:	bf0c      	ite	eq
 800253c:	6a29      	ldreq	r1, [r5, #32]
 800253e:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	2201      	movs	r2, #1
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	420b      	tst	r3, r1
 8002554:	d130      	bne.n	80025b8 <HAL_RCC_OscConfig+0x434>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002556:	6a2b      	ldr	r3, [r5, #32]
 8002558:	68e2      	ldr	r2, [r4, #12]
 800255a:	f023 0305 	bic.w	r3, r3, #5
 800255e:	4313      	orrs	r3, r2
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002560:	2a01      	cmp	r2, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002562:	622b      	str	r3, [r5, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002564:	d138      	bne.n	80025d8 <HAL_RCC_OscConfig+0x454>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002566:	f000 fadd 	bl	8002b24 <HAL_GetTick>
 800256a:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	2302      	movs	r3, #2
 800256e:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002572:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800257a:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002582:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002586:	429a      	cmp	r2, r3
 8002588:	bf0c      	ite	eq
 800258a:	6a29      	ldreq	r1, [r5, #32]
 800258c:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	2201      	movs	r2, #1
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	420b      	tst	r3, r1
 80025a2:	d011      	beq.n	80025c8 <HAL_RCC_OscConfig+0x444>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a4:	69e2      	ldr	r2, [r4, #28]
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d13d      	bne.n	8002626 <HAL_RCC_OscConfig+0x4a2>
 80025aa:	e08b      	b.n	80026c4 <HAL_RCC_OscConfig+0x540>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 80025ac:	f000 faba 	bl	8002b24 <HAL_GetTick>
 80025b0:	1b80      	subs	r0, r0, r6
 80025b2:	2864      	cmp	r0, #100	; 0x64
 80025b4:	d9a8      	bls.n	8002508 <HAL_RCC_OscConfig+0x384>
 80025b6:	e64f      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80025b8:	f000 fab4 	bl	8002b24 <HAL_GetTick>
 80025bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80025c0:	1b80      	subs	r0, r0, r6
 80025c2:	4298      	cmp	r0, r3
 80025c4:	d9ab      	bls.n	800251e <HAL_RCC_OscConfig+0x39a>
 80025c6:	e647      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80025c8:	f000 faac 	bl	8002b24 <HAL_GetTick>
 80025cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80025d0:	1b80      	subs	r0, r0, r6
 80025d2:	4298      	cmp	r0, r3
 80025d4:	d9ca      	bls.n	800256c <HAL_RCC_OscConfig+0x3e8>
 80025d6:	e63f      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80025d8:	f000 faa4 	bl	8002b24 <HAL_GetTick>
 80025dc:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	2302      	movs	r3, #2
 80025e0:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f4:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80025f8:	429a      	cmp	r2, r3
 80025fa:	bf0c      	ite	eq
 80025fc:	6a29      	ldreq	r1, [r5, #32]
 80025fe:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	2201      	movs	r2, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	420b      	tst	r3, r1
 8002614:	d0c6      	beq.n	80025a4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8002616:	f000 fa85 	bl	8002b24 <HAL_GetTick>
 800261a:	f241 3388 	movw	r3, #5000	; 0x1388
 800261e:	1b80      	subs	r0, r0, r6
 8002620:	4298      	cmp	r0, r3
 8002622:	d9dc      	bls.n	80025de <HAL_RCC_OscConfig+0x45a>
 8002624:	e618      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002626:	4d49      	ldr	r5, [pc, #292]	; (800274c <HAL_RCC_OscConfig+0x5c8>)
 8002628:	686b      	ldr	r3, [r5, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	f43f ade3 	beq.w	80021fa <HAL_RCC_OscConfig+0x76>
 8002634:	4e47      	ldr	r6, [pc, #284]	; (8002754 <HAL_RCC_OscConfig+0x5d0>)
 8002636:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002638:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	d15c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x574>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 800263e:	f000 fa71 	bl	8002b24 <HAL_GetTick>
 8002642:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002648:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800264c:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d135      	bne.n	80026c8 <HAL_RCC_OscConfig+0x544>
 800265c:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002662:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	2101      	movs	r1, #1
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	4213      	tst	r3, r2
 8002676:	d12d      	bne.n	80026d4 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	6a20      	ldr	r0, [r4, #32]
 800267a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800267c:	686b      	ldr	r3, [r5, #4]
 800267e:	4302      	orrs	r2, r0
 8002680:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002684:	4313      	orrs	r3, r2
 8002686:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	6031      	str	r1, [r6, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800268a:	f000 fa4b 	bl	8002b24 <HAL_GetTick>
 800268e:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002694:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002698:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269c:	f043 0320 	orr.w	r3, r3, #32
 80026a0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x55c>
 80026a8:	6829      	ldr	r1, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ae:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	2201      	movs	r2, #1
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	420b      	tst	r3, r1
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0x568>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80026c4:	2000      	movs	r0, #0
 80026c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80026d2:	e7c4      	b.n	800265e <HAL_RCC_OscConfig+0x4da>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80026d4:	f000 fa26 	bl	8002b24 <HAL_GetTick>
 80026d8:	1bc0      	subs	r0, r0, r7
 80026da:	2864      	cmp	r0, #100	; 0x64
 80026dc:	d9b2      	bls.n	8002644 <HAL_RCC_OscConfig+0x4c0>
 80026de:	e5bb      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80026ea:	e7de      	b.n	80026aa <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f000 fa1a 	bl	8002b24 <HAL_GetTick>
 80026f0:	1b00      	subs	r0, r0, r4
 80026f2:	2864      	cmp	r0, #100	; 0x64
 80026f4:	d9cc      	bls.n	8002690 <HAL_RCC_OscConfig+0x50c>
 80026f6:	e5af      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f8:	f000 fa14 	bl	8002b24 <HAL_GetTick>
 80026fc:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002702:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002706:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	f043 0320 	orr.w	r3, r3, #32
 800270e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x596>
 8002716:	6829      	ldr	r1, [r5, #0]
 8002718:	e004      	b.n	8002724 <HAL_RCC_OscConfig+0x5a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800271e:	fab2 f282 	clz	r2, r2
 8002722:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002728:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	2201      	movs	r2, #1
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	420b      	tst	r3, r1
 800273c:	d0c2      	beq.n	80026c4 <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f000 f9f1 	bl	8002b24 <HAL_GetTick>
 8002742:	1b00      	subs	r0, r0, r4
 8002744:	2864      	cmp	r0, #100	; 0x64
 8002746:	d9da      	bls.n	80026fe <HAL_RCC_OscConfig+0x57a>
 8002748:	e586      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	42420060 	.word	0x42420060

08002758 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002758:	4ab0      	ldr	r2, [pc, #704]	; (8002a1c <HAL_RCC_ClockConfig+0x2c4>)
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800275c:	6813      	ldr	r3, [r2, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	4299      	cmp	r1, r3
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	4604      	mov	r4, r0
 8002766:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002768:	f240 80a9 	bls.w	80028be <HAL_RCC_ClockConfig+0x166>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276c:	6813      	ldr	r3, [r2, #0]
 800276e:	f023 0307 	bic.w	r3, r3, #7
 8002772:	430b      	orrs	r3, r1
 8002774:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	428b      	cmp	r3, r1
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8002780:	2001      	movs	r0, #1
 8002782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	6801      	ldr	r1, [r0, #0]
 8002786:	078f      	lsls	r7, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	bf41      	itttt	mi
 800278a:	48a5      	ldrmi	r0, [pc, #660]	; (8002a20 <HAL_RCC_ClockConfig+0x2c8>)
 800278c:	6843      	ldrmi	r3, [r0, #4]
 800278e:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 8002792:	68a3      	ldrmi	r3, [r4, #8]
 8002794:	bf44      	itt	mi
 8002796:	4313      	orrmi	r3, r2
 8002798:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	07ce      	lsls	r6, r1, #31
 800279c:	d40b      	bmi.n	80027b6 <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279e:	6821      	ldr	r1, [r4, #0]
 80027a0:	074d      	lsls	r5, r1, #29
 80027a2:	f140 812b 	bpl.w	80029fc <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a6:	489e      	ldr	r0, [pc, #632]	; (8002a20 <HAL_RCC_ClockConfig+0x2c8>)
 80027a8:	6843      	ldr	r3, [r0, #4]
 80027aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ae:	68e3      	ldr	r3, [r4, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	6043      	str	r3, [r0, #4]
 80027b4:	e122      	b.n	80029fc <HAL_RCC_ClockConfig+0x2a4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	6862      	ldr	r2, [r4, #4]
 80027b8:	4d99      	ldr	r5, [pc, #612]	; (8002a20 <HAL_RCC_ClockConfig+0x2c8>)
 80027ba:	2a01      	cmp	r2, #1
 80027bc:	d115      	bne.n	80027ea <HAL_RCC_ClockConfig+0x92>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80027c2:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	f043 0320 	orr.w	r3, r3, #32
 80027ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0x82>
 80027d6:	6828      	ldr	r0, [r5, #0]
 80027d8:	e004      	b.n	80027e4 <HAL_RCC_ClockConfig+0x8c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027de:	fab1 f181 	clz	r1, r1
 80027e2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e8:	e02a      	b.n	8002840 <HAL_RCC_ClockConfig+0xe8>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ea:	2a02      	cmp	r2, #2
 80027ec:	d115      	bne.n	800281a <HAL_RCC_ClockConfig+0xc2>
 80027ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027f2:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	f043 0320 	orr.w	r3, r3, #32
 80027fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xb2>
 8002806:	6828      	ldr	r0, [r5, #0]
 8002808:	e004      	b.n	8002814 <HAL_RCC_ClockConfig+0xbc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800280e:	fab1 f181 	clz	r1, r1
 8002812:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002818:	e012      	b.n	8002840 <HAL_RCC_ClockConfig+0xe8>
 800281a:	2102      	movs	r1, #2
 800281c:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002820:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	f043 0320 	orr.w	r3, r3, #32
 8002828:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0xdc>
 8002830:	6828      	ldr	r0, [r5, #0]
 8002832:	e004      	b.n	800283e <HAL_RCC_ClockConfig+0xe6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002838:	fab1 f181 	clz	r1, r1
 800283c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	2302      	movs	r3, #2
 8002840:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	2101      	movs	r1, #1
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	4203      	tst	r3, r0
 8002854:	d094      	beq.n	8002780 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002856:	686b      	ldr	r3, [r5, #4]
 8002858:	f023 0303 	bic.w	r3, r3, #3
 800285c:	431a      	orrs	r2, r3
 800285e:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002860:	f000 f960 	bl	8002b24 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002864:	6863      	ldr	r3, [r4, #4]
 8002866:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002868:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	d10d      	bne.n	8002888 <HAL_RCC_ClockConfig+0x130>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800286c:	686b      	ldr	r3, [r5, #4]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d093      	beq.n	800279e <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002876:	f000 f955 	bl	8002b24 <HAL_GetTick>
 800287a:	f241 3388 	movw	r3, #5000	; 0x1388
 800287e:	1b80      	subs	r0, r0, r6
 8002880:	4298      	cmp	r0, r3
 8002882:	d9f3      	bls.n	800286c <HAL_RCC_ClockConfig+0x114>
          {
            return HAL_TIMEOUT;
 8002884:	2003      	movs	r0, #3
 8002886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002888:	2b02      	cmp	r3, #2
 800288a:	d113      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288c:	686b      	ldr	r3, [r5, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b08      	cmp	r3, #8
 8002894:	d083      	beq.n	800279e <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002896:	f000 f945 	bl	8002b24 <HAL_GetTick>
 800289a:	f241 3388 	movw	r3, #5000	; 0x1388
 800289e:	1b80      	subs	r0, r0, r6
 80028a0:	4298      	cmp	r0, r3
 80028a2:	d9f3      	bls.n	800288c <HAL_RCC_ClockConfig+0x134>
 80028a4:	e7ee      	b.n	8002884 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a6:	f000 f93d 	bl	8002b24 <HAL_GetTick>
 80028aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80028ae:	1b80      	subs	r0, r0, r6
 80028b0:	4298      	cmp	r0, r3
 80028b2:	d8e7      	bhi.n	8002884 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b4:	686b      	ldr	r3, [r5, #4]
 80028b6:	f013 0f0c 	tst.w	r3, #12
 80028ba:	d1f4      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x14e>
 80028bc:	e76f      	b.n	800279e <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028be:	6801      	ldr	r1, [r0, #0]
 80028c0:	0788      	lsls	r0, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c2:	bf41      	itttt	mi
 80028c4:	4856      	ldrmi	r0, [pc, #344]	; (8002a20 <HAL_RCC_ClockConfig+0x2c8>)
 80028c6:	6843      	ldrmi	r3, [r0, #4]
 80028c8:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 80028cc:	68a3      	ldrmi	r3, [r4, #8]
 80028ce:	bf44      	itt	mi
 80028d0:	4313      	orrmi	r3, r2
 80028d2:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d4:	07ca      	lsls	r2, r1, #31
 80028d6:	d40c      	bmi.n	80028f2 <HAL_RCC_ClockConfig+0x19a>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d8:	4a50      	ldr	r2, [pc, #320]	; (8002a1c <HAL_RCC_ClockConfig+0x2c4>)
 80028da:	6813      	ldr	r3, [r2, #0]
 80028dc:	f023 0307 	bic.w	r3, r3, #7
 80028e0:	4333      	orrs	r3, r6
 80028e2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028e4:	6813      	ldr	r3, [r2, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	42b3      	cmp	r3, r6
 80028ec:	f47f af48 	bne.w	8002780 <HAL_RCC_ClockConfig+0x28>
 80028f0:	e755      	b.n	800279e <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	6862      	ldr	r2, [r4, #4]
 80028f4:	4d4a      	ldr	r5, [pc, #296]	; (8002a20 <HAL_RCC_ClockConfig+0x2c8>)
 80028f6:	2a01      	cmp	r2, #1
 80028f8:	d115      	bne.n	8002926 <HAL_RCC_ClockConfig+0x1ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80028fe:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002902:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	f043 0320 	orr.w	r3, r3, #32
 800290a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_RCC_ClockConfig+0x1be>
 8002912:	6828      	ldr	r0, [r5, #0]
 8002914:	e004      	b.n	8002920 <HAL_RCC_ClockConfig+0x1c8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800291a:	fab1 f181 	clz	r1, r1
 800291e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002924:	e02a      	b.n	800297c <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002926:	2a02      	cmp	r2, #2
 8002928:	d115      	bne.n	8002956 <HAL_RCC_ClockConfig+0x1fe>
 800292a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800292e:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002932:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	f043 0320 	orr.w	r3, r3, #32
 800293a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0x1ee>
 8002942:	6828      	ldr	r0, [r5, #0]
 8002944:	e004      	b.n	8002950 <HAL_RCC_ClockConfig+0x1f8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800294a:	fab1 f181 	clz	r1, r1
 800294e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002954:	e012      	b.n	800297c <HAL_RCC_ClockConfig+0x224>
 8002956:	2102      	movs	r1, #2
 8002958:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800295c:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	f043 0320 	orr.w	r3, r3, #32
 8002964:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x218>
 800296c:	6828      	ldr	r0, [r5, #0]
 800296e:	e004      	b.n	800297a <HAL_RCC_ClockConfig+0x222>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002974:	fab1 f181 	clz	r1, r1
 8002978:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	2302      	movs	r3, #2
 800297c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	2101      	movs	r1, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	4203      	tst	r3, r0
 8002990:	f43f aef6 	beq.w	8002780 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002994:	686b      	ldr	r3, [r5, #4]
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	431a      	orrs	r2, r3
 800299c:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 800299e:	f000 f8c1 	bl	8002b24 <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	6863      	ldr	r3, [r4, #4]
 80029a4:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 80029a6:	4607      	mov	r7, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x26c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029aa:	686b      	ldr	r3, [r5, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d091      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f000 f8b6 	bl	8002b24 <HAL_GetTick>
 80029b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80029bc:	1bc0      	subs	r0, r0, r7
 80029be:	4298      	cmp	r0, r3
 80029c0:	d9f3      	bls.n	80029aa <HAL_RCC_ClockConfig+0x252>
 80029c2:	e75f      	b.n	8002884 <HAL_RCC_ClockConfig+0x12c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d114      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x29a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c8:	686b      	ldr	r3, [r5, #4]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d082      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d2:	f000 f8a7 	bl	8002b24 <HAL_GetTick>
 80029d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80029da:	1bc0      	subs	r0, r0, r7
 80029dc:	4298      	cmp	r0, r3
 80029de:	d9f3      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x270>
 80029e0:	e750      	b.n	8002884 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f000 f89f 	bl	8002b24 <HAL_GetTick>
 80029e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80029ea:	1bc0      	subs	r0, r0, r7
 80029ec:	4298      	cmp	r0, r3
 80029ee:	f63f af49 	bhi.w	8002884 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f2:	686b      	ldr	r3, [r5, #4]
 80029f4:	f013 0f0c 	tst.w	r3, #12
 80029f8:	d1f3      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x28a>
 80029fa:	e76d      	b.n	80028d8 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	070b      	lsls	r3, r1, #28
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029fe:	bf41      	itttt	mi
 8002a00:	4a07      	ldrmi	r2, [pc, #28]	; (8002a20 <HAL_RCC_ClockConfig+0x2c8>)
 8002a02:	6921      	ldrmi	r1, [r4, #16]
 8002a04:	6853      	ldrmi	r3, [r2, #4]
 8002a06:	f423 5360 	bicmi.w	r3, r3, #14336	; 0x3800
 8002a0a:	bf44      	itt	mi
 8002a0c:	ea43 03c1 	orrmi.w	r3, r3, r1, lsl #3
 8002a10:	6053      	strmi	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a12:	200f      	movs	r0, #15
 8002a14:	f000 f859 	bl	8002aca <HAL_InitTick>

  return HAL_OK;
 8002a18:	2000      	movs	r0, #0
}
 8002a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40021000 	.word	0x40021000

08002a24 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002a24:	4915      	ldr	r1, [pc, #84]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x58>)
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a26:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002a28:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a2a:	f004 030c 	and.w	r3, r4, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d121      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002a36:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a3e:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a4a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a4c:	5cd2      	ldrb	r2, [r2, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	230f      	movs	r3, #15
 8002a50:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a58:	f001 010f 	and.w	r1, r1, #15
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x60>)
 8002a64:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a66:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002a68:	bf52      	itee	pl
 8002a6a:	4807      	ldrpl	r0, [pc, #28]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x64>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8002a6c:	4b07      	ldrmi	r3, [pc, #28]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x68>)
 8002a6e:	fbb3 f0f0 	udivmi	r0, r3, r0
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002a72:	4350      	muls	r0, r2
 8002a74:	bd10      	pop	{r4, pc}

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8002a78:	bd10      	pop	{r4, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08019c8c 	.word	0x08019c8c
 8002a84:	08019c7c 	.word	0x08019c7c
 8002a88:	003d0900 	.word	0x003d0900
 8002a8c:	007a1200 	.word	0x007a1200

08002a90 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a90:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002a92:	f7ff ffc7 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_GetHCLKFreq+0x2c>)
 8002a98:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	23f0      	movs	r3, #240	; 0xf0
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x30>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	40d8      	lsrs	r0, r3
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ab6:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002ab8:	bd08      	pop	{r3, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08019c6c 	.word	0x08019c6c
 8002ac4:	2000001c 	.word	0x2000001c

08002ac8 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002ac8:	4770      	bx	lr

08002aca <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8002aca:	b510      	push	{r4, lr}
 8002acc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ace:	f7ff ffdf 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ada:	f000 f885 	bl	8002be8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8002ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f000 f843 	bl	8002b70 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002aea:	2000      	movs	r0, #0
 8002aec:	bd10      	pop	{r4, pc}
	...

08002af0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <HAL_Init+0x20>)
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af2:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	f043 0310 	orr.w	r3, r3, #16
 8002afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afc:	2003      	movs	r0, #3
 8002afe:	f000 f825 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b02:	200f      	movs	r0, #15
 8002b04:	f7ff ffe1 	bl	8002aca <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b08:	f7ff ffde 	bl	8002ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	bd08      	pop	{r3, pc}
 8002b10:	40022000 	.word	0x40022000

08002b14 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002b14:	4a02      	ldr	r2, [pc, #8]	; (8002b20 <HAL_IncTick+0xc>)
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000c08 	.word	0x20000c08

08002b24 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002b24:	4b01      	ldr	r3, [pc, #4]	; (8002b2c <HAL_GetTick+0x8>)
 8002b26:	6818      	ldr	r0, [r3, #0]
}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000c08 	.word	0x20000c08

08002b30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002b30:	b513      	push	{r0, r1, r4, lr}
 8002b32:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff fff6 	bl	8002b24 <HAL_GetTick>
 8002b38:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8002b3a:	f7ff fff3 	bl	8002b24 <HAL_GetTick>
 8002b3e:	9b01      	ldr	r3, [sp, #4]
 8002b40:	1b00      	subs	r0, r0, r4
 8002b42:	4298      	cmp	r0, r3
 8002b44:	d3f9      	bcc.n	8002b3a <HAL_Delay+0xa>
  {
  }
}
 8002b46:	b002      	add	sp, #8
 8002b48:	bd10      	pop	{r4, pc}
	...

08002b4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002b50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002b60:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8002b64:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002b68:	60d3      	str	r3, [r2, #12]
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_NVIC_SetPriority+0x58>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002b7a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002b7e:	1d1c      	adds	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002b80:	2d04      	cmp	r5, #4
 8002b82:	bf28      	it	cs
 8002b84:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002b86:	2c06      	cmp	r4, #6
 8002b88:	bf8c      	ite	hi
 8002b8a:	3b03      	subhi	r3, #3
 8002b8c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002b8e:	2401      	movs	r4, #1
 8002b90:	fa04 f603 	lsl.w	r6, r4, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002b94:	40ac      	lsls	r4, r5
 8002b96:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002b98:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002b9a:	4021      	ands	r1, r4
 8002b9c:	4099      	lsls	r1, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002b9e:	4032      	ands	r2, r6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8002ba0:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002ba2:	ea42 0201 	orr.w	r2, r2, r1
 8002ba6:	ea4f 1202 	mov.w	r2, r2, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002baa:	bfaf      	iteee	ge
 8002bac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002bb0:	f000 000f 	andlt.w	r0, r0, #15
 8002bb4:	4b05      	ldrlt	r3, [pc, #20]	; (8002bcc <HAL_NVIC_SetPriority+0x5c>)
 8002bb6:	b2d2      	uxtblt	r2, r2
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002bb8:	bfa5      	ittet	ge
 8002bba:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002bbe:	b2d2      	uxtbge	r2, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002bc0:	541a      	strblt	r2, [r3, r0]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002bc2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	e000ed00 	.word	0xe000ed00
 8002bcc:	e000ed14 	.word	0xe000ed14

08002bd0 <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002bd0:	0941      	lsrs	r1, r0, #5
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f000 001f 	and.w	r0, r0, #31
 8002bd8:	4a02      	ldr	r2, [pc, #8]	; (8002be4 <HAL_NVIC_EnableIRQ+0x14>)
 8002bda:	4083      	lsls	r3, r0
 8002bdc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100

08002be8 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002be8:	3801      	subs	r0, #1
 8002bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002bee:	bf3f      	itttt	cc
 8002bf0:	4b06      	ldrcc	r3, [pc, #24]	; (8002c0c <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002bf2:	4a07      	ldrcc	r2, [pc, #28]	; (8002c10 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002bf4:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002bf6:	21f0      	movcc	r1, #240	; 0xf0
 8002bf8:	bf3f      	itttt	cc
 8002bfa:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002bfe:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c00:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002c02:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c04:	bf34      	ite	cc
 8002c06:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002c08:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e010 	.word	0xe000e010
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c18:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c1a:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c20:	ea02 0507 	and.w	r5, r2, r7
 
    if (iocurrent == ioposition)
 8002c24:	4295      	cmp	r5, r2
 8002c26:	f040 80ac 	bne.w	8002d82 <HAL_GPIO_Init+0x16e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002c2a:	684c      	ldr	r4, [r1, #4]
 8002c2c:	f024 0c10 	bic.w	ip, r4, #16
 8002c30:	f1bc 0f02 	cmp.w	ip, #2
 8002c34:	d114      	bne.n	8002c60 <HAL_GPIO_Init+0x4c>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002c36:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002c3a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c3e:	f003 0607 	and.w	r6, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002c42:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c46:	00b6      	lsls	r6, r6, #2
 8002c48:	f04f 080f 	mov.w	r8, #15
 8002c4c:	fa08 f806 	lsl.w	r8, r8, r6
 8002c50:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c54:	690a      	ldr	r2, [r1, #16]
 8002c56:	40b2      	lsls	r2, r6
 8002c58:	ea48 0202 	orr.w	r2, r8, r2
        GPIOx->AFR[position >> 3] = temp;
 8002c5c:	f8ce 2020 	str.w	r2, [lr, #32]
 8002c60:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c64:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c66:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c68:	fa02 f20e 	lsl.w	r2, r2, lr
 8002c6c:	43d2      	mvns	r2, r2
 8002c6e:	ea02 0806 	and.w	r8, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c72:	f004 0603 	and.w	r6, r4, #3
 8002c76:	fa06 f60e 	lsl.w	r6, r6, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c7a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c7e:	ea48 0606 	orr.w	r6, r8, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c82:	f1bc 0f01 	cmp.w	ip, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8002c86:	6006      	str	r6, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c88:	d811      	bhi.n	8002cae <HAL_GPIO_Init+0x9a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c8c:	ea02 0c06 	and.w	ip, r2, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c90:	68ce      	ldr	r6, [r1, #12]
 8002c92:	fa06 f60e 	lsl.w	r6, r6, lr
 8002c96:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OSPEEDR = temp;
 8002c9a:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9e:	ea26 0c05 	bic.w	ip, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ca2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8002ca6:	409e      	lsls	r6, r3
 8002ca8:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OTYPER = temp;
 8002cac:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cae:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cb0:	ea02 0c06 	and.w	ip, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cb4:	688a      	ldr	r2, [r1, #8]
 8002cb6:	fa02 f60e 	lsl.w	r6, r2, lr
 8002cba:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 8002cbe:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002cc0:	00e2      	lsls	r2, r4, #3
 8002cc2:	d55e      	bpl.n	8002d82 <HAL_GPIO_Init+0x16e>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8002cc4:	4e32      	ldr	r6, [pc, #200]	; (8002d90 <HAL_GPIO_Init+0x17c>)
 8002cc6:	69b2      	ldr	r2, [r6, #24]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	61b2      	str	r2, [r6, #24]
 8002cce:	f023 0603 	bic.w	r6, r3, #3
 8002cd2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002cd6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cda:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002cde:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ce2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	fa02 f20c 	lsl.w	r2, r2, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8002cec:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cf0:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8002cf4:	d015      	beq.n	8002d22 <HAL_GPIO_Init+0x10e>
 8002cf6:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <HAL_GPIO_Init+0x180>)
 8002cf8:	4290      	cmp	r0, r2
 8002cfa:	d014      	beq.n	8002d26 <HAL_GPIO_Init+0x112>
 8002cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d00:	4290      	cmp	r0, r2
 8002d02:	d012      	beq.n	8002d2a <HAL_GPIO_Init+0x116>
 8002d04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d08:	4290      	cmp	r0, r2
 8002d0a:	d010      	beq.n	8002d2e <HAL_GPIO_Init+0x11a>
 8002d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d10:	4290      	cmp	r0, r2
 8002d12:	d00e      	beq.n	8002d32 <HAL_GPIO_Init+0x11e>
 8002d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d18:	4290      	cmp	r0, r2
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2205      	moveq	r2, #5
 8002d1e:	2206      	movne	r2, #6
 8002d20:	e008      	b.n	8002d34 <HAL_GPIO_Init+0x120>
 8002d22:	2200      	movs	r2, #0
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x120>
 8002d26:	2201      	movs	r2, #1
 8002d28:	e004      	b.n	8002d34 <HAL_GPIO_Init+0x120>
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_Init+0x120>
 8002d2e:	2203      	movs	r2, #3
 8002d30:	e000      	b.n	8002d34 <HAL_GPIO_Init+0x120>
 8002d32:	2204      	movs	r2, #4
 8002d34:	fa02 f20c 	lsl.w	r2, r2, ip
 8002d38:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d3c:	60b2      	str	r2, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d3e:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <HAL_GPIO_Init+0x184>)
 8002d40:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	ea6f 0e05 	mvn.w	lr, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d46:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 8002d4a:	bf14      	ite	ne
 8002d4c:	432e      	orrne	r6, r5
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002d52:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8002d54:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d56:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        { 
          temp |= iocurrent;
 8002d5a:	bf14      	ite	ne
 8002d5c:	432e      	orrne	r6, r5
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002d62:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d64:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d66:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8002d6a:	bf14      	ite	ne
 8002d6c:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8002d6e:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002d72:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8002d74:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d76:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8002d78:	bf54      	ite	pl
 8002d7a:	ea0e 0506 	andpl.w	r5, lr, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8002d7e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002d80:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d82:	3301      	adds	r3, #1
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	f47f af49 	bne.w	8002c1c <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 8002d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	48000400 	.word	0x48000400
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d9c:	6903      	ldr	r3, [r0, #16]
 8002d9e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8002da0:	bf14      	ite	ne
 8002da2:	2001      	movne	r0, #1
 8002da4:	2000      	moveq	r0, #0
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da8:	b10a      	cbz	r2, 8002dae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8002daa:	8301      	strh	r1, [r0, #24]
 8002dac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8002dae:	8341      	strh	r1, [r0, #26]
 8002db0:	4770      	bx	lr

08002db2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002db2:	6943      	ldr	r3, [r0, #20]
 8002db4:	4059      	eors	r1, r3
 8002db6:	6141      	str	r1, [r0, #20]
 8002db8:	4770      	bx	lr

08002dba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8002dba:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d046      	beq.n	8002e50 <HAL_PCD_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8002dc8:	f002 f898 	bl	8004efc <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002dcc:	6865      	ldr	r5, [r4, #4]
 8002dce:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	42a9      	cmp	r1, r5
 8002dd6:	f102 021c 	add.w	r2, r2, #28
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <HAL_PCD_Init+0x44>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002de0:	2001      	movs	r0, #1
   hpcd->IN_ep[i].num = i;
 8002de2:	f802 1c1d 	strb.w	r1, [r2, #-29]

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002de6:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8002dea:	f802 3c1a 	strb.w	r3, [r2, #-26]
   hpcd->IN_ep[i].maxpacket =  0;
 8002dee:	f842 3c11 	str.w	r3, [r2, #-17]
   hpcd->IN_ep[i].xfer_buff = 0;
 8002df2:	f842 3c0d 	str.w	r3, [r2, #-13]
   hpcd->IN_ep[i].xfer_len = 0;
 8002df6:	f842 3c09 	str.w	r3, [r2, #-9]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002dfa:	4401      	add	r1, r0
 8002dfc:	e7ea      	b.n	8002dd4 <HAL_PCD_Init+0x1a>
 8002dfe:	f104 02b5 	add.w	r2, r4, #181	; 0xb5
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002e02:	42ab      	cmp	r3, r5
 8002e04:	f102 021c 	add.w	r2, r2, #28
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	d00d      	beq.n	8002e2a <HAL_PCD_Init+0x70>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 8002e0e:	f802 3c1d 	strb.w	r3, [r2, #-29]
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 8002e12:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8002e16:	f802 0c1a 	strb.w	r0, [r2, #-26]
   hpcd->OUT_ep[i].maxpacket = 0;
 8002e1a:	f842 0c11 	str.w	r0, [r2, #-17]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8002e1e:	f842 0c0d 	str.w	r0, [r2, #-13]
   hpcd->OUT_ep[i].xfer_len = 0;
 8002e22:	f842 0c09 	str.w	r0, [r2, #-9]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002e26:	3301      	adds	r3, #1
 8002e28:	e7eb      	b.n	8002e02 <HAL_PCD_Init+0x48>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8002e32:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8002e36:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8002e3a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8002e3e:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8002e42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8002e46:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 8002e4a:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141

 return HAL_OK;
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8002e50:	2001      	movs	r0, #1
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
}
 8002e52:	bd38      	pop	{r3, r4, r5, pc}

08002e54 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8002e54:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8002e56:	2101      	movs	r1, #1
 8002e58:	f000 ff19 	bl	8003c8e <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	bd08      	pop	{r3, pc}

08002e60 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002e60:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d00f      	beq.n	8002e88 <HAL_PCD_SetAddress+0x28>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8002e6e:	b921      	cbnz	r1, 8002e7a <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8002e70:	6803      	ldr	r3, [r0, #0]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8002e78:	e001      	b.n	8002e7e <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8002e7a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8002e84:	4618      	mov	r0, r3
 8002e86:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002e88:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002e8e:	b2cc      	uxtb	r4, r1
 8002e90:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002e94:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8002e98:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002e9c:	bf15      	itete	ne
 8002e9e:	fb05 0106 	mlane	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002ea2:	fb05 0101 	mlaeq	r1, r5, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002ea6:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002ea8:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002eaa:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8002eac:	700e      	strb	r6, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002eae:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8002eb0:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8002eb2:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8002eb6:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f000 8181 	beq.w	80031c0 <HAL_PCD_EP_Open+0x334>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8002ec4:	78cc      	ldrb	r4, [r1, #3]
 8002ec6:	780a      	ldrb	r2, [r1, #0]
 8002ec8:	6803      	ldr	r3, [r0, #0]
 8002eca:	2c03      	cmp	r4, #3
 8002ecc:	d82f      	bhi.n	8002f2e <HAL_PCD_EP_Open+0xa2>
 8002ece:	e8df f004 	tbb	[pc, r4]
 8002ed2:	2202      	.short	0x2202
 8002ed4:	170d      	.short	0x170d
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8002ed6:	b212      	sxth	r2, r2
 8002ed8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002edc:	b2a4      	uxth	r4, r4
 8002ede:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002ee2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002ee6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8002eea:	e01e      	b.n	8002f2a <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8002eec:	b212      	sxth	r2, r2
 8002eee:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002ef2:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002ef6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002efa:	0424      	lsls	r4, r4, #16
 8002efc:	0c24      	lsrs	r4, r4, #16
 8002efe:	e014      	b.n	8002f2a <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8002f00:	b212      	sxth	r2, r2
 8002f02:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002f06:	b2a4      	uxth	r4, r4
 8002f08:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002f0c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002f10:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8002f14:	e009      	b.n	8002f2a <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8002f16:	b212      	sxth	r2, r2
 8002f18:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002f1c:	b2a4      	uxth	r4, r4
 8002f1e:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002f22:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002f26:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002f2a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8002f2e:	780a      	ldrb	r2, [r1, #0]
 8002f30:	b216      	sxth	r6, r2
 8002f32:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8002f36:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8002f3a:	f024 02f0 	bic.w	r2, r4, #240	; 0xf0
 8002f3e:	0512      	lsls	r2, r2, #20
 8002f40:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002f44:	0d12      	lsrs	r2, r2, #20
 8002f46:	432a      	orrs	r2, r5
 8002f48:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002f4c:	7a8c      	ldrb	r4, [r1, #10]
 8002f4e:	780a      	ldrb	r2, [r1, #0]
 8002f50:	2c00      	cmp	r4, #0
 8002f52:	d175      	bne.n	8003040 <HAL_PCD_EP_Open+0x1b4>
  {
    if (ep->is_in)
 8002f54:	784d      	ldrb	r5, [r1, #1]
 8002f56:	888c      	ldrh	r4, [r1, #4]
 8002f58:	2608      	movs	r6, #8
 8002f5a:	b33d      	cbz	r5, 8002fac <HAL_PCD_EP_Open+0x120>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002f5c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002f60:	b2ad      	uxth	r5, r5
 8002f62:	fb16 5202 	smlabb	r2, r6, r2, r5
 8002f66:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002f6a:	0864      	lsrs	r4, r4, #1
 8002f6c:	0064      	lsls	r4, r4, #1
 8002f6e:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002f72:	780c      	ldrb	r4, [r1, #0]
 8002f74:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f78:	0652      	lsls	r2, r2, #25
 8002f7a:	d50b      	bpl.n	8002f94 <HAL_PCD_EP_Open+0x108>
 8002f7c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f84:	0512      	lsls	r2, r2, #20
 8002f86:	0d12      	lsrs	r2, r2, #20
 8002f88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002f90:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8002f94:	7809      	ldrb	r1, [r1, #0]
 8002f96:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa2:	0412      	lsls	r2, r2, #16
 8002fa4:	0c12      	lsrs	r2, r2, #16
 8002fa6:	f082 0220 	eor.w	r2, r2, #32
 8002faa:	e0fe      	b.n	80031aa <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002fac:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8002fb0:	b2bf      	uxth	r7, r7
 8002fb2:	fb16 7202 	smlabb	r2, r6, r2, r7
 8002fb6:	3204      	adds	r2, #4
 8002fb8:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8002fbc:	0864      	lsrs	r4, r4, #1
 8002fbe:	0064      	lsls	r4, r4, #1
 8002fc0:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8002fc4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002fc8:	780c      	ldrb	r4, [r1, #0]
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	fb16 2204 	smlabb	r2, r6, r4, r2
 8002fd0:	68ce      	ldr	r6, [r1, #12]
 8002fd2:	2e3e      	cmp	r6, #62	; 0x3e
 8002fd4:	f102 0206 	add.w	r2, r2, #6
 8002fd8:	d90b      	bls.n	8002ff2 <HAL_PCD_EP_Open+0x166>
 8002fda:	f3c6 144f 	ubfx	r4, r6, #5, #16
 8002fde:	06f7      	lsls	r7, r6, #27
 8002fe0:	bf04      	itt	eq
 8002fe2:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8002fe6:	b2a4      	uxtheq	r4, r4
 8002fe8:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002fec:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002ff0:	e006      	b.n	8003000 <HAL_PCD_EP_Open+0x174>
 8002ff2:	f3c6 044f 	ubfx	r4, r6, #1, #16
 8002ff6:	07f6      	lsls	r6, r6, #31
 8002ff8:	bf44      	itt	mi
 8002ffa:	3401      	addmi	r4, #1
 8002ffc:	b2a4      	uxthmi	r4, r4
 8002ffe:	02a4      	lsls	r4, r4, #10
 8003000:	b2a4      	uxth	r4, r4
 8003002:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003006:	780c      	ldrb	r4, [r1, #0]
 8003008:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800300c:	0452      	lsls	r2, r2, #17
 800300e:	d50b      	bpl.n	8003028 <HAL_PCD_EP_Open+0x19c>
 8003010:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003014:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003018:	0512      	lsls	r2, r2, #20
 800301a:	0d12      	lsrs	r2, r2, #20
 800301c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003020:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003024:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003028:	7809      	ldrb	r1, [r1, #0]
 800302a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800302e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003032:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003036:	0412      	lsls	r2, r2, #16
 8003038:	0c12      	lsrs	r2, r2, #16
 800303a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800303e:	e0b4      	b.n	80031aa <HAL_PCD_EP_Open+0x31e>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8003040:	b212      	sxth	r2, r2
 8003042:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8003046:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800304a:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 800304e:	0524      	lsls	r4, r4, #20
 8003050:	0d24      	lsrs	r4, r4, #20
 8003052:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8003056:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800305a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800305e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003062:	780c      	ldrb	r4, [r1, #0]
 8003064:	2208      	movs	r2, #8
 8003066:	b2b6      	uxth	r6, r6
 8003068:	fb12 6604 	smlabb	r6, r2, r4, r6
 800306c:	88cc      	ldrh	r4, [r1, #6]
 800306e:	0864      	lsrs	r4, r4, #1
 8003070:	0064      	lsls	r4, r4, #1
 8003072:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 8003076:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800307a:	780e      	ldrb	r6, [r1, #0]
 800307c:	b2a4      	uxth	r4, r4
 800307e:	fb12 4206 	smlabb	r2, r2, r6, r4
 8003082:	890c      	ldrh	r4, [r1, #8]
 8003084:	3204      	adds	r2, #4
 8003086:	0864      	lsrs	r4, r4, #1
 8003088:	0064      	lsls	r4, r4, #1
 800308a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800308e:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 8003090:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003092:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 8003094:	2a00      	cmp	r2, #0
 8003096:	d146      	bne.n	8003126 <HAL_PCD_EP_Open+0x29a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003098:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800309c:	0457      	lsls	r7, r2, #17
 800309e:	d50b      	bpl.n	80030b8 <HAL_PCD_EP_Open+0x22c>
 80030a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030a8:	0512      	lsls	r2, r2, #20
 80030aa:	0d12      	lsrs	r2, r2, #20
 80030ac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80030b8:	780c      	ldrb	r4, [r1, #0]
 80030ba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030be:	0656      	lsls	r6, r2, #25
 80030c0:	d50b      	bpl.n	80030da <HAL_PCD_EP_Open+0x24e>
 80030c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030ca:	0512      	lsls	r2, r2, #20
 80030cc:	0d12      	lsrs	r2, r2, #20
 80030ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80030d6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80030da:	780c      	ldrb	r4, [r1, #0]
 80030dc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030e4:	0512      	lsls	r2, r2, #20
 80030e6:	0d12      	lsrs	r2, r2, #20
 80030e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80030f0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80030f4:	780c      	ldrb	r4, [r1, #0]
 80030f6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003102:	0412      	lsls	r2, r2, #16
 8003104:	0c12      	lsrs	r2, r2, #16
 8003106:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800310a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800310e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003112:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003116:	7809      	ldrb	r1, [r1, #0]
 8003118:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800311c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003120:	0512      	lsls	r2, r2, #20
 8003122:	0d12      	lsrs	r2, r2, #20
 8003124:	e041      	b.n	80031aa <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003126:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800312a:	0455      	lsls	r5, r2, #17
 800312c:	d50b      	bpl.n	8003146 <HAL_PCD_EP_Open+0x2ba>
 800312e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003132:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003136:	0512      	lsls	r2, r2, #20
 8003138:	0d12      	lsrs	r2, r2, #20
 800313a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800313e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003142:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003146:	780c      	ldrb	r4, [r1, #0]
 8003148:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800314c:	0652      	lsls	r2, r2, #25
 800314e:	d50b      	bpl.n	8003168 <HAL_PCD_EP_Open+0x2dc>
 8003150:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003154:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003158:	0512      	lsls	r2, r2, #20
 800315a:	0d12      	lsrs	r2, r2, #20
 800315c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003160:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003164:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003168:	780c      	ldrb	r4, [r1, #0]
 800316a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800316e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003172:	0512      	lsls	r2, r2, #20
 8003174:	0d12      	lsrs	r2, r2, #20
 8003176:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800317a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800317e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003182:	780c      	ldrb	r4, [r1, #0]
 8003184:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003188:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800318c:	0512      	lsls	r2, r2, #20
 800318e:	0d12      	lsrs	r2, r2, #20
 8003190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003198:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800319c:	7809      	ldrb	r1, [r1, #0]
 800319e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80031a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031a6:	0492      	lsls	r2, r2, #18
 80031a8:	0c92      	lsrs	r2, r2, #18
 80031aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80031b6:	2300      	movs	r3, #0
 80031b8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 80031bc:	4618      	mov	r0, r3
 80031be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 80031c0:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 80031c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c4 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80031c4:	b2cb      	uxtb	r3, r1
 80031c6:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80031ca:	b530      	push	{r4, r5, lr}
 80031cc:	f04f 021c 	mov.w	r2, #28
 80031d0:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80031d4:	bf15      	itete	ne
 80031d6:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80031da:	fb02 0101 	mlaeq	r1, r2, r1, r0
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80031de:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80031e0:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80031e2:	09db      	lsrs	r3, r3, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80031e4:	700c      	strb	r4, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80031e6:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80031e8:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f000 80bf 	beq.w	8003370 <HAL_PCD_EP_Close+0x1ac>
 80031f2:	2301      	movs	r3, #1
 80031f4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 80031f8:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 80031fa:	7a8d      	ldrb	r5, [r1, #10]
 80031fc:	784c      	ldrb	r4, [r1, #1]
 80031fe:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003200:	b212      	sxth	r2, r2
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 

  if (ep->doublebuffer == 0) 
 8003202:	bb1d      	cbnz	r5, 800324c <HAL_PCD_EP_Close+0x88>
  {
    if (ep->is_in)
 8003204:	b184      	cbz	r4, 8003228 <HAL_PCD_EP_Close+0x64>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003206:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800320a:	0664      	lsls	r4, r4, #25
 800320c:	d55b      	bpl.n	80032c6 <HAL_PCD_EP_Close+0x102>
 800320e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003212:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003216:	0524      	lsls	r4, r4, #20
 8003218:	0d24      	lsrs	r4, r4, #20
 800321a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800321e:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003222:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8003226:	e04e      	b.n	80032c6 <HAL_PCD_EP_Close+0x102>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003228:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800322c:	0465      	lsls	r5, r4, #17
 800322e:	f140 808d 	bpl.w	800334c <HAL_PCD_EP_Close+0x188>
 8003232:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003236:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800323a:	0524      	lsls	r4, r4, #20
 800323c:	0d24      	lsrs	r4, r4, #20
 800323e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003242:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003246:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800324a:	e07f      	b.n	800334c <HAL_PCD_EP_Close+0x188>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800324c:	2c00      	cmp	r4, #0
 800324e:	d142      	bne.n	80032d6 <HAL_PCD_EP_Close+0x112>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003250:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003254:	0464      	lsls	r4, r4, #17
 8003256:	d50b      	bpl.n	8003270 <HAL_PCD_EP_Close+0xac>
 8003258:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800325c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003260:	0524      	lsls	r4, r4, #20
 8003262:	0d24      	lsrs	r4, r4, #20
 8003264:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003268:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800326c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003270:	780c      	ldrb	r4, [r1, #0]
 8003272:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003276:	0655      	lsls	r5, r2, #25
 8003278:	d50b      	bpl.n	8003292 <HAL_PCD_EP_Close+0xce>
 800327a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800327e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003282:	0512      	lsls	r2, r2, #20
 8003284:	0d12      	lsrs	r2, r2, #20
 8003286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800328a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800328e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003292:	780c      	ldrb	r4, [r1, #0]
 8003294:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003298:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800329c:	0512      	lsls	r2, r2, #20
 800329e:	0d12      	lsrs	r2, r2, #20
 80032a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80032a8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80032ac:	780c      	ldrb	r4, [r1, #0]
 80032ae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032b6:	0492      	lsls	r2, r2, #18
 80032b8:	0c92      	lsrs	r2, r2, #18
 80032ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80032c6:	7809      	ldrb	r1, [r1, #0]
 80032c8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80032cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80032d0:	0512      	lsls	r2, r2, #20
 80032d2:	0d12      	lsrs	r2, r2, #20
 80032d4:	e041      	b.n	800335a <HAL_PCD_EP_Close+0x196>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80032d6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80032da:	0464      	lsls	r4, r4, #17
 80032dc:	d50b      	bpl.n	80032f6 <HAL_PCD_EP_Close+0x132>
 80032de:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80032e2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80032e6:	0524      	lsls	r4, r4, #20
 80032e8:	0d24      	lsrs	r4, r4, #20
 80032ea:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80032ee:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80032f2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80032f6:	780c      	ldrb	r4, [r1, #0]
 80032f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032fc:	0652      	lsls	r2, r2, #25
 80032fe:	d50b      	bpl.n	8003318 <HAL_PCD_EP_Close+0x154>
 8003300:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003304:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003308:	0512      	lsls	r2, r2, #20
 800330a:	0d12      	lsrs	r2, r2, #20
 800330c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003310:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003314:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003318:	780c      	ldrb	r4, [r1, #0]
 800331a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800331e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003322:	0512      	lsls	r2, r2, #20
 8003324:	0d12      	lsrs	r2, r2, #20
 8003326:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800332a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800332e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003332:	780c      	ldrb	r4, [r1, #0]
 8003334:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003338:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800333c:	0512      	lsls	r2, r2, #20
 800333e:	0d12      	lsrs	r2, r2, #20
 8003340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003344:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003348:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800334c:	7809      	ldrb	r1, [r1, #0]
 800334e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003352:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003356:	0492      	lsls	r2, r2, #18
 8003358:	0c92      	lsrs	r2, r2, #18
 800335a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003362:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003366:	2300      	movs	r3, #0
 8003368:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 800336c:	4618      	mov	r0, r3
 800336e:	bd30      	pop	{r4, r5, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8003370:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8003372:	bd30      	pop	{r4, r5, pc}

08003374 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003374:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003376:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800337a:	241c      	movs	r4, #28
 800337c:	fb04 0401 	mla	r4, r4, r1, r0
 8003380:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
 8003384:	606a      	str	r2, [r5, #4]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8003386:	2200      	movs	r2, #0
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8003388:	60ab      	str	r3, [r5, #8]
  ep->xfer_count = 0;
 800338a:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 800338e:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 8003392:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 8003396:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800339a:	2b01      	cmp	r3, #1
 800339c:	d062      	beq.n	8003464 <HAL_PCD_EP_Receive+0xf0>
 800339e:	2301      	movs	r3, #1
 80033a0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80033a4:	68ab      	ldr	r3, [r5, #8]
 80033a6:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 80033aa:	42a3      	cmp	r3, r4
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 80033ac:	bf98      	it	ls
 80033ae:	60aa      	strls	r2, [r5, #8]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 80033b0:	f04f 021c 	mov.w	r2, #28
 80033b4:	fb02 0201 	mla	r2, r2, r1, r0
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 80033b8:	bf84      	itt	hi
 80033ba:	1b1b      	subhi	r3, r3, r4
 80033bc:	60ab      	strhi	r3, [r5, #8]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 80033be:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 80033c2:	bf88      	it	hi
 80033c4:	4623      	movhi	r3, r4
 80033c6:	32b0      	adds	r2, #176	; 0xb0
 80033c8:	6804      	ldr	r4, [r0, #0]
 80033ca:	b10d      	cbz	r5, 80033d0 <HAL_PCD_EP_Receive+0x5c>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033cc:	7955      	ldrb	r5, [r2, #5]
 80033ce:	bb15      	cbnz	r5, 8003416 <HAL_PCD_EP_Receive+0xa2>
 80033d0:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 80033d4:	7912      	ldrb	r2, [r2, #4]
 80033d6:	b2ad      	uxth	r5, r5
 80033d8:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80033dc:	2b3e      	cmp	r3, #62	; 0x3e
 80033de:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 80033e2:	f105 0506 	add.w	r5, r5, #6
 80033e6:	d90b      	bls.n	8003400 <HAL_PCD_EP_Receive+0x8c>
 80033e8:	f3c3 124f 	ubfx	r2, r3, #5, #16
 80033ec:	06db      	lsls	r3, r3, #27
 80033ee:	bf04      	itt	eq
 80033f0:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80033f4:	b292      	uxtheq	r2, r2
 80033f6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80033fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80033fe:	e006      	b.n	800340e <HAL_PCD_EP_Receive+0x9a>
 8003400:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8003404:	07db      	lsls	r3, r3, #31
 8003406:	bf44      	itt	mi
 8003408:	3201      	addmi	r2, #1
 800340a:	b292      	uxthmi	r2, r2
 800340c:	0292      	lsls	r2, r2, #10
 800340e:	b292      	uxth	r2, r2
 8003410:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 8003414:	e00c      	b.n	8003430 <HAL_PCD_EP_Receive+0xbc>
 8003416:	2d01      	cmp	r5, #1
 8003418:	bf01      	itttt	eq
 800341a:	f8b4 5050 	ldrheq.w	r5, [r4, #80]	; 0x50
 800341e:	7912      	ldrbeq	r2, [r2, #4]
 8003420:	b2ad      	uxtheq	r5, r5
 8003422:	eb05 02c2 	addeq.w	r2, r5, r2, lsl #3
 8003426:	bf04      	itt	eq
 8003428:	eb04 0242 	addeq.w	r2, r4, r2, lsl #1
 800342c:	f8c2 340c 	streq.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003430:	231c      	movs	r3, #28
 8003432:	fb03 0101 	mla	r1, r3, r1, r0
 8003436:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 800343a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800343e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003456:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 800345a:	2300      	movs	r3, #0
 800345c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8003460:	4618      	mov	r0, r3
 8003462:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 8003464:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8003466:	bd70      	pop	{r4, r5, r6, pc}

08003468 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8003468:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800346c:	231c      	movs	r3, #28
 800346e:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003472:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 8003476:	4770      	bx	lr

08003478 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800347a:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800347e:	211c      	movs	r1, #28
 8003480:	fb01 0106 	mla	r1, r1, r6, r0
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003484:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003486:	f101 0038 	add.w	r0, r1, #56	; 0x38
 800348a:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 800348c:	6043      	str	r3, [r0, #4]
  ep->xfer_count = 0;
 800348e:	2200      	movs	r2, #0
  ep->is_in = 1;
 8003490:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8003492:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 8003494:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8003498:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 800349c:	f894 5140 	ldrb.w	r5, [r4, #320]	; 0x140
 80034a0:	429d      	cmp	r5, r3
 80034a2:	f000 80a8 	beq.w	80035f6 <HAL_PCD_EP_Transmit+0x17e>
 80034a6:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80034aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80034ac:	6845      	ldr	r5, [r0, #4]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 80034ae:	271c      	movs	r7, #28
 80034b0:	fb07 4706 	mla	r7, r7, r6, r4
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80034b4:	429d      	cmp	r5, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 80034b6:	bf88      	it	hi
 80034b8:	1aed      	subhi	r5, r5, r3
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 80034ba:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 80034be:	bf86      	itte	hi
 80034c0:	6045      	strhi	r5, [r0, #4]
 80034c2:	461d      	movhi	r5, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 80034c4:	6042      	strls	r2, [r0, #4]
 80034c6:	b2ab      	uxth	r3, r5
 80034c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 80034cc:	b989      	cbnz	r1, 80034f2 <HAL_PCD_EP_Transmit+0x7a>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 80034ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d0:	8892      	ldrh	r2, [r2, #4]
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	f000 fbb3 	bl	8003c3e <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80034d8:	6821      	ldr	r1, [r4, #0]
 80034da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034de:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80034e2:	b292      	uxth	r2, r2
 80034e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80034e8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80034ec:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 80034f0:	e067      	b.n	80035c2 <HAL_PCD_EP_Transmit+0x14a>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034f2:	7852      	ldrb	r2, [r2, #1]
 80034f4:	6820      	ldr	r0, [r4, #0]
 80034f6:	bb1a      	cbnz	r2, 8003540 <HAL_PCD_EP_Transmit+0xc8>
 80034f8:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80034fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003500:	b289      	uxth	r1, r1
 8003502:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003506:	2d3e      	cmp	r5, #62	; 0x3e
 8003508:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 800350c:	f101 0106 	add.w	r1, r1, #6
 8003510:	d90b      	bls.n	800352a <HAL_PCD_EP_Transmit+0xb2>
 8003512:	f3c5 124f 	ubfx	r2, r5, #5, #16
 8003516:	06ed      	lsls	r5, r5, #27
 8003518:	bf04      	itt	eq
 800351a:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800351e:	b292      	uxtheq	r2, r2
 8003520:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003524:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003528:	e006      	b.n	8003538 <HAL_PCD_EP_Transmit+0xc0>
 800352a:	f3c5 024f 	ubfx	r2, r5, #1, #16
 800352e:	07ed      	lsls	r5, r5, #31
 8003530:	bf44      	itt	mi
 8003532:	3201      	addmi	r2, #1
 8003534:	b292      	uxthmi	r2, r2
 8003536:	0292      	lsls	r2, r2, #10
 8003538:	b292      	uxth	r2, r2
 800353a:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 800353e:	e00d      	b.n	800355c <HAL_PCD_EP_Transmit+0xe4>
 8003540:	2a01      	cmp	r2, #1
 8003542:	bf01      	itttt	eq
 8003544:	f8b0 2050 	ldrheq.w	r2, [r0, #80]	; 0x50
 8003548:	f897 1028 	ldrbeq.w	r1, [r7, #40]	; 0x28
 800354c:	b292      	uxtheq	r2, r2
 800354e:	eb02 02c1 	addeq.w	r2, r2, r1, lsl #3
 8003552:	bf04      	itt	eq
 8003554:	eb00 0242 	addeq.w	r2, r0, r2, lsl #1
 8003558:	f8c2 540c 	streq.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800355c:	251c      	movs	r5, #28
 800355e:	fb05 4206 	mla	r2, r5, r6, r4
 8003562:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8003566:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 800356a:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800356e:	fb05 4506 	mla	r5, r5, r6, r4
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8003572:	067f      	lsls	r7, r7, #25
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8003574:	bf54      	ite	pl
 8003576:	88ca      	ldrhpl	r2, [r1, #6]
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
    {
      pmabuffer = ep->pmaaddr1;
 8003578:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800357a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800357c:	f000 fb5f 	bl	8003c3e <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8003580:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	b963      	cbnz	r3, 80035a2 <HAL_PCD_EP_Transmit+0x12a>
 8003588:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800358c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003594:	051b      	lsls	r3, r3, #20
 8003596:	0d1b      	lsrs	r3, r3, #20
 8003598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800359c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035a0:	e00d      	b.n	80035be <HAL_PCD_EP_Transmit+0x146>
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10d      	bne.n	80035c2 <HAL_PCD_EP_Transmit+0x14a>
 80035a6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80035aa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b2:	051b      	lsls	r3, r3, #20
 80035b4:	0d1b      	lsrs	r3, r3, #20
 80035b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035be:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035c2:	231c      	movs	r3, #28
 80035c4:	fb03 4606 	mla	r6, r3, r6, r4
 80035c8:	6822      	ldr	r2, [r4, #0]
 80035ca:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80035ce:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035da:	041b      	lsls	r3, r3, #16
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80035e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 80035ea:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035ec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 80035f0:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 80035f6:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 80035f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035fa <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80035fa:	6803      	ldr	r3, [r0, #0]
 80035fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003600:	b21b      	sxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003606:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003608:	db11      	blt.n	800362e <HAL_PCD_IRQHandler+0x34>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003610:	0552      	lsls	r2, r2, #21
 8003612:	f140 81e7 	bpl.w	80039e4 <HAL_PCD_IRQHandler+0x3ea>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003616:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 800361a:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800361c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003620:	f001 fcd6 	bl	8004fd0 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8003624:	4620      	mov	r0, r4
 8003626:	2100      	movs	r1, #0
 8003628:	f7ff fc1a 	bl	8002e60 <HAL_PCD_SetAddress>
 800362c:	e1da      	b.n	80039e4 <HAL_PCD_IRQHandler+0x3ea>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8003634:	6820      	ldr	r0, [r4, #0]
 8003636:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800363a:	b29b      	uxth	r3, r3
 800363c:	0419      	lsls	r1, r3, #16
 800363e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003642:	d5e2      	bpl.n	800360a <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003644:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (EPindex == 0)
 8003648:	f015 050f 	ands.w	r5, r5, #15
 800364c:	f040 80b7 	bne.w	80037be <HAL_PCD_IRQHandler+0x1c4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8003650:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003654:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8003656:	f001 0110 	and.w	r1, r1, #16
 800365a:	b289      	uxth	r1, r1
 800365c:	bb59      	cbnz	r1, 80036b6 <HAL_PCD_IRQHandler+0xbc>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800365e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	041b      	lsls	r3, r3, #16
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800366c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003670:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003674:	b29b      	uxth	r3, r3
 8003676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800367a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 800367e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003680:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 8003684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003688:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800368a:	4413      	add	r3, r2
 800368c:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800368e:	4620      	mov	r0, r4
 8003690:	f001 fc92 	bl	8004fb8 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8003694:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0cb      	beq.n	8003634 <HAL_PCD_IRQHandler+0x3a>
 800369c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800369e:	2a00      	cmp	r2, #0
 80036a0:	d1c8      	bne.n	8003634 <HAL_PCD_IRQHandler+0x3a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80036a2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80036a6:	6821      	ldr	r1, [r4, #0]
 80036a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ac:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 80036b0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80036b4:	e7be      	b.n	8003634 <HAL_PCD_IRQHandler+0x3a>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 80036bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80036c0:	051f      	lsls	r7, r3, #20
 80036c2:	d51f      	bpl.n	8003704 <HAL_PCD_IRQHandler+0x10a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036c4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80036c8:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80036d6:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036da:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80036de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e2:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80036e6:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 80036ea:	f000 fabf 	bl	8003c6c <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	8813      	ldrh	r3, [r2, #0]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	051b      	lsls	r3, r3, #20
 80036f8:	0d1b      	lsrs	r3, r3, #20
 80036fa:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80036fc:	4620      	mov	r0, r4
 80036fe:	f001 fc4b 	bl	8004f98 <HAL_PCD_SetupStageCallback>
 8003702:	e797      	b.n	8003634 <HAL_PCD_IRQHandler+0x3a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8003704:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003708:	b21b      	sxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	da92      	bge.n	8003634 <HAL_PCD_IRQHandler+0x3a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800370e:	8803      	ldrh	r3, [r0, #0]
 8003710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003714:	051b      	lsls	r3, r3, #20
 8003716:	0d1b      	lsrs	r3, r3, #20
 8003718:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800371a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800371e:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8003722:	b29b      	uxth	r3, r3
 8003724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003728:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800372c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003734:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 8003738:	b163      	cbz	r3, 8003754 <HAL_PCD_IRQHandler+0x15a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800373a:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 800373e:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8003742:	f000 fa93 	bl	8003c6c <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8003746:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800374a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800374e:	4413      	add	r3, r2
 8003750:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8003754:	4620      	mov	r0, r4
 8003756:	2100      	movs	r1, #0
 8003758:	f001 fc25 	bl	8004fa6 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8003762:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8003766:	2d3e      	cmp	r5, #62	; 0x3e
 8003768:	b289      	uxth	r1, r1
 800376a:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800376e:	f101 0106 	add.w	r1, r1, #6
 8003772:	d90b      	bls.n	800378c <HAL_PCD_IRQHandler+0x192>
 8003774:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8003778:	06ee      	lsls	r6, r5, #27
 800377a:	bf04      	itt	eq
 800377c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8003780:	b29b      	uxtheq	r3, r3
 8003782:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8003786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800378a:	e006      	b.n	800379a <HAL_PCD_IRQHandler+0x1a0>
 800378c:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8003790:	07ed      	lsls	r5, r5, #31
 8003792:	bf44      	itt	mi
 8003794:	3301      	addmi	r3, #1
 8003796:	b29b      	uxthmi	r3, r3
 8003798:	029b      	lsls	r3, r3, #10
 800379a:	b29b      	uxth	r3, r3
 800379c:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80037a0:	8813      	ldrh	r3, [r2, #0]
 80037a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80037b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ba:	8013      	strh	r3, [r2, #0]
 80037bc:	e73a      	b.n	8003634 <HAL_PCD_IRQHandler+0x3a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 80037be:	b22f      	sxth	r7, r5
 80037c0:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 80037ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f280 8084 	bge.w	80038de <HAL_PCD_IRQHandler+0x2e4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80037d6:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80037e0:	221c      	movs	r2, #28
 80037e2:	fb02 4205 	mla	r2, r2, r5, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80037e6:	0d1b      	lsrs	r3, r3, #20
 80037e8:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80037ec:	f102 0cb8 	add.w	ip, r2, #184	; 0xb8
 80037f0:	f89c 3006 	ldrb.w	r3, [ip, #6]
 80037f4:	f102 0eb0 	add.w	lr, r2, #176	; 0xb0
 80037f8:	b9b3      	cbnz	r3, 8003828 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037fa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80037fe:	f89e 1004 	ldrb.w	r1, [lr, #4]
 8003802:	b29b      	uxth	r3, r3
 8003804:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003808:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800380c:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8003810:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8003814:	2e00      	cmp	r6, #0
 8003816:	d040      	beq.n	800389a <HAL_PCD_IRQHandler+0x2a0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003818:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 800381c:	f8be 2008 	ldrh.w	r2, [lr, #8]
 8003820:	4633      	mov	r3, r6
 8003822:	f000 fa23 	bl	8003c6c <PCD_ReadPMA>
 8003826:	e038      	b.n	800389a <HAL_PCD_IRQHandler+0x2a0>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003828:	f89e 6004 	ldrb.w	r6, [lr, #4]
 800382c:	b233      	sxth	r3, r6
 800382e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003832:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003836:	f413 4f80 	tst.w	r3, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800383a:	b289      	uxth	r1, r1
 800383c:	f04f 0308 	mov.w	r3, #8
 8003840:	fb13 1306 	smlabb	r3, r3, r6, r1
 8003844:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003848:	d009      	beq.n	800385e <HAL_PCD_IRQHandler+0x264>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800384a:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 800384e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8003852:	b186      	cbz	r6, 8003876 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003854:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8003858:	f8be 200a 	ldrh.w	r2, [lr, #10]
 800385c:	e008      	b.n	8003870 <HAL_PCD_IRQHandler+0x276>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800385e:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8003862:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8003866:	b136      	cbz	r6, 8003876 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003868:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 800386c:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8003870:	4633      	mov	r3, r6
 8003872:	f000 f9fb 	bl	8003c6c <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8003876:	231c      	movs	r3, #28
 8003878:	fb03 4305 	mla	r3, r3, r5, r4
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8003882:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388a:	051b      	lsls	r3, r3, #20
 800388c:	0d1b      	lsrs	r3, r3, #20
 800388e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003896:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800389a:	211c      	movs	r1, #28
 800389c:	fb01 4105 	mla	r1, r1, r5, r4
 80038a0:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 80038a4:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80038a8:	4433      	add	r3, r6
 80038aa:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80038ae:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 80038b2:	4432      	add	r2, r6
 80038b4:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80038b8:	b11b      	cbz	r3, 80038c2 <HAL_PCD_IRQHandler+0x2c8>
 80038ba:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 80038be:	4286      	cmp	r6, r0
 80038c0:	d208      	bcs.n	80038d4 <HAL_PCD_IRQHandler+0x2da>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038c2:	231c      	movs	r3, #28
 80038c4:	fb03 4305 	mla	r3, r3, r5, r4
 80038c8:	4620      	mov	r0, r4
 80038ca:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 80038ce:	f001 fb6a 	bl	8004fa6 <HAL_PCD_DataOutStageCallback>
 80038d2:	e004      	b.n	80038de <HAL_PCD_IRQHandler+0x2e4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80038d4:	4620      	mov	r0, r4
 80038d6:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 80038da:	f7ff fd4b 	bl	8003374 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 80038de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80038e2:	0618      	lsls	r0, r3, #24
 80038e4:	f57f aea6 	bpl.w	8003634 <HAL_PCD_IRQHandler+0x3a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 80038ee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	0c1b      	lsrs	r3, r3, #16
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80038fa:	221c      	movs	r2, #28
 80038fc:	fb02 4205 	mla	r2, r2, r5, r4
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003900:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8003904:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8003908:	f102 0628 	add.w	r6, r2, #40	; 0x28
 800390c:	b9a3      	cbnz	r3, 8003938 <HAL_PCD_IRQHandler+0x33e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800390e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003912:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8003916:	b29b      	uxth	r3, r3
 8003918:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800391c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003920:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 800392a:	2b00      	cmp	r3, #0
 800392c:	d03a      	beq.n	80039a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800392e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003930:	88b2      	ldrh	r2, [r6, #4]
 8003932:	f000 f984 	bl	8003c3e <PCD_WritePMA>
 8003936:	e035      	b.n	80039a4 <HAL_PCD_IRQHandler+0x3aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003938:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 800393c:	b23b      	sxth	r3, r7
 800393e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003942:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003946:	f013 0f40 	tst.w	r3, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800394a:	b289      	uxth	r1, r1
 800394c:	f04f 0308 	mov.w	r3, #8
 8003950:	fb13 1307 	smlabb	r3, r3, r7, r1
 8003954:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003958:	d008      	beq.n	800396c <HAL_PCD_IRQHandler+0x372>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800395a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800395e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8003964:	b163      	cbz	r3, 8003980 <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003966:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003968:	88f2      	ldrh	r2, [r6, #6]
 800396a:	e007      	b.n	800397c <HAL_PCD_IRQHandler+0x382>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800396c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8003976:	b11b      	cbz	r3, 8003980 <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003978:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800397a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800397c:	f000 f95f 	bl	8003c3e <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8003980:	231c      	movs	r3, #28
 8003982:	fb03 4305 	mla	r3, r3, r5, r4
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800398c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003994:	051b      	lsls	r3, r3, #20
 8003996:	0d1b      	lsrs	r3, r3, #20
 8003998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800399c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039a4:	6821      	ldr	r1, [r4, #0]
 80039a6:	231c      	movs	r3, #28
 80039a8:	fb03 4505 	mla	r5, r3, r5, r4
 80039ac:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80039b0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80039b4:	b292      	uxth	r2, r2
 80039b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80039ba:	eb01 0343 	add.w	r3, r1, r3, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039be:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039c0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 80039c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80039c6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80039ce:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 80039d0:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 80039d2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 80039d4:	63aa      	str	r2, [r5, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 80039d6:	b913      	cbnz	r3, 80039de <HAL_PCD_IRQHandler+0x3e4>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d8:	f001 faee 	bl	8004fb8 <HAL_PCD_DataInStageCallback>
 80039dc:	e62a      	b.n	8003634 <HAL_PCD_IRQHandler+0x3a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80039de:	f7ff fd4b 	bl	8003478 <HAL_PCD_EP_Transmit>
 80039e2:	e627      	b.n	8003634 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80039ea:	0452      	lsls	r2, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 80039ec:	bf44      	itt	mi
 80039ee:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 80039f2:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80039f6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80039fa:	0497      	lsls	r7, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80039fc:	bf44      	itt	mi
 80039fe:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8003a02:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8003a06:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003a0a:	04d6      	lsls	r6, r2, #19
 8003a0c:	d513      	bpl.n	8003a36 <HAL_PCD_IRQHandler+0x43c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8003a0e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	0412      	lsls	r2, r2, #16
 8003a18:	0c12      	lsrs	r2, r2, #16
 8003a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8003a1e:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8003a22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8003a26:	4620      	mov	r0, r4
 8003a28:	f001 fae0 	bl	8004fec <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8003a32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003a3c:	0515      	lsls	r5, r2, #20
 8003a3e:	d518      	bpl.n	8003a72 <HAL_PCD_IRQHandler+0x478>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8003a40:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8003a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003a48:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	f042 0208 	orr.w	r2, r2, #8
 8003a52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003a56:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	f042 0204 	orr.w	r2, r2, #4
 8003a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8003a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a68:	04d8      	lsls	r0, r3, #19
 8003a6a:	d402      	bmi.n	8003a72 <HAL_PCD_IRQHandler+0x478>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f001 fabc 	bl	8004fea <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003a78:	0591      	lsls	r1, r2, #22
 8003a7a:	d506      	bpl.n	8003a8a <HAL_PCD_IRQHandler+0x490>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8003a7c:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8003a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003a84:	4620      	mov	r0, r4
 8003a86:	f001 fa9f 	bl	8004fc8 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003a90:	05d2      	lsls	r2, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8003a92:	bf44      	itt	mi
 8003a94:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8003a98:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8003a9c:	b003      	add	sp, #12
 8003a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aa0 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003aa0:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003aa4:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa6:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003aa8:	d049      	beq.n	8003b3e <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8003aaa:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003aac:	2301      	movs	r3, #1
 8003aae:	221c      	movs	r2, #28
 8003ab0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  if ((0x80 & ep_addr) == 0x80)
 8003ab4:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003ab8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003abc:	bf15      	itete	ne
 8003abe:	fb02 0203 	mlane	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ac2:	fb02 0201 	mlaeq	r2, r2, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003ac6:	3228      	addne	r2, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ac8:	32b4      	addeq	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8003aca:	2101      	movs	r1, #1
 8003acc:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8003ace:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003ad0:	09e3      	lsrs	r3, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8003ad2:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003ad4:	7053      	strb	r3, [r2, #1]
 8003ad6:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8003ad8:	b979      	cbnz	r1, 8003afa <HAL_PCD_EP_SetStall+0x5a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003ada:	8813      	ldrh	r3, [r2, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003aea:	f083 0310 	eor.w	r3, r3, #16
 8003aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af6:	8013      	strh	r3, [r2, #0]
 8003af8:	e01c      	b.n	8003b34 <HAL_PCD_EP_SetStall+0x94>
 8003afa:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 8003afc:	b153      	cbz	r3, 8003b14 <HAL_PCD_EP_SetStall+0x74>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8003afe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	f083 0310 	eor.w	r3, r3, #16
 8003b12:	e009      	b.n	8003b28 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8003b14:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b30:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8003b34:	2300      	movs	r3, #0
 8003b36:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003b3e:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8003b40:	bd10      	pop	{r4, pc}

08003b42 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8003b42:	b2cb      	uxtb	r3, r1
 8003b44:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	f04f 021c 	mov.w	r2, #28
 8003b4e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003b52:	bf15      	itete	ne
 8003b54:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b58:	fb02 0101 	mlaeq	r1, r2, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003b5c:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b5e:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003b60:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8003b62:	2200      	movs	r2, #0
 8003b64:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8003b66:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003b68:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8003b6a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d049      	beq.n	8003c06 <HAL_PCD_EP_ClrStall+0xc4>
 8003b72:	2301      	movs	r3, #1
 8003b74:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003b78:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8003b7a:	784b      	ldrb	r3, [r1, #1]
 8003b7c:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003b7e:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 8003b80:	b1db      	cbz	r3, 8003bba <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003b82:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003b86:	065b      	lsls	r3, r3, #25
 8003b88:	d50b      	bpl.n	8003ba2 <HAL_PCD_EP_ClrStall+0x60>
 8003b8a:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b92:	051b      	lsls	r3, r3, #20
 8003b94:	0d1b      	lsrs	r3, r3, #20
 8003b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b9e:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ba2:	7809      	ldrb	r1, [r1, #0]
 8003ba4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003bb8:	e01a      	b.n	8003bf0 <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003bba:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003bbe:	045b      	lsls	r3, r3, #17
 8003bc0:	d50b      	bpl.n	8003bda <HAL_PCD_EP_ClrStall+0x98>
 8003bc2:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bca:	051b      	lsls	r3, r3, #20
 8003bcc:	0d1b      	lsrs	r3, r3, #20
 8003bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd6:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003bda:	7809      	ldrb	r1, [r1, #0]
 8003bdc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	0c1b      	lsrs	r3, r3, #16
 8003bec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8003c02:	4618      	mov	r0, r3
 8003c04:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8003c06:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8003c08:	bd10      	pop	{r4, pc}

08003c0a <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8003c0a:	f011 0f80 	tst.w	r1, #128	; 0x80
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8003c0e:	b530      	push	{r4, r5, lr}
 8003c10:	f04f 051c 	mov.w	r5, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003c14:	bf1b      	ittet	ne
 8003c16:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
 8003c1a:	fb05 0004 	mlane	r0, r5, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c1e:	fb05 0001 	mlaeq	r0, r5, r1, r0
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003c22:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c24:	bf08      	it	eq
 8003c26:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c28:	b912      	cbnz	r2, 8003c30 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8003c2a:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003c2c:	8083      	strh	r3, [r0, #4]
 8003c2e:	e004      	b.n	8003c3a <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003c30:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8003c32:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8003c34:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003c36:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8003c38:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	bd30      	pop	{r4, r5, pc}

08003c3e <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003c44:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003c46:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003c48:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003c4c:	2400      	movs	r4, #0
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	f101 0102 	add.w	r1, r1, #2
 8003c54:	d009      	beq.n	8003c6a <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003c56:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003c5a:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003c5e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 8003c62:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8003c66:	3401      	adds	r4, #1
 8003c68:	e7f1      	b.n	8003c4e <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8003c6a:	bd30      	pop	{r4, r5, pc}

08003c6c <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003c72:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003c74:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003c76:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003c7a:	2400      	movs	r4, #0
 8003c7c:	429c      	cmp	r4, r3
 8003c7e:	d005      	beq.n	8003c8c <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003c80:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003c84:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8003c88:	3401      	adds	r4, #1
 8003c8a:	e7f7      	b.n	8003c7c <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8003c8c:	bd10      	pop	{r4, pc}

08003c8e <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003c8e:	4770      	bx	lr

08003c90 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003c90:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003c92:	6804      	ldr	r4, [r0, #0]
 8003c94:	9d03      	ldr	r5, [sp, #12]
 8003c96:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003c98:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8003c9c:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8003ca0:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8003ca4:	f020 0003 	bic.w	r0, r0, #3
 8003ca8:	4328      	orrs	r0, r5
 8003caa:	4303      	orrs	r3, r0
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003cac:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8003cb6:	6062      	str	r2, [r4, #4]
 8003cb8:	bd30      	pop	{r4, r5, pc}
	...

08003cbc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003cc2:	f7fe ff2f 	bl	8002b24 <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc6:	6823      	ldr	r3, [r4, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003cc8:	4606      	mov	r6, r0

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cca:	6998      	ldr	r0, [r3, #24]
 8003ccc:	f010 0010 	ands.w	r0, r0, #16
 8003cd0:	d039      	beq.n	8003d46 <I2C_IsAcknowledgeFailed+0x8a>
  {
    /* Generate stop if necessary only in case of I2C peripheral in MASTER mode */
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8003cd2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003cd6:	2a12      	cmp	r2, #18
 8003cd8:	d007      	beq.n	8003cea <I2C_IsAcknowledgeFailed+0x2e>
 8003cda:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003cde:	2a52      	cmp	r2, #82	; 0x52
 8003ce0:	d003      	beq.n	8003cea <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8003ce2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003ce6:	2a62      	cmp	r2, #98	; 0x62
 8003ce8:	d112      	bne.n	8003d10 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* No need to generate the STOP condition if AUTOEND mode is enabled */
      /* Generate the STOP condition only in case of SOFTEND mode is enabled */
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	0190      	lsls	r0, r2, #6
 8003cee:	d40f      	bmi.n	8003d10 <I2C_IsAcknowledgeFailed+0x54>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	e00a      	b.n	8003d10 <I2C_IsAcknowledgeFailed+0x54>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	0692      	lsls	r2, r2, #26
 8003cfe:	d411      	bmi.n	8003d24 <I2C_IsAcknowledgeFailed+0x68>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d00:	1c69      	adds	r1, r5, #1
 8003d02:	d0fa      	beq.n	8003cfa <I2C_IsAcknowledgeFailed+0x3e>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d04:	b135      	cbz	r5, 8003d14 <I2C_IsAcknowledgeFailed+0x58>
 8003d06:	f7fe ff0d 	bl	8002b24 <HAL_GetTick>
 8003d0a:	1b80      	subs	r0, r0, r6
 8003d0c:	42a8      	cmp	r0, r5
 8003d0e:	d801      	bhi.n	8003d14 <I2C_IsAcknowledgeFailed+0x58>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	e7f2      	b.n	8003cfa <I2C_IsAcknowledgeFailed+0x3e>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003d20:	2003      	movs	r0, #3
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d24:	2210      	movs	r2, #16
 8003d26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d28:	2220      	movs	r2, #32
 8003d2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	4a06      	ldr	r2, [pc, #24]	; (8003d48 <I2C_IsAcknowledgeFailed+0x8c>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d34:	2304      	movs	r3, #4
 8003d36:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 8003d3a:	2001      	movs	r0, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3c:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 8003d3e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	fe00e800 	.word	0xfe00e800

08003d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 8003d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d50:	4604      	mov	r4, r0
 8003d52:	460e      	mov	r6, r1
 8003d54:	4690      	mov	r8, r2
 8003d56:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7fe fee4 	bl	8002b24 <HAL_GetTick>
 8003d5c:	4607      	mov	r7, r0
     
  /* Wait until flag is set */
  if(Status == RESET)
 8003d5e:	f1b8 0f00 	cmp.w	r8, #0
 8003d62:	d125      	bne.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x64>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d64:	6822      	ldr	r2, [r4, #0]
 8003d66:	6993      	ldr	r3, [r2, #24]
 8003d68:	4033      	ands	r3, r6
 8003d6a:	42b3      	cmp	r3, r6
 8003d6c:	d00e      	beq.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d6e:	1c69      	adds	r1, r5, #1
 8003d70:	d0f9      	beq.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d72:	b17d      	cbz	r5, 8003d94 <I2C_WaitOnFlagUntilTimeout+0x48>
 8003d74:	f7fe fed6 	bl	8002b24 <HAL_GetTick>
 8003d78:	1bc0      	subs	r0, r0, r7
 8003d7a:	42a8      	cmp	r0, r5
 8003d7c:	d9f2      	bls.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x18>
 8003d7e:	e009      	b.n	8003d94 <I2C_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d80:	1c6b      	adds	r3, r5, #1
 8003d82:	d106      	bne.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8003d84:	6993      	ldr	r3, [r2, #24]
 8003d86:	4033      	ands	r3, r6
 8003d88:	42b3      	cmp	r3, r6
 8003d8a:	d0f9      	beq.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d92:	b945      	cbnz	r5, 8003da6 <I2C_WaitOnFlagUntilTimeout+0x5a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003da0:	2003      	movs	r0, #3
 8003da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003da6:	f7fe febd 	bl	8002b24 <HAL_GetTick>
 8003daa:	1bc0      	subs	r0, r0, r7
 8003dac:	42a8      	cmp	r0, r5
 8003dae:	d8f1      	bhi.n	8003d94 <I2C_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	e7e7      	b.n	8003d84 <I2C_WaitOnFlagUntilTimeout+0x38>

08003db4 <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4604      	mov	r4, r0
 8003db8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8003dba:	f7fe feb3 	bl	8002b24 <HAL_GetTick>
 8003dbe:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	079b      	lsls	r3, r3, #30
 8003dc6:	d41b      	bmi.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003dc8:	4620      	mov	r0, r4
 8003dca:	4629      	mov	r1, r5
 8003dcc:	f7ff ff76 	bl	8003cbc <I2C_IsAcknowledgeFailed>
 8003dd0:	b9c0      	cbnz	r0, 8003e04 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003dd2:	1c6a      	adds	r2, r5, #1
 8003dd4:	d0f4      	beq.n	8003dc0 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003dd6:	b96d      	cbnz	r5, 8003df4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003ddc:	f043 0320 	orr.w	r3, r3, #32
 8003de0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003df0:	2003      	movs	r0, #3
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003df4:	f7fe fe96 	bl	8002b24 <HAL_GetTick>
 8003df8:	1b80      	subs	r0, r0, r6
 8003dfa:	42a8      	cmp	r0, r5
 8003dfc:	d9e0      	bls.n	8003dc0 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 8003dfe:	e7eb      	b.n	8003dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8003e00:	2000      	movs	r0, #0
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8003e04:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 8003e06:	bd70      	pop	{r4, r5, r6, pc}

08003e08 <I2C_RequestMemoryWrite>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e0a:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003e10:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e12:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003e14:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e1a:	b2f2      	uxtb	r2, r6
 8003e1c:	f7ff ff38 	bl	8003c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003e20:	4620      	mov	r0, r4
 8003e22:	9906      	ldr	r1, [sp, #24]
 8003e24:	f7ff ffc6 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e28:	b130      	cbz	r0, 8003e38 <I2C_RequestMemoryWrite+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003e2e:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8003e30:	bf0c      	ite	eq
 8003e32:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 8003e34:	2003      	movne	r0, #3
 8003e36:	e017      	b.n	8003e68 <I2C_RequestMemoryWrite+0x60>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e38:	2e01      	cmp	r6, #1
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	d008      	beq.n	8003e50 <I2C_RequestMemoryWrite+0x48>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8003e3e:	0a2a      	lsrs	r2, r5, #8
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003e42:	4620      	mov	r0, r4
 8003e44:	9906      	ldr	r1, [sp, #24]
 8003e46:	f7ff ffb5 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d1ed      	bne.n	8003e2a <I2C_RequestMemoryWrite+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	b2ed      	uxtb	r5, r5
 8003e52:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8003e54:	4620      	mov	r0, r4
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	2200      	movs	r2, #0
 8003e5a:	9b06      	ldr	r3, [sp, #24]
 8003e5c:	f7ff ff76 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8003e60:	2800      	cmp	r0, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2003      	movne	r0, #3
 8003e66:	2000      	moveq	r0, #0
  }

return HAL_OK;
}
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}

08003e6c <I2C_RequestMemoryRead>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8003e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e6e:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8003e74:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e76:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8003e78:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	b2f2      	uxtb	r2, r6
 8003e7e:	f7ff ff07 	bl	8003c90 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003e82:	4620      	mov	r0, r4
 8003e84:	9906      	ldr	r1, [sp, #24]
 8003e86:	f7ff ff95 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e8a:	b130      	cbz	r0, 8003e9a <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003e90:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8003e92:	bf0c      	ite	eq
 8003e94:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 8003e96:	2003      	movne	r0, #3
 8003e98:	e017      	b.n	8003eca <I2C_RequestMemoryRead+0x5e>
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e9a:	2e01      	cmp	r6, #1
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	d008      	beq.n	8003eb2 <I2C_RequestMemoryRead+0x46>
  }      
  /* If Mememory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8003ea0:	0a2a      	lsrs	r2, r5, #8
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	9906      	ldr	r1, [sp, #24]
 8003ea8:	f7ff ff84 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d1ed      	bne.n	8003e8c <I2C_RequestMemoryRead+0x20>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	b2ed      	uxtb	r5, r5
 8003eb4:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	2140      	movs	r1, #64	; 0x40
 8003eba:	2200      	movs	r2, #0
 8003ebc:	9b06      	ldr	r3, [sp, #24]
 8003ebe:	f7ff ff45 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2003      	movne	r0, #3
 8003ec8:	2000      	moveq	r0, #0
  }
  
  return HAL_OK;
}
 8003eca:	b002      	add	sp, #8
 8003ecc:	bd70      	pop	{r4, r5, r6, pc}

08003ece <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 8003ece:	b570      	push	{r4, r5, r6, lr}
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003ed4:	f7fe fe26 	bl	8002b24 <HAL_GetTick>
 8003ed8:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	069b      	lsls	r3, r3, #26
 8003ee0:	d419      	bmi.n	8003f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	f7ff fee9 	bl	8003cbc <I2C_IsAcknowledgeFailed>
 8003eea:	b9b0      	cbnz	r0, 8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003eec:	b96d      	cbnz	r5, 8003f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eee:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003ef2:	f043 0320 	orr.w	r3, r3, #32
 8003ef6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f00:	2300      	movs	r3, #0
 8003f02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003f06:	2003      	movs	r0, #3
 8003f08:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003f0a:	f7fe fe0b 	bl	8002b24 <HAL_GetTick>
 8003f0e:	1b80      	subs	r0, r0, r6
 8003f10:	42a8      	cmp	r0, r5
 8003f12:	d9e2      	bls.n	8003eda <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8003f14:	e7eb      	b.n	8003eee <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003f16:	2000      	movs	r0, #0
 8003f18:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8003f1a:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}

08003f1e <HAL_I2C_MspInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003f1e:	4770      	bx	lr

08003f20 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8003f20:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003f22:	4604      	mov	r4, r0
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d041      	beq.n	8003fac <HAL_I2C_Init+0x8c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003f28:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003f2c:	b90b      	cbnz	r3, 8003f32 <HAL_I2C_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f2e:	f7ff fff6 	bl	8003f1e <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	68e1      	ldr	r1, [r4, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f44:	6862      	ldr	r2, [r4, #4]
 8003f46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f4a:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f52:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8003f54:	68a2      	ldr	r2, [r4, #8]
 8003f56:	b142      	cbz	r2, 8003f6a <HAL_I2C_Init+0x4a>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f58:	2901      	cmp	r1, #1
 8003f5a:	d103      	bne.n	8003f64 <HAL_I2C_Init+0x44>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	e007      	b.n	8003f74 <HAL_I2C_Init+0x54>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f64:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f68:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f6a:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f6c:	bf04      	itt	eq
 8003f6e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003f72:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f74:	685a      	ldr	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f76:	6961      	ldr	r1, [r4, #20]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f78:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f80:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f82:	6922      	ldr	r2, [r4, #16]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	69a1      	ldr	r1, [r4, #24]
 8003f88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f8e:	6a21      	ldr	r1, [r4, #32]
 8003f90:	69e2      	ldr	r2, [r4, #28]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f9e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa0:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa2:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 8003faa:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003fac:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 8003fae:	bd10      	pop	{r4, pc}

08003fb0 <HAL_I2C_MspDeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_I2C_DeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	b188      	cbz	r0, 8003fdc <HAL_I2C_DeInit+0x2a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003fb8:	6802      	ldr	r2, [r0, #0]
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003fc0:	6813      	ldr	r3, [r2, #0]
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003fc8:	f7ff fff2 	bl	8003fb0 <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_RESET;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003fd2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 8003fd6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 8003fda:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003fdc:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 8003fde:	bd10      	pop	{r4, pc}

08003fe0 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003fe4:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8003fec:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8003ff0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003ff4:	b2ed      	uxtb	r5, r5
 8003ff6:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	4688      	mov	r8, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003ffc:	d164      	bne.n	80040c8 <HAL_I2C_Mem_Write+0xe8>
  { 
    if((pData == NULL) || (Size == 0)) 
 8003ffe:	f1b9 0f00 	cmp.w	r9, #0
 8004002:	d101      	bne.n	8004008 <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;                                    
 8004004:	2001      	movs	r0, #1
 8004006:	e062      	b.n	80040ce <HAL_I2C_Mem_Write+0xee>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  { 
    if((pData == NULL) || (Size == 0)) 
 8004008:	2e00      	cmp	r6, #0
 800400a:	d0fb      	beq.n	8004004 <HAL_I2C_Mem_Write+0x24>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800400c:	6807      	ldr	r7, [r0, #0]
 800400e:	69bf      	ldr	r7, [r7, #24]
 8004010:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 8004014:	d158      	bne.n	80040c8 <HAL_I2C_Mem_Write+0xe8>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004016:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 800401a:	f1be 0f01 	cmp.w	lr, #1
 800401e:	d053      	beq.n	80040c8 <HAL_I2C_Mem_Write+0xe8>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8004020:	f04f 0e52 	mov.w	lr, #82	; 0x52
 8004024:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004028:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402c:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8004030:	f8cd a000 	str.w	sl, [sp]
 8004034:	f7ff fee8 	bl	8003e08 <I2C_RequestMemoryWrite>
 8004038:	b120      	cbz	r0, 8004044 <HAL_I2C_Mem_Write+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800403e:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8004042:	e031      	b.n	80040a8 <HAL_I2C_Mem_Write+0xc8>

    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004044:	9000      	str	r0, [sp, #0]
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 8004046:	2eff      	cmp	r6, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004048:	4620      	mov	r0, r4
 800404a:	4641      	mov	r1, r8
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 800404c:	d81c      	bhi.n	8004088 <HAL_I2C_Mem_Write+0xa8>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800404e:	b2f2      	uxtb	r2, r6
 8004050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004054:	f7ff fe1c 	bl	8003c90 <I2C_TransferConfig>
      Sizetmp = Size;
 8004058:	4635      	mov	r5, r6
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800405a:	4620      	mov	r0, r4
 800405c:	4651      	mov	r1, sl
 800405e:	f7ff fea9 	bl	8003db4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004062:	b9f8      	cbnz	r0, 80040a4 <HAL_I2C_Mem_Write+0xc4>
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	f819 2b01 	ldrb.w	r2, [r9], #1
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
      Size--;
 800406c:	3e01      	subs	r6, #1

      if((Sizetmp == 0)&&(Size!=0))
 800406e:	3d01      	subs	r5, #1
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
      Sizetmp--;
      Size--;
 8004070:	b2b6      	uxth	r6, r6

      if((Sizetmp == 0)&&(Size!=0))
 8004072:	d110      	bne.n	8004096 <HAL_I2C_Mem_Write+0xb6>
 8004074:	b18e      	cbz	r6, 800409a <HAL_I2C_Mem_Write+0xba>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004076:	4620      	mov	r0, r4
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	462a      	mov	r2, r5
 800407c:	4653      	mov	r3, sl
 800407e:	f7ff fe65 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8004082:	bb18      	cbnz	r0, 80040cc <HAL_I2C_Mem_Write+0xec>
        }

        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004084:	9500      	str	r5, [sp, #0]
 8004086:	e7de      	b.n	8004046 <HAL_I2C_Mem_Write+0x66>
 8004088:	22ff      	movs	r2, #255	; 0xff
 800408a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800408e:	f7ff fdff 	bl	8003c90 <I2C_TransferConfig>
          Sizetmp = 255;
 8004092:	25ff      	movs	r5, #255	; 0xff
 8004094:	e7e1      	b.n	800405a <HAL_I2C_Mem_Write+0x7a>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }
      
    }while(Size > 0);
 8004096:	2e00      	cmp	r6, #0
 8004098:	d1df      	bne.n	800405a <HAL_I2C_Mem_Write+0x7a>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800409a:	4620      	mov	r0, r4
 800409c:	2119      	movs	r1, #25
 800409e:	f7ff ff16 	bl	8003ece <I2C_WaitOnSTOPFlagUntilTimeout>
 80040a2:	b120      	cbz	r0, 80040ae <HAL_I2C_Mem_Write+0xce>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d10f      	bne.n	80040cc <HAL_I2C_Mem_Write+0xec>
 80040ac:	e7aa      	b.n	8004004 <HAL_I2C_Mem_Write+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	2220      	movs	r2, #32
 80040b2:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <HAL_I2C_Mem_Write+0xf4>)
 80040b8:	400a      	ands	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY; 	  
 80040bc:	2301      	movs	r3, #1
 80040be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 80040c6:	e002      	b.n	80040ce <HAL_I2C_Mem_Write+0xee>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2002      	movs	r0, #2
 80040ca:	e000      	b.n	80040ce <HAL_I2C_Mem_Write+0xee>
      if((Sizetmp == 0)&&(Size!=0))
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
 80040cc:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80040ce:	b002      	add	sp, #8
 80040d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d4:	fe00e800 	.word	0xfe00e800

080040d8 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80040dc:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80040e4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 80040e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80040ec:	b2ed      	uxtb	r5, r5
 80040ee:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f0:	4604      	mov	r4, r0
 80040f2:	4688      	mov	r8, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80040f4:	d16c      	bne.n	80041d0 <HAL_I2C_Mem_Read+0xf8>
  {    
    if((pData == NULL) || (Size == 0)) 
 80040f6:	f1b9 0f00 	cmp.w	r9, #0
 80040fa:	d101      	bne.n	8004100 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;                                    
 80040fc:	2001      	movs	r0, #1
 80040fe:	e068      	b.n	80041d2 <HAL_I2C_Mem_Read+0xfa>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL) || (Size == 0)) 
 8004100:	2e00      	cmp	r6, #0
 8004102:	d0fb      	beq.n	80040fc <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004104:	6807      	ldr	r7, [r0, #0]
 8004106:	69bf      	ldr	r7, [r7, #24]
 8004108:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800410c:	d160      	bne.n	80041d0 <HAL_I2C_Mem_Read+0xf8>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 8004112:	f1be 0f01 	cmp.w	lr, #1
 8004116:	d05b      	beq.n	80041d0 <HAL_I2C_Mem_Read+0xf8>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8004118:	f04f 0e62 	mov.w	lr, #98	; 0x62
 800411c:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004120:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8004128:	f8cd a000 	str.w	sl, [sp]
 800412c:	f7ff fe9e 	bl	8003e6c <I2C_RequestMemoryRead>
 8004130:	b120      	cbz	r0, 800413c <HAL_I2C_Mem_Read+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004132:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004136:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800413a:	e038      	b.n	80041ae <HAL_I2C_Mem_Read+0xd6>
 800413c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 8004140:	2eff      	cmp	r6, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4620      	mov	r0, r4
 8004146:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8004148:	d821      	bhi.n	800418e <HAL_I2C_Mem_Read+0xb6>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800414a:	b2f2      	uxtb	r2, r6
 800414c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004150:	f7ff fd9e 	bl	8003c90 <I2C_TransferConfig>
      Sizetmp = Size;
 8004154:	4635      	mov	r5, r6
    }
    
    do
    {  
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8004156:	4620      	mov	r0, r4
 8004158:	2104      	movs	r1, #4
 800415a:	2200      	movs	r2, #0
 800415c:	4653      	mov	r3, sl
 800415e:	f7ff fdf5 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8004162:	bb30      	cbnz	r0, 80041b2 <HAL_I2C_Mem_Read+0xda>
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8004164:	6823      	ldr	r3, [r4, #0]

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 8004166:	3e01      	subs	r6, #1
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f809 3b01 	strb.w	r3, [r9], #1

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   

      if((Sizetmp == 0)&&(Size!=0))
 800416e:	3d01      	subs	r5, #1
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 8004170:	b2b6      	uxth	r6, r6

      if((Sizetmp == 0)&&(Size!=0))
 8004172:	d113      	bne.n	800419c <HAL_I2C_Mem_Read+0xc4>
 8004174:	b1a6      	cbz	r6, 80041a0 <HAL_I2C_Mem_Read+0xc8>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004176:	4620      	mov	r0, r4
 8004178:	2180      	movs	r1, #128	; 0x80
 800417a:	462a      	mov	r2, r5
 800417c:	4653      	mov	r3, sl
 800417e:	f7ff fde5 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8004182:	b9b0      	cbnz	r0, 80041b2 <HAL_I2C_Mem_Read+0xda>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004184:	9500      	str	r5, [sp, #0]
 8004186:	4620      	mov	r0, r4
 8004188:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 800418a:	2eff      	cmp	r6, #255	; 0xff
 800418c:	e7dc      	b.n	8004148 <HAL_I2C_Mem_Read+0x70>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800418e:	22ff      	movs	r2, #255	; 0xff
 8004190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004194:	f7ff fd7c 	bl	8003c90 <I2C_TransferConfig>
          Sizetmp = 255;
 8004198:	25ff      	movs	r5, #255	; 0xff
 800419a:	e7dc      	b.n	8004156 <HAL_I2C_Mem_Read+0x7e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }

    }while(Size > 0);
 800419c:	2e00      	cmp	r6, #0
 800419e:	d1da      	bne.n	8004156 <HAL_I2C_Mem_Read+0x7e>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 80041a0:	4620      	mov	r0, r4
 80041a2:	2119      	movs	r1, #25
 80041a4:	f7ff fe93 	bl	8003ece <I2C_WaitOnSTOPFlagUntilTimeout>
 80041a8:	b128      	cbz	r0, 80041b6 <HAL_I2C_Mem_Read+0xde>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041aa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d0a4      	beq.n	80040fc <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 80041b2:	2003      	movs	r0, #3
 80041b4:	e00d      	b.n	80041d2 <HAL_I2C_Mem_Read+0xfa>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	2220      	movs	r2, #32
 80041ba:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	4a06      	ldr	r2, [pc, #24]	; (80041d8 <HAL_I2C_Mem_Read+0x100>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ca:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 80041ce:	e000      	b.n	80041d2 <HAL_I2C_Mem_Read+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2002      	movs	r0, #2
  }
}
 80041d2:	b002      	add	sp, #8
 80041d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d8:	fe00e800 	.word	0xfe00e800

080041dc <HAL_I2C_GetState>:
  * @param  hi2c : I2C handle
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 80041dc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80041e0:	4770      	bx	lr

080041e2 <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 80041e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e6:	4604      	mov	r4, r0
 80041e8:	460f      	mov	r7, r1
 80041ea:	4616      	mov	r6, r2
 80041ec:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80041ee:	f7fe fc99 	bl	8002b24 <HAL_GetTick>
 80041f2:	4680      	mov	r8, r0
     
  while((hspi->Instance->SR & Flag) != State)
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	403a      	ands	r2, r7
 80041fa:	42b2      	cmp	r2, r6
 80041fc:	d034      	beq.n	8004268 <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 80041fe:	1c6a      	adds	r2, r5, #1
 8004200:	d0f9      	beq.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004202:	b94d      	cbnz	r5, 8004218 <SPI_WaitFlagStateUntilTimeout+0x36>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800420c:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420e:	6862      	ldr	r2, [r4, #4]
 8004210:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004214:	d112      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x5a>
 8004216:	e006      	b.n	8004226 <SPI_WaitFlagStateUntilTimeout+0x44>
     
  while((hspi->Instance->SR & Flag) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004218:	f7fe fc84 	bl	8002b24 <HAL_GetTick>
 800421c:	ebc8 0000 	rsb	r0, r8, r0
 8004220:	42a8      	cmp	r0, r5
 8004222:	d9e7      	bls.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x12>
 8004224:	e7ee      	b.n	8004204 <SPI_WaitFlagStateUntilTimeout+0x22>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004226:	68a2      	ldr	r2, [r4, #8]
 8004228:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800422c:	d002      	beq.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x52>
 800422e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004232:	d103      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423a:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800423c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800423e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        {
          __HAL_SPI_RESET_CRC(hspi);
 8004242:	bf01      	itttt	eq
 8004244:	681a      	ldreq	r2, [r3, #0]
 8004246:	f422 5200 	biceq.w	r2, r2, #8192	; 0x2000
 800424a:	601a      	streq	r2, [r3, #0]
 800424c:	681a      	ldreq	r2, [r3, #0]
 800424e:	bf04      	itt	eq
 8004250:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8004254:	601a      	streq	r2, [r3, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 8004256:	2301      	movs	r3, #1
 8004258:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800425c:	2300      	movs	r3, #0
 800425e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8004262:	2003      	movs	r0, #3
 8004264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 8004268:	2000      	movs	r0, #0
}
 800426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800426e <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800426e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004272:	4604      	mov	r4, r0
 8004274:	460f      	mov	r7, r1
 8004276:	4616      	mov	r6, r2
 8004278:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 800427a:	f7fe fc53 	bl	8002b24 <HAL_GetTick>
 800427e:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 8004280:	6821      	ldr	r1, [r4, #0]
 8004282:	688a      	ldr	r2, [r1, #8]
 8004284:	403a      	ands	r2, r7
 8004286:	42b2      	cmp	r2, r6
 8004288:	d03b      	beq.n	8004302 <SPI_WaitFifoStateUntilTimeout+0x94>
  {
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800428a:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 800428e:	d104      	bne.n	800429a <SPI_WaitFifoStateUntilTimeout+0x2c>
 8004290:	b91e      	cbnz	r6, 800429a <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 8004292:	7b0b      	ldrb	r3, [r1, #12]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f88d 3007 	strb.w	r3, [sp, #7]
    }
    if(Timeout != HAL_MAX_DELAY)
 800429a:	1c6b      	adds	r3, r5, #1
 800429c:	d0f1      	beq.n	8004282 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800429e:	b94d      	cbnz	r5, 80042b4 <SPI_WaitFifoStateUntilTimeout+0x46>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042a8:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042aa:	6862      	ldr	r2, [r4, #4]
 80042ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80042b0:	d112      	bne.n	80042d8 <SPI_WaitFifoStateUntilTimeout+0x6a>
 80042b2:	e006      	b.n	80042c2 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
    }
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80042b4:	f7fe fc36 	bl	8002b24 <HAL_GetTick>
 80042b8:	ebc8 0000 	rsb	r0, r8, r0
 80042bc:	42a8      	cmp	r0, r5
 80042be:	d9df      	bls.n	8004280 <SPI_WaitFifoStateUntilTimeout+0x12>
 80042c0:	e7ee      	b.n	80042a0 <SPI_WaitFifoStateUntilTimeout+0x32>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c2:	68a2      	ldr	r2, [r4, #8]
 80042c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80042c8:	d002      	beq.n	80042d0 <SPI_WaitFifoStateUntilTimeout+0x62>
 80042ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80042ce:	d103      	bne.n	80042d8 <SPI_WaitFifoStateUntilTimeout+0x6a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d6:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80042d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80042da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        {
          __HAL_SPI_RESET_CRC(hspi);
 80042de:	bf01      	itttt	eq
 80042e0:	681a      	ldreq	r2, [r3, #0]
 80042e2:	f422 5200 	biceq.w	r2, r2, #8192	; 0x2000
 80042e6:	601a      	streq	r2, [r3, #0]
 80042e8:	681a      	ldreq	r2, [r3, #0]
 80042ea:	bf04      	itt	eq
 80042ec:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 80042f0:	601a      	streq	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042f8:	2300      	movs	r3, #0
 80042fa:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80042fe:	2003      	movs	r0, #3
 8004300:	e000      	b.n	8004304 <SPI_WaitFifoStateUntilTimeout+0x96>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 8004302:	2000      	movs	r0, #0
}
 8004304:	b002      	add	sp, #8
 8004306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800430a <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800430a:	b538      	push	{r3, r4, r5, lr}
 800430c:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800430e:	2200      	movs	r2, #0
 8004310:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004314:	462b      	mov	r3, r5
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 8004316:	4604      	mov	r4, r0
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8004318:	f7ff ffa9 	bl	800426e <SPI_WaitFifoStateUntilTimeout>
 800431c:	4602      	mov	r2, r0
 800431e:	b968      	cbnz	r0, 800433c <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004320:	4620      	mov	r0, r4
 8004322:	2180      	movs	r1, #128	; 0x80
 8004324:	462b      	mov	r3, r5
 8004326:	f7ff ff5c 	bl	80041e2 <SPI_WaitFlagStateUntilTimeout>
 800432a:	4602      	mov	r2, r0
 800432c:	b930      	cbnz	r0, 800433c <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800432e:	4620      	mov	r0, r4
 8004330:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004334:	462b      	mov	r3, r5
 8004336:	f7ff ff9a 	bl	800426e <SPI_WaitFifoStateUntilTimeout>
 800433a:	b130      	cbz	r0, 800434a <SPI_EndRxTxTransaction+0x40>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800433c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004340:	f043 0320 	orr.w	r3, r3, #32
 8004344:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 8004348:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800434a:	bd38      	pop	{r3, r4, r5, pc}

0800434c <HAL_SPI_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800434c:	4770      	bx	lr

0800434e <HAL_SPI_Init>:
  *         in the SPI_InitTypeDef and create the associated handle.
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800434e:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004350:	4604      	mov	r4, r0
 8004352:	2800      	cmp	r0, #0
 8004354:	d04c      	beq.n	80043f0 <HAL_SPI_Init+0xa2>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8004356:	2302      	movs	r3, #2
 8004358:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
 800435c:	f7ff fff6 	bl	800434c <HAL_SPI_MspInit>
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004360:	6821      	ldr	r1, [r4, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004362:	68e2      	ldr	r2, [r4, #12]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004364:	680b      	ldr	r3, [r1, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004366:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800436a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	f04f 0300 	mov.w	r3, #0
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004374:	d903      	bls.n	800437e <HAL_SPI_Init+0x30>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004376:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 8004378:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800437c:	e001      	b.n	8004382 <HAL_SPI_Init+0x34>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800437e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8004382:	bf18      	it	ne
 8004384:	62a3      	strne	r3, [r4, #40]	; 0x28
  }
  
  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004386:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004388:	b92b      	cbnz	r3, 8004396 <HAL_SPI_Init+0x48>
  {
    /* CRC Lengtht aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800438a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800438e:	bf8c      	ite	hi
 8004390:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004392:	2301      	movls	r3, #1
 8004394:	6323      	str	r3, [r4, #48]	; 0x30
 8004396:	6865      	ldr	r5, [r4, #4]
 8004398:	68a6      	ldr	r6, [r4, #8]
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800439a:	69a3      	ldr	r3, [r4, #24]
 800439c:	432e      	orrs	r6, r5
 800439e:	6925      	ldr	r5, [r4, #16]
 80043a0:	432e      	orrs	r6, r5
 80043a2:	6965      	ldr	r5, [r4, #20]
 80043a4:	432e      	orrs	r6, r5
 80043a6:	69e5      	ldr	r5, [r4, #28]
 80043a8:	432e      	orrs	r6, r5
 80043aa:	6a25      	ldr	r5, [r4, #32]
 80043ac:	432e      	orrs	r6, r5
 80043ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80043b0:	432e      	orrs	r6, r5
 80043b2:	f403 7500 	and.w	r5, r3, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 80043b6:	4335      	orrs	r5, r6
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 80043b8:	600d      	str	r5, [r1, #0]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
  
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80043ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80043bc:	2d02      	cmp	r5, #2
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 80043be:	bf02      	ittt	eq
 80043c0:	680d      	ldreq	r5, [r1, #0]
 80043c2:	f445 6500 	orreq.w	r5, r5, #2048	; 0x800
 80043c6:	600d      	streq	r5, [r1, #0]
 80043c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80043ca:	432a      	orrs	r2, r5
 80043cc:	6b65      	ldr	r5, [r4, #52]	; 0x34
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	4315      	orrs	r5, r2
 80043d2:	f003 0204 	and.w	r2, r3, #4
 80043d6:	ea45 0302 	orr.w	r3, r5, r2
                         hspi->Init.DataSize ) | frxth;
 80043da:	4303      	orrs	r3, r0
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 80043dc:	604b      	str	r3, [r1, #4]
                         hspi->Init.DataSize ) | frxth;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80043de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80043e0:	610b      	str	r3, [r1, #16]
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043e2:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 80043e4:	2301      	movs	r3, #1
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043e6:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 80043ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  
  return HAL_OK;
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  { 
    return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 80043f2:	bd70      	pop	{r4, r5, r6, pc}

080043f4 <HAL_SPI_MspDeInit>:
  * @brief SPI MSP DeInit
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80043f4:	4770      	bx	lr

080043f6 <HAL_SPI_DeInit>:
  * @brief  DeInitializes the SPI peripheral 
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80043f6:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80043f8:	4604      	mov	r4, r0
 80043fa:	b188      	cbz	r0, 8004420 <HAL_SPI_DeInit+0x2a>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80043fc:	6802      	ldr	r2, [r0, #0]
  if(hspi == NULL)
  {
     return HAL_ERROR;
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043fe:	2302      	movs	r3, #2
 8004400:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440a:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800440c:	f7ff fff2 	bl	80043f4 <HAL_SPI_MspDeInit>
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004410:	2000      	movs	r0, #0
 8004412:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 8004416:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  
  __HAL_UNLOCK(hspi);
 800441a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
  return HAL_OK;
 800441e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
     return HAL_ERROR;
 8004420:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_RESET;
  
  __HAL_UNLOCK(hspi);
    
  return HAL_OK;
}
 8004422:	bd10      	pop	{r4, pc}

08004424 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8004424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint16_t tmpreg __attribute((unused)) = 0;
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8004428:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800442c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800442e:	f04f 0b00 	mov.w	fp, #0
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8004432:	2d01      	cmp	r5, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8004434:	4604      	mov	r4, r0
 8004436:	4689      	mov	r9, r1
 8004438:	4692      	mov	sl, r2
 800443a:	4698      	mov	r8, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800443c:	f8ad b006 	strh.w	fp, [sp, #6]
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8004440:	d001      	beq.n	8004446 <HAL_SPI_TransmitReceive+0x22>
  {
    return HAL_BUSY;
 8004442:	2002      	movs	r0, #2
 8004444:	e138      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x294>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8004446:	2900      	cmp	r1, #0
 8004448:	f000 8133 	beq.w	80046b2 <HAL_SPI_TransmitReceive+0x28e>
 800444c:	2a00      	cmp	r2, #0
 800444e:	f000 8130 	beq.w	80046b2 <HAL_SPI_TransmitReceive+0x28e>
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 812d 	beq.w	80046b2 <HAL_SPI_TransmitReceive+0x28e>
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 8004458:	f7fe fb64 	bl	8002b24 <HAL_GetTick>
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 800445c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004460:	2b01      	cmp	r3, #1
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 8004462:	4607      	mov	r7, r0
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8004464:	d0ed      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x1e>
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004466:	2305      	movs	r3, #5
 8004468:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800446c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800446e:	6822      	ldr	r2, [r4, #0]
  }

  tickstart = HAL_GetTick();
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8004470:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  {
    __HAL_SPI_RESET_CRC(hspi);
 8004478:	bf08      	it	eq
 800447a:	6813      	ldreq	r3, [r2, #0]
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800447c:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 8004480:	bf08      	it	eq
 8004482:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = pRxData;
 8004486:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800448a:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800448e:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 8004492:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004496:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800449a:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 800449e:	bf04      	itt	eq
 80044a0:	6013      	streq	r3, [r2, #0]
 80044a2:	6813      	ldreq	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 80044a4:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 80044a6:	bf04      	itt	eq
 80044a8:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 80044ac:	6013      	streq	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 80044ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b2:	6853      	ldr	r3, [r2, #4]
  {
    __HAL_SPI_RESET_CRC(hspi);
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 80044b4:	d802      	bhi.n	80044bc <HAL_SPI_TransmitReceive+0x98>
 80044b6:	f1b8 0f01 	cmp.w	r8, #1
 80044ba:	d902      	bls.n	80044c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044c0:	e001      	b.n	80044c6 <HAL_SPI_TransmitReceive+0xa2>
  }
  else
  {
    /* set fiforxthreshold according the reception data lenght: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c6:	6053      	str	r3, [r2, #4]
  }
  
  /* Check if the SPI is already enabled */ 
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	0658      	lsls	r0, r3, #25
  {
    /* Enable SPI peripheral */    
    __HAL_SPI_ENABLE(hspi);
 80044cc:	bf5e      	ittt	pl
 80044ce:	6813      	ldrpl	r3, [r2, #0]
 80044d0:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80044d4:	6013      	strpl	r3, [r2, #0]
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80044da:	d94b      	bls.n	8004574 <HAL_SPI_TransmitReceive+0x150>
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 80044dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80044de:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d034      	beq.n	8004550 <HAL_SPI_TransmitReceive+0x12c>
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	6891      	ldr	r1, [r2, #8]
 80044ea:	0789      	lsls	r1, r1, #30
 80044ec:	d511      	bpl.n	8004512 <HAL_SPI_TransmitReceive+0xee>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80044f0:	8809      	ldrh	r1, [r1, #0]
 80044f2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80044f6:	3b01      	subs	r3, #1
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f8:	3102      	adds	r1, #2
        hspi->TxXferCount--;
 80044fa:	b29b      	uxth	r3, r3
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80044fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 8004500:	b93b      	cbnz	r3, 8004512 <HAL_SPI_TransmitReceive+0xee>
 8004502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004508:	bf02      	ittt	eq
 800450a:	6813      	ldreq	r3, [r2, #0]
 800450c:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004510:	6013      	streq	r3, [r2, #0]
        } 
      }
      
      /* Wait until RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8004512:	b168      	cbz	r0, 8004530 <HAL_SPI_TransmitReceive+0x10c>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	07d2      	lsls	r2, r2, #31
 800451a:	d509      	bpl.n	8004530 <HAL_SPI_TransmitReceive+0x10c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004520:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004524:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004526:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800452a:	3b01      	subs	r3, #1
 800452c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      }
      if(Timeout != HAL_MAX_DELAY)
 8004530:	1c75      	adds	r5, r6, #1
 8004532:	d0d3      	beq.n	80044dc <HAL_SPI_TransmitReceive+0xb8>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 8004534:	b936      	cbnz	r6, 8004544 <HAL_SPI_TransmitReceive+0x120>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004536:	2301      	movs	r3, #1
 8004538:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800453c:	2300      	movs	r3, #0
 800453e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8004542:	e0b8      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x292>
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 8004544:	f7fe faee 	bl	8002b24 <HAL_GetTick>
 8004548:	1bc0      	subs	r0, r0, r7
 800454a:	42b0      	cmp	r0, r6
 800454c:	d9c6      	bls.n	80044dc <HAL_SPI_TransmitReceive+0xb8>
 800454e:	e7f2      	b.n	8004536 <HAL_SPI_TransmitReceive+0x112>
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 8004550:	2800      	cmp	r0, #0
 8004552:	d1de      	bne.n	8004512 <HAL_SPI_TransmitReceive+0xee>
      }
    }
  }
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8004554:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455a:	f040 808a 	bne.w	8004672 <HAL_SPI_TransmitReceive+0x24e>
 800455e:	e05d      	b.n	800461c <HAL_SPI_TransmitReceive+0x1f8>
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	6891      	ldr	r1, [r2, #8]
 8004564:	0788      	lsls	r0, r1, #30
 8004566:	d409      	bmi.n	800457c <HAL_SPI_TransmitReceive+0x158>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8004568:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800456c:	2b00      	cmp	r3, #0
 800456e:	d126      	bne.n	80045be <HAL_SPI_TransmitReceive+0x19a>
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
      }
      if(Timeout != HAL_MAX_DELAY)
 8004570:	1c73      	adds	r3, r6, #1
 8004572:	d146      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x1de>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 8004574:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f2      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x13c>
 800457a:	e04a      	b.n	8004612 <HAL_SPI_TransmitReceive+0x1ee>
 800457c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
 800457e:	2b02      	cmp	r3, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004580:	bf9f      	itttt	ls
 8004582:	1c4b      	addls	r3, r1, #1
 8004584:	63a3      	strls	r3, [r4, #56]	; 0x38
 8004586:	780b      	ldrbls	r3, [r1, #0]
 8004588:	7313      	strbls	r3, [r2, #12]
          hspi->TxXferCount--;
 800458a:	bf91      	iteee	ls
 800458c:	8fe3      	ldrhls	r3, [r4, #62]	; 0x3e
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800458e:	8809      	ldrhhi	r1, [r1, #0]
 8004590:	60d1      	strhi	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
 8004592:	3b02      	subhi	r3, #2
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
 8004594:	bf94      	ite	ls
 8004596:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800459a:	6ba2      	ldrhi	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
 800459c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800459e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a0:	bf84      	itt	hi
 80045a2:	3202      	addhi	r2, #2
 80045a4:	63a2      	strhi	r2, [r4, #56]	; 0x38
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1de      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x144>
 80045aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80045b0:	bf01      	itttt	eq
 80045b2:	6822      	ldreq	r2, [r4, #0]
 80045b4:	6813      	ldreq	r3, [r2, #0]
 80045b6:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80045ba:	6013      	streq	r3, [r2, #0]
 80045bc:	e7d4      	b.n	8004568 <HAL_SPI_TransmitReceive+0x144>
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	6891      	ldr	r1, [r2, #8]
 80045c2:	07c9      	lsls	r1, r1, #31
 80045c4:	d5d4      	bpl.n	8004570 <HAL_SPI_TransmitReceive+0x14c>
      {
        if(hspi->RxXferCount > 1)
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ca:	d910      	bls.n	80045ee <HAL_SPI_TransmitReceive+0x1ca>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045cc:	68d1      	ldr	r1, [r2, #12]
 80045ce:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045d2:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 80045d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80045d8:	3b02      	subs	r3, #2
 80045da:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 80045dc:	2b01      	cmp	r3, #1
      {
        if(hspi->RxXferCount > 1)
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
          hspi->pRxBuffPtr += sizeof(uint16_t);
          hspi->RxXferCount -= 2;
 80045de:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 80045e2:	d8c5      	bhi.n	8004570 <HAL_SPI_TransmitReceive+0x14c>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045e4:	6853      	ldr	r3, [r2, #4]
 80045e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045ea:	6053      	str	r3, [r2, #4]
 80045ec:	e7c0      	b.n	8004570 <HAL_SPI_TransmitReceive+0x14c>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	6421      	str	r1, [r4, #64]	; 0x40
 80045f2:	7b12      	ldrb	r2, [r2, #12]
 80045f4:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80045f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80045fa:	3b01      	subs	r3, #1
 80045fc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004600:	e7b6      	b.n	8004570 <HAL_SPI_TransmitReceive+0x14c>
        }
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004602:	2e00      	cmp	r6, #0
 8004604:	d097      	beq.n	8004536 <HAL_SPI_TransmitReceive+0x112>
 8004606:	f7fe fa8d 	bl	8002b24 <HAL_GetTick>
 800460a:	1bc0      	subs	r0, r0, r7
 800460c:	42b0      	cmp	r0, r6
 800460e:	d9b1      	bls.n	8004574 <HAL_SPI_TransmitReceive+0x150>
 8004610:	e791      	b.n	8004536 <HAL_SPI_TransmitReceive+0x112>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 8004612:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1a6      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x144>
 800461a:	e79b      	b.n	8004554 <HAL_SPI_TransmitReceive+0x130>
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800461c:	2102      	movs	r1, #2
 800461e:	4620      	mov	r0, r4
 8004620:	460a      	mov	r2, r1
 8004622:	4633      	mov	r3, r6
 8004624:	f7ff fddd 	bl	80041e2 <SPI_WaitFlagStateUntilTimeout>
 8004628:	b128      	cbz	r0, 8004636 <HAL_SPI_TransmitReceive+0x212>
    {  
      /* Erreur on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800462a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800462e:	f043 0302 	orr.w	r3, r3, #2
 8004632:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    }
    
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004636:	68e3      	ldr	r3, [r4, #12]
 8004638:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	d102      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x222>
    {
      tmpreg = hspi->Instance->DR;
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	b29b      	uxth	r3, r3
 8004644:	e013      	b.n	800466e <HAL_SPI_TransmitReceive+0x24a>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004646:	6b21      	ldr	r1, [r4, #48]	; 0x30
    {
      tmpreg = hspi->Instance->DR;
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8004648:	7b1b      	ldrb	r3, [r3, #12]
 800464a:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800464e:	2902      	cmp	r1, #2
 8004650:	d10f      	bne.n	8004672 <HAL_SPI_TransmitReceive+0x24e>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 8004652:	4620      	mov	r0, r4
 8004654:	460a      	mov	r2, r1
 8004656:	4633      	mov	r3, r6
 8004658:	f7ff fdc3 	bl	80041e2 <SPI_WaitFlagStateUntilTimeout>
 800465c:	b128      	cbz	r0, 800466a <HAL_SPI_TransmitReceive+0x246>
        {  
          /* Erreur on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800465e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004662:	f043 0302 	orr.w	r3, r3, #2
 8004666:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        }    
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	7b1b      	ldrb	r3, [r3, #12]
 800466e:	f8ad 3006 	strh.w	r3, [sp, #6]
      }
    }
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 8004672:	4620      	mov	r0, r4
 8004674:	4631      	mov	r1, r6
 8004676:	f7ff fe48 	bl	800430a <SPI_EndRxTxTransaction>
 800467a:	b9e0      	cbnz	r0, 80046b6 <HAL_SPI_TransmitReceive+0x292>
  }

  hspi->State = HAL_SPI_STATE_READY;
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800467c:	6825      	ldr	r5, [r4, #0]
 800467e:	68aa      	ldr	r2, [r5, #8]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004680:	2301      	movs	r3, #1
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004682:	f012 0110 	ands.w	r1, r2, #16
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004686:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800468a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800468e:	d00a      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x282>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8004690:	f042 0202 	orr.w	r2, r2, #2
 8004694:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004698:	f06f 0210 	mvn.w	r2, #16
 800469c:	60aa      	str	r2, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800469e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
    return HAL_ERROR;
 80046a2:	4618      	mov	r0, r3
 80046a4:	e008      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x294>
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 80046a6:	1c10      	adds	r0, r2, #0
    
    return HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046a8:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 80046ac:	bf18      	it	ne
 80046ae:	2001      	movne	r0, #1
 80046b0:	e002      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x294>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
 80046b2:	4628      	mov	r0, r5
 80046b4:	e000      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x294>
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 80046b6:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 80046b8:	b003      	add	sp, #12
 80046ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080046be <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 80046be:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 80046c2:	4770      	bx	lr

080046c4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80046c4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80046c6:	b180      	cbz	r0, 80046ea <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80046c8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80046cc:	b113      	cbz	r3, 80046d4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80046d4:	b109      	cbz	r1, 80046da <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80046d6:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80046da:	2301      	movs	r3, #1
 80046dc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80046e0:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80046e2:	f000 fc85 	bl	8004ff0 <USBD_LL_Init>
  
  return USBD_OK; 
 80046e6:	2000      	movs	r0, #0
 80046e8:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80046ea:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 80046ec:	bd08      	pop	{r3, pc}

080046ee <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80046ee:	b119      	cbz	r1, 80046f8 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 80046f0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80046f4:	2000      	movs	r0, #0
 80046f6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80046f8:	2002      	movs	r0, #2
  }
  
  return status;
}
 80046fa:	4770      	bx	lr

080046fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80046fc:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80046fe:	f000 fcb5 	bl	800506c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8004702:	2000      	movs	r0, #0
 8004704:	bd08      	pop	{r3, pc}

08004706 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004706:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8004708:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800470c:	b90b      	cbnz	r3, 8004712 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800470e:	2002      	movs	r0, #2
 8004710:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4798      	blx	r3
 8004716:	2800      	cmp	r0, #0
 8004718:	d1f9      	bne.n	800470e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800471a:	bd08      	pop	{r3, pc}

0800471c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800471c:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800471e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4798      	blx	r3
  return USBD_OK;
}
 8004726:	2000      	movs	r0, #0
 8004728:	bd08      	pop	{r3, pc}

0800472a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800472a:	b538      	push	{r3, r4, r5, lr}
 800472c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800472e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8004732:	4628      	mov	r0, r5
 8004734:	f000 f8c8 	bl	80048c8 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004738:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800473a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800473e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004742:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8004746:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800474a:	f001 031f 	and.w	r3, r1, #31
 800474e:	2b01      	cmp	r3, #1
 8004750:	d00c      	beq.n	800476c <USBD_LL_SetupStage+0x42>
 8004752:	d306      	bcc.n	8004762 <USBD_LL_SetupStage+0x38>
 8004754:	2b02      	cmp	r3, #2
 8004756:	d10e      	bne.n	8004776 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004758:	4620      	mov	r0, r4
 800475a:	4629      	mov	r1, r5
 800475c:	f000 f9f8 	bl	8004b50 <USBD_StdEPReq>
    break;
 8004760:	e00e      	b.n	8004780 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004762:	4620      	mov	r0, r4
 8004764:	4629      	mov	r1, r5
 8004766:	f000 f8cf 	bl	8004908 <USBD_StdDevReq>
    break;
 800476a:	e009      	b.n	8004780 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	f000 f9d6 	bl	8004b20 <USBD_StdItfReq>
    break;
 8004774:	e004      	b.n	8004780 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004776:	4620      	mov	r0, r4
 8004778:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800477c:	f000 fc8e 	bl	800509c <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8004780:	2000      	movs	r0, #0
 8004782:	bd38      	pop	{r3, r4, r5, pc}

08004784 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004784:	b510      	push	{r4, lr}
 8004786:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004788:	bb09      	cbnz	r1, 80047ce <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800478a:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800478e:	2b03      	cmp	r3, #3
 8004790:	d126      	bne.n	80047e0 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 8004792:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8004796:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800479a:	4299      	cmp	r1, r3
 800479c:	d90a      	bls.n	80047b4 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 800479e:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80047a0:	428b      	cmp	r3, r1
 80047a2:	bf28      	it	cs
 80047a4:	460b      	movcs	r3, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 80047a6:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 80047aa:	4611      	mov	r1, r2
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	f000 fa6c 	bl	8004c8a <USBD_CtlContinueRx>
 80047b2:	e015      	b.n	80047e0 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80047b4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	b123      	cbz	r3, 80047c6 <USBD_LL_DataOutStage+0x42>
 80047bc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80047c0:	2a03      	cmp	r2, #3
 80047c2:	d100      	bne.n	80047c6 <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80047c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 fa68 	bl	8004c9c <USBD_CtlSendStatus>
 80047cc:	e008      	b.n	80047e0 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80047ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	b123      	cbz	r3, 80047e0 <USBD_LL_DataOutStage+0x5c>
 80047d6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80047da:	2a03      	cmp	r2, #3
 80047dc:	d100      	bne.n	80047e0 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80047de:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80047e0:	2000      	movs	r0, #0
 80047e2:	bd10      	pop	{r4, pc}

080047e4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80047e8:	bba9      	cbnz	r1, 8004856 <USBD_LL_DataInStage+0x72>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80047ea:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d129      	bne.n	8004846 <USBD_LL_DataInStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 80047f2:	69c5      	ldr	r5, [r0, #28]
 80047f4:	6a03      	ldr	r3, [r0, #32]
 80047f6:	429d      	cmp	r5, r3
 80047f8:	d906      	bls.n	8004808 <USBD_LL_DataInStage+0x24>
      {
        pep->rem_length -=  pep->maxpacket;
 80047fa:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 80047fc:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 80047fe:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8004800:	b29a      	uxth	r2, r3
 8004802:	f000 fa29 	bl	8004c58 <USBD_CtlContinueSendData>
 8004806:	e01e      	b.n	8004846 <USBD_LL_DataInStage+0x62>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004808:	6982      	ldr	r2, [r0, #24]
 800480a:	fbb2 f5f3 	udiv	r5, r2, r3
 800480e:	fb03 2515 	mls	r5, r3, r5, r2
 8004812:	b95d      	cbnz	r5, 800482c <USBD_LL_DataInStage+0x48>
 8004814:	429a      	cmp	r2, r3
 8004816:	d309      	bcc.n	800482c <USBD_LL_DataInStage+0x48>
           (pep->total_length >= pep->maxpacket) &&
 8004818:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800481c:	429a      	cmp	r2, r3
 800481e:	d205      	bcs.n	800482c <USBD_LL_DataInStage+0x48>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004820:	462a      	mov	r2, r5
 8004822:	f000 fa19 	bl	8004c58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004826:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800482a:	e00c      	b.n	8004846 <USBD_LL_DataInStage+0x62>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800482c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	b12b      	cbz	r3, 8004840 <USBD_LL_DataInStage+0x5c>
 8004834:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8004838:	2a03      	cmp	r2, #3
 800483a:	d101      	bne.n	8004840 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800483c:	4620      	mov	r0, r4
 800483e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004840:	4620      	mov	r0, r4
 8004842:	f000 fa36 	bl	8004cb2 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004846:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10c      	bne.n	8004868 <USBD_LL_DataInStage+0x84>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8004854:	e008      	b.n	8004868 <USBD_LL_DataInStage+0x84>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004856:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	b123      	cbz	r3, 8004868 <USBD_LL_DataInStage+0x84>
 800485e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004862:	2a03      	cmp	r2, #3
 8004864:	d100      	bne.n	8004868 <USBD_LL_DataInStage+0x84>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004866:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004868:	2000      	movs	r0, #0
 800486a:	bd38      	pop	{r3, r4, r5, pc}

0800486c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800486c:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800486e:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004870:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004872:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004874:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004876:	2340      	movs	r3, #64	; 0x40
 8004878:	f000 fbff 	bl	800507a <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800487c:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800487e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004882:	4620      	mov	r0, r4
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	2200      	movs	r2, #0
 8004888:	f000 fbf7 	bl	800507a <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800488c:	2301      	movs	r3, #1
 800488e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004892:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004896:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8004898:	b12b      	cbz	r3, 80048a6 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800489a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800489e:	7921      	ldrb	r1, [r4, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4620      	mov	r0, r4
 80048a4:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80048a6:	2000      	movs	r0, #0
 80048a8:	bd38      	pop	{r3, r4, r5, pc}

080048aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80048aa:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80048ac:	2000      	movs	r0, #0
 80048ae:	4770      	bx	lr

080048b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80048b0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80048b2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80048b6:	2a03      	cmp	r2, #3
 80048b8:	d104      	bne.n	80048c4 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80048ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	b103      	cbz	r3, 80048c4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80048c2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80048c4:	2000      	movs	r0, #0
 80048c6:	bd08      	pop	{r3, pc}

080048c8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 80048c8:	780b      	ldrb	r3, [r1, #0]
 80048ca:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80048cc:	784b      	ldrb	r3, [r1, #1]
 80048ce:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80048d0:	78ca      	ldrb	r2, [r1, #3]
 80048d2:	788b      	ldrb	r3, [r1, #2]
 80048d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048d8:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80048da:	794a      	ldrb	r2, [r1, #5]
 80048dc:	790b      	ldrb	r3, [r1, #4]
 80048de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048e2:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80048e4:	79ca      	ldrb	r2, [r1, #7]
 80048e6:	798b      	ldrb	r3, [r1, #6]
 80048e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80048ec:	80c3      	strh	r3, [r0, #6]
 80048ee:	4770      	bx	lr

080048f0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80048f0:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 80048f2:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80048f4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80048f6:	f000 fbd1 	bl	800509c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80048fa:	4620      	mov	r0, r4
 80048fc:	2100      	movs	r1, #0
}
 80048fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8004902:	f000 bbcb 	b.w	800509c <USBD_LL_StallEP>
	...

08004908 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004908:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 800490a:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800490c:	4604      	mov	r4, r0
 800490e:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8004910:	2b09      	cmp	r3, #9
 8004912:	f200 80fc 	bhi.w	8004b0e <USBD_StdDevReq+0x206>
 8004916:	e8df f013 	tbh	[pc, r3, lsl #1]
 800491a:	00ce      	.short	0x00ce
 800491c:	00fa00e5 	.word	0x00fa00e5
 8004920:	00fa00e1 	.word	0x00fa00e1
 8004924:	000a0077 	.word	0x000a0077
 8004928:	00bd00fa 	.word	0x00bd00fa
 800492c:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800492e:	884b      	ldrh	r3, [r1, #2]
 8004930:	0a1a      	lsrs	r2, r3, #8
 8004932:	3a01      	subs	r2, #1
 8004934:	2a06      	cmp	r2, #6
 8004936:	f200 80ea 	bhi.w	8004b0e <USBD_StdDevReq+0x206>
 800493a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800493e:	0007      	.short	0x0007
 8004940:	0018000b 	.word	0x0018000b
 8004944:	00e800e8 	.word	0x00e800e8
 8004948:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800494c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	e02c      	b.n	80049ae <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004954:	7c02      	ldrb	r2, [r0, #16]
 8004956:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800495a:	b90a      	cbnz	r2, 8004960 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	e000      	b.n	8004962 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	f10d 0006 	add.w	r0, sp, #6
 8004966:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004968:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800496a:	4601      	mov	r1, r0
 800496c:	e03c      	b.n	80049e8 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b05      	cmp	r3, #5
 8004972:	f200 80cc 	bhi.w	8004b0e <USBD_StdDevReq+0x206>
 8004976:	e8df f003 	tbb	[pc, r3]
 800497a:	0703      	.short	0x0703
 800497c:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004980:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	e012      	b.n	80049ae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004988:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	e00e      	b.n	80049ae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004990:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	e00a      	b.n	80049ae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004998:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	e006      	b.n	80049ae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80049a0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	e002      	b.n	80049ae <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80049a8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	7c20      	ldrb	r0, [r4, #16]
 80049b0:	f10d 0106 	add.w	r1, sp, #6
 80049b4:	4798      	blx	r3
 80049b6:	e009      	b.n	80049cc <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80049b8:	7c03      	ldrb	r3, [r0, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 80a7 	bne.w	8004b0e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80049c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80049c4:	f10d 0006 	add.w	r0, sp, #6
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	4798      	blx	r3
 80049cc:	4601      	mov	r1, r0
 80049ce:	e00c      	b.n	80049ea <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80049d0:	7c03      	ldrb	r3, [r0, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 809b 	bne.w	8004b0e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80049d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80049dc:	f10d 0006 	add.w	r0, sp, #6
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80049e4:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80049e6:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80049e8:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80049ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8091 	beq.w	8004b16 <USBD_StdDevReq+0x20e>
 80049f4:	88ea      	ldrh	r2, [r5, #6]
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	f000 808d 	beq.w	8004b16 <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 80049fc:	429a      	cmp	r2, r3
 80049fe:	bf28      	it	cs
 8004a00:	461a      	movcs	r2, r3
 8004a02:	f8ad 2006 	strh.w	r2, [sp, #6]
 8004a06:	e054      	b.n	8004ab2 <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004a08:	888b      	ldrh	r3, [r1, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d17f      	bne.n	8004b0e <USBD_StdDevReq+0x206>
 8004a0e:	88cb      	ldrh	r3, [r1, #6]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d17c      	bne.n	8004b0e <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004a14:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004a18:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004a1a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004a1c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004a20:	d075      	beq.n	8004b0e <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004a22:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004a26:	4631      	mov	r1, r6
 8004a28:	f000 fb59 	bl	80050de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 f935 	bl	8004c9c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004a32:	b10e      	cbz	r6, 8004a38 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004a34:	2302      	movs	r3, #2
 8004a36:	e000      	b.n	8004a3a <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8004a3e:	e06a      	b.n	8004b16 <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004a40:	7889      	ldrb	r1, [r1, #2]
 8004a42:	4e36      	ldr	r6, [pc, #216]	; (8004b1c <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004a44:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004a46:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004a48:	d861      	bhi.n	8004b0e <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004a4a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d002      	beq.n	8004a58 <USBD_StdDevReq+0x150>
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d008      	beq.n	8004a68 <USBD_StdDevReq+0x160>
 8004a56:	e05a      	b.n	8004b0e <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	d054      	beq.n	8004b06 <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004a5c:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004a5e:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004a60:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004a62:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8004a66:	e00f      	b.n	8004a88 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004a68:	b931      	cbnz	r1, 8004a78 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004a70:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004a72:	f7ff fe53 	bl	800471c <USBD_ClrClassConfig>
 8004a76:	e046      	b.n	8004b06 <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8004a78:	6841      	ldr	r1, [r0, #4]
 8004a7a:	2901      	cmp	r1, #1
 8004a7c:	d043      	beq.n	8004b06 <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004a7e:	b2c9      	uxtb	r1, r1
 8004a80:	f7ff fe4c 	bl	800471c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8004a84:	7831      	ldrb	r1, [r6, #0]
 8004a86:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f7ff fe3c 	bl	8004706 <USBD_SetClassConfig>
 8004a8e:	2802      	cmp	r0, #2
 8004a90:	d139      	bne.n	8004b06 <USBD_StdDevReq+0x1fe>
 8004a92:	e03c      	b.n	8004b0e <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8004a94:	88ca      	ldrh	r2, [r1, #6]
 8004a96:	2a01      	cmp	r2, #1
 8004a98:	d139      	bne.n	8004b0e <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8004a9a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d003      	beq.n	8004aaa <USBD_StdDevReq+0x1a2>
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d133      	bne.n	8004b0e <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8004aa6:	1d01      	adds	r1, r0, #4
 8004aa8:	e015      	b.n	8004ad6 <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8004aaa:	4601      	mov	r1, r0
 8004aac:	2300      	movs	r3, #0
 8004aae:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	e00f      	b.n	8004ad6 <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8004ab6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004aba:	3b02      	subs	r3, #2
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d826      	bhi.n	8004b0e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004ac4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004ac8:	b10b      	cbz	r3, 8004ace <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004aca:	2303      	movs	r3, #3
 8004acc:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f104 010c 	add.w	r1, r4, #12
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f000 f8b1 	bl	8004c3c <USBD_CtlSendData>
 8004ada:	e01c      	b.n	8004b16 <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004adc:	884b      	ldrh	r3, [r1, #2]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d119      	bne.n	8004b16 <USBD_StdDevReq+0x20e>
 8004ae2:	e008      	b.n	8004af6 <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8004ae4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004ae8:	3b02      	subs	r3, #2
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d80f      	bhi.n	8004b0e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004aee:	884b      	ldrh	r3, [r1, #2]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d110      	bne.n	8004b16 <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004afa:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004afe:	4620      	mov	r0, r4
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	4629      	mov	r1, r5
 8004b04:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f8c8 	bl	8004c9c <USBD_CtlSendStatus>
 8004b0c:	e003      	b.n	8004b16 <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7ff feed 	bl	80048f0 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8004b16:	2000      	movs	r0, #0
 8004b18:	b002      	add	sp, #8
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	20000c0c 	.word	0x20000c0c

08004b20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004b20:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8004b22:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004b26:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004b28:	4604      	mov	r4, r0
 8004b2a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8004b2c:	d10c      	bne.n	8004b48 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004b2e:	790b      	ldrb	r3, [r1, #4]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d809      	bhi.n	8004b48 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8004b34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004b3c:	88eb      	ldrh	r3, [r5, #6]
 8004b3e:	b92b      	cbnz	r3, 8004b4c <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 f8ab 	bl	8004c9c <USBD_CtlSendStatus>
 8004b46:	e001      	b.n	8004b4c <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8004b48:	f7ff fed2 	bl	80048f0 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}

08004b50 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004b50:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 8004b52:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004b54:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 8004b56:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004b58:	4604      	mov	r4, r0
 8004b5a:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004b5c:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 8004b5e:	d010      	beq.n	8004b82 <USBD_StdEPReq+0x32>
 8004b60:	d326      	bcc.n	8004bb0 <USBD_StdEPReq+0x60>
 8004b62:	2e03      	cmp	r6, #3
 8004b64:	d14b      	bne.n	8004bfe <USBD_StdEPReq+0xae>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8004b66:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004b6a:	2a02      	cmp	r2, #2
 8004b6c:	d027      	beq.n	8004bbe <USBD_StdEPReq+0x6e>
 8004b6e:	2a03      	cmp	r2, #3
 8004b70:	d143      	bne.n	8004bfa <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004b72:	884a      	ldrh	r2, [r1, #2]
 8004b74:	b992      	cbnz	r2, 8004b9c <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004b76:	065e      	lsls	r6, r3, #25
 8004b78:	d010      	beq.n	8004b9c <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f000 fa8e 	bl	800509c <USBD_LL_StallEP>
 8004b80:	e00c      	b.n	8004b9c <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8004b82:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004b86:	2a02      	cmp	r2, #2
 8004b88:	d019      	beq.n	8004bbe <USBD_StdEPReq+0x6e>
 8004b8a:	2a03      	cmp	r2, #3
 8004b8c:	d135      	bne.n	8004bfa <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004b8e:	884a      	ldrh	r2, [r1, #2]
 8004b90:	bbaa      	cbnz	r2, 8004bfe <USBD_StdEPReq+0xae>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8004b92:	0659      	lsls	r1, r3, #25
 8004b94:	d008      	beq.n	8004ba8 <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004b96:	4619      	mov	r1, r3
 8004b98:	f000 fa87 	bl	80050aa <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004b9c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 f877 	bl	8004c9c <USBD_CtlSendStatus>
 8004bae:	e026      	b.n	8004bfe <USBD_StdEPReq+0xae>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8004bb0:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 8004bb4:	2d02      	cmp	r5, #2
 8004bb6:	d002      	beq.n	8004bbe <USBD_StdEPReq+0x6e>
 8004bb8:	2d03      	cmp	r5, #3
 8004bba:	d006      	beq.n	8004bca <USBD_StdEPReq+0x7a>
 8004bbc:	e01d      	b.n	8004bfa <USBD_StdEPReq+0xaa>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8004bbe:	065a      	lsls	r2, r3, #25
 8004bc0:	d01d      	beq.n	8004bfe <USBD_StdEPReq+0xae>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f000 fa6a 	bl	800509c <USBD_LL_StallEP>
 8004bc8:	e019      	b.n	8004bfe <USBD_StdEPReq+0xae>
 8004bca:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004bce:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bd2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004bd6:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004bd8:	bf14      	ite	ne
 8004bda:	3514      	addne	r5, #20
 8004bdc:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004be0:	f000 fa6a 	bl	80050b8 <USBD_LL_IsStallEP>
 8004be4:	b110      	cbz	r0, 8004bec <USBD_StdEPReq+0x9c>
      {
        pep->status = 0x0001;     
 8004be6:	2301      	movs	r3, #1
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	e000      	b.n	8004bee <USBD_StdEPReq+0x9e>
      }
      else
      {
        pep->status = 0x0000;  
 8004bec:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8004bee:	4620      	mov	r0, r4
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f000 f822 	bl	8004c3c <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8004bf8:	e001      	b.n	8004bfe <USBD_StdEPReq+0xae>
      
    default:                         
      USBD_CtlError(pdev , req);
 8004bfa:	f7ff fe79 	bl	80048f0 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8004bfe:	2000      	movs	r0, #0
 8004c00:	bd70      	pop	{r4, r5, r6, pc}

08004c02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004c02:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004c04:	b1c8      	cbz	r0, 8004c3a <USBD_GetString+0x38>
 8004c06:	4604      	mov	r4, r0
 8004c08:	1a23      	subs	r3, r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8004c0a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	d1f9      	bne.n	8004c08 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	3302      	adds	r3, #2
 8004c18:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8004c1a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	704b      	strb	r3, [r1, #1]
 8004c20:	3801      	subs	r0, #1
 8004c22:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8004c24:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004c28:	b13c      	cbz	r4, 8004c3a <USBD_GetString+0x38>
    {
      unicode[idx++] = *desc++;
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 8004c30:	3302      	adds	r3, #2
 8004c32:	2400      	movs	r4, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	548c      	strb	r4, [r1, r2]
 8004c38:	e7f4      	b.n	8004c24 <USBD_GetString+0x22>
 8004c3a:	bd30      	pop	{r4, r5, pc}

08004c3c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4613      	mov	r3, r2
 8004c40:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004c42:	2202      	movs	r2, #2
 8004c44:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004c48:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8004c4a:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	462a      	mov	r2, r5
 8004c50:	f000 fa4c 	bl	80050ec <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004c54:	2000      	movs	r0, #0
 8004c56:	bd38      	pop	{r3, r4, r5, pc}

08004c58 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4622      	mov	r2, r4
 8004c62:	f000 fa43 	bl	80050ec <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004c66:	2000      	movs	r0, #0
 8004c68:	bd10      	pop	{r4, pc}

08004c6a <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004c6a:	b538      	push	{r3, r4, r5, lr}
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004c70:	2203      	movs	r2, #3
 8004c72:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8004c76:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8004c7a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004c7e:	2100      	movs	r1, #0
 8004c80:	462a      	mov	r2, r5
 8004c82:	f000 fa3a 	bl	80050fa <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8004c86:	2000      	movs	r0, #0
 8004c88:	bd38      	pop	{r3, r4, r5, pc}

08004c8a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004c8a:	b510      	push	{r4, lr}
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8004c90:	2100      	movs	r1, #0
 8004c92:	4622      	mov	r2, r4
 8004c94:	f000 fa31 	bl	80050fa <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004c98:	2000      	movs	r0, #0
 8004c9a:	bd10      	pop	{r4, pc}

08004c9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004c9c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004c9e:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004ca6:	460a      	mov	r2, r1
 8004ca8:	460b      	mov	r3, r1
 8004caa:	f000 fa1f 	bl	80050ec <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004cae:	2000      	movs	r0, #0
 8004cb0:	bd08      	pop	{r3, pc}

08004cb2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004cb2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004cb4:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004cb6:	2305      	movs	r3, #5
 8004cb8:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	f000 fa1b 	bl	80050fa <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	bd08      	pop	{r3, pc}

08004cc8 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004cc8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004ccc:	b11b      	cbz	r3, 8004cd6 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004cd4:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8004cd6:	2002      	movs	r0, #2
  }
}
 8004cd8:	4770      	bx	lr

08004cda <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004cda:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004cde:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004ce0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004ce4:	b15b      	cbz	r3, 8004cfe <USBD_CDC_EP0_RxReady+0x24>
 8004ce6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004cea:	28ff      	cmp	r0, #255	; 0xff
 8004cec:	d007      	beq.n	8004cfe <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8004cf8:	23ff      	movs	r3, #255	; 0xff
 8004cfa:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8004cfe:	2000      	movs	r0, #0
 8004d00:	bd10      	pop	{r4, pc}
	...

08004d04 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004d04:	2343      	movs	r3, #67	; 0x43
 8004d06:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004d08:	4800      	ldr	r0, [pc, #0]	; (8004d0c <USBD_CDC_GetFSCfgDesc+0x8>)
 8004d0a:	4770      	bx	lr
 8004d0c:	20000020 	.word	0x20000020

08004d10 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004d10:	2343      	movs	r3, #67	; 0x43
 8004d12:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004d14:	4800      	ldr	r0, [pc, #0]	; (8004d18 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004d16:	4770      	bx	lr
 8004d18:	200000ec 	.word	0x200000ec

08004d1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004d1c:	2343      	movs	r3, #67	; 0x43
 8004d1e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004d20:	4800      	ldr	r0, [pc, #0]	; (8004d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004d22:	4770      	bx	lr
 8004d24:	200000a8 	.word	0x200000a8

08004d28 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004d28:	230a      	movs	r3, #10
 8004d2a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004d2c:	4800      	ldr	r0, [pc, #0]	; (8004d30 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004d2e:	4770      	bx	lr
 8004d30:	2000009c 	.word	0x2000009c

08004d34 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004d38:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004d3c:	f000 f9e4 	bl	8005108 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004d40:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004d44:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004d48:	b14b      	cbz	r3, 8004d5e <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004d4a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004d4e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004d58:	4798      	blx	r3

    return USBD_OK;
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8004d5e:	2002      	movs	r0, #2
  }
}
 8004d60:	bd38      	pop	{r3, r4, r5, pc}

08004d62 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d64:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d66:	7809      	ldrb	r1, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004d68:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d6c:	f001 0360 	and.w	r3, r1, #96	; 0x60
 8004d70:	2b20      	cmp	r3, #32
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004d72:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d74:	d120      	bne.n	8004db8 <USBD_CDC_Setup+0x56>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8004d76:	88e2      	ldrh	r2, [r4, #6]
 8004d78:	7863      	ldrb	r3, [r4, #1]
 8004d7a:	b1ba      	cbz	r2, 8004dac <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 8004d7c:	0609      	lsls	r1, r1, #24
 8004d7e:	d50b      	bpl.n	8004d98 <USBD_CDC_Setup+0x36>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d80:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004d84:	4618      	mov	r0, r3
 8004d86:	688f      	ldr	r7, [r1, #8]
 8004d88:	4629      	mov	r1, r5
 8004d8a:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	4629      	mov	r1, r5
 8004d90:	88e2      	ldrh	r2, [r4, #6]
 8004d92:	f7ff ff53 	bl	8004c3c <USBD_CtlSendData>
 8004d96:	e00f      	b.n	8004db8 <USBD_CDC_Setup+0x56>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8004d98:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004d9c:	88e3      	ldrh	r3, [r4, #6]
 8004d9e:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8004da2:	4629      	mov	r1, r5
 8004da4:	88e2      	ldrh	r2, [r4, #6]
 8004da6:	f7ff ff60 	bl	8004c6a <USBD_CtlPrepareRx>
 8004daa:	e005      	b.n	8004db8 <USBD_CDC_Setup+0x56>
      }
      
    }
    else
    {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dac:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004db0:	4618      	mov	r0, r3
 8004db2:	688c      	ldr	r4, [r1, #8]
 8004db4:	4611      	mov	r1, r2
 8004db6:	47a0      	blx	r4
 
  default: 
    break;
  }
  return USBD_OK;
}
 8004db8:	2000      	movs	r0, #0
 8004dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dbc <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004dbc:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004dbe:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004dc0:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004dc2:	f000 f964 	bl	800508e <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f000 f960 	bl	800508e <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8004dce:	4620      	mov	r0, r4
 8004dd0:	2182      	movs	r1, #130	; 0x82
 8004dd2:	f000 f95c 	bl	800508e <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004dd6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004dda:	b153      	cbz	r3, 8004df2 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ddc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004de4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004de8:	f000 f998 	bl	800511c <USBD_static_free>
    pdev->pClassData = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8004df2:	2000      	movs	r0, #0
 8004df4:	bd10      	pop	{r4, pc}

08004df6 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004df8:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004dfa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004dfc:	2181      	movs	r1, #129	; 0x81
 8004dfe:	2202      	movs	r2, #2
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004e00:	b94b      	cbnz	r3, 8004e16 <USBD_CDC_Init+0x20>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e06:	f000 f938 	bl	800507a <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e14:	e006      	b.n	8004e24 <USBD_CDC_Init+0x2e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004e16:	2340      	movs	r3, #64	; 0x40
 8004e18:	f000 f92f 	bl	800507a <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	2101      	movs	r1, #1
 8004e20:	2202      	movs	r2, #2
 8004e22:	2340      	movs	r3, #64	; 0x40
 8004e24:	f000 f929 	bl	800507a <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004e28:	2182      	movs	r1, #130	; 0x82
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	2308      	movs	r3, #8
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f000 f923 	bl	800507a <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004e34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e38:	f000 f96c 	bl	8005114 <USBD_static_malloc>
 8004e3c:	4606      	mov	r6, r0
 8004e3e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8004e42:	b1c8      	cbz	r0, 8004e78 <USBD_CDC_Init+0x82>
  else
  {
    hcdc = pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e44:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004e4c:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e4e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004e52:	2500      	movs	r5, #0
 8004e54:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e58:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 8004e5a:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e5e:	2101      	movs	r1, #1
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004e60:	b92f      	cbnz	r7, 8004e6e <USBD_CDC_Init+0x78>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e66:	f000 f948 	bl	80050fa <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	f000 f943 	bl	80050fa <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004e74:	4628      	mov	r0, r5
 8004e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8004e78:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8004e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e7c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8004e7c:	b119      	cbz	r1, 8004e86 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8004e7e:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8004e82:	2000      	movs	r0, #0
 8004e84:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8004e86:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 8004e88:	4770      	bx	lr

08004e8a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004e8a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8004e8e:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8004e90:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004e94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8004e98:	4770      	bx	lr

08004e9a <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004e9a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8004e9e:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004ea0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8004ea4:	4770      	bx	lr

08004ea6 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004ea6:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004ea8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004eac:	b175      	cbz	r5, 8004ecc <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8004eae:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 8004eb2:	b96c      	cbnz	r4, 8004ed0 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004eb4:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 8004eb8:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8004ebc:	2181      	movs	r1, #129	; 0x81
 8004ebe:	f000 f915 	bl	80050ec <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 8004ec8:	4620      	mov	r0, r4
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004ecc:	2002      	movs	r0, #2
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004ed0:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}

08004ed4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004ed4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004ed8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004eda:	b163      	cbz	r3, 8004ef6 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004edc:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ee2:	2101      	movs	r1, #1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004ee4:	b914      	cbnz	r4, 8004eec <USBD_CDC_ReceivePacket+0x18>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eea:	e000      	b.n	8004eee <USBD_CDC_ReceivePacket+0x1a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004eec:	2340      	movs	r3, #64	; 0x40
 8004eee:	f000 f904 	bl	80050fa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8004ef6:	2002      	movs	r0, #2
  }
}
 8004ef8:	bd10      	pop	{r4, pc}
	...

08004efc <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 8004f00:	4c24      	ldr	r4, [pc, #144]	; (8004f94 <HAL_PCD_MspInit+0x98>)
 8004f02:	6963      	ldr	r3, [r4, #20]
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f08:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 8004f0a:	6963      	ldr	r3, [r4, #20]
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004f0c:	b086      	sub	sp, #24
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 8004f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f12:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004f14:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004f18:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004f1c:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004f20:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004f22:	a901      	add	r1, sp, #4
 8004f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004f28:	9302      	str	r3, [sp, #8]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004f2a:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004f2e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004f32:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004f34:	f7fd fe6e 	bl	8002c14 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 8004f38:	4631      	mov	r1, r6
 8004f3a:	462a      	mov	r2, r5
 8004f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f40:	f7fd ff32 	bl	8002da8 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004f44:	2001      	movs	r0, #1
 8004f46:	f7fd fdf3 	bl	8002b30 <HAL_Delay>
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f52:	f7fd ff29 	bl	8002da8 <HAL_GPIO_WritePin>

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f56:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004f58:	a901      	add	r1, sp, #4
 8004f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5e:	9302      	str	r3, [sp, #8]
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004f60:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f62:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004f64:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004f68:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004f6a:	f7fd fe53 	bl	8002c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStruct); 
#endif  

  /* Enable USB FS Clock */
  __USB_CLK_ENABLE();
 8004f6e:	69e3      	ldr	r3, [r4, #28]
 8004f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f74:	61e3      	str	r3, [r4, #28]
  
  /* Enable SYSCFG Clock */
  __SYSCFG_CLK_ENABLE();
 8004f76:	69a3      	ldr	r3, [r4, #24]
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	61a3      	str	r3, [r4, #24]
#endif
  
#if defined (USE_USB_INTERRUPT_DEFAULT)
  
  /* Set USB Default FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8004f7e:	2105      	movs	r1, #5
 8004f80:	462a      	mov	r2, r5
 8004f82:	2014      	movs	r0, #20
 8004f84:	f7fd fdf4 	bl	8002b70 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 8004f88:	2014      	movs	r0, #20
 8004f8a:	f7fd fe21 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn); 
#endif
}
 8004f8e:	b006      	add	sp, #24
 8004f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f94:	40021000 	.word	0x40021000

08004f98 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004f98:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8004f9a:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 8004f9e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004fa2:	f7ff bbc2 	b.w	800472a <USBD_LL_SetupStage>

08004fa6 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004fa6:	231c      	movs	r3, #28
 8004fa8:	fb03 0301 	mla	r3, r3, r1, r0
 8004fac:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004fb0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004fb4:	f7ff bbe6 	b.w	8004784 <USBD_LL_DataOutStage>

08004fb8 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004fb8:	231c      	movs	r3, #28
 8004fba:	fb03 0301 	mla	r3, r3, r1, r0
 8004fbe:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc4:	f7ff bc0e 	b.w	80047e4 <USBD_LL_DataInStage>

08004fc8 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8004fc8:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004fcc:	f7ff bc70 	b.w	80048b0 <USBD_LL_SOF>

08004fd0 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004fda:	f7ff fc66 	bl	80048aa <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004fde:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 8004fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004fe6:	f7ff bc41 	b.w	800486c <USBD_LL_Reset>

08004fea <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004fea:	4770      	bx	lr

08004fec <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004fec:	4770      	bx	lr
	...

08004ff0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004ff0:	b538      	push	{r3, r4, r5, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004ff2:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <USBD_LL_Init+0x74>)
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004ff4:	4605      	mov	r5, r0
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 8004ff6:	481c      	ldr	r0, [pc, #112]	; (8005068 <USBD_LL_Init+0x78>)
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.speed = PCD_SPEED_FULL;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
  pdev->pData = &hpcd;
 8004ff8:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004ffc:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 8004ffe:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8005000:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005004:	2302      	movs	r3, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 8005006:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005008:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800500a:	6083      	str	r3, [r0, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800500c:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  pdev->pData = &hpcd;
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 8005010:	f7fd fed3 	bl	8002dba <HAL_PCD_Init>
  
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8005014:	4621      	mov	r1, r4
 8005016:	4622      	mov	r2, r4
 8005018:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800501c:	2340      	movs	r3, #64	; 0x40
 800501e:	f7fe fdf4 	bl	8003c0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	4622      	mov	r2, r4
 8005026:	460b      	mov	r3, r1
 8005028:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800502c:	f7fe fded 	bl	8003c0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 8005030:	4622      	mov	r2, r4
 8005032:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8005036:	2181      	movs	r1, #129	; 0x81
 8005038:	23c0      	movs	r3, #192	; 0xc0
 800503a:	f7fe fde6 	bl	8003c0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800503e:	4622      	mov	r2, r4
 8005040:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8005044:	2101      	movs	r1, #1
 8005046:	f44f 7388 	mov.w	r3, #272	; 0x110
 800504a:	f7fe fdde 	bl	8003c0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800504e:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8005052:	2182      	movs	r1, #130	; 0x82
 8005054:	4622      	mov	r2, r4
 8005056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800505a:	f7fe fdd6 	bl	8003c0a <HAL_PCDEx_PMAConfig>
    
  return USBD_OK;
}
 800505e:	4620      	mov	r0, r4
 8005060:	bd38      	pop	{r3, r4, r5, pc}
 8005062:	bf00      	nop
 8005064:	40005c00 	.word	0x40005c00
 8005068:	200011dc 	.word	0x200011dc

0800506c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800506c:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800506e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005072:	f7fd feef 	bl	8002e54 <HAL_PCD_Start>
  return USBD_OK;
}
 8005076:	2000      	movs	r0, #0
 8005078:	bd08      	pop	{r3, pc}

0800507a <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800507a:	b510      	push	{r4, lr}
 800507c:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 800507e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005082:	461a      	mov	r2, r3
 8005084:	4623      	mov	r3, r4
 8005086:	f7fd ff01 	bl	8002e8c <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 800508a:	2000      	movs	r0, #0
 800508c:	bd10      	pop	{r4, pc}

0800508e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800508e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005090:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005094:	f7fe f896 	bl	80031c4 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8005098:	2000      	movs	r0, #0
 800509a:	bd08      	pop	{r3, pc}

0800509c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800509c:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800509e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80050a2:	f7fe fcfd 	bl	8003aa0 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80050a6:	2000      	movs	r0, #0
 80050a8:	bd08      	pop	{r3, pc}

080050aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80050aa:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80050ac:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80050b0:	f7fe fd47 	bl	8003b42 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80050b4:	2000      	movs	r0, #0
 80050b6:	bd08      	pop	{r3, pc}

080050b8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80050b8:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80050bc:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80050c0:	bf18      	it	ne
 80050c2:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 80050c6:	f04f 001c 	mov.w	r0, #28
 80050ca:	bf15      	itete	ne
 80050cc:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80050d0:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80050d4:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80050d8:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
  }
}
 80050dc:	4770      	bx	lr

080050de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80050de:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80050e0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80050e4:	f7fd febc 	bl	8002e60 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 80050e8:	2000      	movs	r0, #0
 80050ea:	bd08      	pop	{r3, pc}

080050ec <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 80050ec:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80050ee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80050f2:	f7fe f9c1 	bl	8003478 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 80050f6:	2000      	movs	r0, #0
 80050f8:	bd08      	pop	{r3, pc}

080050fa <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 80050fa:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80050fc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005100:	f7fe f938 	bl	8003374 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8005104:	2000      	movs	r0, #0
 8005106:	bd08      	pop	{r3, pc}

08005108 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005108:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800510a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800510e:	f7fe f9ab 	bl	8003468 <HAL_PCD_EP_GetRxCount>
}
 8005112:	bd08      	pop	{r3, pc}

08005114 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 8005114:	4800      	ldr	r0, [pc, #0]	; (8005118 <USBD_static_malloc+0x4>)
 8005116:	4770      	bx	lr
 8005118:	20000c10 	.word	0x20000c10

0800511c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800511c:	4770      	bx	lr
	...

08005120 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8005120:	2312      	movs	r3, #18
 8005122:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 8005124:	4800      	ldr	r0, [pc, #0]	; (8005128 <USBD_VCP_DeviceDescriptor+0x8>)
 8005126:	4770      	bx	lr
 8005128:	08019ced 	.word	0x08019ced

0800512c <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800512c:	2304      	movs	r3, #4
 800512e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8005130:	4800      	ldr	r0, [pc, #0]	; (8005134 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8005132:	4770      	bx	lr
 8005134:	08019c9c 	.word	0x08019c9c

08005138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8005138:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800513a:	2400      	movs	r4, #0
 800513c:	b2e3      	uxtb	r3, r4
 800513e:	4293      	cmp	r3, r2
 8005140:	d20d      	bcs.n	800515e <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 8005142:	0f03      	lsrs	r3, r0, #28
 8005144:	2b09      	cmp	r3, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8005146:	bf94      	ite	ls
 8005148:	3330      	addls	r3, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800514a:	3337      	addhi	r3, #55	; 0x37
 800514c:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
 8005150:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8005154:	2500      	movs	r5, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8005156:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 8005158:	705d      	strb	r5, [r3, #1]
 800515a:	3401      	adds	r4, #1
 800515c:	e7ee      	b.n	800513c <IntToUnicode+0x4>
  }
}
 800515e:	bd30      	pop	{r4, r5, pc}

08005160 <USBD_VCP_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 8005160:	231a      	movs	r3, #26
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005162:	b510      	push	{r4, lr}
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8005164:	4a09      	ldr	r2, [pc, #36]	; (800518c <USBD_VCP_SerialStrDescriptor+0x2c>)
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 8005166:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8005168:	4b09      	ldr	r3, [pc, #36]	; (8005190 <USBD_VCP_SerialStrDescriptor+0x30>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
 800516a:	6850      	ldr	r0, [r2, #4]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800516c:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800516e:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
  
  if (deviceserial0 != 0)
 8005170:	1818      	adds	r0, r3, r0
 8005172:	d008      	beq.n	8005186 <USBD_VCP_SerialStrDescriptor+0x26>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <USBD_VCP_SerialStrDescriptor+0x34>)
 8005176:	2208      	movs	r2, #8
 8005178:	f7ff ffde 	bl	8005138 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800517c:	4620      	mov	r0, r4
 800517e:	4906      	ldr	r1, [pc, #24]	; (8005198 <USBD_VCP_SerialStrDescriptor+0x38>)
 8005180:	2204      	movs	r2, #4
 8005182:	f7ff ffd9 	bl	8005138 <IntToUnicode>
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
  
  return USBD_StringSerial;
}
 8005186:	4805      	ldr	r0, [pc, #20]	; (800519c <USBD_VCP_SerialStrDescriptor+0x3c>)
 8005188:	bd10      	pop	{r4, pc}
 800518a:	bf00      	nop
 800518c:	1ffff7b0 	.word	0x1ffff7b0
 8005190:	1ffff7ac 	.word	0x1ffff7ac
 8005194:	2000014e 	.word	0x2000014e
 8005198:	2000015e 	.word	0x2000015e
 800519c:	2000014c 	.word	0x2000014c

080051a0 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051a0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80051a2:	4c04      	ldr	r4, [pc, #16]	; (80051b4 <USBD_VCP_ProductStrDescriptor+0x14>)
 80051a4:	4804      	ldr	r0, [pc, #16]	; (80051b8 <USBD_VCP_ProductStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051a6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80051a8:	4621      	mov	r1, r4
 80051aa:	f7ff fd2a 	bl	8004c02 <USBD_GetString>
  return USBD_StrDesc;
}
 80051ae:	4620      	mov	r0, r4
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	bf00      	nop
 80051b4:	20001354 	.word	0x20001354
 80051b8:	08019ca0 	.word	0x08019ca0

080051bc <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051bc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80051be:	4c04      	ldr	r4, [pc, #16]	; (80051d0 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 80051c0:	4804      	ldr	r0, [pc, #16]	; (80051d4 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051c2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80051c4:	4621      	mov	r1, r4
 80051c6:	f7ff fd1c 	bl	8004c02 <USBD_GetString>
  return USBD_StrDesc;
}
 80051ca:	4620      	mov	r0, r4
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	20001354 	.word	0x20001354
 80051d4:	08019cc1 	.word	0x08019cc1

080051d8 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051d8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80051da:	4c04      	ldr	r4, [pc, #16]	; (80051ec <USBD_VCP_ConfigStrDescriptor+0x14>)
 80051dc:	4804      	ldr	r0, [pc, #16]	; (80051f0 <USBD_VCP_ConfigStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051de:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80051e0:	4621      	mov	r1, r4
 80051e2:	f7ff fd0e 	bl	8004c02 <USBD_GetString>
  return USBD_StrDesc;  
}
 80051e6:	4620      	mov	r0, r4
 80051e8:	bd10      	pop	{r4, pc}
 80051ea:	bf00      	nop
 80051ec:	20001354 	.word	0x20001354
 80051f0:	08019cd4 	.word	0x08019cd4

080051f4 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051f4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80051f6:	4c04      	ldr	r4, [pc, #16]	; (8005208 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 80051f8:	4804      	ldr	r0, [pc, #16]	; (800520c <USBD_VCP_InterfaceStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051fa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80051fc:	4621      	mov	r1, r4
 80051fe:	f7ff fd00 	bl	8004c02 <USBD_GetString>
  return USBD_StrDesc;  
}
 8005202:	4620      	mov	r0, r4
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	20001354 	.word	0x20001354
 800520c:	08019cdf 	.word	0x08019cdf

08005210 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 8005210:	2000      	movs	r0, #0
 8005212:	4770      	bx	lr

08005214 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 8005214:	b508      	push	{r3, lr}
 8005216:	460b      	mov	r3, r1
 8005218:	4602      	mov	r2, r0
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800521a:	4611      	mov	r1, r2
 800521c:	2000      	movs	r0, #0
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	f7fc fca4 	bl	8001b6c <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 8005224:	4802      	ldr	r0, [pc, #8]	; (8005230 <CDC_Itf_Receive+0x1c>)
 8005226:	f7ff fe55 	bl	8004ed4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800522a:	2000      	movs	r0, #0
 800522c:	bd08      	pop	{r3, pc}
 800522e:	bf00      	nop
 8005230:	20000fb4 	.word	0x20000fb4

08005234 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8005234:	b508      	push	{r3, lr}
  //  USBD_CDC_SetTxBuffer(&hUSBDDevice, NULL, 0);
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 8005236:	4903      	ldr	r1, [pc, #12]	; (8005244 <CDC_Itf_Init+0x10>)
 8005238:	4803      	ldr	r0, [pc, #12]	; (8005248 <CDC_Itf_Init+0x14>)
 800523a:	f7ff fe2e 	bl	8004e9a <USBD_CDC_SetRxBuffer>


  return (USBD_OK);
}
 800523e:	2000      	movs	r0, #0
 8005240:	bd08      	pop	{r3, pc}
 8005242:	bf00      	nop
 8005244:	200014c4 	.word	0x200014c4
 8005248:	20000fb4 	.word	0x20000fb4

0800524c <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 800524c:	2820      	cmp	r0, #32
 800524e:	d012      	beq.n	8005276 <CDC_Itf_Control+0x2a>
 8005250:	2821      	cmp	r0, #33	; 0x21
 8005252:	d122      	bne.n	800529a <CDC_Itf_Control+0x4e>
    /* Set the new configuration */

    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005254:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <CDC_Itf_Control+0x54>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	0a12      	lsrs	r2, r2, #8
 800525e:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8005260:	885a      	ldrh	r2, [r3, #2]
 8005262:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8005264:	78da      	ldrb	r2, [r3, #3]
 8005266:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8005268:	791a      	ldrb	r2, [r3, #4]
 800526a:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800526c:	795a      	ldrb	r2, [r3, #5]
 800526e:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 8005270:	799b      	ldrb	r3, [r3, #6]
 8005272:	718b      	strb	r3, [r1, #6]
    
    /* Add your code here */
    break;
 8005274:	e011      	b.n	800529a <CDC_Itf_Control+0x4e>
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8005276:	788b      	ldrb	r3, [r1, #2]
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8005278:	784a      	ldrb	r2, [r1, #1]
 800527a:	4809      	ldr	r0, [pc, #36]	; (80052a0 <CDC_Itf_Control+0x54>)
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8005282:	780a      	ldrb	r2, [r1, #0]
 8005284:	4313      	orrs	r3, r2
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8005286:	78ca      	ldrb	r2, [r1, #3]
 8005288:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800528c:	6003      	str	r3, [r0, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 800528e:	790b      	ldrb	r3, [r1, #4]
 8005290:	7103      	strb	r3, [r0, #4]
    LineCoding.paritytype = pbuf[5];
 8005292:	794b      	ldrb	r3, [r1, #5]
 8005294:	7143      	strb	r3, [r0, #5]
    LineCoding.datatype   = pbuf[6];
 8005296:	798b      	ldrb	r3, [r1, #6]
 8005298:	7183      	strb	r3, [r0, #6]
  default:
    break;
  }
  
  return (USBD_OK);
}
 800529a:	2000      	movs	r0, #0
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20000168 	.word	0x20000168

080052a4 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 80052a4:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80052a6:	4c1c      	ldr	r4, [pc, #112]	; (8005318 <SPIx_Init+0x74>)
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 80052a8:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80052aa:	4620      	mov	r0, r4
 80052ac:	f7ff fa07 	bl	80046be <HAL_SPI_GetState>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d12e      	bne.n	8005312 <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80052b4:	4b19      	ldr	r3, [pc, #100]	; (800531c <SPIx_Init+0x78>)
 80052b6:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80052b8:	2318      	movs	r3, #24
 80052ba:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 80052bc:	2307      	movs	r3, #7
 80052be:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80052c0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80052c4:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80052c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ca:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80052cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80052d0:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80052d2:	4b13      	ldr	r3, [pc, #76]	; (8005320 <SPIx_Init+0x7c>)
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 80052d4:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052d6:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052d8:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80052da:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052dc:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80052de:	6260      	str	r0, [r4, #36]	; 0x24
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052e6:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80052ee:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80052f0:	23e0      	movs	r3, #224	; 0xe0
 80052f2:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80052f4:	2302      	movs	r3, #2
 80052f6:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80052f8:	2303      	movs	r3, #3
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 80052fa:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80052fc:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80052fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8005302:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005304:	a901      	add	r1, sp, #4
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8005306:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005308:	f7fd fc84 	bl	8002c14 <HAL_GPIO_Init>
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;

    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 800530c:	4620      	mov	r0, r4
 800530e:	f7ff f81e 	bl	800434e <HAL_SPI_Init>
  }
}
 8005312:	b006      	add	sp, #24
 8005314:	bd10      	pop	{r4, pc}
 8005316:	bf00      	nop
 8005318:	20000e40 	.word	0x20000e40
 800531c:	40013000 	.word	0x40013000
 8005320:	40021000 	.word	0x40021000

08005324 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8005324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  uint8_t receivedbyte = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	f88d 3017 	strb.w	r3, [sp, #23]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <SPIx_WriteRead+0x38>)
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800532e:	f88d 000f 	strb.w	r0, [sp, #15]

  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	480a      	ldr	r0, [pc, #40]	; (8005360 <SPIx_WriteRead+0x3c>)
 8005338:	f10d 010f 	add.w	r1, sp, #15
 800533c:	f10d 0217 	add.w	r2, sp, #23
 8005340:	2301      	movs	r3, #1
 8005342:	f7ff f86f 	bl	8004424 <HAL_SPI_TransmitReceive>
 8005346:	b120      	cbz	r0, 8005352 <SPIx_WriteRead+0x2e>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8005348:	4805      	ldr	r0, [pc, #20]	; (8005360 <SPIx_WriteRead+0x3c>)
 800534a:	f7ff f854 	bl	80043f6 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 800534e:	f7ff ffa9 	bl	80052a4 <SPIx_Init>
  {
    SPIx_Error();
  }
  
  return receivedbyte;
}
 8005352:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8005356:	b007      	add	sp, #28
 8005358:	f85d fb04 	ldr.w	pc, [sp], #4
 800535c:	20000180 	.word	0x20000180
 8005360:	20000e40 	.word	0x20000e40

08005364 <I2Cx_Init>:
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 8005364:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8005366:	4c16      	ldr	r4, [pc, #88]	; (80053c0 <I2Cx_Init+0x5c>)
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 8005368:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800536a:	4620      	mov	r0, r4
 800536c:	f7fe ff36 	bl	80041dc <HAL_I2C_GetState>
 8005370:	bb18      	cbnz	r0, 80053ba <I2Cx_Init+0x56>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <I2Cx_Init+0x60>)
 8005374:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8005376:	2332      	movs	r3, #50	; 0x32
 8005378:	60a3      	str	r3, [r4, #8]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800537a:	4d13      	ldr	r5, [pc, #76]	; (80053c8 <I2Cx_Init+0x64>)
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800537c:	6120      	str	r0, [r4, #16]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800537e:	2301      	movs	r3, #1
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2 = 0;
 8005380:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8005382:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8005384:	6220      	str	r0, [r4, #32]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005386:	60e3      	str	r3, [r4, #12]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8005388:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800538a:	4810      	ldr	r0, [pc, #64]	; (80053cc <I2Cx_Init+0x68>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800538c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005390:	616b      	str	r3, [r5, #20]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8005392:	23c0      	movs	r3, #192	; 0xc0
 8005394:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005396:	2302      	movs	r3, #2
 8005398:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800539a:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80053a0:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80053a2:	eb0d 0103 	add.w	r1, sp, r3
  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80053a6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80053a8:	f7fd fc34 	bl	8002c14 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80053ac:	69eb      	ldr	r3, [r5, #28]
 80053ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053b2:	61eb      	str	r3, [r5, #28]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 80053b4:	4620      	mov	r0, r4
 80053b6:	f7fe fdb3 	bl	8003f20 <HAL_I2C_Init>
  }
}
 80053ba:	b007      	add	sp, #28
 80053bc:	bd30      	pop	{r4, r5, pc}
 80053be:	bf00      	nop
 80053c0:	20000ea0 	.word	0x20000ea0
 80053c4:	40005400 	.word	0x40005400
 80053c8:	40021000 	.word	0x40021000
 80053cc:	48000400 	.word	0x48000400

080053d0 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80053d0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80053d2:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80053d4:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80053d6:	b168      	cbz	r0, 80053f4 <BSP_LED_Init+0x24>
 80053d8:	2801      	cmp	r0, #1
 80053da:	d00b      	beq.n	80053f4 <BSP_LED_Init+0x24>
 80053dc:	2802      	cmp	r0, #2
 80053de:	d009      	beq.n	80053f4 <BSP_LED_Init+0x24>
 80053e0:	2803      	cmp	r0, #3
 80053e2:	d007      	beq.n	80053f4 <BSP_LED_Init+0x24>
 80053e4:	2804      	cmp	r0, #4
 80053e6:	d005      	beq.n	80053f4 <BSP_LED_Init+0x24>
 80053e8:	2805      	cmp	r0, #5
 80053ea:	d003      	beq.n	80053f4 <BSP_LED_Init+0x24>
 80053ec:	2806      	cmp	r0, #6
 80053ee:	d001      	beq.n	80053f4 <BSP_LED_Init+0x24>
 80053f0:	2807      	cmp	r0, #7
 80053f2:	d104      	bne.n	80053fe <BSP_LED_Init+0x2e>
 80053f4:	4a0d      	ldr	r2, [pc, #52]	; (800542c <BSP_LED_Init+0x5c>)
 80053f6:	6953      	ldr	r3, [r2, #20]
 80053f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053fc:	6153      	str	r3, [r2, #20]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80053fe:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <BSP_LED_Init+0x60>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005400:	4e0c      	ldr	r6, [pc, #48]	; (8005434 <BSP_LED_Init+0x64>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005402:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005406:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800540a:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800540c:	2301      	movs	r3, #1
 800540e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005410:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005412:	a901      	add	r1, sp, #4

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005414:	2303      	movs	r3, #3
 8005416:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005418:	f7fd fbfc 	bl	8002c14 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800541c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005420:	4629      	mov	r1, r5
 8005422:	2200      	movs	r2, #0
 8005424:	f7fd fcc0 	bl	8002da8 <HAL_GPIO_WritePin>
}
 8005428:	b006      	add	sp, #24
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	40021000 	.word	0x40021000
 8005430:	08019d00 	.word	0x08019d00
 8005434:	2000018c 	.word	0x2000018c

08005438 <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800543a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800543c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005440:	4a03      	ldr	r2, [pc, #12]	; (8005450 <BSP_LED_On+0x18>)
 8005442:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005446:	2201      	movs	r2, #1
 8005448:	f7fd bcae 	b.w	8002da8 <HAL_GPIO_WritePin>
 800544c:	2000018c 	.word	0x2000018c
 8005450:	08019d00 	.word	0x08019d00

08005454 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005456:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8005458:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800545c:	4a03      	ldr	r2, [pc, #12]	; (800546c <BSP_LED_Off+0x18>)
 800545e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005462:	2200      	movs	r2, #0
 8005464:	f7fd bca0 	b.w	8002da8 <HAL_GPIO_WritePin>
 8005468:	2000018c 	.word	0x2000018c
 800546c:	08019d00 	.word	0x08019d00

08005470 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005472:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005474:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <BSP_LED_Toggle+0x18>)
 800547a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800547e:	f7fd bc98 	b.w	8002db2 <HAL_GPIO_TogglePin>
 8005482:	bf00      	nop
 8005484:	2000018c 	.word	0x2000018c
 8005488:	08019d00 	.word	0x08019d00

0800548c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800548c:	b510      	push	{r4, lr}
 800548e:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <BSP_PB_Init+0x68>)
 8005490:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005492:	b918      	cbnz	r0, 800549c <BSP_PB_Init+0x10>
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800549a:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	619a      	str	r2, [r3, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80054a4:	b969      	cbnz	r1, 80054c2 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80054a6:	2301      	movs	r3, #1
 80054a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80054aa:	2302      	movs	r3, #2
 80054ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80054ae:	2303      	movs	r3, #3
 80054b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054b4:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80054b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80054ba:	a901      	add	r1, sp, #4
 80054bc:	f7fd fbaa 	bl	8002c14 <HAL_GPIO_Init>
 80054c0:	e016      	b.n	80054f0 <BSP_PB_Init+0x64>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 80054c2:	2901      	cmp	r1, #1
 80054c4:	d114      	bne.n	80054f0 <BSP_PB_Init+0x64>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80054c6:	2303      	movs	r3, #3
 80054c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <BSP_PB_Init+0x70>)
 80054cc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <BSP_PB_Init+0x6c>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80054d0:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80054d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80054d8:	a901      	add	r1, sp, #4

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054da:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80054dc:	f7fd fb9a 	bl	8002c14 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80054e0:	2006      	movs	r0, #6
 80054e2:	210f      	movs	r1, #15
 80054e4:	4622      	mov	r2, r4
 80054e6:	f7fd fb43 	bl	8002b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80054ea:	2006      	movs	r0, #6
 80054ec:	f7fd fb70 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  }
}
 80054f0:	b006      	add	sp, #24
 80054f2:	bd10      	pop	{r4, pc}
 80054f4:	40021000 	.word	0x40021000
 80054f8:	20000184 	.word	0x20000184
 80054fc:	10110000 	.word	0x10110000

08005500 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8005500:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8005502:	4b03      	ldr	r3, [pc, #12]	; (8005510 <BSP_PB_GetState+0x10>)
 8005504:	2101      	movs	r1, #1
 8005506:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800550a:	f7fd fc47 	bl	8002d9c <HAL_GPIO_ReadPin>
}
 800550e:	bd08      	pop	{r3, pc}
 8005510:	20000184 	.word	0x20000184

08005514 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8005514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8005518:	4c16      	ldr	r4, [pc, #88]	; (8005574 <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800551a:	4d17      	ldr	r5, [pc, #92]	; (8005578 <GYRO_IO_Init+0x64>)
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800551c:	6963      	ldr	r3, [r4, #20]
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800551e:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8005520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005524:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005526:	2600      	movs	r6, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8005528:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800552c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005530:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8005532:	4628      	mov	r0, r5
 8005534:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8005536:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800553a:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800553e:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005540:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8005542:	f7fd fb67 	bl	8002c14 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8005546:	4642      	mov	r2, r8
 8005548:	4628      	mov	r0, r5
 800554a:	4649      	mov	r1, r9
 800554c:	f7fd fc2c 	bl	8002da8 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8005550:	6963      	ldr	r3, [r4, #20]
 8005552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005556:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005558:	4628      	mov	r0, r5
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800555a:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800555c:	a901      	add	r1, sp, #4
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800555e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005560:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005562:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8005564:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005566:	f7fd fb55 	bl	8002c14 <HAL_GPIO_Init>
  
  SPIx_Init();
 800556a:	f7ff fe9b 	bl	80052a4 <SPIx_Init>
}
 800556e:	b007      	add	sp, #28
 8005570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005574:	40021000 	.word	0x40021000
 8005578:	48001000 	.word	0x48001000

0800557c <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800557c:	2a01      	cmp	r2, #1
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800557e:	b570      	push	{r4, r5, r6, lr}
 8005580:	460d      	mov	r5, r1
 8005582:	4606      	mov	r6, r0
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8005584:	bf88      	it	hi
 8005586:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800558a:	480c      	ldr	r0, [pc, #48]	; (80055bc <GYRO_IO_Write+0x40>)
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800558c:	4614      	mov	r4, r2
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800558e:	2108      	movs	r1, #8
 8005590:	2200      	movs	r2, #0
 8005592:	f7fd fc09 	bl	8002da8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8005596:	4628      	mov	r0, r5
 8005598:	f7ff fec4 	bl	8005324 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800559c:	b134      	cbz	r4, 80055ac <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 800559e:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 80055a2:	3c01      	subs	r4, #1
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
  {
    SPIx_WriteRead(*pBuffer);
 80055a4:	f7ff febe 	bl	8005324 <SPIx_WriteRead>
    NumByteToWrite--;
 80055a8:	b2a4      	uxth	r4, r4
 80055aa:	e7f7      	b.n	800559c <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80055ac:	4803      	ldr	r0, [pc, #12]	; (80055bc <GYRO_IO_Write+0x40>)
 80055ae:	2108      	movs	r1, #8
 80055b0:	2201      	movs	r2, #1
}
 80055b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80055b6:	f7fd bbf7 	b.w	8002da8 <HAL_GPIO_WritePin>
 80055ba:	bf00      	nop
 80055bc:	48001000 	.word	0x48001000

080055c0 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 80055c0:	2a01      	cmp	r2, #1
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80055c2:	b570      	push	{r4, r5, r6, lr}
  if(NumByteToRead > 0x01)
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80055c4:	bf8c      	ite	hi
 80055c6:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80055ca:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80055ce:	4606      	mov	r6, r0
 80055d0:	4614      	mov	r4, r2
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80055d2:	480c      	ldr	r0, [pc, #48]	; (8005604 <GYRO_IO_Read+0x44>)
 80055d4:	2108      	movs	r1, #8
 80055d6:	2200      	movs	r2, #0
 80055d8:	f7fd fbe6 	bl	8002da8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80055dc:	4628      	mov	r0, r5
 80055de:	f7ff fea1 	bl	8005324 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80055e2:	b13c      	cbz	r4, 80055f4 <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80055e4:	2000      	movs	r0, #0
 80055e6:	f7ff fe9d 	bl	8005324 <SPIx_WriteRead>
    NumByteToRead--;
 80055ea:	3c01      	subs	r4, #1
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80055ec:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 80055f0:	b2a4      	uxth	r4, r4
 80055f2:	e7f6      	b.n	80055e2 <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80055f4:	4803      	ldr	r0, [pc, #12]	; (8005604 <GYRO_IO_Read+0x44>)
 80055f6:	2108      	movs	r1, #8
 80055f8:	2201      	movs	r2, #1
}  
 80055fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80055fe:	f7fd bbd3 	b.w	8002da8 <HAL_GPIO_WritePin>
 8005602:	bf00      	nop
 8005604:	48001000 	.word	0x48001000

08005608 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8005608:	4b16      	ldr	r3, [pc, #88]	; (8005664 <COMPASSACCELERO_IO_Init+0x5c>)
 800560a:	695a      	ldr	r2, [r3, #20]
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800560c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800560e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005612:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005614:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005616:	4d14      	ldr	r5, [pc, #80]	; (8005668 <COMPASSACCELERO_IO_Init+0x60>)
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005618:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800561c:	b086      	sub	sp, #24
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800561e:	615a      	str	r2, [r3, #20]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8005620:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005622:	2400      	movs	r4, #0
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005624:	eb0d 0103 	add.w	r1, sp, r3
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005628:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800562a:	4628      	mov	r0, r5
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800562c:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800562e:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005630:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005632:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005634:	f7fd faee 	bl	8002c14 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 8005638:	4622      	mov	r2, r4
 800563a:	4621      	mov	r1, r4
 800563c:	2008      	movs	r0, #8
 800563e:	f7fd fa97 	bl	8002b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8005642:	2008      	movs	r0, #8
 8005644:	f7fd fac4 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8005648:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800564a:	4628      	mov	r0, r5
 800564c:	a901      	add	r1, sp, #4
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800564e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005650:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005652:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005654:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005656:	f7fd fadd 	bl	8002c14 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800565a:	f7ff fe83 	bl	8005364 <I2Cx_Init>
}
 800565e:	b006      	add	sp, #24
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000
 8005668:	48001000 	.word	0x48001000

0800566c <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800566c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800566e:	4a0e      	ldr	r2, [pc, #56]	; (80056a8 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005670:	480e      	ldr	r0, [pc, #56]	; (80056ac <COMPASSACCELERO_IO_ITConfig+0x40>)
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005672:	6953      	ldr	r3, [r2, #20]
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8005674:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800567a:	6153      	str	r3, [r2, #20]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800567c:	2330      	movs	r3, #48	; 0x30
 800567e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <COMPASSACCELERO_IO_ITConfig+0x44>)
 8005682:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005684:	2400      	movs	r4, #0
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005686:	2303      	movs	r3, #3
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005688:	a901      	add	r1, sp, #4
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800568a:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800568c:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800568e:	f7fd fac1 	bl	8002c14 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 8005692:	4621      	mov	r1, r4
 8005694:	4622      	mov	r2, r4
 8005696:	200a      	movs	r0, #10
 8005698:	f7fd fa6a 	bl	8002b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800569c:	200a      	movs	r0, #10
 800569e:	f7fd fa97 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  
}
 80056a2:	b006      	add	sp, #24
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	48001000 	.word	0x48001000
 80056b0:	10110000 	.word	0x10110000

080056b4 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80056b4:	b510      	push	{r4, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	ab06      	add	r3, sp, #24
 80056ba:	4604      	mov	r4, r0
 80056bc:	f803 2d01 	strb.w	r2, [r3, #-1]!
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80056c0:	460a      	mov	r2, r1
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	4908      	ldr	r1, [pc, #32]	; (80056e8 <COMPASSACCELERO_IO_Write+0x34>)
 80056c6:	4809      	ldr	r0, [pc, #36]	; (80056ec <COMPASSACCELERO_IO_Write+0x38>)
 80056c8:	2301      	movs	r3, #1
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	6809      	ldr	r1, [r1, #0]
 80056ce:	9102      	str	r1, [sp, #8]
 80056d0:	4621      	mov	r1, r4
 80056d2:	f7fe fc85 	bl	8003fe0 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 80056d6:	b120      	cbz	r0, 80056e2 <COMPASSACCELERO_IO_Write+0x2e>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80056d8:	4804      	ldr	r0, [pc, #16]	; (80056ec <COMPASSACCELERO_IO_Write+0x38>)
 80056da:	f7fe fc6a 	bl	8003fb2 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80056de:	f7ff fe41 	bl	8005364 <I2Cx_Init>
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 80056e2:	b006      	add	sp, #24
 80056e4:	bd10      	pop	{r4, pc}
 80056e6:	bf00      	nop
 80056e8:	20000188 	.word	0x20000188
 80056ec:	20000ea0 	.word	0x20000ea0

080056f0 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80056f0:	b510      	push	{r4, lr}
 80056f2:	b086      	sub	sp, #24
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 80056f4:	ab06      	add	r3, sp, #24
 80056f6:	2200      	movs	r2, #0
 80056f8:	f803 2d01 	strb.w	r2, [r3, #-1]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80056fc:	460a      	mov	r2, r1
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	4909      	ldr	r1, [pc, #36]	; (8005728 <COMPASSACCELERO_IO_Read+0x38>)
 8005702:	2301      	movs	r3, #1
 8005704:	9301      	str	r3, [sp, #4]
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8005706:	4604      	mov	r4, r0
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8005708:	6809      	ldr	r1, [r1, #0]
 800570a:	9102      	str	r1, [sp, #8]
 800570c:	4807      	ldr	r0, [pc, #28]	; (800572c <COMPASSACCELERO_IO_Read+0x3c>)
 800570e:	4621      	mov	r1, r4
 8005710:	f7fe fce2 	bl	80040d8 <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 8005714:	b120      	cbz	r0, 8005720 <COMPASSACCELERO_IO_Read+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8005716:	4805      	ldr	r0, [pc, #20]	; (800572c <COMPASSACCELERO_IO_Read+0x3c>)
 8005718:	f7fe fc4b 	bl	8003fb2 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800571c:	f7ff fe22 	bl	8005364 <I2Cx_Init>
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 8005720:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8005724:	b006      	add	sp, #24
 8005726:	bd10      	pop	{r4, pc}
 8005728:	20000188 	.word	0x20000188
 800572c:	20000ea0 	.word	0x20000ea0

08005730 <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 8005730:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8005732:	4c09      	ldr	r4, [pc, #36]	; (8005758 <BSP_ACCELERO_Init+0x28>)
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	4798      	blx	r3
 8005738:	2833      	cmp	r0, #51	; 0x33
 800573a:	d10b      	bne.n	8005754 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800573c:	4d07      	ldr	r5, [pc, #28]	; (800575c <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800573e:	6823      	ldr	r3, [r4, #0]
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8005740:	602c      	str	r4, [r5, #0]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8005742:	f640 0047 	movw	r0, #2119	; 0x847
 8005746:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	2090      	movs	r0, #144	; 0x90
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8005750:	2000      	movs	r0, #0
 8005752:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 8005754:	2001      	movs	r0, #1
  }

  return ret;
}
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	200001ac 	.word	0x200001ac
 800575c:	20000ed8 	.word	0x20000ed8

08005760 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 8005760:	4b02      	ldr	r3, [pc, #8]	; (800576c <BSP_ACCELERO_GetXYZ+0xc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	b103      	cbz	r3, 800576a <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8005768:	4718      	bx	r3
 800576a:	4770      	bx	lr
 800576c:	20000ed8 	.word	0x20000ed8

08005770 <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8005770:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8005772:	4c0e      	ldr	r4, [pc, #56]	; (80057ac <BSP_GYRO_Init+0x3c>)
 8005774:	6863      	ldr	r3, [r4, #4]
 8005776:	4798      	blx	r3
 8005778:	28d4      	cmp	r0, #212	; 0xd4
 800577a:	4625      	mov	r5, r4
 800577c:	d10f      	bne.n	800579e <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800577e:	4c0c      	ldr	r4, [pc, #48]	; (80057b0 <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8005780:	682b      	ldr	r3, [r5, #0]
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8005782:	6025      	str	r5, [r4, #0]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8005784:	f241 003f 	movw	r0, #4159	; 0x103f
 8005788:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	2000      	movs	r0, #0
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	2010      	movs	r0, #16
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	4798      	blx	r3
	
    ret = GYRO_OK;
 800579a:	2000      	movs	r0, #0
 800579c:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	4798      	blx	r3
 80057a2:	28d5      	cmp	r0, #213	; 0xd5
 80057a4:	d0eb      	beq.n	800577e <BSP_GYRO_Init+0xe>
	
    ret = GYRO_OK;
  }
  else
  {
    ret = GYRO_ERROR;
 80057a6:	2001      	movs	r0, #1
  }
  
  return ret;
}
 80057a8:	bd38      	pop	{r3, r4, r5, pc}
 80057aa:	bf00      	nop
 80057ac:	200001d8 	.word	0x200001d8
 80057b0:	20000edc 	.word	0x20000edc

080057b4 <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <BSP_GYRO_GetXYZ+0xc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	b103      	cbz	r3, 80057be <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 80057bc:	4718      	bx	r3
 80057be:	4770      	bx	lr
 80057c0:	20000edc 	.word	0x20000edc

080057c4 <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 80057c4:	b510      	push	{r4, lr}
 80057c6:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80057c8:	f7ff ff1e 	bl	8005608 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 80057cc:	b2e2      	uxtb	r2, r4
 80057ce:	2032      	movs	r0, #50	; 0x32
 80057d0:	2120      	movs	r1, #32
 80057d2:	f7ff ff6f 	bl	80056b4 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80057d6:	2032      	movs	r0, #50	; 0x32
 80057d8:	2123      	movs	r1, #35	; 0x23
 80057da:	2200      	movs	r2, #0
}
 80057dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80057e0:	f7ff bf68 	b.w	80056b4 <COMPASSACCELERO_IO_Write>

080057e4 <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80057e4:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80057e6:	f7ff ff0f 	bl	8005608 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80057ea:	2032      	movs	r0, #50	; 0x32
 80057ec:	210f      	movs	r1, #15

  return ctrl;
}
 80057ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80057f2:	f7ff bf7d 	b.w	80056f0 <COMPASSACCELERO_IO_Read>

080057f6 <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80057f6:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80057f8:	2124      	movs	r1, #36	; 0x24
 80057fa:	2032      	movs	r0, #50	; 0x32
 80057fc:	f7ff ff78 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8005800:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8005804:	2124      	movs	r1, #36	; 0x24
 8005806:	2032      	movs	r0, #50	; 0x32
 8005808:	b2d2      	uxtb	r2, r2
}
 800580a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800580e:	f7ff bf51 	b.w	80056b4 <COMPASSACCELERO_IO_Write>

08005812 <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8005812:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005814:	2121      	movs	r1, #33	; 0x21
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8005816:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005818:	2032      	movs	r0, #50	; 0x32
 800581a:	f7ff ff69 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800581e:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005822:	4322      	orrs	r2, r4
 8005824:	2032      	movs	r0, #50	; 0x32
 8005826:	2121      	movs	r1, #33	; 0x21
}
 8005828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  tmpreg &= 0x0C;
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800582c:	f7ff bf42 	b.w	80056b4 <COMPASSACCELERO_IO_Write>

08005830 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8005830:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005832:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8005834:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005836:	2032      	movs	r0, #50	; 0x32
 8005838:	f7ff ff5a 	bl	80056f0 <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 800583c:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005840:	4322      	orrs	r2, r4
 8005842:	2032      	movs	r0, #50	; 0x32
 8005844:	2121      	movs	r1, #33	; 0x21
}
 8005846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= 0xF7;

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800584a:	f7ff bf33 	b.w	80056b4 <COMPASSACCELERO_IO_Write>

0800584e <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800584e:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8005850:	2123      	movs	r1, #35	; 0x23
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8005852:	b085      	sub	sp, #20
 8005854:	4605      	mov	r5, r0
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8005856:	2032      	movs	r0, #50	; 0x32
 8005858:	f7ff ff4a 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800585c:	2124      	movs	r1, #36	; 0x24
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800585e:	4604      	mov	r4, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8005860:	2032      	movs	r0, #50	; 0x32
 8005862:	f7ff ff45 	bl	80056f0 <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8005866:	2128      	movs	r1, #40	; 0x28
 8005868:	2032      	movs	r0, #50	; 0x32
 800586a:	f7ff ff41 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800586e:	2129      	movs	r1, #41	; 0x29
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8005870:	f88d 0008 	strb.w	r0, [sp, #8]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8005874:	2032      	movs	r0, #50	; 0x32
 8005876:	f7ff ff3b 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800587a:	212a      	movs	r1, #42	; 0x2a
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800587c:	f88d 0009 	strb.w	r0, [sp, #9]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8005880:	2032      	movs	r0, #50	; 0x32
 8005882:	f7ff ff35 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8005886:	212b      	movs	r1, #43	; 0x2b
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8005888:	f88d 000a 	strb.w	r0, [sp, #10]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800588c:	2032      	movs	r0, #50	; 0x32
 800588e:	f7ff ff2f 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8005892:	212c      	movs	r1, #44	; 0x2c

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8005894:	f88d 000b 	strb.w	r0, [sp, #11]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8005898:	2032      	movs	r0, #50	; 0x32
 800589a:	f7ff ff29 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800589e:	212d      	movs	r1, #45	; 0x2d
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80058a0:	f88d 000c 	strb.w	r0, [sp, #12]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80058a4:	2032      	movs	r0, #50	; 0x32
 80058a6:	f7ff ff23 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80058aa:	f014 0f40 	tst.w	r4, #64	; 0x40
 80058ae:	f99d 6009 	ldrsb.w	r6, [sp, #9]
 80058b2:	f99d 7008 	ldrsb.w	r7, [sp, #8]
 80058b6:	f99d 200b 	ldrsb.w	r2, [sp, #11]
 80058ba:	f99d 100a 	ldrsb.w	r1, [sp, #10]
 80058be:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 80058c2:	b240      	sxtb	r0, r0
 80058c4:	d116      	bne.n	80058f4 <LSM303DLHC_AccReadXYZ+0xa6>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80058c6:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 80058ca:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 80058ce:	f8ad 6000 	strh.w	r6, [sp]
 80058d2:	f8ad 2002 	strh.w	r2, [sp, #2]
 80058d6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80058da:	f004 0430 	and.w	r4, r4, #48	; 0x30
 80058de:	2c20      	cmp	r4, #32
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80058e0:	f8ad 0004 	strh.w	r0, [sp, #4]
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80058e4:	d011      	beq.n	800590a <LSM303DLHC_AccReadXYZ+0xbc>
 80058e6:	2c30      	cmp	r4, #48	; 0x30
 80058e8:	d011      	beq.n	800590e <LSM303DLHC_AccReadXYZ+0xc0>
 80058ea:	2c10      	cmp	r4, #16
{
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80058ec:	bf0c      	ite	eq
 80058ee:	2302      	moveq	r3, #2
 80058f0:	2301      	movne	r3, #1
 80058f2:	e00d      	b.n	8005910 <LSM303DLHC_AccReadXYZ+0xc2>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80058f4:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 80058f8:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80058fc:	f8ad 6000 	strh.w	r6, [sp]
 8005900:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005904:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8005908:	e7e7      	b.n	80058da <LSM303DLHC_AccReadXYZ+0x8c>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800590a:	2304      	movs	r3, #4
    break;
 800590c:	e000      	b.n	8005910 <LSM303DLHC_AccReadXYZ+0xc2>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800590e:	230c      	movs	r3, #12
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8005910:	f8bd 2000 	ldrh.w	r2, [sp]
 8005914:	b29b      	uxth	r3, r3
 8005916:	fb12 f203 	smulbb	r2, r2, r3
 800591a:	802a      	strh	r2, [r5, #0]
 800591c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005920:	fb12 f203 	smulbb	r2, r2, r3
 8005924:	806a      	strh	r2, [r5, #2]
 8005926:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800592a:	fb12 f303 	smulbb	r3, r2, r3
 800592e:	80ab      	strh	r3, [r5, #4]
  }

}
 8005930:	b005      	add	sp, #20
 8005932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005934 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8005934:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005936:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8005938:	4604      	mov	r4, r0
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800593a:	2032      	movs	r0, #50	; 0x32
 800593c:	f7ff fed8 	bl	80056f0 <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8005940:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005944:	4322      	orrs	r2, r4
 8005946:	2032      	movs	r0, #50	; 0x32
 8005948:	2121      	movs	r1, #33	; 0x21
}
 800594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800594e:	f7ff beb1 	b.w	80056b4 <COMPASSACCELERO_IO_Write>

08005952 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8005952:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8005954:	2122      	movs	r1, #34	; 0x22
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8005956:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8005958:	2032      	movs	r0, #50	; 0x32
 800595a:	f7ff fec9 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800595e:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8005962:	2122      	movs	r1, #34	; 0x22
 8005964:	2032      	movs	r0, #50	; 0x32
 8005966:	b2d2      	uxtb	r2, r2
}
 8005968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800596c:	f7ff bea2 	b.w	80056b4 <COMPASSACCELERO_IO_Write>

08005970 <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8005970:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8005972:	2138      	movs	r1, #56	; 0x38
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8005974:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8005976:	2032      	movs	r0, #50	; 0x32
 8005978:	f7ff feba 	bl	80056f0 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800597c:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8005980:	2138      	movs	r1, #56	; 0x38
 8005982:	2032      	movs	r0, #50	; 0x32
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	f7ff fe95 	bl	80056b4 <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800598a:	2032      	movs	r0, #50	; 0x32
 800598c:	213a      	movs	r1, #58	; 0x3a
 800598e:	220a      	movs	r2, #10
 8005990:	f7ff fe90 	bl	80056b4 <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8005994:	2032      	movs	r0, #50	; 0x32
 8005996:	213b      	movs	r1, #59	; 0x3b
 8005998:	2205      	movs	r2, #5
 800599a:	f7ff fe8b 	bl	80056b4 <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800599e:	2032      	movs	r0, #50	; 0x32
 80059a0:	213c      	movs	r1, #60	; 0x3c
 80059a2:	2205      	movs	r2, #5
 80059a4:	f7ff fe86 	bl	80056b4 <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80059a8:	2032      	movs	r0, #50	; 0x32
 80059aa:	213d      	movs	r1, #61	; 0x3d
 80059ac:	4602      	mov	r2, r0

}
 80059ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80059b2:	f7ff be7f 	b.w	80056b4 <COMPASSACCELERO_IO_Write>

080059b6 <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80059b6:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80059b8:	f7ff fe58 	bl	800566c <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80059bc:	2080      	movs	r0, #128	; 0x80
 80059be:	f7ff ffc8 	bl	8005952 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80059c2:	2004      	movs	r0, #4
 80059c4:	f7ff ffb6 	bl	8005934 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80059c8:	2010      	movs	r0, #16
  
}
 80059ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80059ce:	f7ff bfcf 	b.w	8005970 <LSM303DLHC_AccClickITEnable>

080059d2 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80059d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 80059d4:	ac02      	add	r4, sp, #8
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
  uint8_t ctrl = 0x00;
 80059d6:	2300      	movs	r3, #0
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80059d8:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 80059da:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 80059de:	f7ff fd99 	bl	8005514 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 80059e2:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80059e6:	2120      	movs	r1, #32
 80059e8:	4620      	mov	r0, r4
 80059ea:	2201      	movs	r2, #1
 80059ec:	f7ff fdc6 	bl	800557c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80059f0:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80059f2:	4620      	mov	r0, r4
 80059f4:	2123      	movs	r1, #35	; 0x23
 80059f6:	2201      	movs	r2, #1
  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80059f8:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80059fc:	f7ff fdbe 	bl	800557c <GYRO_IO_Write>
}
 8005a00:	b003      	add	sp, #12
 8005a02:	bd30      	pop	{r4, r5, pc}

08005a04 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8005a04:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 8005a06:	f7ff fd85 	bl	8005514 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8005a0a:	f10d 0007 	add.w	r0, sp, #7
 8005a0e:	210f      	movs	r1, #15
 8005a10:	2201      	movs	r2, #1
 8005a12:	f7ff fdd5 	bl	80055c0 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 8005a16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005a1a:	b003      	add	sp, #12
 8005a1c:	f85d fb04 	ldr.w	pc, [sp], #4

08005a20 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8005a20:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005a22:	2124      	movs	r1, #36	; 0x24
 8005a24:	f10d 0007 	add.w	r0, sp, #7
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f7ff fdc9 	bl	80055c0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8005a2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005a32:	f10d 0007 	add.w	r0, sp, #7
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8005a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005a3a:	2124      	movs	r1, #36	; 0x24
 8005a3c:	2201      	movs	r2, #1
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8005a3e:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005a42:	f7ff fd9b 	bl	800557c <GYRO_IO_Write>
}
 8005a46:	b003      	add	sp, #12
 8005a48:	f85d fb04 	ldr.w	pc, [sp], #4

08005a4c <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8005a4c:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005a4e:	2300      	movs	r3, #0
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8005a50:	4604      	mov	r4, r0
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005a52:	2130      	movs	r1, #48	; 0x30
 8005a54:	f10d 0006 	add.w	r0, sp, #6
 8005a58:	2201      	movs	r2, #1
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005a5a:	f88d 3006 	strb.w	r3, [sp, #6]
 8005a5e:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005a62:	f7ff fdad 	bl	80055c0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8005a66:	f10d 0007 	add.w	r0, sp, #7
 8005a6a:	2122      	movs	r1, #34	; 0x22
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f7ff fda7 	bl	80055c0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8005a72:	f89d 0007 	ldrb.w	r0, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
 8005a76:	f89d 3006 	ldrb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8005a7a:	f020 0020 	bic.w	r0, r0, #32
  ctrl3 |= ((uint8_t) Int1Config);
 8005a7e:	4320      	orrs	r0, r4
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
 8005a80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);
 8005a84:	f88d 0007 	strb.w	r0, [sp, #7]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005a88:	2130      	movs	r1, #48	; 0x30
 8005a8a:	f10d 0006 	add.w	r0, sp, #6
 8005a8e:	2201      	movs	r2, #1
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8005a90:	f88d 3006 	strb.w	r3, [sp, #6]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005a94:	f7ff fd72 	bl	800557c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8005a98:	f10d 0007 	add.w	r0, sp, #7
 8005a9c:	2122      	movs	r1, #34	; 0x22
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f7ff fd6c 	bl	800557c <GYRO_IO_Write>
}
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd10      	pop	{r4, pc}

08005aa8 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8005aa8:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005aaa:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8005aac:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005aae:	2122      	movs	r1, #34	; 0x22
 8005ab0:	f10d 0007 	add.w	r0, sp, #7
 8005ab4:	f7ff fd84 	bl	80055c0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005ab8:	b924      	cbnz	r4, 8005ac4 <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 8005aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8005abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ac2:	e007      	b.n	8005ad4 <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 8005ac4:	2c01      	cmp	r4, #1
 8005ac6:	d107      	bne.n	8005ad8 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
 8005ac8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005acc:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8005ad0:	f043 0308 	orr.w	r3, r3, #8
 8005ad4:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005ad8:	f10d 0007 	add.w	r0, sp, #7
 8005adc:	2122      	movs	r1, #34	; 0x22
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f7ff fd4c 	bl	800557c <GYRO_IO_Write>
}
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd10      	pop	{r4, pc}

08005ae8 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8005ae8:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005aea:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8005aec:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005aee:	2122      	movs	r1, #34	; 0x22
 8005af0:	f10d 0007 	add.w	r0, sp, #7
 8005af4:	f7ff fd64 	bl	80055c0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005af8:	b924      	cbnz	r4, 8005b04 <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 8005afa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b02:	e005      	b.n	8005b10 <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 8005b04:	2c01      	cmp	r4, #1
 8005b06:	d105      	bne.n	8005b14 <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 8005b08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b0c:	f023 0308 	bic.w	r3, r3, #8
 8005b10:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005b14:	f10d 0007 	add.w	r0, sp, #7
 8005b18:	2122      	movs	r1, #34	; 0x22
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f7ff fd2e 	bl	800557c <GYRO_IO_Write>
}
 8005b20:	b002      	add	sp, #8
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005b24:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005b26:	2201      	movs	r2, #1
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005b28:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005b2a:	2121      	movs	r1, #33	; 0x21
 8005b2c:	f10d 0007 	add.w	r0, sp, #7
 8005b30:	f7ff fd46 	bl	80055c0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8005b34:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005b38:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 8005b3c:	4320      	orrs	r0, r4
 8005b3e:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005b42:	2121      	movs	r1, #33	; 0x21
 8005b44:	f10d 0007 	add.w	r0, sp, #7
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f7ff fd17 	bl	800557c <GYRO_IO_Write>
}
 8005b4e:	b002      	add	sp, #8
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8005b52:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005b54:	2201      	movs	r2, #1
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8005b56:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005b58:	2124      	movs	r1, #36	; 0x24
 8005b5a:	f10d 0007 	add.w	r0, sp, #7
 8005b5e:	f7ff fd2f 	bl	80055c0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8005b62:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005b66:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 8005b6a:	4320      	orrs	r0, r4
 8005b6c:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005b70:	2124      	movs	r1, #36	; 0x24
 8005b72:	f10d 0007 	add.w	r0, sp, #7
 8005b76:	2201      	movs	r2, #1
 8005b78:	f7ff fd00 	bl	800557c <GYRO_IO_Write>
}
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd10      	pop	{r4, pc}

08005b80 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 8005b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b82:	b087      	sub	sp, #28
 8005b84:	4604      	mov	r4, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8005b86:	a806      	add	r0, sp, #24
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8005b88:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8005b8a:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8005b8e:	2123      	movs	r1, #35	; 0x23
 8005b90:	2201      	movs	r2, #1
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8005b92:	9302      	str	r3, [sp, #8]
 8005b94:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 8005b98:	9304      	str	r3, [sp, #16]
 8005b9a:	f8ad 3014 	strh.w	r3, [sp, #20]
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8005b9e:	f7ff fd0f 	bl	80055c0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8005ba2:	a802      	add	r0, sp, #8
 8005ba4:	2128      	movs	r1, #40	; 0x28
 8005ba6:	2206      	movs	r2, #6
 8005ba8:	f7ff fd0a 	bl	80055c0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8005bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005bb0:	f89d 6009 	ldrb.w	r6, [sp, #9]
 8005bb4:	f89d 7008 	ldrb.w	r7, [sp, #8]
 8005bb8:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8005bbc:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8005bc0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8005bc4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005bc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bcc:	d11a      	bne.n	8005c04 <L3GD20_ReadXYZAngRate+0x84>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005bce:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8005bd2:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8005bd6:	f8ad 6010 	strh.w	r6, [sp, #16]
 8005bda:	f8ad 0012 	strh.w	r0, [sp, #18]
 8005bde:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8005be2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005be6:	2b10      	cmp	r3, #16
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005be8:	f8ad 2014 	strh.w	r2, [sp, #20]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8005bec:	d015      	beq.n	8005c1a <L3GD20_ReadXYZAngRate+0x9a>
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d016      	beq.n	8005c20 <L3GD20_ReadXYZAngRate+0xa0>
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
 8005bf2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005c48 <L3GD20_ReadXYZAngRate+0xc8>
 8005bf6:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005c4c <L3GD20_ReadXYZAngRate+0xcc>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bf08      	it	eq
 8005bfe:	eeb0 7a67 	vmoveq.f32	s14, s15
 8005c02:	e00f      	b.n	8005c24 <L3GD20_ReadXYZAngRate+0xa4>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8005c04:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8005c08:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8005c0c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8005c10:	f8ad 0012 	strh.w	r0, [sp, #18]
 8005c14:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8005c18:	e7e3      	b.n	8005be2 <L3GD20_ReadXYZAngRate+0x62>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8005c1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005c50 <L3GD20_ReadXYZAngRate+0xd0>
    break;
 8005c1e:	e001      	b.n	8005c24 <L3GD20_ReadXYZAngRate+0xa4>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8005c20:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005c54 <L3GD20_ReadXYZAngRate+0xd4>
 8005c24:	4620      	mov	r0, r4
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8005c26:	2300      	movs	r3, #0
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005c28:	aa04      	add	r2, sp, #16
 8005c2a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8005c2e:	ee07 2a90 	vmov	s15, r2
 8005c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8005c36:	3301      	adds	r3, #1
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005c38:	ee67 7a87 	vmul.f32	s15, s15, s14
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8005c3c:	2b03      	cmp	r3, #3
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005c3e:	ece0 7a01 	vstmia	r0!, {s15}
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8005c42:	d1f1      	bne.n	8005c28 <L3GD20_ReadXYZAngRate+0xa8>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
  }
}
 8005c44:	b007      	add	sp, #28
 8005c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c48:	00000000 	.word	0x00000000
 8005c4c:	410c0000 	.word	0x410c0000
 8005c50:	418c0000 	.word	0x418c0000
 8005c54:	428c0000 	.word	0x428c0000

08005c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005c5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005c5e:	e003      	b.n	8005c68 <LoopCopyDataInit>

08005c60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005c60:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005c62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005c64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005c66:	3104      	adds	r1, #4

08005c68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005c68:	480b      	ldr	r0, [pc, #44]	; (8005c98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005c6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005c6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005c70:	d3f6      	bcc.n	8005c60 <CopyDataInit>
	ldr	r2, =_sbss
 8005c72:	4a0b      	ldr	r2, [pc, #44]	; (8005ca0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005c74:	e002      	b.n	8005c7c <LoopFillZerobss>

08005c76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005c76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005c78:	f842 3b04 	str.w	r3, [r2], #4

08005c7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005c7c:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <LoopForever+0x16>)
	cmp	r2, r3
 8005c7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005c80:	d3f9      	bcc.n	8005c76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c82:	f7fc fa4b 	bl	800211c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c86:	f000 f833 	bl	8005cf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005c8a:	f7fb fb89 	bl	80013a0 <main>

08005c8e <LoopForever>:

LoopForever:
    b LoopForever
 8005c8e:	e7fe      	b.n	8005c8e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005c90:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8005c94:	08019fb4 	.word	0x08019fb4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005c98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005c9c:	20000aa4 	.word	0x20000aa4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8005ca0:	20000aa4 	.word	0x20000aa4
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8005ca4:	20001d00 	.word	0x20001d00

08005ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ca8:	e7fe      	b.n	8005ca8 <ADC1_2_IRQHandler>
	...

08005cac <atexit>:
 8005cac:	4601      	mov	r1, r0
 8005cae:	2000      	movs	r0, #0
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f001 bda2 	b.w	80077fc <__register_exitproc>

08005cb8 <__errno>:
 8005cb8:	4b01      	ldr	r3, [pc, #4]	; (8005cc0 <__errno+0x8>)
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000630 	.word	0x20000630

08005cc4 <__libc_fini_array>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <__libc_fini_array+0x24>)
 8005cc8:	4d08      	ldr	r5, [pc, #32]	; (8005cec <__libc_fini_array+0x28>)
 8005cca:	1aed      	subs	r5, r5, r3
 8005ccc:	10ac      	asrs	r4, r5, #2
 8005cce:	bf18      	it	ne
 8005cd0:	18ed      	addne	r5, r5, r3
 8005cd2:	d005      	beq.n	8005ce0 <__libc_fini_array+0x1c>
 8005cd4:	3c01      	subs	r4, #1
 8005cd6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005cda:	4798      	blx	r3
 8005cdc:	2c00      	cmp	r4, #0
 8005cde:	d1f9      	bne.n	8005cd4 <__libc_fini_array+0x10>
 8005ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ce4:	f004 bcfc 	b.w	800a6e0 <_fini>
 8005ce8:	08019fb0 	.word	0x08019fb0
 8005cec:	08019fb4 	.word	0x08019fb4

08005cf0 <__libc_init_array>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	4e0f      	ldr	r6, [pc, #60]	; (8005d30 <__libc_init_array+0x40>)
 8005cf4:	4d0f      	ldr	r5, [pc, #60]	; (8005d34 <__libc_init_array+0x44>)
 8005cf6:	1b76      	subs	r6, r6, r5
 8005cf8:	10b6      	asrs	r6, r6, #2
 8005cfa:	bf18      	it	ne
 8005cfc:	2400      	movne	r4, #0
 8005cfe:	d005      	beq.n	8005d0c <__libc_init_array+0x1c>
 8005d00:	3401      	adds	r4, #1
 8005d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d06:	4798      	blx	r3
 8005d08:	42a6      	cmp	r6, r4
 8005d0a:	d1f9      	bne.n	8005d00 <__libc_init_array+0x10>
 8005d0c:	4e0a      	ldr	r6, [pc, #40]	; (8005d38 <__libc_init_array+0x48>)
 8005d0e:	4d0b      	ldr	r5, [pc, #44]	; (8005d3c <__libc_init_array+0x4c>)
 8005d10:	1b76      	subs	r6, r6, r5
 8005d12:	f004 fcdf 	bl	800a6d4 <_init>
 8005d16:	10b6      	asrs	r6, r6, #2
 8005d18:	bf18      	it	ne
 8005d1a:	2400      	movne	r4, #0
 8005d1c:	d006      	beq.n	8005d2c <__libc_init_array+0x3c>
 8005d1e:	3401      	adds	r4, #1
 8005d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d24:	4798      	blx	r3
 8005d26:	42a6      	cmp	r6, r4
 8005d28:	d1f9      	bne.n	8005d1e <__libc_init_array+0x2e>
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	bd70      	pop	{r4, r5, r6, pc}
 8005d2e:	bf00      	nop
 8005d30:	08019fa8 	.word	0x08019fa8
 8005d34:	08019fa8 	.word	0x08019fa8
 8005d38:	08019fb0 	.word	0x08019fb0
 8005d3c:	08019fa8 	.word	0x08019fa8

08005d40 <memset>:
 8005d40:	b470      	push	{r4, r5, r6}
 8005d42:	0784      	lsls	r4, r0, #30
 8005d44:	d046      	beq.n	8005dd4 <memset+0x94>
 8005d46:	1e54      	subs	r4, r2, #1
 8005d48:	2a00      	cmp	r2, #0
 8005d4a:	d041      	beq.n	8005dd0 <memset+0x90>
 8005d4c:	b2cd      	uxtb	r5, r1
 8005d4e:	4603      	mov	r3, r0
 8005d50:	e002      	b.n	8005d58 <memset+0x18>
 8005d52:	1e62      	subs	r2, r4, #1
 8005d54:	b3e4      	cbz	r4, 8005dd0 <memset+0x90>
 8005d56:	4614      	mov	r4, r2
 8005d58:	f803 5b01 	strb.w	r5, [r3], #1
 8005d5c:	079a      	lsls	r2, r3, #30
 8005d5e:	d1f8      	bne.n	8005d52 <memset+0x12>
 8005d60:	2c03      	cmp	r4, #3
 8005d62:	d92e      	bls.n	8005dc2 <memset+0x82>
 8005d64:	b2cd      	uxtb	r5, r1
 8005d66:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005d6a:	2c0f      	cmp	r4, #15
 8005d6c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005d70:	d919      	bls.n	8005da6 <memset+0x66>
 8005d72:	f103 0210 	add.w	r2, r3, #16
 8005d76:	4626      	mov	r6, r4
 8005d78:	3e10      	subs	r6, #16
 8005d7a:	2e0f      	cmp	r6, #15
 8005d7c:	f842 5c10 	str.w	r5, [r2, #-16]
 8005d80:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005d84:	f842 5c08 	str.w	r5, [r2, #-8]
 8005d88:	f842 5c04 	str.w	r5, [r2, #-4]
 8005d8c:	f102 0210 	add.w	r2, r2, #16
 8005d90:	d8f2      	bhi.n	8005d78 <memset+0x38>
 8005d92:	f1a4 0210 	sub.w	r2, r4, #16
 8005d96:	f022 020f 	bic.w	r2, r2, #15
 8005d9a:	f004 040f 	and.w	r4, r4, #15
 8005d9e:	3210      	adds	r2, #16
 8005da0:	2c03      	cmp	r4, #3
 8005da2:	4413      	add	r3, r2
 8005da4:	d90d      	bls.n	8005dc2 <memset+0x82>
 8005da6:	461e      	mov	r6, r3
 8005da8:	4622      	mov	r2, r4
 8005daa:	3a04      	subs	r2, #4
 8005dac:	2a03      	cmp	r2, #3
 8005dae:	f846 5b04 	str.w	r5, [r6], #4
 8005db2:	d8fa      	bhi.n	8005daa <memset+0x6a>
 8005db4:	1f22      	subs	r2, r4, #4
 8005db6:	f022 0203 	bic.w	r2, r2, #3
 8005dba:	3204      	adds	r2, #4
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f004 0403 	and.w	r4, r4, #3
 8005dc2:	b12c      	cbz	r4, 8005dd0 <memset+0x90>
 8005dc4:	b2c9      	uxtb	r1, r1
 8005dc6:	441c      	add	r4, r3
 8005dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	d1fb      	bne.n	8005dc8 <memset+0x88>
 8005dd0:	bc70      	pop	{r4, r5, r6}
 8005dd2:	4770      	bx	lr
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	e7c2      	b.n	8005d60 <memset+0x20>
 8005dda:	bf00      	nop

08005ddc <printf>:
 8005ddc:	b40f      	push	{r0, r1, r2, r3}
 8005dde:	b500      	push	{lr}
 8005de0:	4907      	ldr	r1, [pc, #28]	; (8005e00 <printf+0x24>)
 8005de2:	b083      	sub	sp, #12
 8005de4:	ab04      	add	r3, sp, #16
 8005de6:	6808      	ldr	r0, [r1, #0]
 8005de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dec:	6881      	ldr	r1, [r0, #8]
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	f000 fa52 	bl	8006298 <_vfprintf_r>
 8005df4:	b003      	add	sp, #12
 8005df6:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dfa:	b004      	add	sp, #16
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20000630 	.word	0x20000630

08005e04 <putchar>:
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <putchar+0x10>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4601      	mov	r1, r0
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f004 b81f 	b.w	8009e50 <_putc_r>
 8005e12:	bf00      	nop
 8005e14:	20000630 	.word	0x20000630

08005e18 <_puts_r>:
 8005e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	b089      	sub	sp, #36	; 0x24
 8005e1e:	4608      	mov	r0, r1
 8005e20:	460c      	mov	r4, r1
 8005e22:	f000 f92f 	bl	8006084 <strlen>
 8005e26:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005e28:	4f13      	ldr	r7, [pc, #76]	; (8005e78 <_puts_r+0x60>)
 8005e2a:	9404      	str	r4, [sp, #16]
 8005e2c:	2601      	movs	r6, #1
 8005e2e:	1c44      	adds	r4, r0, #1
 8005e30:	a904      	add	r1, sp, #16
 8005e32:	2202      	movs	r2, #2
 8005e34:	9403      	str	r4, [sp, #12]
 8005e36:	9005      	str	r0, [sp, #20]
 8005e38:	68ac      	ldr	r4, [r5, #8]
 8005e3a:	9706      	str	r7, [sp, #24]
 8005e3c:	9607      	str	r6, [sp, #28]
 8005e3e:	9101      	str	r1, [sp, #4]
 8005e40:	9202      	str	r2, [sp, #8]
 8005e42:	b1ab      	cbz	r3, 8005e70 <_puts_r+0x58>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	049a      	lsls	r2, r3, #18
 8005e48:	d406      	bmi.n	8005e58 <_puts_r+0x40>
 8005e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	6662      	str	r2, [r4, #100]	; 0x64
 8005e58:	4628      	mov	r0, r5
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	aa01      	add	r2, sp, #4
 8005e5e:	f002 ff81 	bl	8008d64 <__sfvwrite_r>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	bf14      	ite	ne
 8005e66:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005e6a:	200a      	moveq	r0, #10
 8005e6c:	b009      	add	sp, #36	; 0x24
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e70:	4628      	mov	r0, r5
 8005e72:	f002 fe47 	bl	8008b04 <__sinit>
 8005e76:	e7e5      	b.n	8005e44 <_puts_r+0x2c>
 8005e78:	08019e1c 	.word	0x08019e1c

08005e7c <puts>:
 8005e7c:	4b02      	ldr	r3, [pc, #8]	; (8005e88 <puts+0xc>)
 8005e7e:	4601      	mov	r1, r0
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	f7ff bfc9 	b.w	8005e18 <_puts_r>
 8005e86:	bf00      	nop
 8005e88:	20000630 	.word	0x20000630

08005e8c <setvbuf>:
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	4c3a      	ldr	r4, [pc, #232]	; (8005f7c <setvbuf+0xf0>)
 8005e92:	6826      	ldr	r6, [r4, #0]
 8005e94:	460d      	mov	r5, r1
 8005e96:	4604      	mov	r4, r0
 8005e98:	4690      	mov	r8, r2
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	b116      	cbz	r6, 8005ea4 <setvbuf+0x18>
 8005e9e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d03c      	beq.n	8005f1e <setvbuf+0x92>
 8005ea4:	f1b8 0f02 	cmp.w	r8, #2
 8005ea8:	d82f      	bhi.n	8005f0a <setvbuf+0x7e>
 8005eaa:	2f00      	cmp	r7, #0
 8005eac:	db2d      	blt.n	8005f0a <setvbuf+0x7e>
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f002 fd93 	bl	80089dc <_fflush_r>
 8005eb6:	89a1      	ldrh	r1, [r4, #12]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6063      	str	r3, [r4, #4]
 8005ebc:	61a3      	str	r3, [r4, #24]
 8005ebe:	060b      	lsls	r3, r1, #24
 8005ec0:	d427      	bmi.n	8005f12 <setvbuf+0x86>
 8005ec2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
 8005ec6:	b289      	uxth	r1, r1
 8005ec8:	f1b8 0f02 	cmp.w	r8, #2
 8005ecc:	81a1      	strh	r1, [r4, #12]
 8005ece:	d02a      	beq.n	8005f26 <setvbuf+0x9a>
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	d036      	beq.n	8005f42 <setvbuf+0xb6>
 8005ed4:	f1b8 0f01 	cmp.w	r8, #1
 8005ed8:	d011      	beq.n	8005efe <setvbuf+0x72>
 8005eda:	b289      	uxth	r1, r1
 8005edc:	f001 0008 	and.w	r0, r1, #8
 8005ee0:	4b27      	ldr	r3, [pc, #156]	; (8005f80 <setvbuf+0xf4>)
 8005ee2:	63f3      	str	r3, [r6, #60]	; 0x3c
 8005ee4:	b280      	uxth	r0, r0
 8005ee6:	6025      	str	r5, [r4, #0]
 8005ee8:	6125      	str	r5, [r4, #16]
 8005eea:	6167      	str	r7, [r4, #20]
 8005eec:	b178      	cbz	r0, 8005f0e <setvbuf+0x82>
 8005eee:	f011 0f03 	tst.w	r1, #3
 8005ef2:	bf18      	it	ne
 8005ef4:	2700      	movne	r7, #0
 8005ef6:	60a7      	str	r7, [r4, #8]
 8005ef8:	2000      	movs	r0, #0
 8005efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005efe:	f041 0101 	orr.w	r1, r1, #1
 8005f02:	427b      	negs	r3, r7
 8005f04:	81a1      	strh	r1, [r4, #12]
 8005f06:	61a3      	str	r3, [r4, #24]
 8005f08:	e7e7      	b.n	8005eda <setvbuf+0x4e>
 8005f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f12:	6921      	ldr	r1, [r4, #16]
 8005f14:	4630      	mov	r0, r6
 8005f16:	f002 fe4d 	bl	8008bb4 <_free_r>
 8005f1a:	89a1      	ldrh	r1, [r4, #12]
 8005f1c:	e7d1      	b.n	8005ec2 <setvbuf+0x36>
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f002 fdf0 	bl	8008b04 <__sinit>
 8005f24:	e7be      	b.n	8005ea4 <setvbuf+0x18>
 8005f26:	2000      	movs	r0, #0
 8005f28:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8005f2c:	f041 0102 	orr.w	r1, r1, #2
 8005f30:	2500      	movs	r5, #0
 8005f32:	2201      	movs	r2, #1
 8005f34:	81a1      	strh	r1, [r4, #12]
 8005f36:	60a5      	str	r5, [r4, #8]
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	6162      	str	r2, [r4, #20]
 8005f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f42:	2f00      	cmp	r7, #0
 8005f44:	bf08      	it	eq
 8005f46:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	f003 f93e 	bl	80091cc <malloc>
 8005f50:	4605      	mov	r5, r0
 8005f52:	b128      	cbz	r0, 8005f60 <setvbuf+0xd4>
 8005f54:	89a1      	ldrh	r1, [r4, #12]
 8005f56:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005f5a:	b289      	uxth	r1, r1
 8005f5c:	81a1      	strh	r1, [r4, #12]
 8005f5e:	e7b9      	b.n	8005ed4 <setvbuf+0x48>
 8005f60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005f64:	f003 f932 	bl	80091cc <malloc>
 8005f68:	4605      	mov	r5, r0
 8005f6a:	b918      	cbnz	r0, 8005f74 <setvbuf+0xe8>
 8005f6c:	89a1      	ldrh	r1, [r4, #12]
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f72:	e7d9      	b.n	8005f28 <setvbuf+0x9c>
 8005f74:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005f78:	e7ec      	b.n	8005f54 <setvbuf+0xc8>
 8005f7a:	bf00      	nop
 8005f7c:	20000630 	.word	0x20000630
 8005f80:	08008a09 	.word	0x08008a09

08005f84 <strcasecmp>:
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <strcasecmp+0x40>)
 8005f86:	b430      	push	{r4, r5}
 8005f88:	681d      	ldr	r5, [r3, #0]
 8005f8a:	e002      	b.n	8005f92 <strcasecmp+0xe>
 8005f8c:	1ad2      	subs	r2, r2, r3
 8005f8e:	d116      	bne.n	8005fbe <strcasecmp+0x3a>
 8005f90:	b1ab      	cbz	r3, 8005fbe <strcasecmp+0x3a>
 8005f92:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005f96:	192b      	adds	r3, r5, r4
 8005f98:	4622      	mov	r2, r4
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fa6:	bf08      	it	eq
 8005fa8:	f104 0220 	addeq.w	r2, r4, #32
 8005fac:	18ec      	adds	r4, r5, r3
 8005fae:	7864      	ldrb	r4, [r4, #1]
 8005fb0:	f004 0403 	and.w	r4, r4, #3
 8005fb4:	2c01      	cmp	r4, #1
 8005fb6:	d1e9      	bne.n	8005f8c <strcasecmp+0x8>
 8005fb8:	3320      	adds	r3, #32
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	d0e9      	beq.n	8005f92 <strcasecmp+0xe>
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	bc30      	pop	{r4, r5}
 8005fc2:	4770      	bx	lr
 8005fc4:	20000204 	.word	0x20000204

08005fc8 <strcpy>:
 8005fc8:	ea80 0201 	eor.w	r2, r0, r1
 8005fcc:	4684      	mov	ip, r0
 8005fce:	f012 0f03 	tst.w	r2, #3
 8005fd2:	d14f      	bne.n	8006074 <strcpy+0xac>
 8005fd4:	f011 0f03 	tst.w	r1, #3
 8005fd8:	d132      	bne.n	8006040 <strcpy+0x78>
 8005fda:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8005fde:	f011 0f04 	tst.w	r1, #4
 8005fe2:	f851 3b04 	ldr.w	r3, [r1], #4
 8005fe6:	d00b      	beq.n	8006000 <strcpy+0x38>
 8005fe8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005fec:	439a      	bics	r2, r3
 8005fee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005ff2:	bf04      	itt	eq
 8005ff4:	f84c 3b04 	streq.w	r3, [ip], #4
 8005ff8:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005ffc:	d116      	bne.n	800602c <strcpy+0x64>
 8005ffe:	bf00      	nop
 8006000:	f851 4b04 	ldr.w	r4, [r1], #4
 8006004:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8006008:	439a      	bics	r2, r3
 800600a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800600e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8006012:	d10b      	bne.n	800602c <strcpy+0x64>
 8006014:	f84c 3b04 	str.w	r3, [ip], #4
 8006018:	43a2      	bics	r2, r4
 800601a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800601e:	bf04      	itt	eq
 8006020:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006024:	f84c 4b04 	streq.w	r4, [ip], #4
 8006028:	d0ea      	beq.n	8006000 <strcpy+0x38>
 800602a:	4623      	mov	r3, r4
 800602c:	f80c 3b01 	strb.w	r3, [ip], #1
 8006030:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006034:	ea4f 2333 	mov.w	r3, r3, ror #8
 8006038:	d1f8      	bne.n	800602c <strcpy+0x64>
 800603a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	f011 0f01 	tst.w	r1, #1
 8006044:	d006      	beq.n	8006054 <strcpy+0x8c>
 8006046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800604a:	f80c 2b01 	strb.w	r2, [ip], #1
 800604e:	2a00      	cmp	r2, #0
 8006050:	bf08      	it	eq
 8006052:	4770      	bxeq	lr
 8006054:	f011 0f02 	tst.w	r1, #2
 8006058:	d0bf      	beq.n	8005fda <strcpy+0x12>
 800605a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800605e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8006062:	bf16      	itet	ne
 8006064:	f82c 2b02 	strhne.w	r2, [ip], #2
 8006068:	f88c 2000 	strbeq.w	r2, [ip]
 800606c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8006070:	d1b3      	bne.n	8005fda <strcpy+0x12>
 8006072:	4770      	bx	lr
 8006074:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006078:	f80c 2b01 	strb.w	r2, [ip], #1
 800607c:	2a00      	cmp	r2, #0
 800607e:	d1f9      	bne.n	8006074 <strcpy+0xac>
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <strlen>:
 8006084:	f020 0103 	bic.w	r1, r0, #3
 8006088:	f010 0003 	ands.w	r0, r0, #3
 800608c:	f1c0 0000 	rsb	r0, r0, #0
 8006090:	f851 3b04 	ldr.w	r3, [r1], #4
 8006094:	f100 0c04 	add.w	ip, r0, #4
 8006098:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800609c:	f06f 0200 	mvn.w	r2, #0
 80060a0:	bf1c      	itt	ne
 80060a2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80060a6:	4313      	orrne	r3, r2
 80060a8:	f04f 0c01 	mov.w	ip, #1
 80060ac:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80060b0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80060b4:	eba3 020c 	sub.w	r2, r3, ip
 80060b8:	ea22 0203 	bic.w	r2, r2, r3
 80060bc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80060c0:	bf04      	itt	eq
 80060c2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80060c6:	3004      	addeq	r0, #4
 80060c8:	d0f4      	beq.n	80060b4 <strlen+0x30>
 80060ca:	f1c2 0100 	rsb	r1, r2, #0
 80060ce:	ea02 0201 	and.w	r2, r2, r1
 80060d2:	fab2 f282 	clz	r2, r2
 80060d6:	f1c2 021f 	rsb	r2, r2, #31
 80060da:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80060de:	4770      	bx	lr

080060e0 <strtok>:
 80060e0:	4b02      	ldr	r3, [pc, #8]	; (80060ec <strtok+0xc>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	2301      	movs	r3, #1
 80060e6:	325c      	adds	r2, #92	; 0x5c
 80060e8:	f000 b802 	b.w	80060f0 <__strtok_r>
 80060ec:	20000630 	.word	0x20000630

080060f0 <__strtok_r>:
 80060f0:	b4f0      	push	{r4, r5, r6, r7}
 80060f2:	b320      	cbz	r0, 800613e <__strtok_r+0x4e>
 80060f4:	4607      	mov	r7, r0
 80060f6:	460d      	mov	r5, r1
 80060f8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80060fc:	e001      	b.n	8006102 <__strtok_r+0x12>
 80060fe:	42a6      	cmp	r6, r4
 8006100:	d016      	beq.n	8006130 <__strtok_r+0x40>
 8006102:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006106:	2c00      	cmp	r4, #0
 8006108:	d1f9      	bne.n	80060fe <__strtok_r+0xe>
 800610a:	b1ee      	cbz	r6, 8006148 <__strtok_r+0x58>
 800610c:	463e      	mov	r6, r7
 800610e:	460c      	mov	r4, r1
 8006110:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006114:	e000      	b.n	8006118 <__strtok_r+0x28>
 8006116:	b173      	cbz	r3, 8006136 <__strtok_r+0x46>
 8006118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800611c:	42ab      	cmp	r3, r5
 800611e:	d1fa      	bne.n	8006116 <__strtok_r+0x26>
 8006120:	b15d      	cbz	r5, 800613a <__strtok_r+0x4a>
 8006122:	2300      	movs	r3, #0
 8006124:	703b      	strb	r3, [r7, #0]
 8006126:	6016      	str	r6, [r2, #0]
 8006128:	4606      	mov	r6, r0
 800612a:	4630      	mov	r0, r6
 800612c:	bcf0      	pop	{r4, r5, r6, r7}
 800612e:	4770      	bx	lr
 8006130:	b163      	cbz	r3, 800614c <__strtok_r+0x5c>
 8006132:	4638      	mov	r0, r7
 8006134:	e7de      	b.n	80060f4 <__strtok_r+0x4>
 8006136:	4637      	mov	r7, r6
 8006138:	e7e8      	b.n	800610c <__strtok_r+0x1c>
 800613a:	462e      	mov	r6, r5
 800613c:	e7f3      	b.n	8006126 <__strtok_r+0x36>
 800613e:	6810      	ldr	r0, [r2, #0]
 8006140:	2800      	cmp	r0, #0
 8006142:	d1d7      	bne.n	80060f4 <__strtok_r+0x4>
 8006144:	4606      	mov	r6, r0
 8006146:	e7f0      	b.n	800612a <__strtok_r+0x3a>
 8006148:	6016      	str	r6, [r2, #0]
 800614a:	e7ee      	b.n	800612a <__strtok_r+0x3a>
 800614c:	6017      	str	r7, [r2, #0]
 800614e:	4606      	mov	r6, r0
 8006150:	7003      	strb	r3, [r0, #0]
 8006152:	e7ea      	b.n	800612a <__strtok_r+0x3a>

08006154 <_strtoul_r>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	4c46      	ldr	r4, [pc, #280]	; (8006274 <_strtoul_r+0x120>)
 800615a:	460f      	mov	r7, r1
 800615c:	f8d4 e000 	ldr.w	lr, [r4]
 8006160:	e000      	b.n	8006164 <_strtoul_r+0x10>
 8006162:	4627      	mov	r7, r4
 8006164:	463c      	mov	r4, r7
 8006166:	f814 5b01 	ldrb.w	r5, [r4], #1
 800616a:	eb0e 0605 	add.w	r6, lr, r5
 800616e:	7876      	ldrb	r6, [r6, #1]
 8006170:	f006 0608 	and.w	r6, r6, #8
 8006174:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 8006178:	2e00      	cmp	r6, #0
 800617a:	d1f2      	bne.n	8006162 <_strtoul_r+0xe>
 800617c:	2d2d      	cmp	r5, #45	; 0x2d
 800617e:	d051      	beq.n	8006224 <_strtoul_r+0xd0>
 8006180:	2d2b      	cmp	r5, #43	; 0x2b
 8006182:	bf04      	itt	eq
 8006184:	787d      	ldrbeq	r5, [r7, #1]
 8006186:	1cbc      	addeq	r4, r7, #2
 8006188:	b15b      	cbz	r3, 80061a2 <_strtoul_r+0x4e>
 800618a:	2b10      	cmp	r3, #16
 800618c:	d05b      	beq.n	8006246 <_strtoul_r+0xf2>
 800618e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006192:	fbb9 f9f3 	udiv	r9, r9, r3
 8006196:	fb03 fb09 	mul.w	fp, r3, r9
 800619a:	ea6f 0b0b 	mvn.w	fp, fp
 800619e:	469a      	mov	sl, r3
 80061a0:	e007      	b.n	80061b2 <_strtoul_r+0x5e>
 80061a2:	2d30      	cmp	r5, #48	; 0x30
 80061a4:	d043      	beq.n	800622e <_strtoul_r+0xda>
 80061a6:	230a      	movs	r3, #10
 80061a8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8006278 <_strtoul_r+0x124>
 80061ac:	469a      	mov	sl, r3
 80061ae:	f04f 0b05 	mov.w	fp, #5
 80061b2:	2700      	movs	r7, #0
 80061b4:	46bc      	mov	ip, r7
 80061b6:	e00c      	b.n	80061d2 <_strtoul_r+0x7e>
 80061b8:	3d30      	subs	r5, #48	; 0x30
 80061ba:	42ab      	cmp	r3, r5
 80061bc:	dd19      	ble.n	80061f2 <_strtoul_r+0x9e>
 80061be:	1c7e      	adds	r6, r7, #1
 80061c0:	d005      	beq.n	80061ce <_strtoul_r+0x7a>
 80061c2:	45cc      	cmp	ip, r9
 80061c4:	d824      	bhi.n	8006210 <_strtoul_r+0xbc>
 80061c6:	d021      	beq.n	800620c <_strtoul_r+0xb8>
 80061c8:	fb0a 5c0c 	mla	ip, sl, ip, r5
 80061cc:	2701      	movs	r7, #1
 80061ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 80061d2:	eb0e 0605 	add.w	r6, lr, r5
 80061d6:	7876      	ldrb	r6, [r6, #1]
 80061d8:	f016 0f04 	tst.w	r6, #4
 80061dc:	d1ec      	bne.n	80061b8 <_strtoul_r+0x64>
 80061de:	f016 0603 	ands.w	r6, r6, #3
 80061e2:	d006      	beq.n	80061f2 <_strtoul_r+0x9e>
 80061e4:	2e01      	cmp	r6, #1
 80061e6:	bf0c      	ite	eq
 80061e8:	2637      	moveq	r6, #55	; 0x37
 80061ea:	2657      	movne	r6, #87	; 0x57
 80061ec:	1bad      	subs	r5, r5, r6
 80061ee:	42ab      	cmp	r3, r5
 80061f0:	dce5      	bgt.n	80061be <_strtoul_r+0x6a>
 80061f2:	2f00      	cmp	r7, #0
 80061f4:	db11      	blt.n	800621a <_strtoul_r+0xc6>
 80061f6:	f1c8 0000 	rsb	r0, r8, #0
 80061fa:	ea8c 0000 	eor.w	r0, ip, r0
 80061fe:	4440      	add	r0, r8
 8006200:	b14a      	cbz	r2, 8006216 <_strtoul_r+0xc2>
 8006202:	b107      	cbz	r7, 8006206 <_strtoul_r+0xb2>
 8006204:	1e61      	subs	r1, r4, #1
 8006206:	6011      	str	r1, [r2, #0]
 8006208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620c:	455d      	cmp	r5, fp
 800620e:	dddb      	ble.n	80061c8 <_strtoul_r+0x74>
 8006210:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006214:	e7db      	b.n	80061ce <_strtoul_r+0x7a>
 8006216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621a:	2322      	movs	r3, #34	; 0x22
 800621c:	6003      	str	r3, [r0, #0]
 800621e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006222:	e7ed      	b.n	8006200 <_strtoul_r+0xac>
 8006224:	1cbc      	adds	r4, r7, #2
 8006226:	787d      	ldrb	r5, [r7, #1]
 8006228:	f04f 0801 	mov.w	r8, #1
 800622c:	e7ac      	b.n	8006188 <_strtoul_r+0x34>
 800622e:	7823      	ldrb	r3, [r4, #0]
 8006230:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006234:	2b58      	cmp	r3, #88	; 0x58
 8006236:	d013      	beq.n	8006260 <_strtoul_r+0x10c>
 8006238:	2308      	movs	r3, #8
 800623a:	469a      	mov	sl, r3
 800623c:	f04f 0b07 	mov.w	fp, #7
 8006240:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8006244:	e7b5      	b.n	80061b2 <_strtoul_r+0x5e>
 8006246:	2d30      	cmp	r5, #48	; 0x30
 8006248:	d005      	beq.n	8006256 <_strtoul_r+0x102>
 800624a:	f04f 0b0f 	mov.w	fp, #15
 800624e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8006252:	469a      	mov	sl, r3
 8006254:	e7ad      	b.n	80061b2 <_strtoul_r+0x5e>
 8006256:	7826      	ldrb	r6, [r4, #0]
 8006258:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800625c:	2e58      	cmp	r6, #88	; 0x58
 800625e:	d1f4      	bne.n	800624a <_strtoul_r+0xf6>
 8006260:	f04f 0a10 	mov.w	sl, #16
 8006264:	7865      	ldrb	r5, [r4, #1]
 8006266:	4653      	mov	r3, sl
 8006268:	f04f 0b0f 	mov.w	fp, #15
 800626c:	3402      	adds	r4, #2
 800626e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8006272:	e79e      	b.n	80061b2 <_strtoul_r+0x5e>
 8006274:	20000204 	.word	0x20000204
 8006278:	19999999 	.word	0x19999999

0800627c <strtoul>:
 800627c:	b430      	push	{r4, r5}
 800627e:	4c04      	ldr	r4, [pc, #16]	; (8006290 <strtoul+0x14>)
 8006280:	460d      	mov	r5, r1
 8006282:	4613      	mov	r3, r2
 8006284:	4601      	mov	r1, r0
 8006286:	462a      	mov	r2, r5
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	bc30      	pop	{r4, r5}
 800628c:	f7ff bf62 	b.w	8006154 <_strtoul_r>
 8006290:	20000630 	.word	0x20000630
 8006294:	00000000 	.word	0x00000000

08006298 <_vfprintf_r>:
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	b0bd      	sub	sp, #244	; 0xf4
 800629e:	461c      	mov	r4, r3
 80062a0:	4689      	mov	r9, r1
 80062a2:	9204      	str	r2, [sp, #16]
 80062a4:	4607      	mov	r7, r0
 80062a6:	f002 ff1d 	bl	80090e4 <_localeconv_r>
 80062aa:	6803      	ldr	r3, [r0, #0]
 80062ac:	9311      	str	r3, [sp, #68]	; 0x44
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fee8 	bl	8006084 <strlen>
 80062b4:	9408      	str	r4, [sp, #32]
 80062b6:	9012      	str	r0, [sp, #72]	; 0x48
 80062b8:	b11f      	cbz	r7, 80062c2 <_vfprintf_r+0x2a>
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80f3 	beq.w	80064a8 <_vfprintf_r+0x210>
 80062c2:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80062c6:	b293      	uxth	r3, r2
 80062c8:	049e      	lsls	r6, r3, #18
 80062ca:	d40a      	bmi.n	80062e2 <_vfprintf_r+0x4a>
 80062cc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 80062d0:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 80062d4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80062d8:	f8a9 300c 	strh.w	r3, [r9, #12]
 80062dc:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	071d      	lsls	r5, r3, #28
 80062e4:	f140 80aa 	bpl.w	800643c <_vfprintf_r+0x1a4>
 80062e8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80062ec:	2a00      	cmp	r2, #0
 80062ee:	f000 80a5 	beq.w	800643c <_vfprintf_r+0x1a4>
 80062f2:	f003 031a 	and.w	r3, r3, #26
 80062f6:	2b0a      	cmp	r3, #10
 80062f8:	f000 80ac 	beq.w	8006454 <_vfprintf_r+0x1bc>
 80062fc:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 80064b8 <_vfprintf_r+0x220>
 8006300:	2300      	movs	r3, #0
 8006302:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006306:	930d      	str	r3, [sp, #52]	; 0x34
 8006308:	9321      	str	r3, [sp, #132]	; 0x84
 800630a:	9320      	str	r3, [sp, #128]	; 0x80
 800630c:	9310      	str	r3, [sp, #64]	; 0x40
 800630e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006310:	9305      	str	r3, [sp, #20]
 8006312:	ab2c      	add	r3, sp, #176	; 0xb0
 8006314:	931f      	str	r3, [sp, #124]	; 0x7c
 8006316:	461c      	mov	r4, r3
 8006318:	46b8      	mov	r8, r7
 800631a:	9d04      	ldr	r5, [sp, #16]
 800631c:	782b      	ldrb	r3, [r5, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80c6 	beq.w	80064b0 <_vfprintf_r+0x218>
 8006324:	2b25      	cmp	r3, #37	; 0x25
 8006326:	d102      	bne.n	800632e <_vfprintf_r+0x96>
 8006328:	e0c2      	b.n	80064b0 <_vfprintf_r+0x218>
 800632a:	2b25      	cmp	r3, #37	; 0x25
 800632c:	d003      	beq.n	8006336 <_vfprintf_r+0x9e>
 800632e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f9      	bne.n	800632a <_vfprintf_r+0x92>
 8006336:	9b04      	ldr	r3, [sp, #16]
 8006338:	1aee      	subs	r6, r5, r3
 800633a:	b17e      	cbz	r6, 800635c <_vfprintf_r+0xc4>
 800633c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800633e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006340:	9904      	ldr	r1, [sp, #16]
 8006342:	6021      	str	r1, [r4, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	4432      	add	r2, r6
 8006348:	2b07      	cmp	r3, #7
 800634a:	6066      	str	r6, [r4, #4]
 800634c:	9221      	str	r2, [sp, #132]	; 0x84
 800634e:	9320      	str	r3, [sp, #128]	; 0x80
 8006350:	f300 8093 	bgt.w	800647a <_vfprintf_r+0x1e2>
 8006354:	3408      	adds	r4, #8
 8006356:	9b05      	ldr	r3, [sp, #20]
 8006358:	4433      	add	r3, r6
 800635a:	9305      	str	r3, [sp, #20]
 800635c:	782b      	ldrb	r3, [r5, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8093 	beq.w	800648a <_vfprintf_r+0x1f2>
 8006364:	2300      	movs	r3, #0
 8006366:	1c69      	adds	r1, r5, #1
 8006368:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800636c:	786d      	ldrb	r5, [r5, #1]
 800636e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006372:	461a      	mov	r2, r3
 8006374:	9306      	str	r3, [sp, #24]
 8006376:	9302      	str	r3, [sp, #8]
 8006378:	4656      	mov	r6, sl
 800637a:	1c4b      	adds	r3, r1, #1
 800637c:	f1a5 0120 	sub.w	r1, r5, #32
 8006380:	2958      	cmp	r1, #88	; 0x58
 8006382:	f200 83cd 	bhi.w	8006b20 <_vfprintf_r+0x888>
 8006386:	e8df f011 	tbh	[pc, r1, lsl #1]
 800638a:	025c      	.short	0x025c
 800638c:	03cb03cb 	.word	0x03cb03cb
 8006390:	03cb0302 	.word	0x03cb0302
 8006394:	03cb03cb 	.word	0x03cb03cb
 8006398:	03cb03cb 	.word	0x03cb03cb
 800639c:	030903cb 	.word	0x030903cb
 80063a0:	03cb02d2 	.word	0x03cb02d2
 80063a4:	035301f8 	.word	0x035301f8
 80063a8:	02d603cb 	.word	0x02d603cb
 80063ac:	02dd02dd 	.word	0x02dd02dd
 80063b0:	02dd02dd 	.word	0x02dd02dd
 80063b4:	02dd02dd 	.word	0x02dd02dd
 80063b8:	02dd02dd 	.word	0x02dd02dd
 80063bc:	03cb02dd 	.word	0x03cb02dd
 80063c0:	03cb03cb 	.word	0x03cb03cb
 80063c4:	03cb03cb 	.word	0x03cb03cb
 80063c8:	03cb03cb 	.word	0x03cb03cb
 80063cc:	03cb03cb 	.word	0x03cb03cb
 80063d0:	027103cb 	.word	0x027103cb
 80063d4:	03cb0293 	.word	0x03cb0293
 80063d8:	03cb0293 	.word	0x03cb0293
 80063dc:	03cb03cb 	.word	0x03cb03cb
 80063e0:	02cb03cb 	.word	0x02cb03cb
 80063e4:	03cb03cb 	.word	0x03cb03cb
 80063e8:	03cb036e 	.word	0x03cb036e
 80063ec:	03cb03cb 	.word	0x03cb03cb
 80063f0:	03cb03cb 	.word	0x03cb03cb
 80063f4:	03cb03b5 	.word	0x03cb03b5
 80063f8:	038b03cb 	.word	0x038b03cb
 80063fc:	03cb03cb 	.word	0x03cb03cb
 8006400:	03cb03cb 	.word	0x03cb03cb
 8006404:	03cb03cb 	.word	0x03cb03cb
 8006408:	03cb03cb 	.word	0x03cb03cb
 800640c:	03cb03cb 	.word	0x03cb03cb
 8006410:	031703a0 	.word	0x031703a0
 8006414:	02930293 	.word	0x02930293
 8006418:	03300293 	.word	0x03300293
 800641c:	03cb0317 	.word	0x03cb0317
 8006420:	033703cb 	.word	0x033703cb
 8006424:	034103cb 	.word	0x034103cb
 8006428:	02ec01ff 	.word	0x02ec01ff
 800642c:	03cb0263 	.word	0x03cb0263
 8006430:	03cb0211 	.word	0x03cb0211
 8006434:	03cb009b 	.word	0x03cb009b
 8006438:	023603cb 	.word	0x023603cb
 800643c:	4638      	mov	r0, r7
 800643e:	4649      	mov	r1, r9
 8006440:	f001 f97a 	bl	8007738 <__swsetup_r>
 8006444:	b9a0      	cbnz	r0, 8006470 <_vfprintf_r+0x1d8>
 8006446:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800644a:	f003 031a 	and.w	r3, r3, #26
 800644e:	2b0a      	cmp	r3, #10
 8006450:	f47f af54 	bne.w	80062fc <_vfprintf_r+0x64>
 8006454:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f6ff af4f 	blt.w	80062fc <_vfprintf_r+0x64>
 800645e:	4638      	mov	r0, r7
 8006460:	4649      	mov	r1, r9
 8006462:	9a04      	ldr	r2, [sp, #16]
 8006464:	4623      	mov	r3, r4
 8006466:	f001 f92b 	bl	80076c0 <__sbprintf>
 800646a:	b03d      	add	sp, #244	; 0xf4
 800646c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006474:	b03d      	add	sp, #244	; 0xf4
 8006476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006480:	f003 ffb4 	bl	800a3ec <__sprint_r>
 8006484:	b940      	cbnz	r0, 8006498 <_vfprintf_r+0x200>
 8006486:	ac2c      	add	r4, sp, #176	; 0xb0
 8006488:	e765      	b.n	8006356 <_vfprintf_r+0xbe>
 800648a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800648c:	b123      	cbz	r3, 8006498 <_vfprintf_r+0x200>
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	aa1f      	add	r2, sp, #124	; 0x7c
 8006494:	f003 ffaa 	bl	800a3ec <__sprint_r>
 8006498:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800649c:	065a      	lsls	r2, r3, #25
 800649e:	d4e7      	bmi.n	8006470 <_vfprintf_r+0x1d8>
 80064a0:	9805      	ldr	r0, [sp, #20]
 80064a2:	b03d      	add	sp, #244	; 0xf4
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	4638      	mov	r0, r7
 80064aa:	f002 fb2b 	bl	8008b04 <__sinit>
 80064ae:	e708      	b.n	80062c2 <_vfprintf_r+0x2a>
 80064b0:	9d04      	ldr	r5, [sp, #16]
 80064b2:	e753      	b.n	800635c <_vfprintf_r+0xc4>
 80064b4:	f3af 8000 	nop.w
	...
 80064c0:	9304      	str	r3, [sp, #16]
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	46b2      	mov	sl, r6
 80064c6:	069e      	lsls	r6, r3, #26
 80064c8:	f140 831e 	bpl.w	8006b08 <_vfprintf_r+0x870>
 80064cc:	9f08      	ldr	r7, [sp, #32]
 80064ce:	3707      	adds	r7, #7
 80064d0:	f027 0307 	bic.w	r3, r7, #7
 80064d4:	f103 0208 	add.w	r2, r3, #8
 80064d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064dc:	9208      	str	r2, [sp, #32]
 80064de:	2301      	movs	r3, #1
 80064e0:	f04f 0c00 	mov.w	ip, #0
 80064e4:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80064e8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80064ec:	f1ba 0f00 	cmp.w	sl, #0
 80064f0:	db03      	blt.n	80064fa <_vfprintf_r+0x262>
 80064f2:	9a02      	ldr	r2, [sp, #8]
 80064f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064f8:	9202      	str	r2, [sp, #8]
 80064fa:	ea56 0207 	orrs.w	r2, r6, r7
 80064fe:	f040 831f 	bne.w	8006b40 <_vfprintf_r+0x8a8>
 8006502:	f1ba 0f00 	cmp.w	sl, #0
 8006506:	f000 841c 	beq.w	8006d42 <_vfprintf_r+0xaaa>
 800650a:	2b01      	cmp	r3, #1
 800650c:	f000 8320 	beq.w	8006b50 <_vfprintf_r+0x8b8>
 8006510:	2b02      	cmp	r3, #2
 8006512:	f000 8452 	beq.w	8006dba <_vfprintf_r+0xb22>
 8006516:	a92c      	add	r1, sp, #176	; 0xb0
 8006518:	08f2      	lsrs	r2, r6, #3
 800651a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800651e:	08f8      	lsrs	r0, r7, #3
 8006520:	f006 0307 	and.w	r3, r6, #7
 8006524:	4607      	mov	r7, r0
 8006526:	4616      	mov	r6, r2
 8006528:	3330      	adds	r3, #48	; 0x30
 800652a:	ea56 0207 	orrs.w	r2, r6, r7
 800652e:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8006532:	d1f1      	bne.n	8006518 <_vfprintf_r+0x280>
 8006534:	9a02      	ldr	r2, [sp, #8]
 8006536:	910a      	str	r1, [sp, #40]	; 0x28
 8006538:	07d0      	lsls	r0, r2, #31
 800653a:	f100 84f9 	bmi.w	8006f30 <_vfprintf_r+0xc98>
 800653e:	ab2c      	add	r3, sp, #176	; 0xb0
 8006540:	1a5b      	subs	r3, r3, r1
 8006542:	9307      	str	r3, [sp, #28]
 8006544:	9a07      	ldr	r2, [sp, #28]
 8006546:	4592      	cmp	sl, r2
 8006548:	4653      	mov	r3, sl
 800654a:	bfb8      	it	lt
 800654c:	4613      	movlt	r3, r2
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	2300      	movs	r3, #0
 8006552:	930c      	str	r3, [sp, #48]	; 0x30
 8006554:	f1bc 0f00 	cmp.w	ip, #0
 8006558:	d002      	beq.n	8006560 <_vfprintf_r+0x2c8>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	9303      	str	r3, [sp, #12]
 8006560:	9b02      	ldr	r3, [sp, #8]
 8006562:	f013 0302 	ands.w	r3, r3, #2
 8006566:	9309      	str	r3, [sp, #36]	; 0x24
 8006568:	d002      	beq.n	8006570 <_vfprintf_r+0x2d8>
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	3302      	adds	r3, #2
 800656e:	9303      	str	r3, [sp, #12]
 8006570:	9b02      	ldr	r3, [sp, #8]
 8006572:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8006576:	f040 82e0 	bne.w	8006b3a <_vfprintf_r+0x8a2>
 800657a:	9b06      	ldr	r3, [sp, #24]
 800657c:	9a03      	ldr	r2, [sp, #12]
 800657e:	ebc2 0a03 	rsb	sl, r2, r3
 8006582:	f1ba 0f00 	cmp.w	sl, #0
 8006586:	f340 82d8 	ble.w	8006b3a <_vfprintf_r+0x8a2>
 800658a:	f1ba 0f10 	cmp.w	sl, #16
 800658e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8006590:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006592:	4fb3      	ldr	r7, [pc, #716]	; (8006860 <_vfprintf_r+0x5c8>)
 8006594:	bfc8      	it	gt
 8006596:	f04f 0b10 	movgt.w	fp, #16
 800659a:	dc07      	bgt.n	80065ac <_vfprintf_r+0x314>
 800659c:	e01e      	b.n	80065dc <_vfprintf_r+0x344>
 800659e:	f1aa 0a10 	sub.w	sl, sl, #16
 80065a2:	f1ba 0f10 	cmp.w	sl, #16
 80065a6:	f104 0408 	add.w	r4, r4, #8
 80065aa:	dd17      	ble.n	80065dc <_vfprintf_r+0x344>
 80065ac:	3201      	adds	r2, #1
 80065ae:	3110      	adds	r1, #16
 80065b0:	2a07      	cmp	r2, #7
 80065b2:	9121      	str	r1, [sp, #132]	; 0x84
 80065b4:	9220      	str	r2, [sp, #128]	; 0x80
 80065b6:	e884 0880 	stmia.w	r4, {r7, fp}
 80065ba:	ddf0      	ble.n	800659e <_vfprintf_r+0x306>
 80065bc:	4640      	mov	r0, r8
 80065be:	4649      	mov	r1, r9
 80065c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80065c2:	f003 ff13 	bl	800a3ec <__sprint_r>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f47f af66 	bne.w	8006498 <_vfprintf_r+0x200>
 80065cc:	f1aa 0a10 	sub.w	sl, sl, #16
 80065d0:	f1ba 0f10 	cmp.w	sl, #16
 80065d4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80065d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80065da:	dce7      	bgt.n	80065ac <_vfprintf_r+0x314>
 80065dc:	3201      	adds	r2, #1
 80065de:	eb0a 0b01 	add.w	fp, sl, r1
 80065e2:	2a07      	cmp	r2, #7
 80065e4:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80065e8:	9220      	str	r2, [sp, #128]	; 0x80
 80065ea:	e884 0480 	stmia.w	r4, {r7, sl}
 80065ee:	f300 844a 	bgt.w	8006e86 <_vfprintf_r+0xbee>
 80065f2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80065f6:	3408      	adds	r4, #8
 80065f8:	f1bc 0f00 	cmp.w	ip, #0
 80065fc:	d00f      	beq.n	800661e <_vfprintf_r+0x386>
 80065fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006600:	3301      	adds	r3, #1
 8006602:	f10b 0b01 	add.w	fp, fp, #1
 8006606:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 800660a:	2201      	movs	r2, #1
 800660c:	2b07      	cmp	r3, #7
 800660e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006612:	9320      	str	r3, [sp, #128]	; 0x80
 8006614:	e884 0006 	stmia.w	r4, {r1, r2}
 8006618:	f300 83b1 	bgt.w	8006d7e <_vfprintf_r+0xae6>
 800661c:	3408      	adds	r4, #8
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	b173      	cbz	r3, 8006640 <_vfprintf_r+0x3a8>
 8006622:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006624:	3301      	adds	r3, #1
 8006626:	f10b 0b02 	add.w	fp, fp, #2
 800662a:	a918      	add	r1, sp, #96	; 0x60
 800662c:	2202      	movs	r2, #2
 800662e:	2b07      	cmp	r3, #7
 8006630:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006634:	9320      	str	r3, [sp, #128]	; 0x80
 8006636:	e884 0006 	stmia.w	r4, {r1, r2}
 800663a:	f300 83ac 	bgt.w	8006d96 <_vfprintf_r+0xafe>
 800663e:	3408      	adds	r4, #8
 8006640:	2e80      	cmp	r6, #128	; 0x80
 8006642:	f000 82f0 	beq.w	8006c26 <_vfprintf_r+0x98e>
 8006646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006648:	9a07      	ldr	r2, [sp, #28]
 800664a:	ebc2 0a03 	rsb	sl, r2, r3
 800664e:	f1ba 0f00 	cmp.w	sl, #0
 8006652:	dd32      	ble.n	80066ba <_vfprintf_r+0x422>
 8006654:	f1ba 0f10 	cmp.w	sl, #16
 8006658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800665a:	4f82      	ldr	r7, [pc, #520]	; (8006864 <_vfprintf_r+0x5cc>)
 800665c:	dd22      	ble.n	80066a4 <_vfprintf_r+0x40c>
 800665e:	2610      	movs	r6, #16
 8006660:	465b      	mov	r3, fp
 8006662:	e006      	b.n	8006672 <_vfprintf_r+0x3da>
 8006664:	f1aa 0a10 	sub.w	sl, sl, #16
 8006668:	f1ba 0f10 	cmp.w	sl, #16
 800666c:	f104 0408 	add.w	r4, r4, #8
 8006670:	dd17      	ble.n	80066a2 <_vfprintf_r+0x40a>
 8006672:	3201      	adds	r2, #1
 8006674:	3310      	adds	r3, #16
 8006676:	2a07      	cmp	r2, #7
 8006678:	9321      	str	r3, [sp, #132]	; 0x84
 800667a:	9220      	str	r2, [sp, #128]	; 0x80
 800667c:	6027      	str	r7, [r4, #0]
 800667e:	6066      	str	r6, [r4, #4]
 8006680:	ddf0      	ble.n	8006664 <_vfprintf_r+0x3cc>
 8006682:	4640      	mov	r0, r8
 8006684:	4649      	mov	r1, r9
 8006686:	aa1f      	add	r2, sp, #124	; 0x7c
 8006688:	f003 feb0 	bl	800a3ec <__sprint_r>
 800668c:	2800      	cmp	r0, #0
 800668e:	f47f af03 	bne.w	8006498 <_vfprintf_r+0x200>
 8006692:	f1aa 0a10 	sub.w	sl, sl, #16
 8006696:	f1ba 0f10 	cmp.w	sl, #16
 800669a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800669c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800669e:	ac2c      	add	r4, sp, #176	; 0xb0
 80066a0:	dce7      	bgt.n	8006672 <_vfprintf_r+0x3da>
 80066a2:	469b      	mov	fp, r3
 80066a4:	3201      	adds	r2, #1
 80066a6:	44d3      	add	fp, sl
 80066a8:	2a07      	cmp	r2, #7
 80066aa:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80066ae:	9220      	str	r2, [sp, #128]	; 0x80
 80066b0:	e884 0480 	stmia.w	r4, {r7, sl}
 80066b4:	f300 8357 	bgt.w	8006d66 <_vfprintf_r+0xace>
 80066b8:	3408      	adds	r4, #8
 80066ba:	9b02      	ldr	r3, [sp, #8]
 80066bc:	05db      	lsls	r3, r3, #23
 80066be:	f100 825b 	bmi.w	8006b78 <_vfprintf_r+0x8e0>
 80066c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066c4:	9907      	ldr	r1, [sp, #28]
 80066c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c8:	6022      	str	r2, [r4, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	448b      	add	fp, r1
 80066ce:	2b07      	cmp	r3, #7
 80066d0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80066d4:	6061      	str	r1, [r4, #4]
 80066d6:	9320      	str	r3, [sp, #128]	; 0x80
 80066d8:	f300 831d 	bgt.w	8006d16 <_vfprintf_r+0xa7e>
 80066dc:	3408      	adds	r4, #8
 80066de:	9b02      	ldr	r3, [sp, #8]
 80066e0:	0759      	lsls	r1, r3, #29
 80066e2:	d53a      	bpl.n	800675a <_vfprintf_r+0x4c2>
 80066e4:	9b06      	ldr	r3, [sp, #24]
 80066e6:	9a03      	ldr	r2, [sp, #12]
 80066e8:	1a9d      	subs	r5, r3, r2
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	dd35      	ble.n	800675a <_vfprintf_r+0x4c2>
 80066ee:	2d10      	cmp	r5, #16
 80066f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066f2:	4f5b      	ldr	r7, [pc, #364]	; (8006860 <_vfprintf_r+0x5c8>)
 80066f4:	dd1e      	ble.n	8006734 <_vfprintf_r+0x49c>
 80066f6:	2610      	movs	r6, #16
 80066f8:	465a      	mov	r2, fp
 80066fa:	e004      	b.n	8006706 <_vfprintf_r+0x46e>
 80066fc:	3d10      	subs	r5, #16
 80066fe:	2d10      	cmp	r5, #16
 8006700:	f104 0408 	add.w	r4, r4, #8
 8006704:	dd15      	ble.n	8006732 <_vfprintf_r+0x49a>
 8006706:	3301      	adds	r3, #1
 8006708:	3210      	adds	r2, #16
 800670a:	2b07      	cmp	r3, #7
 800670c:	9221      	str	r2, [sp, #132]	; 0x84
 800670e:	9320      	str	r3, [sp, #128]	; 0x80
 8006710:	6027      	str	r7, [r4, #0]
 8006712:	6066      	str	r6, [r4, #4]
 8006714:	ddf2      	ble.n	80066fc <_vfprintf_r+0x464>
 8006716:	4640      	mov	r0, r8
 8006718:	4649      	mov	r1, r9
 800671a:	aa1f      	add	r2, sp, #124	; 0x7c
 800671c:	f003 fe66 	bl	800a3ec <__sprint_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	f47f aeb9 	bne.w	8006498 <_vfprintf_r+0x200>
 8006726:	3d10      	subs	r5, #16
 8006728:	2d10      	cmp	r5, #16
 800672a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800672c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800672e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006730:	dce9      	bgt.n	8006706 <_vfprintf_r+0x46e>
 8006732:	4693      	mov	fp, r2
 8006734:	3301      	adds	r3, #1
 8006736:	44ab      	add	fp, r5
 8006738:	2b07      	cmp	r3, #7
 800673a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800673e:	9320      	str	r3, [sp, #128]	; 0x80
 8006740:	6027      	str	r7, [r4, #0]
 8006742:	6065      	str	r5, [r4, #4]
 8006744:	dd09      	ble.n	800675a <_vfprintf_r+0x4c2>
 8006746:	4640      	mov	r0, r8
 8006748:	4649      	mov	r1, r9
 800674a:	aa1f      	add	r2, sp, #124	; 0x7c
 800674c:	f003 fe4e 	bl	800a3ec <__sprint_r>
 8006750:	2800      	cmp	r0, #0
 8006752:	f47f aea1 	bne.w	8006498 <_vfprintf_r+0x200>
 8006756:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800675a:	9b05      	ldr	r3, [sp, #20]
 800675c:	9a03      	ldr	r2, [sp, #12]
 800675e:	9906      	ldr	r1, [sp, #24]
 8006760:	428a      	cmp	r2, r1
 8006762:	bfac      	ite	ge
 8006764:	189b      	addge	r3, r3, r2
 8006766:	185b      	addlt	r3, r3, r1
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	f1bb 0f00 	cmp.w	fp, #0
 800676e:	f040 82de 	bne.w	8006d2e <_vfprintf_r+0xa96>
 8006772:	2300      	movs	r3, #0
 8006774:	9320      	str	r3, [sp, #128]	; 0x80
 8006776:	ac2c      	add	r4, sp, #176	; 0xb0
 8006778:	e5cf      	b.n	800631a <_vfprintf_r+0x82>
 800677a:	4619      	mov	r1, r3
 800677c:	9802      	ldr	r0, [sp, #8]
 800677e:	781d      	ldrb	r5, [r3, #0]
 8006780:	f040 0004 	orr.w	r0, r0, #4
 8006784:	9002      	str	r0, [sp, #8]
 8006786:	e5f8      	b.n	800637a <_vfprintf_r+0xe2>
 8006788:	9304      	str	r3, [sp, #16]
 800678a:	9b02      	ldr	r3, [sp, #8]
 800678c:	f013 0320 	ands.w	r3, r3, #32
 8006790:	46b2      	mov	sl, r6
 8006792:	f000 8173 	beq.w	8006a7c <_vfprintf_r+0x7e4>
 8006796:	9f08      	ldr	r7, [sp, #32]
 8006798:	3707      	adds	r7, #7
 800679a:	f027 0307 	bic.w	r3, r7, #7
 800679e:	f103 0208 	add.w	r2, r3, #8
 80067a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80067a6:	9208      	str	r2, [sp, #32]
 80067a8:	2300      	movs	r3, #0
 80067aa:	e699      	b.n	80064e0 <_vfprintf_r+0x248>
 80067ac:	9a08      	ldr	r2, [sp, #32]
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	6813      	ldr	r3, [r2, #0]
 80067b2:	930a      	str	r3, [sp, #40]	; 0x28
 80067b4:	f04f 0b00 	mov.w	fp, #0
 80067b8:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 80067bc:	1d17      	adds	r7, r2, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 865e 	beq.w	8007480 <_vfprintf_r+0x11e8>
 80067c4:	2e00      	cmp	r6, #0
 80067c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067c8:	f2c0 8612 	blt.w	80073f0 <_vfprintf_r+0x1158>
 80067cc:	4659      	mov	r1, fp
 80067ce:	4632      	mov	r2, r6
 80067d0:	f002 ff96 	bl	8009700 <memchr>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f000 868f 	beq.w	80074f8 <_vfprintf_r+0x1260>
 80067da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80067e0:	1ac3      	subs	r3, r0, r3
 80067e2:	9307      	str	r3, [sp, #28]
 80067e4:	9708      	str	r7, [sp, #32]
 80067e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067ea:	9303      	str	r3, [sp, #12]
 80067ec:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80067f0:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80067f4:	e6ae      	b.n	8006554 <_vfprintf_r+0x2bc>
 80067f6:	9304      	str	r3, [sp, #16]
 80067f8:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <_vfprintf_r+0x5d0>)
 80067fa:	9310      	str	r3, [sp, #64]	; 0x40
 80067fc:	9b02      	ldr	r3, [sp, #8]
 80067fe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006802:	0699      	lsls	r1, r3, #26
 8006804:	46b2      	mov	sl, r6
 8006806:	f140 8155 	bpl.w	8006ab4 <_vfprintf_r+0x81c>
 800680a:	9f08      	ldr	r7, [sp, #32]
 800680c:	3707      	adds	r7, #7
 800680e:	f027 0307 	bic.w	r3, r7, #7
 8006812:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006816:	f103 0208 	add.w	r2, r3, #8
 800681a:	9208      	str	r2, [sp, #32]
 800681c:	9b02      	ldr	r3, [sp, #8]
 800681e:	07db      	lsls	r3, r3, #31
 8006820:	f140 82e4 	bpl.w	8006dec <_vfprintf_r+0xb54>
 8006824:	ea56 0307 	orrs.w	r3, r6, r7
 8006828:	f000 82e0 	beq.w	8006dec <_vfprintf_r+0xb54>
 800682c:	9a02      	ldr	r2, [sp, #8]
 800682e:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8006832:	2330      	movs	r3, #48	; 0x30
 8006834:	f042 0202 	orr.w	r2, r2, #2
 8006838:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800683c:	9202      	str	r2, [sp, #8]
 800683e:	2302      	movs	r3, #2
 8006840:	e64e      	b.n	80064e0 <_vfprintf_r+0x248>
 8006842:	781d      	ldrb	r5, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	2a00      	cmp	r2, #0
 8006848:	f47f ad97 	bne.w	800637a <_vfprintf_r+0xe2>
 800684c:	2220      	movs	r2, #32
 800684e:	e594      	b.n	800637a <_vfprintf_r+0xe2>
 8006850:	9902      	ldr	r1, [sp, #8]
 8006852:	f041 0120 	orr.w	r1, r1, #32
 8006856:	9102      	str	r1, [sp, #8]
 8006858:	781d      	ldrb	r5, [r3, #0]
 800685a:	4619      	mov	r1, r3
 800685c:	e58d      	b.n	800637a <_vfprintf_r+0xe2>
 800685e:	bf00      	nop
 8006860:	08019e74 	.word	0x08019e74
 8006864:	08019e20 	.word	0x08019e20
 8006868:	08019e54 	.word	0x08019e54
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	9b02      	ldr	r3, [sp, #8]
 8006870:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006874:	f043 0310 	orr.w	r3, r3, #16
 8006878:	9302      	str	r3, [sp, #8]
 800687a:	9b02      	ldr	r3, [sp, #8]
 800687c:	0698      	lsls	r0, r3, #26
 800687e:	46b2      	mov	sl, r6
 8006880:	f140 80a2 	bpl.w	80069c8 <_vfprintf_r+0x730>
 8006884:	9f08      	ldr	r7, [sp, #32]
 8006886:	3707      	adds	r7, #7
 8006888:	f027 0707 	bic.w	r7, r7, #7
 800688c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	9108      	str	r1, [sp, #32]
 8006896:	4616      	mov	r6, r2
 8006898:	461f      	mov	r7, r3
 800689a:	2a00      	cmp	r2, #0
 800689c:	f173 0300 	sbcs.w	r3, r3, #0
 80068a0:	f2c0 841c 	blt.w	80070dc <_vfprintf_r+0xe44>
 80068a4:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80068a8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80068ac:	2301      	movs	r3, #1
 80068ae:	e61d      	b.n	80064ec <_vfprintf_r+0x254>
 80068b0:	9304      	str	r3, [sp, #16]
 80068b2:	9b02      	ldr	r3, [sp, #8]
 80068b4:	9f08      	ldr	r7, [sp, #32]
 80068b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80068ba:	071b      	lsls	r3, r3, #28
 80068bc:	46b2      	mov	sl, r6
 80068be:	46b3      	mov	fp, r6
 80068c0:	f107 0707 	add.w	r7, r7, #7
 80068c4:	f140 849b 	bpl.w	80071fe <_vfprintf_r+0xf66>
 80068c8:	f027 0307 	bic.w	r3, r7, #7
 80068cc:	ed93 7b00 	vldr	d7, [r3]
 80068d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80068d4:	f103 0208 	add.w	r2, r3, #8
 80068d8:	9208      	str	r2, [sp, #32]
 80068da:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80068de:	f003 fcd9 	bl	800a294 <__fpclassifyd>
 80068e2:	2801      	cmp	r0, #1
 80068e4:	f040 8408 	bne.w	80070f8 <_vfprintf_r+0xe60>
 80068e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80068ec:	2200      	movs	r2, #0
 80068ee:	2300      	movs	r3, #0
 80068f0:	f7fa f9b6 	bl	8000c60 <__aeabi_dcmplt>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f040 85ec 	bne.w	80074d2 <_vfprintf_r+0x123a>
 80068fa:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80068fe:	9e02      	ldr	r6, [sp, #8]
 8006900:	4a99      	ldr	r2, [pc, #612]	; (8006b68 <_vfprintf_r+0x8d0>)
 8006902:	4b9a      	ldr	r3, [pc, #616]	; (8006b6c <_vfprintf_r+0x8d4>)
 8006904:	2103      	movs	r1, #3
 8006906:	2000      	movs	r0, #0
 8006908:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800690c:	2d47      	cmp	r5, #71	; 0x47
 800690e:	bfd8      	it	le
 8006910:	461a      	movle	r2, r3
 8006912:	9103      	str	r1, [sp, #12]
 8006914:	900b      	str	r0, [sp, #44]	; 0x2c
 8006916:	9602      	str	r6, [sp, #8]
 8006918:	920a      	str	r2, [sp, #40]	; 0x28
 800691a:	9107      	str	r1, [sp, #28]
 800691c:	900c      	str	r0, [sp, #48]	; 0x30
 800691e:	e619      	b.n	8006554 <_vfprintf_r+0x2bc>
 8006920:	9902      	ldr	r1, [sp, #8]
 8006922:	f041 0108 	orr.w	r1, r1, #8
 8006926:	9102      	str	r1, [sp, #8]
 8006928:	781d      	ldrb	r5, [r3, #0]
 800692a:	4619      	mov	r1, r3
 800692c:	e525      	b.n	800637a <_vfprintf_r+0xe2>
 800692e:	781d      	ldrb	r5, [r3, #0]
 8006930:	4619      	mov	r1, r3
 8006932:	222b      	movs	r2, #43	; 0x2b
 8006934:	e521      	b.n	800637a <_vfprintf_r+0xe2>
 8006936:	9902      	ldr	r1, [sp, #8]
 8006938:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800693c:	9102      	str	r1, [sp, #8]
 800693e:	781d      	ldrb	r5, [r3, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	e51a      	b.n	800637a <_vfprintf_r+0xe2>
 8006944:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006948:	2100      	movs	r1, #0
 800694a:	f813 5b01 	ldrb.w	r5, [r3], #1
 800694e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006952:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8006956:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800695a:	2809      	cmp	r0, #9
 800695c:	d9f5      	bls.n	800694a <_vfprintf_r+0x6b2>
 800695e:	9106      	str	r1, [sp, #24]
 8006960:	e50c      	b.n	800637c <_vfprintf_r+0xe4>
 8006962:	9908      	ldr	r1, [sp, #32]
 8006964:	9304      	str	r3, [sp, #16]
 8006966:	2330      	movs	r3, #48	; 0x30
 8006968:	9a02      	ldr	r2, [sp, #8]
 800696a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800696e:	460b      	mov	r3, r1
 8006970:	3304      	adds	r3, #4
 8006972:	2578      	movs	r5, #120	; 0x78
 8006974:	f042 0202 	orr.w	r2, r2, #2
 8006978:	9308      	str	r3, [sp, #32]
 800697a:	4b7d      	ldr	r3, [pc, #500]	; (8006b70 <_vfprintf_r+0x8d8>)
 800697c:	9310      	str	r3, [sp, #64]	; 0x40
 800697e:	46b2      	mov	sl, r6
 8006980:	9202      	str	r2, [sp, #8]
 8006982:	680e      	ldr	r6, [r1, #0]
 8006984:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8006988:	2700      	movs	r7, #0
 800698a:	2302      	movs	r3, #2
 800698c:	e5a8      	b.n	80064e0 <_vfprintf_r+0x248>
 800698e:	9902      	ldr	r1, [sp, #8]
 8006990:	f041 0101 	orr.w	r1, r1, #1
 8006994:	9102      	str	r1, [sp, #8]
 8006996:	781d      	ldrb	r5, [r3, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	e4ee      	b.n	800637a <_vfprintf_r+0xe2>
 800699c:	9d08      	ldr	r5, [sp, #32]
 800699e:	6829      	ldr	r1, [r5, #0]
 80069a0:	9106      	str	r1, [sp, #24]
 80069a2:	4608      	mov	r0, r1
 80069a4:	2800      	cmp	r0, #0
 80069a6:	4629      	mov	r1, r5
 80069a8:	f101 0104 	add.w	r1, r1, #4
 80069ac:	f2c0 84ee 	blt.w	800738c <_vfprintf_r+0x10f4>
 80069b0:	9108      	str	r1, [sp, #32]
 80069b2:	781d      	ldrb	r5, [r3, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	e4e0      	b.n	800637a <_vfprintf_r+0xe2>
 80069b8:	9304      	str	r3, [sp, #16]
 80069ba:	9b02      	ldr	r3, [sp, #8]
 80069bc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80069c0:	0698      	lsls	r0, r3, #26
 80069c2:	46b2      	mov	sl, r6
 80069c4:	f53f af5e 	bmi.w	8006884 <_vfprintf_r+0x5ec>
 80069c8:	9b02      	ldr	r3, [sp, #8]
 80069ca:	06d9      	lsls	r1, r3, #27
 80069cc:	f100 829b 	bmi.w	8006f06 <_vfprintf_r+0xc6e>
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	065a      	lsls	r2, r3, #25
 80069d4:	f140 8297 	bpl.w	8006f06 <_vfprintf_r+0xc6e>
 80069d8:	9908      	ldr	r1, [sp, #32]
 80069da:	f9b1 6000 	ldrsh.w	r6, [r1]
 80069de:	3104      	adds	r1, #4
 80069e0:	17f7      	asrs	r7, r6, #31
 80069e2:	4632      	mov	r2, r6
 80069e4:	463b      	mov	r3, r7
 80069e6:	9108      	str	r1, [sp, #32]
 80069e8:	e757      	b.n	800689a <_vfprintf_r+0x602>
 80069ea:	9902      	ldr	r1, [sp, #8]
 80069ec:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80069f0:	9102      	str	r1, [sp, #8]
 80069f2:	781d      	ldrb	r5, [r3, #0]
 80069f4:	4619      	mov	r1, r3
 80069f6:	e4c0      	b.n	800637a <_vfprintf_r+0xe2>
 80069f8:	781d      	ldrb	r5, [r3, #0]
 80069fa:	9902      	ldr	r1, [sp, #8]
 80069fc:	2d6c      	cmp	r5, #108	; 0x6c
 80069fe:	f000 84be 	beq.w	800737e <_vfprintf_r+0x10e6>
 8006a02:	f041 0110 	orr.w	r1, r1, #16
 8006a06:	9102      	str	r1, [sp, #8]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	e4b6      	b.n	800637a <_vfprintf_r+0xe2>
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	9b02      	ldr	r3, [sp, #8]
 8006a10:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006a14:	069a      	lsls	r2, r3, #26
 8006a16:	f140 83fd 	bpl.w	8007214 <_vfprintf_r+0xf7c>
 8006a1a:	9a08      	ldr	r2, [sp, #32]
 8006a1c:	9905      	ldr	r1, [sp, #20]
 8006a1e:	6813      	ldr	r3, [r2, #0]
 8006a20:	17cf      	asrs	r7, r1, #31
 8006a22:	4608      	mov	r0, r1
 8006a24:	3204      	adds	r2, #4
 8006a26:	4639      	mov	r1, r7
 8006a28:	9208      	str	r2, [sp, #32]
 8006a2a:	e9c3 0100 	strd	r0, r1, [r3]
 8006a2e:	e474      	b.n	800631a <_vfprintf_r+0x82>
 8006a30:	781d      	ldrb	r5, [r3, #0]
 8006a32:	2d2a      	cmp	r5, #42	; 0x2a
 8006a34:	f103 0101 	add.w	r1, r3, #1
 8006a38:	f000 862a 	beq.w	8007690 <_vfprintf_r+0x13f8>
 8006a3c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006a40:	2809      	cmp	r0, #9
 8006a42:	460b      	mov	r3, r1
 8006a44:	f04f 0600 	mov.w	r6, #0
 8006a48:	f63f ac98 	bhi.w	800637c <_vfprintf_r+0xe4>
 8006a4c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006a50:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8006a54:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8006a58:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006a5c:	2809      	cmp	r0, #9
 8006a5e:	d9f5      	bls.n	8006a4c <_vfprintf_r+0x7b4>
 8006a60:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8006a64:	e48a      	b.n	800637c <_vfprintf_r+0xe4>
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	f043 0310 	orr.w	r3, r3, #16
 8006a6e:	9302      	str	r3, [sp, #8]
 8006a70:	9b02      	ldr	r3, [sp, #8]
 8006a72:	f013 0320 	ands.w	r3, r3, #32
 8006a76:	46b2      	mov	sl, r6
 8006a78:	f47f ae8d 	bne.w	8006796 <_vfprintf_r+0x4fe>
 8006a7c:	9a02      	ldr	r2, [sp, #8]
 8006a7e:	f012 0210 	ands.w	r2, r2, #16
 8006a82:	f040 8238 	bne.w	8006ef6 <_vfprintf_r+0xc5e>
 8006a86:	9b02      	ldr	r3, [sp, #8]
 8006a88:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006a8c:	f000 8233 	beq.w	8006ef6 <_vfprintf_r+0xc5e>
 8006a90:	9908      	ldr	r1, [sp, #32]
 8006a92:	4613      	mov	r3, r2
 8006a94:	460a      	mov	r2, r1
 8006a96:	3204      	adds	r2, #4
 8006a98:	880e      	ldrh	r6, [r1, #0]
 8006a9a:	9208      	str	r2, [sp, #32]
 8006a9c:	2700      	movs	r7, #0
 8006a9e:	e51f      	b.n	80064e0 <_vfprintf_r+0x248>
 8006aa0:	9304      	str	r3, [sp, #16]
 8006aa2:	4b34      	ldr	r3, [pc, #208]	; (8006b74 <_vfprintf_r+0x8dc>)
 8006aa4:	9310      	str	r3, [sp, #64]	; 0x40
 8006aa6:	9b02      	ldr	r3, [sp, #8]
 8006aa8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006aac:	0699      	lsls	r1, r3, #26
 8006aae:	46b2      	mov	sl, r6
 8006ab0:	f53f aeab 	bmi.w	800680a <_vfprintf_r+0x572>
 8006ab4:	9b02      	ldr	r3, [sp, #8]
 8006ab6:	06da      	lsls	r2, r3, #27
 8006ab8:	f140 83d1 	bpl.w	800725e <_vfprintf_r+0xfc6>
 8006abc:	9a08      	ldr	r2, [sp, #32]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	6816      	ldr	r6, [r2, #0]
 8006ac4:	9308      	str	r3, [sp, #32]
 8006ac6:	2700      	movs	r7, #0
 8006ac8:	e6a8      	b.n	800681c <_vfprintf_r+0x584>
 8006aca:	9908      	ldr	r1, [sp, #32]
 8006acc:	9304      	str	r3, [sp, #16]
 8006ace:	680a      	ldr	r2, [r1, #0]
 8006ad0:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	3104      	adds	r1, #4
 8006ada:	469c      	mov	ip, r3
 8006adc:	9203      	str	r2, [sp, #12]
 8006ade:	9108      	str	r1, [sp, #32]
 8006ae0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006ae4:	ab22      	add	r3, sp, #136	; 0x88
 8006ae6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8006aea:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8006aee:	9207      	str	r2, [sp, #28]
 8006af0:	930a      	str	r3, [sp, #40]	; 0x28
 8006af2:	e535      	b.n	8006560 <_vfprintf_r+0x2c8>
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	9b02      	ldr	r3, [sp, #8]
 8006af8:	f043 0310 	orr.w	r3, r3, #16
 8006afc:	9302      	str	r3, [sp, #8]
 8006afe:	9b02      	ldr	r3, [sp, #8]
 8006b00:	46b2      	mov	sl, r6
 8006b02:	069e      	lsls	r6, r3, #26
 8006b04:	f53f ace2 	bmi.w	80064cc <_vfprintf_r+0x234>
 8006b08:	9b02      	ldr	r3, [sp, #8]
 8006b0a:	06d8      	lsls	r0, r3, #27
 8006b0c:	f140 8399 	bpl.w	8007242 <_vfprintf_r+0xfaa>
 8006b10:	9a08      	ldr	r2, [sp, #32]
 8006b12:	4613      	mov	r3, r2
 8006b14:	3204      	adds	r2, #4
 8006b16:	681e      	ldr	r6, [r3, #0]
 8006b18:	9208      	str	r2, [sp, #32]
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	2700      	movs	r7, #0
 8006b1e:	e4df      	b.n	80064e0 <_vfprintf_r+0x248>
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	f43f acaf 	beq.w	800648a <_vfprintf_r+0x1f2>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2201      	movs	r2, #1
 8006b30:	469c      	mov	ip, r3
 8006b32:	9203      	str	r2, [sp, #12]
 8006b34:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 8006b38:	e7d2      	b.n	8006ae0 <_vfprintf_r+0x848>
 8006b3a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006b3e:	e55b      	b.n	80065f8 <_vfprintf_r+0x360>
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	f47f ace5 	bne.w	8006510 <_vfprintf_r+0x278>
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	bf08      	it	eq
 8006b4a:	2e0a      	cmpeq	r6, #10
 8006b4c:	f080 81ff 	bcs.w	8006f4e <_vfprintf_r+0xcb6>
 8006b50:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8006b54:	3630      	adds	r6, #48	; 0x30
 8006b56:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 8006b5a:	ab2c      	add	r3, sp, #176	; 0xb0
 8006b5c:	ebcb 0303 	rsb	r3, fp, r3
 8006b60:	9307      	str	r3, [sp, #28]
 8006b62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006b66:	e4ed      	b.n	8006544 <_vfprintf_r+0x2ac>
 8006b68:	08019e34 	.word	0x08019e34
 8006b6c:	08019e30 	.word	0x08019e30
 8006b70:	08019e54 	.word	0x08019e54
 8006b74:	08019e40 	.word	0x08019e40
 8006b78:	2d65      	cmp	r5, #101	; 0x65
 8006b7a:	f340 808a 	ble.w	8006c92 <_vfprintf_r+0x9fa>
 8006b7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b82:	2200      	movs	r2, #0
 8006b84:	2300      	movs	r3, #0
 8006b86:	f7fa f861 	bl	8000c4c <__aeabi_dcmpeq>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f000 8131 	beq.w	8006df2 <_vfprintf_r+0xb5a>
 8006b90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b92:	4aae      	ldr	r2, [pc, #696]	; (8006e4c <_vfprintf_r+0xbb4>)
 8006b94:	6022      	str	r2, [r4, #0]
 8006b96:	3301      	adds	r3, #1
 8006b98:	f10b 0b01 	add.w	fp, fp, #1
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	2b07      	cmp	r3, #7
 8006ba0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006ba4:	9320      	str	r3, [sp, #128]	; 0x80
 8006ba6:	6062      	str	r2, [r4, #4]
 8006ba8:	f300 8372 	bgt.w	8007290 <_vfprintf_r+0xff8>
 8006bac:	3408      	adds	r4, #8
 8006bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	db03      	blt.n	8006bbe <_vfprintf_r+0x926>
 8006bb6:	9b02      	ldr	r3, [sp, #8]
 8006bb8:	07df      	lsls	r7, r3, #31
 8006bba:	f57f ad90 	bpl.w	80066de <_vfprintf_r+0x446>
 8006bbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006bc0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006bc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	448b      	add	fp, r1
 8006bca:	2b07      	cmp	r3, #7
 8006bcc:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006bd0:	6061      	str	r1, [r4, #4]
 8006bd2:	9320      	str	r3, [sp, #128]	; 0x80
 8006bd4:	f300 83e1 	bgt.w	800739a <_vfprintf_r+0x1102>
 8006bd8:	3408      	adds	r4, #8
 8006bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bdc:	1e5d      	subs	r5, r3, #1
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	f77f ad7d 	ble.w	80066de <_vfprintf_r+0x446>
 8006be4:	2d10      	cmp	r5, #16
 8006be6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006be8:	4f99      	ldr	r7, [pc, #612]	; (8006e50 <_vfprintf_r+0xbb8>)
 8006bea:	f340 8196 	ble.w	8006f1a <_vfprintf_r+0xc82>
 8006bee:	2610      	movs	r6, #16
 8006bf0:	465a      	mov	r2, fp
 8006bf2:	e004      	b.n	8006bfe <_vfprintf_r+0x966>
 8006bf4:	3408      	adds	r4, #8
 8006bf6:	3d10      	subs	r5, #16
 8006bf8:	2d10      	cmp	r5, #16
 8006bfa:	f340 818d 	ble.w	8006f18 <_vfprintf_r+0xc80>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	3210      	adds	r2, #16
 8006c02:	2b07      	cmp	r3, #7
 8006c04:	9221      	str	r2, [sp, #132]	; 0x84
 8006c06:	9320      	str	r3, [sp, #128]	; 0x80
 8006c08:	6027      	str	r7, [r4, #0]
 8006c0a:	6066      	str	r6, [r4, #4]
 8006c0c:	ddf2      	ble.n	8006bf4 <_vfprintf_r+0x95c>
 8006c0e:	4640      	mov	r0, r8
 8006c10:	4649      	mov	r1, r9
 8006c12:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c14:	f003 fbea 	bl	800a3ec <__sprint_r>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f47f ac3d 	bne.w	8006498 <_vfprintf_r+0x200>
 8006c1e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c22:	ac2c      	add	r4, sp, #176	; 0xb0
 8006c24:	e7e7      	b.n	8006bf6 <_vfprintf_r+0x95e>
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	9a03      	ldr	r2, [sp, #12]
 8006c2a:	1a9e      	subs	r6, r3, r2
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	f77f ad0a 	ble.w	8006646 <_vfprintf_r+0x3ae>
 8006c32:	2e10      	cmp	r6, #16
 8006c34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c36:	4f86      	ldr	r7, [pc, #536]	; (8006e50 <_vfprintf_r+0xbb8>)
 8006c38:	dd1f      	ble.n	8006c7a <_vfprintf_r+0x9e2>
 8006c3a:	f04f 0a10 	mov.w	sl, #16
 8006c3e:	465b      	mov	r3, fp
 8006c40:	e004      	b.n	8006c4c <_vfprintf_r+0x9b4>
 8006c42:	3e10      	subs	r6, #16
 8006c44:	2e10      	cmp	r6, #16
 8006c46:	f104 0408 	add.w	r4, r4, #8
 8006c4a:	dd15      	ble.n	8006c78 <_vfprintf_r+0x9e0>
 8006c4c:	3201      	adds	r2, #1
 8006c4e:	3310      	adds	r3, #16
 8006c50:	2a07      	cmp	r2, #7
 8006c52:	9321      	str	r3, [sp, #132]	; 0x84
 8006c54:	9220      	str	r2, [sp, #128]	; 0x80
 8006c56:	e884 0480 	stmia.w	r4, {r7, sl}
 8006c5a:	ddf2      	ble.n	8006c42 <_vfprintf_r+0x9aa>
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c62:	f003 fbc3 	bl	800a3ec <__sprint_r>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f47f ac16 	bne.w	8006498 <_vfprintf_r+0x200>
 8006c6c:	3e10      	subs	r6, #16
 8006c6e:	2e10      	cmp	r6, #16
 8006c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c72:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c74:	ac2c      	add	r4, sp, #176	; 0xb0
 8006c76:	dce9      	bgt.n	8006c4c <_vfprintf_r+0x9b4>
 8006c78:	469b      	mov	fp, r3
 8006c7a:	3201      	adds	r2, #1
 8006c7c:	44b3      	add	fp, r6
 8006c7e:	2a07      	cmp	r2, #7
 8006c80:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006c84:	9220      	str	r2, [sp, #128]	; 0x80
 8006c86:	6027      	str	r7, [r4, #0]
 8006c88:	6066      	str	r6, [r4, #4]
 8006c8a:	f300 821a 	bgt.w	80070c2 <_vfprintf_r+0xe2a>
 8006c8e:	3408      	adds	r4, #8
 8006c90:	e4d9      	b.n	8006646 <_vfprintf_r+0x3ae>
 8006c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c94:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	f340 81d5 	ble.w	8007046 <_vfprintf_r+0xdae>
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c9e:	6023      	str	r3, [r4, #0]
 8006ca0:	3501      	adds	r5, #1
 8006ca2:	f10b 0601 	add.w	r6, fp, #1
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	2d07      	cmp	r5, #7
 8006caa:	9621      	str	r6, [sp, #132]	; 0x84
 8006cac:	9520      	str	r5, [sp, #128]	; 0x80
 8006cae:	6063      	str	r3, [r4, #4]
 8006cb0:	f300 81e5 	bgt.w	800707e <_vfprintf_r+0xde6>
 8006cb4:	3408      	adds	r4, #8
 8006cb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	4416      	add	r6, r2
 8006cc0:	2d07      	cmp	r5, #7
 8006cc2:	9621      	str	r6, [sp, #132]	; 0x84
 8006cc4:	9520      	str	r5, [sp, #128]	; 0x80
 8006cc6:	6062      	str	r2, [r4, #4]
 8006cc8:	f300 81ef 	bgt.w	80070aa <_vfprintf_r+0xe12>
 8006ccc:	3408      	adds	r4, #8
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f7f9 ffb9 	bl	8000c4c <__aeabi_dcmpeq>
 8006cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	f040 80e1 	bne.w	8006ea4 <_vfprintf_r+0xc0c>
 8006ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	3501      	adds	r5, #1
 8006ce8:	3201      	adds	r2, #1
 8006cea:	441e      	add	r6, r3
 8006cec:	2d07      	cmp	r5, #7
 8006cee:	9520      	str	r5, [sp, #128]	; 0x80
 8006cf0:	9621      	str	r6, [sp, #132]	; 0x84
 8006cf2:	6022      	str	r2, [r4, #0]
 8006cf4:	6063      	str	r3, [r4, #4]
 8006cf6:	f300 81b6 	bgt.w	8007066 <_vfprintf_r+0xdce>
 8006cfa:	3408      	adds	r4, #8
 8006cfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cfe:	6062      	str	r2, [r4, #4]
 8006d00:	3501      	adds	r5, #1
 8006d02:	eb06 0b02 	add.w	fp, r6, r2
 8006d06:	ab1b      	add	r3, sp, #108	; 0x6c
 8006d08:	2d07      	cmp	r5, #7
 8006d0a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006d0e:	9520      	str	r5, [sp, #128]	; 0x80
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	f77f ace3 	ble.w	80066dc <_vfprintf_r+0x444>
 8006d16:	4640      	mov	r0, r8
 8006d18:	4649      	mov	r1, r9
 8006d1a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d1c:	f003 fb66 	bl	800a3ec <__sprint_r>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f47f abb9 	bne.w	8006498 <_vfprintf_r+0x200>
 8006d26:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006d2a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d2c:	e4d7      	b.n	80066de <_vfprintf_r+0x446>
 8006d2e:	4640      	mov	r0, r8
 8006d30:	4649      	mov	r1, r9
 8006d32:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d34:	f003 fb5a 	bl	800a3ec <__sprint_r>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f43f ad1a 	beq.w	8006772 <_vfprintf_r+0x4da>
 8006d3e:	f7ff bbab 	b.w	8006498 <_vfprintf_r+0x200>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d133      	bne.n	8006dae <_vfprintf_r+0xb16>
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	07da      	lsls	r2, r3, #31
 8006d4a:	d530      	bpl.n	8006dae <_vfprintf_r+0xb16>
 8006d4c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8006d50:	2330      	movs	r3, #48	; 0x30
 8006d52:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8006d56:	ab2c      	add	r3, sp, #176	; 0xb0
 8006d58:	ebcb 0303 	rsb	r3, fp, r3
 8006d5c:	9307      	str	r3, [sp, #28]
 8006d5e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006d62:	f7ff bbef 	b.w	8006544 <_vfprintf_r+0x2ac>
 8006d66:	4640      	mov	r0, r8
 8006d68:	4649      	mov	r1, r9
 8006d6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d6c:	f003 fb3e 	bl	800a3ec <__sprint_r>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	f47f ab91 	bne.w	8006498 <_vfprintf_r+0x200>
 8006d76:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006d7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d7c:	e49d      	b.n	80066ba <_vfprintf_r+0x422>
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d84:	f003 fb32 	bl	800a3ec <__sprint_r>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f47f ab85 	bne.w	8006498 <_vfprintf_r+0x200>
 8006d8e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006d92:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d94:	e443      	b.n	800661e <_vfprintf_r+0x386>
 8006d96:	4640      	mov	r0, r8
 8006d98:	4649      	mov	r1, r9
 8006d9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d9c:	f003 fb26 	bl	800a3ec <__sprint_r>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f47f ab79 	bne.w	8006498 <_vfprintf_r+0x200>
 8006da6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006daa:	ac2c      	add	r4, sp, #176	; 0xb0
 8006dac:	e448      	b.n	8006640 <_vfprintf_r+0x3a8>
 8006dae:	ab2c      	add	r3, sp, #176	; 0xb0
 8006db0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006db4:	930a      	str	r3, [sp, #40]	; 0x28
 8006db6:	f7ff bbc5 	b.w	8006544 <_vfprintf_r+0x2ac>
 8006dba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006dbc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8006dc0:	0933      	lsrs	r3, r6, #4
 8006dc2:	f006 010f 	and.w	r1, r6, #15
 8006dc6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006dca:	093a      	lsrs	r2, r7, #4
 8006dcc:	461e      	mov	r6, r3
 8006dce:	4617      	mov	r7, r2
 8006dd0:	5c43      	ldrb	r3, [r0, r1]
 8006dd2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006dd6:	ea56 0307 	orrs.w	r3, r6, r7
 8006dda:	d1f1      	bne.n	8006dc0 <_vfprintf_r+0xb28>
 8006ddc:	465a      	mov	r2, fp
 8006dde:	ab2c      	add	r3, sp, #176	; 0xb0
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006de6:	9307      	str	r3, [sp, #28]
 8006de8:	f7ff bbac 	b.w	8006544 <_vfprintf_r+0x2ac>
 8006dec:	2302      	movs	r3, #2
 8006dee:	f7ff bb77 	b.w	80064e0 <_vfprintf_r+0x248>
 8006df2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006df4:	2d00      	cmp	r5, #0
 8006df6:	f340 8257 	ble.w	80072a8 <_vfprintf_r+0x1010>
 8006dfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dfe:	428a      	cmp	r2, r1
 8006e00:	4613      	mov	r3, r2
 8006e02:	bfa8      	it	ge
 8006e04:	460b      	movge	r3, r1
 8006e06:	461d      	mov	r5, r3
 8006e08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e0a:	2d00      	cmp	r5, #0
 8006e0c:	eb01 0a02 	add.w	sl, r1, r2
 8006e10:	dd0b      	ble.n	8006e2a <_vfprintf_r+0xb92>
 8006e12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006e14:	6021      	str	r1, [r4, #0]
 8006e16:	3301      	adds	r3, #1
 8006e18:	44ab      	add	fp, r5
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006e20:	6065      	str	r5, [r4, #4]
 8006e22:	9320      	str	r3, [sp, #128]	; 0x80
 8006e24:	f300 8309 	bgt.w	800743a <_vfprintf_r+0x11a2>
 8006e28:	3408      	adds	r4, #8
 8006e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e2c:	2d00      	cmp	r5, #0
 8006e2e:	bfa8      	it	ge
 8006e30:	1b5b      	subge	r3, r3, r5
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	461d      	mov	r5, r3
 8006e36:	f340 80b0 	ble.w	8006f9a <_vfprintf_r+0xd02>
 8006e3a:	2d10      	cmp	r5, #16
 8006e3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006e3e:	4f04      	ldr	r7, [pc, #16]	; (8006e50 <_vfprintf_r+0xbb8>)
 8006e40:	f340 821a 	ble.w	8007278 <_vfprintf_r+0xfe0>
 8006e44:	2610      	movs	r6, #16
 8006e46:	465a      	mov	r2, fp
 8006e48:	e009      	b.n	8006e5e <_vfprintf_r+0xbc6>
 8006e4a:	bf00      	nop
 8006e4c:	08019e70 	.word	0x08019e70
 8006e50:	08019e20 	.word	0x08019e20
 8006e54:	3408      	adds	r4, #8
 8006e56:	3d10      	subs	r5, #16
 8006e58:	2d10      	cmp	r5, #16
 8006e5a:	f340 820c 	ble.w	8007276 <_vfprintf_r+0xfde>
 8006e5e:	3301      	adds	r3, #1
 8006e60:	3210      	adds	r2, #16
 8006e62:	2b07      	cmp	r3, #7
 8006e64:	9221      	str	r2, [sp, #132]	; 0x84
 8006e66:	9320      	str	r3, [sp, #128]	; 0x80
 8006e68:	6027      	str	r7, [r4, #0]
 8006e6a:	6066      	str	r6, [r4, #4]
 8006e6c:	ddf2      	ble.n	8006e54 <_vfprintf_r+0xbbc>
 8006e6e:	4640      	mov	r0, r8
 8006e70:	4649      	mov	r1, r9
 8006e72:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e74:	f003 faba 	bl	800a3ec <__sprint_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f47f ab0d 	bne.w	8006498 <_vfprintf_r+0x200>
 8006e7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006e82:	ac2c      	add	r4, sp, #176	; 0xb0
 8006e84:	e7e7      	b.n	8006e56 <_vfprintf_r+0xbbe>
 8006e86:	4640      	mov	r0, r8
 8006e88:	4649      	mov	r1, r9
 8006e8a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e8c:	f003 faae 	bl	800a3ec <__sprint_r>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	f47f ab01 	bne.w	8006498 <_vfprintf_r+0x200>
 8006e96:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8006e9a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006e9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ea0:	f7ff bbaa 	b.w	80065f8 <_vfprintf_r+0x360>
 8006ea4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006ea8:	f1ba 0f00 	cmp.w	sl, #0
 8006eac:	f77f af26 	ble.w	8006cfc <_vfprintf_r+0xa64>
 8006eb0:	f1ba 0f10 	cmp.w	sl, #16
 8006eb4:	4f8f      	ldr	r7, [pc, #572]	; (80070f4 <_vfprintf_r+0xe5c>)
 8006eb6:	bfc8      	it	gt
 8006eb8:	f04f 0b10 	movgt.w	fp, #16
 8006ebc:	dc07      	bgt.n	8006ece <_vfprintf_r+0xc36>
 8006ebe:	e0ea      	b.n	8007096 <_vfprintf_r+0xdfe>
 8006ec0:	3408      	adds	r4, #8
 8006ec2:	f1aa 0a10 	sub.w	sl, sl, #16
 8006ec6:	f1ba 0f10 	cmp.w	sl, #16
 8006eca:	f340 80e4 	ble.w	8007096 <_vfprintf_r+0xdfe>
 8006ece:	3501      	adds	r5, #1
 8006ed0:	3610      	adds	r6, #16
 8006ed2:	2d07      	cmp	r5, #7
 8006ed4:	9621      	str	r6, [sp, #132]	; 0x84
 8006ed6:	9520      	str	r5, [sp, #128]	; 0x80
 8006ed8:	e884 0880 	stmia.w	r4, {r7, fp}
 8006edc:	ddf0      	ble.n	8006ec0 <_vfprintf_r+0xc28>
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ee4:	f003 fa82 	bl	800a3ec <__sprint_r>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	f47f aad5 	bne.w	8006498 <_vfprintf_r+0x200>
 8006eee:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006ef0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006ef2:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ef4:	e7e5      	b.n	8006ec2 <_vfprintf_r+0xc2a>
 8006ef6:	9908      	ldr	r1, [sp, #32]
 8006ef8:	460a      	mov	r2, r1
 8006efa:	3204      	adds	r2, #4
 8006efc:	680e      	ldr	r6, [r1, #0]
 8006efe:	9208      	str	r2, [sp, #32]
 8006f00:	2700      	movs	r7, #0
 8006f02:	f7ff baed 	b.w	80064e0 <_vfprintf_r+0x248>
 8006f06:	9a08      	ldr	r2, [sp, #32]
 8006f08:	6816      	ldr	r6, [r2, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	17f7      	asrs	r7, r6, #31
 8006f10:	9308      	str	r3, [sp, #32]
 8006f12:	4632      	mov	r2, r6
 8006f14:	463b      	mov	r3, r7
 8006f16:	e4c0      	b.n	800689a <_vfprintf_r+0x602>
 8006f18:	4693      	mov	fp, r2
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	44ab      	add	fp, r5
 8006f1e:	2b07      	cmp	r3, #7
 8006f20:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006f24:	9320      	str	r3, [sp, #128]	; 0x80
 8006f26:	6027      	str	r7, [r4, #0]
 8006f28:	6065      	str	r5, [r4, #4]
 8006f2a:	f77f abd7 	ble.w	80066dc <_vfprintf_r+0x444>
 8006f2e:	e6f2      	b.n	8006d16 <_vfprintf_r+0xa7e>
 8006f30:	2b30      	cmp	r3, #48	; 0x30
 8006f32:	f000 823e 	beq.w	80073b2 <_vfprintf_r+0x111a>
 8006f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	a82c      	add	r0, sp, #176	; 0xb0
 8006f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f40:	1a82      	subs	r2, r0, r2
 8006f42:	2330      	movs	r3, #48	; 0x30
 8006f44:	9207      	str	r2, [sp, #28]
 8006f46:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006f4a:	f7ff bafb 	b.w	8006544 <_vfprintf_r+0x2ac>
 8006f4e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8006f52:	f8cd c00c 	str.w	ip, [sp, #12]
 8006f56:	4630      	mov	r0, r6
 8006f58:	4639      	mov	r1, r7
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f7f9 fecf 	bl	8000d00 <__aeabi_uldivmod>
 8006f62:	3230      	adds	r2, #48	; 0x30
 8006f64:	4630      	mov	r0, r6
 8006f66:	4639      	mov	r1, r7
 8006f68:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	220a      	movs	r2, #10
 8006f70:	f7f9 fec6 	bl	8000d00 <__aeabi_uldivmod>
 8006f74:	4606      	mov	r6, r0
 8006f76:	460f      	mov	r7, r1
 8006f78:	ea56 0307 	orrs.w	r3, r6, r7
 8006f7c:	d1eb      	bne.n	8006f56 <_vfprintf_r+0xcbe>
 8006f7e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006f82:	e72b      	b.n	8006ddc <_vfprintf_r+0xb44>
 8006f84:	4640      	mov	r0, r8
 8006f86:	4649      	mov	r1, r9
 8006f88:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f8a:	f003 fa2f 	bl	800a3ec <__sprint_r>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f47f aa82 	bne.w	8006498 <_vfprintf_r+0x200>
 8006f94:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006f98:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fa0:	440a      	add	r2, r1
 8006fa2:	4616      	mov	r6, r2
 8006fa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	db3e      	blt.n	8007028 <_vfprintf_r+0xd90>
 8006faa:	9a02      	ldr	r2, [sp, #8]
 8006fac:	07d5      	lsls	r5, r2, #31
 8006fae:	d43b      	bmi.n	8007028 <_vfprintf_r+0xd90>
 8006fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fb2:	ebc6 050a 	rsb	r5, r6, sl
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	429d      	cmp	r5, r3
 8006fba:	bfa8      	it	ge
 8006fbc:	461d      	movge	r5, r3
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	462f      	mov	r7, r5
 8006fc2:	dd0b      	ble.n	8006fdc <_vfprintf_r+0xd44>
 8006fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006fc6:	6026      	str	r6, [r4, #0]
 8006fc8:	3201      	adds	r2, #1
 8006fca:	44ab      	add	fp, r5
 8006fcc:	2a07      	cmp	r2, #7
 8006fce:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006fd2:	6065      	str	r5, [r4, #4]
 8006fd4:	9220      	str	r2, [sp, #128]	; 0x80
 8006fd6:	f300 8266 	bgt.w	80074a6 <_vfprintf_r+0x120e>
 8006fda:	3408      	adds	r4, #8
 8006fdc:	2f00      	cmp	r7, #0
 8006fde:	bfac      	ite	ge
 8006fe0:	1bdd      	subge	r5, r3, r7
 8006fe2:	461d      	movlt	r5, r3
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	f77f ab7a 	ble.w	80066de <_vfprintf_r+0x446>
 8006fea:	2d10      	cmp	r5, #16
 8006fec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006fee:	4f41      	ldr	r7, [pc, #260]	; (80070f4 <_vfprintf_r+0xe5c>)
 8006ff0:	dd93      	ble.n	8006f1a <_vfprintf_r+0xc82>
 8006ff2:	2610      	movs	r6, #16
 8006ff4:	465a      	mov	r2, fp
 8006ff6:	e003      	b.n	8007000 <_vfprintf_r+0xd68>
 8006ff8:	3408      	adds	r4, #8
 8006ffa:	3d10      	subs	r5, #16
 8006ffc:	2d10      	cmp	r5, #16
 8006ffe:	dd8b      	ble.n	8006f18 <_vfprintf_r+0xc80>
 8007000:	3301      	adds	r3, #1
 8007002:	3210      	adds	r2, #16
 8007004:	2b07      	cmp	r3, #7
 8007006:	9221      	str	r2, [sp, #132]	; 0x84
 8007008:	9320      	str	r3, [sp, #128]	; 0x80
 800700a:	6027      	str	r7, [r4, #0]
 800700c:	6066      	str	r6, [r4, #4]
 800700e:	ddf3      	ble.n	8006ff8 <_vfprintf_r+0xd60>
 8007010:	4640      	mov	r0, r8
 8007012:	4649      	mov	r1, r9
 8007014:	aa1f      	add	r2, sp, #124	; 0x7c
 8007016:	f003 f9e9 	bl	800a3ec <__sprint_r>
 800701a:	2800      	cmp	r0, #0
 800701c:	f47f aa3c 	bne.w	8006498 <_vfprintf_r+0x200>
 8007020:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007022:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007024:	ac2c      	add	r4, sp, #176	; 0xb0
 8007026:	e7e8      	b.n	8006ffa <_vfprintf_r+0xd62>
 8007028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800702a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800702c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800702e:	6021      	str	r1, [r4, #0]
 8007030:	3201      	adds	r2, #1
 8007032:	4483      	add	fp, r0
 8007034:	2a07      	cmp	r2, #7
 8007036:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800703a:	6060      	str	r0, [r4, #4]
 800703c:	9220      	str	r2, [sp, #128]	; 0x80
 800703e:	f300 8208 	bgt.w	8007452 <_vfprintf_r+0x11ba>
 8007042:	3408      	adds	r4, #8
 8007044:	e7b4      	b.n	8006fb0 <_vfprintf_r+0xd18>
 8007046:	9b02      	ldr	r3, [sp, #8]
 8007048:	07d8      	lsls	r0, r3, #31
 800704a:	f53f ae27 	bmi.w	8006c9c <_vfprintf_r+0xa04>
 800704e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	3501      	adds	r5, #1
 8007054:	f10b 0601 	add.w	r6, fp, #1
 8007058:	2301      	movs	r3, #1
 800705a:	2d07      	cmp	r5, #7
 800705c:	9621      	str	r6, [sp, #132]	; 0x84
 800705e:	9520      	str	r5, [sp, #128]	; 0x80
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	f77f ae4a 	ble.w	8006cfa <_vfprintf_r+0xa62>
 8007066:	4640      	mov	r0, r8
 8007068:	4649      	mov	r1, r9
 800706a:	aa1f      	add	r2, sp, #124	; 0x7c
 800706c:	f003 f9be 	bl	800a3ec <__sprint_r>
 8007070:	2800      	cmp	r0, #0
 8007072:	f47f aa11 	bne.w	8006498 <_vfprintf_r+0x200>
 8007076:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8007078:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800707a:	ac2c      	add	r4, sp, #176	; 0xb0
 800707c:	e63e      	b.n	8006cfc <_vfprintf_r+0xa64>
 800707e:	4640      	mov	r0, r8
 8007080:	4649      	mov	r1, r9
 8007082:	aa1f      	add	r2, sp, #124	; 0x7c
 8007084:	f003 f9b2 	bl	800a3ec <__sprint_r>
 8007088:	2800      	cmp	r0, #0
 800708a:	f47f aa05 	bne.w	8006498 <_vfprintf_r+0x200>
 800708e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8007090:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007092:	ac2c      	add	r4, sp, #176	; 0xb0
 8007094:	e60f      	b.n	8006cb6 <_vfprintf_r+0xa1e>
 8007096:	3501      	adds	r5, #1
 8007098:	4456      	add	r6, sl
 800709a:	2d07      	cmp	r5, #7
 800709c:	9621      	str	r6, [sp, #132]	; 0x84
 800709e:	9520      	str	r5, [sp, #128]	; 0x80
 80070a0:	e884 0480 	stmia.w	r4, {r7, sl}
 80070a4:	f77f ae29 	ble.w	8006cfa <_vfprintf_r+0xa62>
 80070a8:	e7dd      	b.n	8007066 <_vfprintf_r+0xdce>
 80070aa:	4640      	mov	r0, r8
 80070ac:	4649      	mov	r1, r9
 80070ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80070b0:	f003 f99c 	bl	800a3ec <__sprint_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f47f a9ef 	bne.w	8006498 <_vfprintf_r+0x200>
 80070ba:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80070bc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80070be:	ac2c      	add	r4, sp, #176	; 0xb0
 80070c0:	e605      	b.n	8006cce <_vfprintf_r+0xa36>
 80070c2:	4640      	mov	r0, r8
 80070c4:	4649      	mov	r1, r9
 80070c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80070c8:	f003 f990 	bl	800a3ec <__sprint_r>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	f47f a9e3 	bne.w	8006498 <_vfprintf_r+0x200>
 80070d2:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80070d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80070d8:	f7ff bab5 	b.w	8006646 <_vfprintf_r+0x3ae>
 80070dc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80070e0:	4276      	negs	r6, r6
 80070e2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80070e6:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80070ea:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80070ee:	2301      	movs	r3, #1
 80070f0:	f7ff b9fc 	b.w	80064ec <_vfprintf_r+0x254>
 80070f4:	08019e20 	.word	0x08019e20
 80070f8:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80070fc:	f003 f8ca 	bl	800a294 <__fpclassifyd>
 8007100:	2800      	cmp	r0, #0
 8007102:	f000 8116 	beq.w	8007332 <_vfprintf_r+0x109a>
 8007106:	f025 0320 	bic.w	r3, r5, #32
 800710a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	f000 8260 	beq.w	80075d4 <_vfprintf_r+0x133c>
 8007114:	2b47      	cmp	r3, #71	; 0x47
 8007116:	d105      	bne.n	8007124 <_vfprintf_r+0xe8c>
 8007118:	f1ba 0f00 	cmp.w	sl, #0
 800711c:	bf14      	ite	ne
 800711e:	46d3      	movne	fp, sl
 8007120:	f04f 0b01 	moveq.w	fp, #1
 8007124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007126:	9a02      	ldr	r2, [sp, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800712e:	9209      	str	r2, [sp, #36]	; 0x24
 8007130:	f2c0 8260 	blt.w	80075f4 <_vfprintf_r+0x135c>
 8007134:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8007138:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800713c:	f04f 0a00 	mov.w	sl, #0
 8007140:	2d66      	cmp	r5, #102	; 0x66
 8007142:	f000 815e 	beq.w	8007402 <_vfprintf_r+0x116a>
 8007146:	2d46      	cmp	r5, #70	; 0x46
 8007148:	f000 815b 	beq.w	8007402 <_vfprintf_r+0x116a>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	2b45      	cmp	r3, #69	; 0x45
 8007150:	bf0c      	ite	eq
 8007152:	f10b 0701 	addeq.w	r7, fp, #1
 8007156:	465f      	movne	r7, fp
 8007158:	aa1a      	add	r2, sp, #104	; 0x68
 800715a:	ab1d      	add	r3, sp, #116	; 0x74
 800715c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007160:	4640      	mov	r0, r8
 8007162:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007166:	2102      	movs	r1, #2
 8007168:	463a      	mov	r2, r7
 800716a:	ab19      	add	r3, sp, #100	; 0x64
 800716c:	f000 fc38 	bl	80079e0 <_dtoa_r>
 8007170:	2d67      	cmp	r5, #103	; 0x67
 8007172:	900a      	str	r0, [sp, #40]	; 0x28
 8007174:	d002      	beq.n	800717c <_vfprintf_r+0xee4>
 8007176:	2d47      	cmp	r5, #71	; 0x47
 8007178:	f040 8151 	bne.w	800741e <_vfprintf_r+0x1186>
 800717c:	9b02      	ldr	r3, [sp, #8]
 800717e:	07db      	lsls	r3, r3, #31
 8007180:	f140 8241 	bpl.w	8007606 <_vfprintf_r+0x136e>
 8007184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007186:	19de      	adds	r6, r3, r7
 8007188:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800718c:	2200      	movs	r2, #0
 800718e:	2300      	movs	r3, #0
 8007190:	f7f9 fd5c 	bl	8000c4c <__aeabi_dcmpeq>
 8007194:	2800      	cmp	r0, #0
 8007196:	f040 81ad 	bne.w	80074f4 <_vfprintf_r+0x125c>
 800719a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800719c:	429e      	cmp	r6, r3
 800719e:	d906      	bls.n	80071ae <_vfprintf_r+0xf16>
 80071a0:	2130      	movs	r1, #48	; 0x30
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	921d      	str	r2, [sp, #116]	; 0x74
 80071a6:	7019      	strb	r1, [r3, #0]
 80071a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071aa:	429e      	cmp	r6, r3
 80071ac:	d8f9      	bhi.n	80071a2 <_vfprintf_r+0xf0a>
 80071ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	930d      	str	r3, [sp, #52]	; 0x34
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	2b47      	cmp	r3, #71	; 0x47
 80071b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071ba:	f000 8183 	beq.w	80074c4 <_vfprintf_r+0x122c>
 80071be:	2d65      	cmp	r5, #101	; 0x65
 80071c0:	f340 81a6 	ble.w	8007510 <_vfprintf_r+0x1278>
 80071c4:	2d66      	cmp	r5, #102	; 0x66
 80071c6:	930c      	str	r3, [sp, #48]	; 0x30
 80071c8:	f000 821f 	beq.w	800760a <_vfprintf_r+0x1372>
 80071cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071d0:	4293      	cmp	r3, r2
 80071d2:	f300 8202 	bgt.w	80075da <_vfprintf_r+0x1342>
 80071d6:	9b02      	ldr	r3, [sp, #8]
 80071d8:	07d9      	lsls	r1, r3, #31
 80071da:	f100 8239 	bmi.w	8007650 <_vfprintf_r+0x13b8>
 80071de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071e2:	9207      	str	r2, [sp, #28]
 80071e4:	f1ba 0f00 	cmp.w	sl, #0
 80071e8:	f040 8179 	bne.w	80074de <_vfprintf_r+0x1246>
 80071ec:	9303      	str	r3, [sp, #12]
 80071ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f0:	9302      	str	r3, [sp, #8]
 80071f2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80071f6:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80071fa:	f7ff b9ab 	b.w	8006554 <_vfprintf_r+0x2bc>
 80071fe:	f027 0707 	bic.w	r7, r7, #7
 8007202:	ed97 7b00 	vldr	d7, [r7]
 8007206:	f107 0308 	add.w	r3, r7, #8
 800720a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800720e:	9308      	str	r3, [sp, #32]
 8007210:	f7ff bb63 	b.w	80068da <_vfprintf_r+0x642>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	06db      	lsls	r3, r3, #27
 8007218:	d40b      	bmi.n	8007232 <_vfprintf_r+0xf9a>
 800721a:	9b02      	ldr	r3, [sp, #8]
 800721c:	065f      	lsls	r7, r3, #25
 800721e:	d508      	bpl.n	8007232 <_vfprintf_r+0xf9a>
 8007220:	9a08      	ldr	r2, [sp, #32]
 8007222:	6813      	ldr	r3, [r2, #0]
 8007224:	3204      	adds	r2, #4
 8007226:	9208      	str	r2, [sp, #32]
 8007228:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	f7ff b874 	b.w	800631a <_vfprintf_r+0x82>
 8007232:	9a08      	ldr	r2, [sp, #32]
 8007234:	6813      	ldr	r3, [r2, #0]
 8007236:	3204      	adds	r2, #4
 8007238:	9208      	str	r2, [sp, #32]
 800723a:	9a05      	ldr	r2, [sp, #20]
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	f7ff b86c 	b.w	800631a <_vfprintf_r+0x82>
 8007242:	9b02      	ldr	r3, [sp, #8]
 8007244:	9a08      	ldr	r2, [sp, #32]
 8007246:	f013 0f40 	tst.w	r3, #64	; 0x40
 800724a:	4613      	mov	r3, r2
 800724c:	f43f ac62 	beq.w	8006b14 <_vfprintf_r+0x87c>
 8007250:	8816      	ldrh	r6, [r2, #0]
 8007252:	3204      	adds	r2, #4
 8007254:	2700      	movs	r7, #0
 8007256:	2301      	movs	r3, #1
 8007258:	9208      	str	r2, [sp, #32]
 800725a:	f7ff b941 	b.w	80064e0 <_vfprintf_r+0x248>
 800725e:	9b02      	ldr	r3, [sp, #8]
 8007260:	9a08      	ldr	r2, [sp, #32]
 8007262:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007266:	4613      	mov	r3, r2
 8007268:	d076      	beq.n	8007358 <_vfprintf_r+0x10c0>
 800726a:	3304      	adds	r3, #4
 800726c:	8816      	ldrh	r6, [r2, #0]
 800726e:	9308      	str	r3, [sp, #32]
 8007270:	2700      	movs	r7, #0
 8007272:	f7ff bad3 	b.w	800681c <_vfprintf_r+0x584>
 8007276:	4693      	mov	fp, r2
 8007278:	3301      	adds	r3, #1
 800727a:	44ab      	add	fp, r5
 800727c:	2b07      	cmp	r3, #7
 800727e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8007282:	9320      	str	r3, [sp, #128]	; 0x80
 8007284:	6027      	str	r7, [r4, #0]
 8007286:	6065      	str	r5, [r4, #4]
 8007288:	f73f ae7c 	bgt.w	8006f84 <_vfprintf_r+0xcec>
 800728c:	3408      	adds	r4, #8
 800728e:	e684      	b.n	8006f9a <_vfprintf_r+0xd02>
 8007290:	4640      	mov	r0, r8
 8007292:	4649      	mov	r1, r9
 8007294:	aa1f      	add	r2, sp, #124	; 0x7c
 8007296:	f003 f8a9 	bl	800a3ec <__sprint_r>
 800729a:	2800      	cmp	r0, #0
 800729c:	f47f a8fc 	bne.w	8006498 <_vfprintf_r+0x200>
 80072a0:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80072a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80072a6:	e482      	b.n	8006bae <_vfprintf_r+0x916>
 80072a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072aa:	4ab0      	ldr	r2, [pc, #704]	; (800756c <_vfprintf_r+0x12d4>)
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	f10b 0b01 	add.w	fp, fp, #1
 80072b4:	2201      	movs	r2, #1
 80072b6:	2b07      	cmp	r3, #7
 80072b8:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80072bc:	9320      	str	r3, [sp, #128]	; 0x80
 80072be:	6062      	str	r2, [r4, #4]
 80072c0:	dc50      	bgt.n	8007364 <_vfprintf_r+0x10cc>
 80072c2:	3408      	adds	r4, #8
 80072c4:	b92d      	cbnz	r5, 80072d2 <_vfprintf_r+0x103a>
 80072c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072c8:	b91b      	cbnz	r3, 80072d2 <_vfprintf_r+0x103a>
 80072ca:	9b02      	ldr	r3, [sp, #8]
 80072cc:	07de      	lsls	r6, r3, #31
 80072ce:	f57f aa06 	bpl.w	80066de <_vfprintf_r+0x446>
 80072d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80072d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072d8:	6022      	str	r2, [r4, #0]
 80072da:	3301      	adds	r3, #1
 80072dc:	eb0b 0201 	add.w	r2, fp, r1
 80072e0:	2b07      	cmp	r3, #7
 80072e2:	9221      	str	r2, [sp, #132]	; 0x84
 80072e4:	6061      	str	r1, [r4, #4]
 80072e6:	9320      	str	r3, [sp, #128]	; 0x80
 80072e8:	f300 8167 	bgt.w	80075ba <_vfprintf_r+0x1322>
 80072ec:	3408      	adds	r4, #8
 80072ee:	426d      	negs	r5, r5
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	dd6f      	ble.n	80073d4 <_vfprintf_r+0x113c>
 80072f4:	2d10      	cmp	r5, #16
 80072f6:	4f9e      	ldr	r7, [pc, #632]	; (8007570 <_vfprintf_r+0x12d8>)
 80072f8:	bfc8      	it	gt
 80072fa:	2610      	movgt	r6, #16
 80072fc:	dc05      	bgt.n	800730a <_vfprintf_r+0x1072>
 80072fe:	e0b5      	b.n	800746c <_vfprintf_r+0x11d4>
 8007300:	3408      	adds	r4, #8
 8007302:	3d10      	subs	r5, #16
 8007304:	2d10      	cmp	r5, #16
 8007306:	f340 80b1 	ble.w	800746c <_vfprintf_r+0x11d4>
 800730a:	3301      	adds	r3, #1
 800730c:	3210      	adds	r2, #16
 800730e:	2b07      	cmp	r3, #7
 8007310:	9221      	str	r2, [sp, #132]	; 0x84
 8007312:	9320      	str	r3, [sp, #128]	; 0x80
 8007314:	6027      	str	r7, [r4, #0]
 8007316:	6066      	str	r6, [r4, #4]
 8007318:	ddf2      	ble.n	8007300 <_vfprintf_r+0x1068>
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007320:	f003 f864 	bl	800a3ec <__sprint_r>
 8007324:	2800      	cmp	r0, #0
 8007326:	f47f a8b7 	bne.w	8006498 <_vfprintf_r+0x200>
 800732a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800732c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800732e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007330:	e7e7      	b.n	8007302 <_vfprintf_r+0x106a>
 8007332:	9e02      	ldr	r6, [sp, #8]
 8007334:	4a8f      	ldr	r2, [pc, #572]	; (8007574 <_vfprintf_r+0x12dc>)
 8007336:	4b90      	ldr	r3, [pc, #576]	; (8007578 <_vfprintf_r+0x12e0>)
 8007338:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 800733c:	900b      	str	r0, [sp, #44]	; 0x2c
 800733e:	2103      	movs	r1, #3
 8007340:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8007344:	2d47      	cmp	r5, #71	; 0x47
 8007346:	bfd8      	it	le
 8007348:	461a      	movle	r2, r3
 800734a:	9103      	str	r1, [sp, #12]
 800734c:	9602      	str	r6, [sp, #8]
 800734e:	900c      	str	r0, [sp, #48]	; 0x30
 8007350:	920a      	str	r2, [sp, #40]	; 0x28
 8007352:	9107      	str	r1, [sp, #28]
 8007354:	f7ff b8fe 	b.w	8006554 <_vfprintf_r+0x2bc>
 8007358:	3304      	adds	r3, #4
 800735a:	6816      	ldr	r6, [r2, #0]
 800735c:	9308      	str	r3, [sp, #32]
 800735e:	2700      	movs	r7, #0
 8007360:	f7ff ba5c 	b.w	800681c <_vfprintf_r+0x584>
 8007364:	4640      	mov	r0, r8
 8007366:	4649      	mov	r1, r9
 8007368:	aa1f      	add	r2, sp, #124	; 0x7c
 800736a:	f003 f83f 	bl	800a3ec <__sprint_r>
 800736e:	2800      	cmp	r0, #0
 8007370:	f47f a892 	bne.w	8006498 <_vfprintf_r+0x200>
 8007374:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007376:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800737a:	ac2c      	add	r4, sp, #176	; 0xb0
 800737c:	e7a2      	b.n	80072c4 <_vfprintf_r+0x102c>
 800737e:	f041 0120 	orr.w	r1, r1, #32
 8007382:	9102      	str	r1, [sp, #8]
 8007384:	785d      	ldrb	r5, [r3, #1]
 8007386:	1c59      	adds	r1, r3, #1
 8007388:	f7fe bff7 	b.w	800637a <_vfprintf_r+0xe2>
 800738c:	9806      	ldr	r0, [sp, #24]
 800738e:	9108      	str	r1, [sp, #32]
 8007390:	4240      	negs	r0, r0
 8007392:	9006      	str	r0, [sp, #24]
 8007394:	4619      	mov	r1, r3
 8007396:	f7ff b9f1 	b.w	800677c <_vfprintf_r+0x4e4>
 800739a:	4640      	mov	r0, r8
 800739c:	4649      	mov	r1, r9
 800739e:	aa1f      	add	r2, sp, #124	; 0x7c
 80073a0:	f003 f824 	bl	800a3ec <__sprint_r>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f47f a877 	bne.w	8006498 <_vfprintf_r+0x200>
 80073aa:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80073ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80073b0:	e413      	b.n	8006bda <_vfprintf_r+0x942>
 80073b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073b4:	ab2c      	add	r3, sp, #176	; 0xb0
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	9307      	str	r3, [sp, #28]
 80073ba:	f7ff b8c3 	b.w	8006544 <_vfprintf_r+0x2ac>
 80073be:	4640      	mov	r0, r8
 80073c0:	4649      	mov	r1, r9
 80073c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80073c4:	f003 f812 	bl	800a3ec <__sprint_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	f47f a865 	bne.w	8006498 <_vfprintf_r+0x200>
 80073ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80073d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073d6:	6060      	str	r0, [r4, #4]
 80073d8:	3301      	adds	r3, #1
 80073da:	eb02 0b00 	add.w	fp, r2, r0
 80073de:	2b07      	cmp	r3, #7
 80073e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e2:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80073e6:	9320      	str	r3, [sp, #128]	; 0x80
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	f77f a977 	ble.w	80066dc <_vfprintf_r+0x444>
 80073ee:	e492      	b.n	8006d16 <_vfprintf_r+0xa7e>
 80073f0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80073f4:	f7fe fe46 	bl	8006084 <strlen>
 80073f8:	9708      	str	r7, [sp, #32]
 80073fa:	9007      	str	r0, [sp, #28]
 80073fc:	4603      	mov	r3, r0
 80073fe:	f7ff b9f2 	b.w	80067e6 <_vfprintf_r+0x54e>
 8007402:	aa1a      	add	r2, sp, #104	; 0x68
 8007404:	ab1d      	add	r3, sp, #116	; 0x74
 8007406:	e88d 000c 	stmia.w	sp, {r2, r3}
 800740a:	4640      	mov	r0, r8
 800740c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007410:	2103      	movs	r1, #3
 8007412:	465a      	mov	r2, fp
 8007414:	ab19      	add	r3, sp, #100	; 0x64
 8007416:	f000 fae3 	bl	80079e0 <_dtoa_r>
 800741a:	465f      	mov	r7, fp
 800741c:	900a      	str	r0, [sp, #40]	; 0x28
 800741e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007420:	19de      	adds	r6, r3, r7
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	2b46      	cmp	r3, #70	; 0x46
 8007426:	f47f aeaf 	bne.w	8007188 <_vfprintf_r+0xef0>
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b30      	cmp	r3, #48	; 0x30
 8007430:	f000 8100 	beq.w	8007634 <_vfprintf_r+0x139c>
 8007434:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007436:	443e      	add	r6, r7
 8007438:	e6a6      	b.n	8007188 <_vfprintf_r+0xef0>
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007440:	f002 ffd4 	bl	800a3ec <__sprint_r>
 8007444:	2800      	cmp	r0, #0
 8007446:	f47f a827 	bne.w	8006498 <_vfprintf_r+0x200>
 800744a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800744e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007450:	e4eb      	b.n	8006e2a <_vfprintf_r+0xb92>
 8007452:	4640      	mov	r0, r8
 8007454:	4649      	mov	r1, r9
 8007456:	aa1f      	add	r2, sp, #124	; 0x7c
 8007458:	f002 ffc8 	bl	800a3ec <__sprint_r>
 800745c:	2800      	cmp	r0, #0
 800745e:	f47f a81b 	bne.w	8006498 <_vfprintf_r+0x200>
 8007462:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007464:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8007468:	ac2c      	add	r4, sp, #176	; 0xb0
 800746a:	e5a1      	b.n	8006fb0 <_vfprintf_r+0xd18>
 800746c:	3301      	adds	r3, #1
 800746e:	442a      	add	r2, r5
 8007470:	2b07      	cmp	r3, #7
 8007472:	9221      	str	r2, [sp, #132]	; 0x84
 8007474:	9320      	str	r3, [sp, #128]	; 0x80
 8007476:	6027      	str	r7, [r4, #0]
 8007478:	6065      	str	r5, [r4, #4]
 800747a:	dca0      	bgt.n	80073be <_vfprintf_r+0x1126>
 800747c:	3408      	adds	r4, #8
 800747e:	e7a9      	b.n	80073d4 <_vfprintf_r+0x113c>
 8007480:	2e06      	cmp	r6, #6
 8007482:	4633      	mov	r3, r6
 8007484:	bf28      	it	cs
 8007486:	2306      	movcs	r3, #6
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800748e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8007492:	9303      	str	r3, [sp, #12]
 8007494:	4b39      	ldr	r3, [pc, #228]	; (800757c <_vfprintf_r+0x12e4>)
 8007496:	9708      	str	r7, [sp, #32]
 8007498:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800749c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80074a0:	930a      	str	r3, [sp, #40]	; 0x28
 80074a2:	f7ff b857 	b.w	8006554 <_vfprintf_r+0x2bc>
 80074a6:	4640      	mov	r0, r8
 80074a8:	4649      	mov	r1, r9
 80074aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80074ac:	f002 ff9e 	bl	800a3ec <__sprint_r>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f47e aff1 	bne.w	8006498 <_vfprintf_r+0x200>
 80074b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074ba:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	ac2c      	add	r4, sp, #176	; 0xb0
 80074c2:	e58b      	b.n	8006fdc <_vfprintf_r+0xd44>
 80074c4:	1cdf      	adds	r7, r3, #3
 80074c6:	db22      	blt.n	800750e <_vfprintf_r+0x1276>
 80074c8:	459b      	cmp	fp, r3
 80074ca:	db20      	blt.n	800750e <_vfprintf_r+0x1276>
 80074cc:	930c      	str	r3, [sp, #48]	; 0x30
 80074ce:	2567      	movs	r5, #103	; 0x67
 80074d0:	e67c      	b.n	80071cc <_vfprintf_r+0xf34>
 80074d2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80074d6:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80074da:	f7ff ba10 	b.w	80068fe <_vfprintf_r+0x666>
 80074de:	9303      	str	r3, [sp, #12]
 80074e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e2:	9302      	str	r3, [sp, #8]
 80074e4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80074e8:	2300      	movs	r3, #0
 80074ea:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80074ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80074f0:	f7ff b833 	b.w	800655a <_vfprintf_r+0x2c2>
 80074f4:	4633      	mov	r3, r6
 80074f6:	e65a      	b.n	80071ae <_vfprintf_r+0xf16>
 80074f8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80074fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80074fe:	9708      	str	r7, [sp, #32]
 8007500:	900c      	str	r0, [sp, #48]	; 0x30
 8007502:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8007506:	9303      	str	r3, [sp, #12]
 8007508:	9607      	str	r6, [sp, #28]
 800750a:	f7ff b823 	b.w	8006554 <_vfprintf_r+0x2bc>
 800750e:	3d02      	subs	r5, #2
 8007510:	3b01      	subs	r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	9319      	str	r3, [sp, #100]	; 0x64
 8007516:	bfba      	itte	lt
 8007518:	425b      	neglt	r3, r3
 800751a:	222d      	movlt	r2, #45	; 0x2d
 800751c:	222b      	movge	r2, #43	; 0x2b
 800751e:	2b09      	cmp	r3, #9
 8007520:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 8007524:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8007528:	f340 8098 	ble.w	800765c <_vfprintf_r+0x13c4>
 800752c:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 8007530:	4630      	mov	r0, r6
 8007532:	4a13      	ldr	r2, [pc, #76]	; (8007580 <_vfprintf_r+0x12e8>)
 8007534:	fb82 2103 	smull	r2, r1, r2, r3
 8007538:	17da      	asrs	r2, r3, #31
 800753a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800753e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007542:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007546:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800754a:	2a09      	cmp	r2, #9
 800754c:	4613      	mov	r3, r2
 800754e:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8007552:	dcee      	bgt.n	8007532 <_vfprintf_r+0x129a>
 8007554:	4602      	mov	r2, r0
 8007556:	3330      	adds	r3, #48	; 0x30
 8007558:	b2d9      	uxtb	r1, r3
 800755a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800755e:	4296      	cmp	r6, r2
 8007560:	f240 80a9 	bls.w	80076b6 <_vfprintf_r+0x141e>
 8007564:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8007568:	4603      	mov	r3, r0
 800756a:	e00d      	b.n	8007588 <_vfprintf_r+0x12f0>
 800756c:	08019e70 	.word	0x08019e70
 8007570:	08019e20 	.word	0x08019e20
 8007574:	08019e3c 	.word	0x08019e3c
 8007578:	08019e38 	.word	0x08019e38
 800757c:	08019e68 	.word	0x08019e68
 8007580:	66666667 	.word	0x66666667
 8007584:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007588:	f802 1b01 	strb.w	r1, [r2], #1
 800758c:	42b3      	cmp	r3, r6
 800758e:	d1f9      	bne.n	8007584 <_vfprintf_r+0x12ec>
 8007590:	ab1f      	add	r3, sp, #124	; 0x7c
 8007592:	1a1b      	subs	r3, r3, r0
 8007594:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8007598:	4413      	add	r3, r2
 800759a:	aa1b      	add	r2, sp, #108	; 0x6c
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80075a2:	2a01      	cmp	r2, #1
 80075a4:	4413      	add	r3, r2
 80075a6:	9307      	str	r3, [sp, #28]
 80075a8:	dd69      	ble.n	800767e <_vfprintf_r+0x13e6>
 80075aa:	9b07      	ldr	r3, [sp, #28]
 80075ac:	2200      	movs	r2, #0
 80075ae:	3301      	adds	r3, #1
 80075b0:	9307      	str	r3, [sp, #28]
 80075b2:	920c      	str	r2, [sp, #48]	; 0x30
 80075b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075b8:	e614      	b.n	80071e4 <_vfprintf_r+0xf4c>
 80075ba:	4640      	mov	r0, r8
 80075bc:	4649      	mov	r1, r9
 80075be:	aa1f      	add	r2, sp, #124	; 0x7c
 80075c0:	f002 ff14 	bl	800a3ec <__sprint_r>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f47e af67 	bne.w	8006498 <_vfprintf_r+0x200>
 80075ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80075cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80075d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80075d2:	e68c      	b.n	80072ee <_vfprintf_r+0x1056>
 80075d4:	f04f 0b06 	mov.w	fp, #6
 80075d8:	e5a4      	b.n	8007124 <_vfprintf_r+0xe8c>
 80075da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bfd8      	it	le
 80075e0:	f1c3 0602 	rsble	r6, r3, #2
 80075e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e6:	bfc8      	it	gt
 80075e8:	2601      	movgt	r6, #1
 80075ea:	18f3      	adds	r3, r6, r3
 80075ec:	9307      	str	r3, [sp, #28]
 80075ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075f2:	e5f7      	b.n	80071e4 <_vfprintf_r+0xf4c>
 80075f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80075f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075fc:	9014      	str	r0, [sp, #80]	; 0x50
 80075fe:	9315      	str	r3, [sp, #84]	; 0x54
 8007600:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8007604:	e59c      	b.n	8007140 <_vfprintf_r+0xea8>
 8007606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007608:	e5d1      	b.n	80071ae <_vfprintf_r+0xf16>
 800760a:	2b00      	cmp	r3, #0
 800760c:	dd2e      	ble.n	800766c <_vfprintf_r+0x13d4>
 800760e:	f1bb 0f00 	cmp.w	fp, #0
 8007612:	d107      	bne.n	8007624 <_vfprintf_r+0x138c>
 8007614:	9b02      	ldr	r3, [sp, #8]
 8007616:	07de      	lsls	r6, r3, #31
 8007618:	d404      	bmi.n	8007624 <_vfprintf_r+0x138c>
 800761a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800761c:	9207      	str	r2, [sp, #28]
 800761e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007622:	e5df      	b.n	80071e4 <_vfprintf_r+0xf4c>
 8007624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007626:	f10b 0601 	add.w	r6, fp, #1
 800762a:	4433      	add	r3, r6
 800762c:	9307      	str	r3, [sp, #28]
 800762e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007632:	e5d7      	b.n	80071e4 <_vfprintf_r+0xf4c>
 8007634:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007638:	2200      	movs	r2, #0
 800763a:	2300      	movs	r3, #0
 800763c:	f7f9 fb06 	bl	8000c4c <__aeabi_dcmpeq>
 8007640:	2800      	cmp	r0, #0
 8007642:	f47f aef7 	bne.w	8007434 <_vfprintf_r+0x119c>
 8007646:	f1c7 0701 	rsb	r7, r7, #1
 800764a:	9719      	str	r7, [sp, #100]	; 0x64
 800764c:	443e      	add	r6, r7
 800764e:	e59b      	b.n	8007188 <_vfprintf_r+0xef0>
 8007650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007652:	3301      	adds	r3, #1
 8007654:	9307      	str	r3, [sp, #28]
 8007656:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800765a:	e5c3      	b.n	80071e4 <_vfprintf_r+0xf4c>
 800765c:	3330      	adds	r3, #48	; 0x30
 800765e:	2230      	movs	r2, #48	; 0x30
 8007660:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8007664:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8007668:	ab1c      	add	r3, sp, #112	; 0x70
 800766a:	e796      	b.n	800759a <_vfprintf_r+0x1302>
 800766c:	f1bb 0f00 	cmp.w	fp, #0
 8007670:	d11b      	bne.n	80076aa <_vfprintf_r+0x1412>
 8007672:	9b02      	ldr	r3, [sp, #8]
 8007674:	07d8      	lsls	r0, r3, #31
 8007676:	d418      	bmi.n	80076aa <_vfprintf_r+0x1412>
 8007678:	2301      	movs	r3, #1
 800767a:	9307      	str	r3, [sp, #28]
 800767c:	e5b2      	b.n	80071e4 <_vfprintf_r+0xf4c>
 800767e:	9b02      	ldr	r3, [sp, #8]
 8007680:	f013 0301 	ands.w	r3, r3, #1
 8007684:	d191      	bne.n	80075aa <_vfprintf_r+0x1312>
 8007686:	930c      	str	r3, [sp, #48]	; 0x30
 8007688:	9b07      	ldr	r3, [sp, #28]
 800768a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800768e:	e5a9      	b.n	80071e4 <_vfprintf_r+0xf4c>
 8007690:	9d08      	ldr	r5, [sp, #32]
 8007692:	682e      	ldr	r6, [r5, #0]
 8007694:	4628      	mov	r0, r5
 8007696:	3004      	adds	r0, #4
 8007698:	2e00      	cmp	r6, #0
 800769a:	785d      	ldrb	r5, [r3, #1]
 800769c:	9008      	str	r0, [sp, #32]
 800769e:	f6be ae6c 	bge.w	800637a <_vfprintf_r+0xe2>
 80076a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80076a6:	f7fe be68 	b.w	800637a <_vfprintf_r+0xe2>
 80076aa:	f10b 0302 	add.w	r3, fp, #2
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80076b4:	e596      	b.n	80071e4 <_vfprintf_r+0xf4c>
 80076b6:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80076ba:	e76e      	b.n	800759a <_vfprintf_r+0x1302>
 80076bc:	f3af 8000 	nop.w

080076c0 <__sbprintf>:
 80076c0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80076c4:	460c      	mov	r4, r1
 80076c6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80076ca:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80076ce:	69e7      	ldr	r7, [r4, #28]
 80076d0:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80076d2:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 80076d6:	9119      	str	r1, [sp, #100]	; 0x64
 80076d8:	ad1a      	add	r5, sp, #104	; 0x68
 80076da:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80076de:	f02e 0e02 	bic.w	lr, lr, #2
 80076e2:	f04f 0c00 	mov.w	ip, #0
 80076e6:	9707      	str	r7, [sp, #28]
 80076e8:	4669      	mov	r1, sp
 80076ea:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80076ec:	9500      	str	r5, [sp, #0]
 80076ee:	9504      	str	r5, [sp, #16]
 80076f0:	9602      	str	r6, [sp, #8]
 80076f2:	9605      	str	r6, [sp, #20]
 80076f4:	f8ad e00c 	strh.w	lr, [sp, #12]
 80076f8:	f8ad 900e 	strh.w	r9, [sp, #14]
 80076fc:	9709      	str	r7, [sp, #36]	; 0x24
 80076fe:	f8cd c018 	str.w	ip, [sp, #24]
 8007702:	4606      	mov	r6, r0
 8007704:	f7fe fdc8 	bl	8006298 <_vfprintf_r>
 8007708:	1e05      	subs	r5, r0, #0
 800770a:	db07      	blt.n	800771c <__sbprintf+0x5c>
 800770c:	4630      	mov	r0, r6
 800770e:	4669      	mov	r1, sp
 8007710:	f001 f964 	bl	80089dc <_fflush_r>
 8007714:	2800      	cmp	r0, #0
 8007716:	bf18      	it	ne
 8007718:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800771c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007720:	065b      	lsls	r3, r3, #25
 8007722:	d503      	bpl.n	800772c <__sbprintf+0x6c>
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800772a:	81a3      	strh	r3, [r4, #12]
 800772c:	4628      	mov	r0, r5
 800772e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8007732:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8007736:	bf00      	nop

08007738 <__swsetup_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4b2f      	ldr	r3, [pc, #188]	; (80077f8 <__swsetup_r+0xc0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4605      	mov	r5, r0
 8007740:	460c      	mov	r4, r1
 8007742:	b113      	cbz	r3, 800774a <__swsetup_r+0x12>
 8007744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007746:	2a00      	cmp	r2, #0
 8007748:	d036      	beq.n	80077b8 <__swsetup_r+0x80>
 800774a:	89a2      	ldrh	r2, [r4, #12]
 800774c:	b293      	uxth	r3, r2
 800774e:	0718      	lsls	r0, r3, #28
 8007750:	d50c      	bpl.n	800776c <__swsetup_r+0x34>
 8007752:	6920      	ldr	r0, [r4, #16]
 8007754:	b1a8      	cbz	r0, 8007782 <__swsetup_r+0x4a>
 8007756:	f013 0201 	ands.w	r2, r3, #1
 800775a:	d01e      	beq.n	800779a <__swsetup_r+0x62>
 800775c:	6963      	ldr	r3, [r4, #20]
 800775e:	2200      	movs	r2, #0
 8007760:	425b      	negs	r3, r3
 8007762:	61a3      	str	r3, [r4, #24]
 8007764:	60a2      	str	r2, [r4, #8]
 8007766:	b1f0      	cbz	r0, 80077a6 <__swsetup_r+0x6e>
 8007768:	2000      	movs	r0, #0
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	06d9      	lsls	r1, r3, #27
 800776e:	d53b      	bpl.n	80077e8 <__swsetup_r+0xb0>
 8007770:	0758      	lsls	r0, r3, #29
 8007772:	d425      	bmi.n	80077c0 <__swsetup_r+0x88>
 8007774:	6920      	ldr	r0, [r4, #16]
 8007776:	f042 0308 	orr.w	r3, r2, #8
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	b29b      	uxth	r3, r3
 800777e:	2800      	cmp	r0, #0
 8007780:	d1e9      	bne.n	8007756 <__swsetup_r+0x1e>
 8007782:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8007786:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800778a:	d0e4      	beq.n	8007756 <__swsetup_r+0x1e>
 800778c:	4628      	mov	r0, r5
 800778e:	4621      	mov	r1, r4
 8007790:	f001 fcac 	bl	80090ec <__smakebuf_r>
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	6920      	ldr	r0, [r4, #16]
 8007798:	e7dd      	b.n	8007756 <__swsetup_r+0x1e>
 800779a:	0799      	lsls	r1, r3, #30
 800779c:	bf58      	it	pl
 800779e:	6962      	ldrpl	r2, [r4, #20]
 80077a0:	60a2      	str	r2, [r4, #8]
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d1e0      	bne.n	8007768 <__swsetup_r+0x30>
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	061a      	lsls	r2, r3, #24
 80077aa:	d5de      	bpl.n	800776a <__swsetup_r+0x32>
 80077ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	4618      	mov	r0, r3
 80077ba:	f001 f9a3 	bl	8008b04 <__sinit>
 80077be:	e7c4      	b.n	800774a <__swsetup_r+0x12>
 80077c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80077c2:	b149      	cbz	r1, 80077d8 <__swsetup_r+0xa0>
 80077c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80077c8:	4299      	cmp	r1, r3
 80077ca:	d003      	beq.n	80077d4 <__swsetup_r+0x9c>
 80077cc:	4628      	mov	r0, r5
 80077ce:	f001 f9f1 	bl	8008bb4 <_free_r>
 80077d2:	89a2      	ldrh	r2, [r4, #12]
 80077d4:	2300      	movs	r3, #0
 80077d6:	6323      	str	r3, [r4, #48]	; 0x30
 80077d8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80077dc:	2300      	movs	r3, #0
 80077de:	6920      	ldr	r0, [r4, #16]
 80077e0:	6063      	str	r3, [r4, #4]
 80077e2:	b292      	uxth	r2, r2
 80077e4:	6020      	str	r0, [r4, #0]
 80077e6:	e7c6      	b.n	8007776 <__swsetup_r+0x3e>
 80077e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ec:	2309      	movs	r3, #9
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077f4:	81a2      	strh	r2, [r4, #12]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20000630 	.word	0x20000630

080077fc <__register_exitproc>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	4c25      	ldr	r4, [pc, #148]	; (8007898 <__register_exitproc+0x9c>)
 8007802:	6825      	ldr	r5, [r4, #0]
 8007804:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8007808:	4606      	mov	r6, r0
 800780a:	4688      	mov	r8, r1
 800780c:	4692      	mov	sl, r2
 800780e:	4699      	mov	r9, r3
 8007810:	b3cc      	cbz	r4, 8007886 <__register_exitproc+0x8a>
 8007812:	6860      	ldr	r0, [r4, #4]
 8007814:	281f      	cmp	r0, #31
 8007816:	dc18      	bgt.n	800784a <__register_exitproc+0x4e>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	b17e      	cbz	r6, 800783c <__register_exitproc+0x40>
 800781c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007820:	2101      	movs	r1, #1
 8007822:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8007826:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800782a:	fa01 f200 	lsl.w	r2, r1, r0
 800782e:	4317      	orrs	r7, r2
 8007830:	2e02      	cmp	r6, #2
 8007832:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8007836:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800783a:	d01e      	beq.n	800787a <__register_exitproc+0x7e>
 800783c:	3002      	adds	r0, #2
 800783e:	6063      	str	r3, [r4, #4]
 8007840:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8007844:	2000      	movs	r0, #0
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784a:	4b14      	ldr	r3, [pc, #80]	; (800789c <__register_exitproc+0xa0>)
 800784c:	b303      	cbz	r3, 8007890 <__register_exitproc+0x94>
 800784e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007852:	f001 fcbb 	bl	80091cc <malloc>
 8007856:	4604      	mov	r4, r0
 8007858:	b1d0      	cbz	r0, 8007890 <__register_exitproc+0x94>
 800785a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800785e:	2700      	movs	r7, #0
 8007860:	e880 0088 	stmia.w	r0, {r3, r7}
 8007864:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8007868:	4638      	mov	r0, r7
 800786a:	2301      	movs	r3, #1
 800786c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8007870:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8007874:	2e00      	cmp	r6, #0
 8007876:	d0e1      	beq.n	800783c <__register_exitproc+0x40>
 8007878:	e7d0      	b.n	800781c <__register_exitproc+0x20>
 800787a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800787e:	430a      	orrs	r2, r1
 8007880:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8007884:	e7da      	b.n	800783c <__register_exitproc+0x40>
 8007886:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800788a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800788e:	e7c0      	b.n	8007812 <__register_exitproc+0x16>
 8007890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007898:	08019e18 	.word	0x08019e18
 800789c:	080091cd 	.word	0x080091cd

080078a0 <register_fini>:
 80078a0:	4b02      	ldr	r3, [pc, #8]	; (80078ac <register_fini+0xc>)
 80078a2:	b113      	cbz	r3, 80078aa <register_fini+0xa>
 80078a4:	4802      	ldr	r0, [pc, #8]	; (80078b0 <register_fini+0x10>)
 80078a6:	f7fe ba01 	b.w	8005cac <atexit>
 80078aa:	4770      	bx	lr
 80078ac:	00000000 	.word	0x00000000
 80078b0:	08005cc5 	.word	0x08005cc5

080078b4 <quorem>:
 80078b4:	6902      	ldr	r2, [r0, #16]
 80078b6:	690b      	ldr	r3, [r1, #16]
 80078b8:	4293      	cmp	r3, r2
 80078ba:	f300 808f 	bgt.w	80079dc <quorem+0x128>
 80078be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80078c6:	f101 0714 	add.w	r7, r1, #20
 80078ca:	f100 0b14 	add.w	fp, r0, #20
 80078ce:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 80078d2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80078d6:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80078da:	b083      	sub	sp, #12
 80078dc:	3201      	adds	r2, #1
 80078de:	fbb3 f9f2 	udiv	r9, r3, r2
 80078e2:	eb0b 0304 	add.w	r3, fp, r4
 80078e6:	9400      	str	r4, [sp, #0]
 80078e8:	eb07 0a04 	add.w	sl, r7, r4
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	f1b9 0f00 	cmp.w	r9, #0
 80078f2:	d03b      	beq.n	800796c <quorem+0xb8>
 80078f4:	2600      	movs	r6, #0
 80078f6:	4632      	mov	r2, r6
 80078f8:	46bc      	mov	ip, r7
 80078fa:	46de      	mov	lr, fp
 80078fc:	4634      	mov	r4, r6
 80078fe:	f85c 6b04 	ldr.w	r6, [ip], #4
 8007902:	f8de 5000 	ldr.w	r5, [lr]
 8007906:	b2b3      	uxth	r3, r6
 8007908:	0c36      	lsrs	r6, r6, #16
 800790a:	fb03 4409 	mla	r4, r3, r9, r4
 800790e:	fb06 f609 	mul.w	r6, r6, r9
 8007912:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 8007916:	b2a3      	uxth	r3, r4
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	b2b4      	uxth	r4, r6
 800791c:	fa13 f385 	uxtah	r3, r3, r5
 8007920:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8007924:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007928:	b29b      	uxth	r3, r3
 800792a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800792e:	45e2      	cmp	sl, ip
 8007930:	ea4f 4224 	mov.w	r2, r4, asr #16
 8007934:	f84e 3b04 	str.w	r3, [lr], #4
 8007938:	ea4f 4416 	mov.w	r4, r6, lsr #16
 800793c:	d2df      	bcs.n	80078fe <quorem+0x4a>
 800793e:	9b00      	ldr	r3, [sp, #0]
 8007940:	f85b 3003 	ldr.w	r3, [fp, r3]
 8007944:	b993      	cbnz	r3, 800796c <quorem+0xb8>
 8007946:	9c01      	ldr	r4, [sp, #4]
 8007948:	1f23      	subs	r3, r4, #4
 800794a:	459b      	cmp	fp, r3
 800794c:	d20c      	bcs.n	8007968 <quorem+0xb4>
 800794e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007952:	b94b      	cbnz	r3, 8007968 <quorem+0xb4>
 8007954:	f1a4 0308 	sub.w	r3, r4, #8
 8007958:	e002      	b.n	8007960 <quorem+0xac>
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	3b04      	subs	r3, #4
 800795e:	b91a      	cbnz	r2, 8007968 <quorem+0xb4>
 8007960:	459b      	cmp	fp, r3
 8007962:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007966:	d3f8      	bcc.n	800795a <quorem+0xa6>
 8007968:	f8c0 8010 	str.w	r8, [r0, #16]
 800796c:	4604      	mov	r4, r0
 800796e:	f002 f983 	bl	8009c78 <__mcmp>
 8007972:	2800      	cmp	r0, #0
 8007974:	db2e      	blt.n	80079d4 <quorem+0x120>
 8007976:	f109 0901 	add.w	r9, r9, #1
 800797a:	465d      	mov	r5, fp
 800797c:	2300      	movs	r3, #0
 800797e:	f857 1b04 	ldr.w	r1, [r7], #4
 8007982:	6828      	ldr	r0, [r5, #0]
 8007984:	b28a      	uxth	r2, r1
 8007986:	1a9a      	subs	r2, r3, r2
 8007988:	0c09      	lsrs	r1, r1, #16
 800798a:	fa12 f280 	uxtah	r2, r2, r0
 800798e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8007992:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8007996:	b291      	uxth	r1, r2
 8007998:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800799c:	45ba      	cmp	sl, r7
 800799e:	f845 1b04 	str.w	r1, [r5], #4
 80079a2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80079a6:	d2ea      	bcs.n	800797e <quorem+0xca>
 80079a8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80079ac:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80079b0:	b982      	cbnz	r2, 80079d4 <quorem+0x120>
 80079b2:	1f1a      	subs	r2, r3, #4
 80079b4:	4593      	cmp	fp, r2
 80079b6:	d20b      	bcs.n	80079d0 <quorem+0x11c>
 80079b8:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80079bc:	b942      	cbnz	r2, 80079d0 <quorem+0x11c>
 80079be:	3b08      	subs	r3, #8
 80079c0:	e002      	b.n	80079c8 <quorem+0x114>
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	3b04      	subs	r3, #4
 80079c6:	b91a      	cbnz	r2, 80079d0 <quorem+0x11c>
 80079c8:	459b      	cmp	fp, r3
 80079ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80079ce:	d3f8      	bcc.n	80079c2 <quorem+0x10e>
 80079d0:	f8c4 8010 	str.w	r8, [r4, #16]
 80079d4:	4648      	mov	r0, r9
 80079d6:	b003      	add	sp, #12
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	2000      	movs	r0, #0
 80079de:	4770      	bx	lr

080079e0 <_dtoa_r>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	b099      	sub	sp, #100	; 0x64
 80079e6:	4604      	mov	r4, r0
 80079e8:	9103      	str	r1, [sp, #12]
 80079ea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80079ec:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	4692      	mov	sl, r2
 80079f2:	ed8d 0b00 	vstr	d0, [sp]
 80079f6:	b141      	cbz	r1, 8007a0a <_dtoa_r+0x2a>
 80079f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079fa:	604a      	str	r2, [r1, #4]
 80079fc:	2301      	movs	r3, #1
 80079fe:	4093      	lsls	r3, r2
 8007a00:	608b      	str	r3, [r1, #8]
 8007a02:	f001 ff55 	bl	80098b0 <_Bfree>
 8007a06:	2300      	movs	r3, #0
 8007a08:	6423      	str	r3, [r4, #64]	; 0x40
 8007a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	4699      	mov	r9, r3
 8007a12:	db36      	blt.n	8007a82 <_dtoa_r+0xa2>
 8007a14:	2300      	movs	r3, #0
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	4ba5      	ldr	r3, [pc, #660]	; (8007cb0 <_dtoa_r+0x2d0>)
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	ea09 0303 	and.w	r3, r9, r3
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d017      	beq.n	8007a54 <_dtoa_r+0x74>
 8007a24:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f7f9 f90c 	bl	8000c4c <__aeabi_dcmpeq>
 8007a34:	4680      	mov	r8, r0
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d02b      	beq.n	8007a92 <_dtoa_r+0xb2>
 8007a3a:	9a04      	ldr	r2, [sp, #16]
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80cc 	beq.w	8007be0 <_dtoa_r+0x200>
 8007a48:	489a      	ldr	r0, [pc, #616]	; (8007cb4 <_dtoa_r+0x2d4>)
 8007a4a:	6018      	str	r0, [r3, #0]
 8007a4c:	3801      	subs	r0, #1
 8007a4e:	b019      	add	sp, #100	; 0x64
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a54:	9a04      	ldr	r2, [sp, #16]
 8007a56:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 80a7 	beq.w	8007bb2 <_dtoa_r+0x1d2>
 8007a64:	4894      	ldr	r0, [pc, #592]	; (8007cb8 <_dtoa_r+0x2d8>)
 8007a66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0f0      	beq.n	8007a4e <_dtoa_r+0x6e>
 8007a6c:	78c3      	ldrb	r3, [r0, #3]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 80b8 	beq.w	8007be4 <_dtoa_r+0x204>
 8007a74:	f100 0308 	add.w	r3, r0, #8
 8007a78:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	b019      	add	sp, #100	; 0x64
 8007a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a82:	9a01      	ldr	r2, [sp, #4]
 8007a84:	2301      	movs	r3, #1
 8007a86:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a90:	e7c2      	b.n	8007a18 <_dtoa_r+0x38>
 8007a92:	4620      	mov	r0, r4
 8007a94:	ec47 6b10 	vmov	d0, r6, r7
 8007a98:	a917      	add	r1, sp, #92	; 0x5c
 8007a9a:	aa16      	add	r2, sp, #88	; 0x58
 8007a9c:	f002 f97a 	bl	8009d94 <__d2b>
 8007aa0:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8007aa4:	4683      	mov	fp, r0
 8007aa6:	f040 808d 	bne.w	8007bc4 <_dtoa_r+0x1e4>
 8007aaa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007aae:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007ab0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8007ab4:	4445      	add	r5, r8
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	f2c0 829e 	blt.w	8007ff8 <_dtoa_r+0x618>
 8007abc:	4a7f      	ldr	r2, [pc, #508]	; (8007cbc <_dtoa_r+0x2dc>)
 8007abe:	1b52      	subs	r2, r2, r5
 8007ac0:	fa09 f902 	lsl.w	r9, r9, r2
 8007ac4:	9a00      	ldr	r2, [sp, #0]
 8007ac6:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8007aca:	fa22 f003 	lsr.w	r0, r2, r3
 8007ace:	ea49 0000 	orr.w	r0, r9, r0
 8007ad2:	f7f8 fddd 	bl	8000690 <__aeabi_ui2d>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	3d01      	subs	r5, #1
 8007ada:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4b77      	ldr	r3, [pc, #476]	; (8007cc0 <_dtoa_r+0x2e0>)
 8007ae4:	f7f8 fc96 	bl	8000414 <__aeabi_dsub>
 8007ae8:	a36b      	add	r3, pc, #428	; (adr r3, 8007c98 <_dtoa_r+0x2b8>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f7f8 fe45 	bl	800077c <__aeabi_dmul>
 8007af2:	a36b      	add	r3, pc, #428	; (adr r3, 8007ca0 <_dtoa_r+0x2c0>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f7f8 fc8e 	bl	8000418 <__adddf3>
 8007afc:	4606      	mov	r6, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	460f      	mov	r7, r1
 8007b02:	f7f8 fdd5 	bl	80006b0 <__aeabi_i2d>
 8007b06:	a368      	add	r3, pc, #416	; (adr r3, 8007ca8 <_dtoa_r+0x2c8>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fe36 	bl	800077c <__aeabi_dmul>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f8 fc7e 	bl	8000418 <__adddf3>
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	f7f9 f8c6 	bl	8000cb0 <__aeabi_d2iz>
 8007b24:	4639      	mov	r1, r7
 8007b26:	9005      	str	r0, [sp, #20]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f7f9 f897 	bl	8000c60 <__aeabi_dcmplt>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	f040 81ab 	bne.w	8007e8e <_dtoa_r+0x4ae>
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	2b16      	cmp	r3, #22
 8007b3c:	f200 81a4 	bhi.w	8007e88 <_dtoa_r+0x4a8>
 8007b40:	9a05      	ldr	r2, [sp, #20]
 8007b42:	4b60      	ldr	r3, [pc, #384]	; (8007cc4 <_dtoa_r+0x2e4>)
 8007b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b50:	f7f9 f8a4 	bl	8000c9c <__aeabi_dcmpgt>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f000 8255 	beq.w	8008004 <_dtoa_r+0x624>
 8007b5a:	9b05      	ldr	r3, [sp, #20]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	9305      	str	r3, [sp, #20]
 8007b60:	2300      	movs	r3, #0
 8007b62:	930d      	str	r3, [sp, #52]	; 0x34
 8007b64:	ebc5 0508 	rsb	r5, r5, r8
 8007b68:	1e6b      	subs	r3, r5, #1
 8007b6a:	9306      	str	r3, [sp, #24]
 8007b6c:	f100 81a6 	bmi.w	8007ebc <_dtoa_r+0x4dc>
 8007b70:	2300      	movs	r3, #0
 8007b72:	9307      	str	r3, [sp, #28]
 8007b74:	9b05      	ldr	r3, [sp, #20]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f2c0 8197 	blt.w	8007eaa <_dtoa_r+0x4ca>
 8007b7c:	9a06      	ldr	r2, [sp, #24]
 8007b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b80:	4611      	mov	r1, r2
 8007b82:	4419      	add	r1, r3
 8007b84:	2300      	movs	r3, #0
 8007b86:	9106      	str	r1, [sp, #24]
 8007b88:	930a      	str	r3, [sp, #40]	; 0x28
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	2b09      	cmp	r3, #9
 8007b8e:	d82b      	bhi.n	8007be8 <_dtoa_r+0x208>
 8007b90:	2b05      	cmp	r3, #5
 8007b92:	f340 8673 	ble.w	800887c <_dtoa_r+0xe9c>
 8007b96:	3b04      	subs	r3, #4
 8007b98:	9303      	str	r3, [sp, #12]
 8007b9a:	2700      	movs	r7, #0
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	3b02      	subs	r3, #2
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	f200 8651 	bhi.w	8008848 <_dtoa_r+0xe68>
 8007ba6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007baa:	03d1      	.short	0x03d1
 8007bac:	02b603c4 	.word	0x02b603c4
 8007bb0:	0666      	.short	0x0666
 8007bb2:	4b41      	ldr	r3, [pc, #260]	; (8007cb8 <_dtoa_r+0x2d8>)
 8007bb4:	4a44      	ldr	r2, [pc, #272]	; (8007cc8 <_dtoa_r+0x2e8>)
 8007bb6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	4618      	movne	r0, r3
 8007bc0:	4610      	moveq	r0, r2
 8007bc2:	e750      	b.n	8007a66 <_dtoa_r+0x86>
 8007bc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bc8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007bcc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bd6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007bda:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007bde:	e77f      	b.n	8007ae0 <_dtoa_r+0x100>
 8007be0:	483a      	ldr	r0, [pc, #232]	; (8007ccc <_dtoa_r+0x2ec>)
 8007be2:	e734      	b.n	8007a4e <_dtoa_r+0x6e>
 8007be4:	1cc3      	adds	r3, r0, #3
 8007be6:	e747      	b.n	8007a78 <_dtoa_r+0x98>
 8007be8:	2100      	movs	r1, #0
 8007bea:	6461      	str	r1, [r4, #68]	; 0x44
 8007bec:	4620      	mov	r0, r4
 8007bee:	468a      	mov	sl, r1
 8007bf0:	9103      	str	r1, [sp, #12]
 8007bf2:	f001 fe37 	bl	8009864 <_Balloc>
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bfa:	9308      	str	r3, [sp, #32]
 8007bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8007bfe:	2301      	movs	r3, #1
 8007c00:	9009      	str	r0, [sp, #36]	; 0x24
 8007c02:	6420      	str	r0, [r4, #64]	; 0x40
 8007c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f2c0 80d3 	blt.w	8007db4 <_dtoa_r+0x3d4>
 8007c0e:	9a05      	ldr	r2, [sp, #20]
 8007c10:	2a0e      	cmp	r2, #14
 8007c12:	f300 80cf 	bgt.w	8007db4 <_dtoa_r+0x3d4>
 8007c16:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <_dtoa_r+0x2e4>)
 8007c18:	f1ba 0f00 	cmp.w	sl, #0
 8007c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c24:	f2c0 8395 	blt.w	8008352 <_dtoa_r+0x972>
 8007c28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	4630      	mov	r0, r6
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 fecc 	bl	80009d0 <__aeabi_ddiv>
 8007c38:	f7f9 f83a 	bl	8000cb0 <__aeabi_d2iz>
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	f7f8 fd37 	bl	80006b0 <__aeabi_i2d>
 8007c42:	4642      	mov	r2, r8
 8007c44:	464b      	mov	r3, r9
 8007c46:	f7f8 fd99 	bl	800077c <__aeabi_dmul>
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7f8 fbdf 	bl	8000414 <__aeabi_dsub>
 8007c56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c58:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8007c5c:	702b      	strb	r3, [r5, #0]
 8007c5e:	9b08      	ldr	r3, [sp, #32]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	4606      	mov	r6, r0
 8007c64:	460f      	mov	r7, r1
 8007c66:	f105 0501 	add.w	r5, r5, #1
 8007c6a:	d063      	beq.n	8007d34 <_dtoa_r+0x354>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4b18      	ldr	r3, [pc, #96]	; (8007cd0 <_dtoa_r+0x2f0>)
 8007c70:	f7f8 fd84 	bl	800077c <__aeabi_dmul>
 8007c74:	2200      	movs	r2, #0
 8007c76:	2300      	movs	r3, #0
 8007c78:	4606      	mov	r6, r0
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	f7f8 ffe6 	bl	8000c4c <__aeabi_dcmpeq>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f040 8084 	bne.w	8007d8e <_dtoa_r+0x3ae>
 8007c86:	f8cd b000 	str.w	fp, [sp]
 8007c8a:	9403      	str	r4, [sp, #12]
 8007c8c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8007c90:	9c08      	ldr	r4, [sp, #32]
 8007c92:	e02a      	b.n	8007cea <_dtoa_r+0x30a>
 8007c94:	f3af 8000 	nop.w
 8007c98:	636f4361 	.word	0x636f4361
 8007c9c:	3fd287a7 	.word	0x3fd287a7
 8007ca0:	8b60c8b3 	.word	0x8b60c8b3
 8007ca4:	3fc68a28 	.word	0x3fc68a28
 8007ca8:	509f79fb 	.word	0x509f79fb
 8007cac:	3fd34413 	.word	0x3fd34413
 8007cb0:	7ff00000 	.word	0x7ff00000
 8007cb4:	08019e71 	.word	0x08019e71
 8007cb8:	08019e90 	.word	0x08019e90
 8007cbc:	fffffc0e 	.word	0xfffffc0e
 8007cc0:	3ff80000 	.word	0x3ff80000
 8007cc4:	08019ea0 	.word	0x08019ea0
 8007cc8:	08019e84 	.word	0x08019e84
 8007ccc:	08019e70 	.word	0x08019e70
 8007cd0:	40240000 	.word	0x40240000
 8007cd4:	f7f8 fd52 	bl	800077c <__aeabi_dmul>
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4606      	mov	r6, r0
 8007cde:	460f      	mov	r7, r1
 8007ce0:	f7f8 ffb4 	bl	8000c4c <__aeabi_dcmpeq>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 83e4 	bne.w	80084b2 <_dtoa_r+0xad2>
 8007cea:	4642      	mov	r2, r8
 8007cec:	464b      	mov	r3, r9
 8007cee:	4630      	mov	r0, r6
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	f7f8 fe6d 	bl	80009d0 <__aeabi_ddiv>
 8007cf6:	f7f8 ffdb 	bl	8000cb0 <__aeabi_d2iz>
 8007cfa:	4682      	mov	sl, r0
 8007cfc:	f7f8 fcd8 	bl	80006b0 <__aeabi_i2d>
 8007d00:	4642      	mov	r2, r8
 8007d02:	464b      	mov	r3, r9
 8007d04:	f7f8 fd3a 	bl	800077c <__aeabi_dmul>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	4639      	mov	r1, r7
 8007d10:	f7f8 fb80 	bl	8000414 <__aeabi_dsub>
 8007d14:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8007d18:	f805 eb01 	strb.w	lr, [r5], #1
 8007d1c:	ebcb 0e05 	rsb	lr, fp, r5
 8007d20:	4574      	cmp	r4, lr
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	4bb7      	ldr	r3, [pc, #732]	; (8008008 <_dtoa_r+0x628>)
 8007d2c:	d1d2      	bne.n	8007cd4 <_dtoa_r+0x2f4>
 8007d2e:	f8dd b000 	ldr.w	fp, [sp]
 8007d32:	9c03      	ldr	r4, [sp, #12]
 8007d34:	4632      	mov	r2, r6
 8007d36:	463b      	mov	r3, r7
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 fb6c 	bl	8000418 <__adddf3>
 8007d40:	4606      	mov	r6, r0
 8007d42:	460f      	mov	r7, r1
 8007d44:	4640      	mov	r0, r8
 8007d46:	4649      	mov	r1, r9
 8007d48:	4632      	mov	r2, r6
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	f7f8 ff88 	bl	8000c60 <__aeabi_dcmplt>
 8007d50:	b948      	cbnz	r0, 8007d66 <_dtoa_r+0x386>
 8007d52:	4640      	mov	r0, r8
 8007d54:	4649      	mov	r1, r9
 8007d56:	4632      	mov	r2, r6
 8007d58:	463b      	mov	r3, r7
 8007d5a:	f7f8 ff77 	bl	8000c4c <__aeabi_dcmpeq>
 8007d5e:	b1b0      	cbz	r0, 8007d8e <_dtoa_r+0x3ae>
 8007d60:	f01a 0f01 	tst.w	sl, #1
 8007d64:	d013      	beq.n	8007d8e <_dtoa_r+0x3ae>
 8007d66:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8007d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d6c:	1e6b      	subs	r3, r5, #1
 8007d6e:	e004      	b.n	8007d7a <_dtoa_r+0x39a>
 8007d70:	428b      	cmp	r3, r1
 8007d72:	f000 8448 	beq.w	8008606 <_dtoa_r+0xc26>
 8007d76:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8007d7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d7e:	f103 0501 	add.w	r5, r3, #1
 8007d82:	461a      	mov	r2, r3
 8007d84:	d0f4      	beq.n	8007d70 <_dtoa_r+0x390>
 8007d86:	f108 0301 	add.w	r3, r8, #1
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	7013      	strb	r3, [r2, #0]
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4659      	mov	r1, fp
 8007d92:	f001 fd8d 	bl	80098b0 <_Bfree>
 8007d96:	2200      	movs	r2, #0
 8007d98:	9b05      	ldr	r3, [sp, #20]
 8007d9a:	702a      	strb	r2, [r5, #0]
 8007d9c:	9a04      	ldr	r2, [sp, #16]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 834b 	beq.w	8008440 <_dtoa_r+0xa60>
 8007daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dac:	601d      	str	r5, [r3, #0]
 8007dae:	b019      	add	sp, #100	; 0x64
 8007db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	f000 8085 	beq.w	8007ec6 <_dtoa_r+0x4e6>
 8007dbc:	9a03      	ldr	r2, [sp, #12]
 8007dbe:	2a01      	cmp	r2, #1
 8007dc0:	f340 830a 	ble.w	80083d8 <_dtoa_r+0x9f8>
 8007dc4:	9b08      	ldr	r3, [sp, #32]
 8007dc6:	1e5f      	subs	r7, r3, #1
 8007dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	f2c0 83a6 	blt.w	800851c <_dtoa_r+0xb3c>
 8007dd0:	1bdf      	subs	r7, r3, r7
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f2c0 84a4 	blt.w	8008722 <_dtoa_r+0xd42>
 8007dda:	9d07      	ldr	r5, [sp, #28]
 8007ddc:	9b08      	ldr	r3, [sp, #32]
 8007dde:	9a07      	ldr	r2, [sp, #28]
 8007de0:	441a      	add	r2, r3
 8007de2:	9207      	str	r2, [sp, #28]
 8007de4:	9a06      	ldr	r2, [sp, #24]
 8007de6:	4620      	mov	r0, r4
 8007de8:	441a      	add	r2, r3
 8007dea:	2101      	movs	r1, #1
 8007dec:	9206      	str	r2, [sp, #24]
 8007dee:	f001 fdf9 	bl	80099e4 <__i2b>
 8007df2:	4606      	mov	r6, r0
 8007df4:	b165      	cbz	r5, 8007e10 <_dtoa_r+0x430>
 8007df6:	9906      	ldr	r1, [sp, #24]
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	dd08      	ble.n	8007e10 <_dtoa_r+0x430>
 8007dfe:	42a9      	cmp	r1, r5
 8007e00:	9a07      	ldr	r2, [sp, #28]
 8007e02:	bfa8      	it	ge
 8007e04:	462b      	movge	r3, r5
 8007e06:	1ad2      	subs	r2, r2, r3
 8007e08:	1aed      	subs	r5, r5, r3
 8007e0a:	1acb      	subs	r3, r1, r3
 8007e0c:	9207      	str	r2, [sp, #28]
 8007e0e:	9306      	str	r3, [sp, #24]
 8007e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dd1a      	ble.n	8007e4c <_dtoa_r+0x46c>
 8007e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8378 	beq.w	800850e <_dtoa_r+0xb2e>
 8007e1e:	2f00      	cmp	r7, #0
 8007e20:	dd10      	ble.n	8007e44 <_dtoa_r+0x464>
 8007e22:	4631      	mov	r1, r6
 8007e24:	463a      	mov	r2, r7
 8007e26:	4620      	mov	r0, r4
 8007e28:	f001 fe80 	bl	8009b2c <__pow5mult>
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	465a      	mov	r2, fp
 8007e30:	4631      	mov	r1, r6
 8007e32:	4620      	mov	r0, r4
 8007e34:	f001 fde0 	bl	80099f8 <__multiply>
 8007e38:	4659      	mov	r1, fp
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f001 fd37 	bl	80098b0 <_Bfree>
 8007e42:	46c3      	mov	fp, r8
 8007e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e46:	1bda      	subs	r2, r3, r7
 8007e48:	f040 82a5 	bne.w	8008396 <_dtoa_r+0x9b6>
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	2101      	movs	r1, #1
 8007e50:	f001 fdc8 	bl	80099e4 <__i2b>
 8007e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	4680      	mov	r8, r0
 8007e5a:	dd38      	ble.n	8007ece <_dtoa_r+0x4ee>
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	461a      	mov	r2, r3
 8007e60:	4620      	mov	r0, r4
 8007e62:	f001 fe63 	bl	8009b2c <__pow5mult>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	f340 8299 	ble.w	80083a2 <_dtoa_r+0x9c2>
 8007e70:	f04f 0900 	mov.w	r9, #0
 8007e74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007e78:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8007e7c:	6918      	ldr	r0, [r3, #16]
 8007e7e:	f001 fd63 	bl	8009948 <__hi0bits>
 8007e82:	f1c0 0020 	rsb	r0, r0, #32
 8007e86:	e02c      	b.n	8007ee2 <_dtoa_r+0x502>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e8c:	e66a      	b.n	8007b64 <_dtoa_r+0x184>
 8007e8e:	9805      	ldr	r0, [sp, #20]
 8007e90:	f7f8 fc0e 	bl	80006b0 <__aeabi_i2d>
 8007e94:	4632      	mov	r2, r6
 8007e96:	463b      	mov	r3, r7
 8007e98:	f7f8 fed8 	bl	8000c4c <__aeabi_dcmpeq>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f47f ae4b 	bne.w	8007b38 <_dtoa_r+0x158>
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	9305      	str	r3, [sp, #20]
 8007ea8:	e646      	b.n	8007b38 <_dtoa_r+0x158>
 8007eaa:	9a07      	ldr	r2, [sp, #28]
 8007eac:	9b05      	ldr	r3, [sp, #20]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	425b      	negs	r3, r3
 8007eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9207      	str	r2, [sp, #28]
 8007eb8:	930c      	str	r3, [sp, #48]	; 0x30
 8007eba:	e666      	b.n	8007b8a <_dtoa_r+0x1aa>
 8007ebc:	425b      	negs	r3, r3
 8007ebe:	9307      	str	r3, [sp, #28]
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	9306      	str	r3, [sp, #24]
 8007ec4:	e656      	b.n	8007b74 <_dtoa_r+0x194>
 8007ec6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007ec8:	9d07      	ldr	r5, [sp, #28]
 8007eca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007ecc:	e792      	b.n	8007df4 <_dtoa_r+0x414>
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	f340 82b8 	ble.w	8008446 <_dtoa_r+0xa66>
 8007ed6:	f04f 0900 	mov.w	r9, #0
 8007eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1c9      	bne.n	8007e74 <_dtoa_r+0x494>
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	4418      	add	r0, r3
 8007ee6:	f010 001f 	ands.w	r0, r0, #31
 8007eea:	f000 8083 	beq.w	8007ff4 <_dtoa_r+0x614>
 8007eee:	f1c0 0320 	rsb	r3, r0, #32
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	f340 84b9 	ble.w	800886a <_dtoa_r+0xe8a>
 8007ef8:	f1c0 001c 	rsb	r0, r0, #28
 8007efc:	9b07      	ldr	r3, [sp, #28]
 8007efe:	4403      	add	r3, r0
 8007f00:	9307      	str	r3, [sp, #28]
 8007f02:	9b06      	ldr	r3, [sp, #24]
 8007f04:	4403      	add	r3, r0
 8007f06:	4405      	add	r5, r0
 8007f08:	9306      	str	r3, [sp, #24]
 8007f0a:	9b07      	ldr	r3, [sp, #28]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	dd05      	ble.n	8007f1c <_dtoa_r+0x53c>
 8007f10:	4659      	mov	r1, fp
 8007f12:	461a      	mov	r2, r3
 8007f14:	4620      	mov	r0, r4
 8007f16:	f001 fe59 	bl	8009bcc <__lshift>
 8007f1a:	4683      	mov	fp, r0
 8007f1c:	9b06      	ldr	r3, [sp, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd05      	ble.n	8007f2e <_dtoa_r+0x54e>
 8007f22:	4641      	mov	r1, r8
 8007f24:	461a      	mov	r2, r3
 8007f26:	4620      	mov	r0, r4
 8007f28:	f001 fe50 	bl	8009bcc <__lshift>
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f040 826a 	bne.w	800840a <_dtoa_r+0xa2a>
 8007f36:	9b08      	ldr	r3, [sp, #32]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f340 8297 	ble.w	800846c <_dtoa_r+0xa8c>
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d171      	bne.n	8008028 <_dtoa_r+0x648>
 8007f44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007f48:	9f08      	ldr	r7, [sp, #32]
 8007f4a:	464d      	mov	r5, r9
 8007f4c:	e002      	b.n	8007f54 <_dtoa_r+0x574>
 8007f4e:	f001 fcb9 	bl	80098c4 <__multadd>
 8007f52:	4683      	mov	fp, r0
 8007f54:	4641      	mov	r1, r8
 8007f56:	4658      	mov	r0, fp
 8007f58:	f7ff fcac 	bl	80078b4 <quorem>
 8007f5c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8007f60:	f805 cb01 	strb.w	ip, [r5], #1
 8007f64:	ebc9 0305 	rsb	r3, r9, r5
 8007f68:	42bb      	cmp	r3, r7
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	4659      	mov	r1, fp
 8007f6e:	f04f 020a 	mov.w	r2, #10
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	dbea      	blt.n	8007f4e <_dtoa_r+0x56e>
 8007f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7a:	9a08      	ldr	r2, [sp, #32]
 8007f7c:	2a01      	cmp	r2, #1
 8007f7e:	bfac      	ite	ge
 8007f80:	189b      	addge	r3, r3, r2
 8007f82:	3301      	addlt	r3, #1
 8007f84:	461d      	mov	r5, r3
 8007f86:	f04f 0a00 	mov.w	sl, #0
 8007f8a:	4659      	mov	r1, fp
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f8cd c000 	str.w	ip, [sp]
 8007f94:	f001 fe1a 	bl	8009bcc <__lshift>
 8007f98:	4641      	mov	r1, r8
 8007f9a:	4683      	mov	fp, r0
 8007f9c:	f001 fe6c 	bl	8009c78 <__mcmp>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f8dd c000 	ldr.w	ip, [sp]
 8007fa6:	f340 82ef 	ble.w	8008588 <_dtoa_r+0xba8>
 8007faa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fb0:	1e6b      	subs	r3, r5, #1
 8007fb2:	e004      	b.n	8007fbe <_dtoa_r+0x5de>
 8007fb4:	428b      	cmp	r3, r1
 8007fb6:	f000 8275 	beq.w	80084a4 <_dtoa_r+0xac4>
 8007fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fbe:	2a39      	cmp	r2, #57	; 0x39
 8007fc0:	f103 0501 	add.w	r5, r3, #1
 8007fc4:	d0f6      	beq.n	8007fb4 <_dtoa_r+0x5d4>
 8007fc6:	3201      	adds	r2, #1
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	4641      	mov	r1, r8
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f001 fc6f 	bl	80098b0 <_Bfree>
 8007fd2:	2e00      	cmp	r6, #0
 8007fd4:	f43f aedb 	beq.w	8007d8e <_dtoa_r+0x3ae>
 8007fd8:	f1ba 0f00 	cmp.w	sl, #0
 8007fdc:	d005      	beq.n	8007fea <_dtoa_r+0x60a>
 8007fde:	45b2      	cmp	sl, r6
 8007fe0:	d003      	beq.n	8007fea <_dtoa_r+0x60a>
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f001 fc63 	bl	80098b0 <_Bfree>
 8007fea:	4631      	mov	r1, r6
 8007fec:	4620      	mov	r0, r4
 8007fee:	f001 fc5f 	bl	80098b0 <_Bfree>
 8007ff2:	e6cc      	b.n	8007d8e <_dtoa_r+0x3ae>
 8007ff4:	201c      	movs	r0, #28
 8007ff6:	e781      	b.n	8007efc <_dtoa_r+0x51c>
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <_dtoa_r+0x62c>)
 8007ffa:	9a00      	ldr	r2, [sp, #0]
 8007ffc:	1b5b      	subs	r3, r3, r5
 8007ffe:	fa02 f003 	lsl.w	r0, r2, r3
 8008002:	e566      	b.n	8007ad2 <_dtoa_r+0xf2>
 8008004:	900d      	str	r0, [sp, #52]	; 0x34
 8008006:	e5ad      	b.n	8007b64 <_dtoa_r+0x184>
 8008008:	40240000 	.word	0x40240000
 800800c:	fffffbee 	.word	0xfffffbee
 8008010:	4631      	mov	r1, r6
 8008012:	2300      	movs	r3, #0
 8008014:	4620      	mov	r0, r4
 8008016:	220a      	movs	r2, #10
 8008018:	f001 fc54 	bl	80098c4 <__multadd>
 800801c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800801e:	2b00      	cmp	r3, #0
 8008020:	4606      	mov	r6, r0
 8008022:	f340 840b 	ble.w	800883c <_dtoa_r+0xe5c>
 8008026:	9308      	str	r3, [sp, #32]
 8008028:	2d00      	cmp	r5, #0
 800802a:	dd05      	ble.n	8008038 <_dtoa_r+0x658>
 800802c:	4631      	mov	r1, r6
 800802e:	462a      	mov	r2, r5
 8008030:	4620      	mov	r0, r4
 8008032:	f001 fdcb 	bl	8009bcc <__lshift>
 8008036:	4606      	mov	r6, r0
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	f040 82ed 	bne.w	800861a <_dtoa_r+0xc3a>
 8008040:	46b1      	mov	r9, r6
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008046:	3b01      	subs	r3, #1
 8008048:	18d3      	adds	r3, r2, r3
 800804a:	9308      	str	r3, [sp, #32]
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	930a      	str	r3, [sp, #40]	; 0x28
 8008054:	4617      	mov	r7, r2
 8008056:	4641      	mov	r1, r8
 8008058:	4658      	mov	r0, fp
 800805a:	f7ff fc2b 	bl	80078b4 <quorem>
 800805e:	4631      	mov	r1, r6
 8008060:	4605      	mov	r5, r0
 8008062:	4658      	mov	r0, fp
 8008064:	f001 fe08 	bl	8009c78 <__mcmp>
 8008068:	464a      	mov	r2, r9
 800806a:	4682      	mov	sl, r0
 800806c:	4641      	mov	r1, r8
 800806e:	4620      	mov	r0, r4
 8008070:	f001 fe26 	bl	8009cc0 <__mdiff>
 8008074:	68c2      	ldr	r2, [r0, #12]
 8008076:	4603      	mov	r3, r0
 8008078:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800807c:	2a00      	cmp	r2, #0
 800807e:	f040 81ba 	bne.w	80083f6 <_dtoa_r+0xa16>
 8008082:	4619      	mov	r1, r3
 8008084:	4658      	mov	r0, fp
 8008086:	f8cd c01c 	str.w	ip, [sp, #28]
 800808a:	9306      	str	r3, [sp, #24]
 800808c:	f001 fdf4 	bl	8009c78 <__mcmp>
 8008090:	9b06      	ldr	r3, [sp, #24]
 8008092:	9000      	str	r0, [sp, #0]
 8008094:	4619      	mov	r1, r3
 8008096:	4620      	mov	r0, r4
 8008098:	f001 fc0a 	bl	80098b0 <_Bfree>
 800809c:	9a00      	ldr	r2, [sp, #0]
 800809e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80080a2:	b92a      	cbnz	r2, 80080b0 <_dtoa_r+0x6d0>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	b91b      	cbnz	r3, 80080b0 <_dtoa_r+0x6d0>
 80080a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 83aa 	beq.w	8008804 <_dtoa_r+0xe24>
 80080b0:	f1ba 0f00 	cmp.w	sl, #0
 80080b4:	f2c0 824a 	blt.w	800854c <_dtoa_r+0xb6c>
 80080b8:	d105      	bne.n	80080c6 <_dtoa_r+0x6e6>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	b91b      	cbnz	r3, 80080c6 <_dtoa_r+0x6e6>
 80080be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8243 	beq.w	800854c <_dtoa_r+0xb6c>
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	f300 82bb 	bgt.w	8008642 <_dtoa_r+0xc62>
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	f887 c000 	strb.w	ip, [r7]
 80080d2:	f107 0a01 	add.w	sl, r7, #1
 80080d6:	429f      	cmp	r7, r3
 80080d8:	4655      	mov	r5, sl
 80080da:	f000 82be 	beq.w	800865a <_dtoa_r+0xc7a>
 80080de:	4659      	mov	r1, fp
 80080e0:	220a      	movs	r2, #10
 80080e2:	2300      	movs	r3, #0
 80080e4:	4620      	mov	r0, r4
 80080e6:	f001 fbed 	bl	80098c4 <__multadd>
 80080ea:	454e      	cmp	r6, r9
 80080ec:	4683      	mov	fp, r0
 80080ee:	4631      	mov	r1, r6
 80080f0:	4620      	mov	r0, r4
 80080f2:	f04f 020a 	mov.w	r2, #10
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	f000 8176 	beq.w	80083ea <_dtoa_r+0xa0a>
 80080fe:	f001 fbe1 	bl	80098c4 <__multadd>
 8008102:	4649      	mov	r1, r9
 8008104:	4606      	mov	r6, r0
 8008106:	220a      	movs	r2, #10
 8008108:	4620      	mov	r0, r4
 800810a:	2300      	movs	r3, #0
 800810c:	f001 fbda 	bl	80098c4 <__multadd>
 8008110:	4657      	mov	r7, sl
 8008112:	4681      	mov	r9, r0
 8008114:	e79f      	b.n	8008056 <_dtoa_r+0x676>
 8008116:	2301      	movs	r3, #1
 8008118:	930b      	str	r3, [sp, #44]	; 0x2c
 800811a:	f1ba 0f00 	cmp.w	sl, #0
 800811e:	f340 820c 	ble.w	800853a <_dtoa_r+0xb5a>
 8008122:	4656      	mov	r6, sl
 8008124:	4655      	mov	r5, sl
 8008126:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800812a:	f8cd a020 	str.w	sl, [sp, #32]
 800812e:	2100      	movs	r1, #0
 8008130:	2e17      	cmp	r6, #23
 8008132:	6461      	str	r1, [r4, #68]	; 0x44
 8008134:	d90a      	bls.n	800814c <_dtoa_r+0x76c>
 8008136:	2201      	movs	r2, #1
 8008138:	2304      	movs	r3, #4
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	f103 0014 	add.w	r0, r3, #20
 8008140:	4286      	cmp	r6, r0
 8008142:	4611      	mov	r1, r2
 8008144:	f102 0201 	add.w	r2, r2, #1
 8008148:	d2f7      	bcs.n	800813a <_dtoa_r+0x75a>
 800814a:	6461      	str	r1, [r4, #68]	; 0x44
 800814c:	4620      	mov	r0, r4
 800814e:	f001 fb89 	bl	8009864 <_Balloc>
 8008152:	2d0e      	cmp	r5, #14
 8008154:	9009      	str	r0, [sp, #36]	; 0x24
 8008156:	6420      	str	r0, [r4, #64]	; 0x40
 8008158:	f63f ad55 	bhi.w	8007c06 <_dtoa_r+0x226>
 800815c:	2f00      	cmp	r7, #0
 800815e:	f43f ad52 	beq.w	8007c06 <_dtoa_r+0x226>
 8008162:	ed9d 7b00 	vldr	d7, [sp]
 8008166:	9905      	ldr	r1, [sp, #20]
 8008168:	2900      	cmp	r1, #0
 800816a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800816e:	f340 8223 	ble.w	80085b8 <_dtoa_r+0xbd8>
 8008172:	4bb7      	ldr	r3, [pc, #732]	; (8008450 <_dtoa_r+0xa70>)
 8008174:	f001 020f 	and.w	r2, r1, #15
 8008178:	110d      	asrs	r5, r1, #4
 800817a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800817e:	06e9      	lsls	r1, r5, #27
 8008180:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008184:	f140 81d2 	bpl.w	800852c <_dtoa_r+0xb4c>
 8008188:	4bb2      	ldr	r3, [pc, #712]	; (8008454 <_dtoa_r+0xa74>)
 800818a:	ec51 0b17 	vmov	r0, r1, d7
 800818e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008192:	f7f8 fc1d 	bl	80009d0 <__aeabi_ddiv>
 8008196:	e9cd 0100 	strd	r0, r1, [sp]
 800819a:	f005 050f 	and.w	r5, r5, #15
 800819e:	f04f 0803 	mov.w	r8, #3
 80081a2:	b18d      	cbz	r5, 80081c8 <_dtoa_r+0x7e8>
 80081a4:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8008454 <_dtoa_r+0xa74>
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	07ea      	lsls	r2, r5, #31
 80081ae:	d505      	bpl.n	80081bc <_dtoa_r+0x7dc>
 80081b0:	e9d9 2300 	ldrd	r2, r3, [r9]
 80081b4:	f7f8 fae2 	bl	800077c <__aeabi_dmul>
 80081b8:	f108 0801 	add.w	r8, r8, #1
 80081bc:	106d      	asrs	r5, r5, #1
 80081be:	f109 0908 	add.w	r9, r9, #8
 80081c2:	d1f3      	bne.n	80081ac <_dtoa_r+0x7cc>
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081cc:	4632      	mov	r2, r6
 80081ce:	463b      	mov	r3, r7
 80081d0:	f7f8 fbfe 	bl	80009d0 <__aeabi_ddiv>
 80081d4:	e9cd 0100 	strd	r0, r1, [sp]
 80081d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081da:	b143      	cbz	r3, 80081ee <_dtoa_r+0x80e>
 80081dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e0:	2200      	movs	r2, #0
 80081e2:	4b9d      	ldr	r3, [pc, #628]	; (8008458 <_dtoa_r+0xa78>)
 80081e4:	f7f8 fd3c 	bl	8000c60 <__aeabi_dcmplt>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f040 82ae 	bne.w	800874a <_dtoa_r+0xd6a>
 80081ee:	4640      	mov	r0, r8
 80081f0:	f7f8 fa5e 	bl	80006b0 <__aeabi_i2d>
 80081f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081f8:	f7f8 fac0 	bl	800077c <__aeabi_dmul>
 80081fc:	4b97      	ldr	r3, [pc, #604]	; (800845c <_dtoa_r+0xa7c>)
 80081fe:	2200      	movs	r2, #0
 8008200:	f7f8 f90a 	bl	8000418 <__adddf3>
 8008204:	9b08      	ldr	r3, [sp, #32]
 8008206:	4606      	mov	r6, r0
 8008208:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8162 	beq.w	80084d6 <_dtoa_r+0xaf6>
 8008212:	9b05      	ldr	r3, [sp, #20]
 8008214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008218:	9314      	str	r3, [sp, #80]	; 0x50
 800821a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8223 	beq.w	8008668 <_dtoa_r+0xc88>
 8008222:	4b8b      	ldr	r3, [pc, #556]	; (8008450 <_dtoa_r+0xa70>)
 8008224:	498e      	ldr	r1, [pc, #568]	; (8008460 <_dtoa_r+0xa80>)
 8008226:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800822a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800822e:	2000      	movs	r0, #0
 8008230:	f7f8 fbce 	bl	80009d0 <__aeabi_ddiv>
 8008234:	4632      	mov	r2, r6
 8008236:	463b      	mov	r3, r7
 8008238:	f7f8 f8ec 	bl	8000414 <__aeabi_dsub>
 800823c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008240:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8008244:	4639      	mov	r1, r7
 8008246:	4630      	mov	r0, r6
 8008248:	f7f8 fd32 	bl	8000cb0 <__aeabi_d2iz>
 800824c:	4605      	mov	r5, r0
 800824e:	f7f8 fa2f 	bl	80006b0 <__aeabi_i2d>
 8008252:	3530      	adds	r5, #48	; 0x30
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 f8da 	bl	8000414 <__aeabi_dsub>
 8008260:	fa5f f885 	uxtb.w	r8, r5
 8008264:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008266:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800826a:	f885 8000 	strb.w	r8, [r5]
 800826e:	4606      	mov	r6, r0
 8008270:	460f      	mov	r7, r1
 8008272:	3501      	adds	r5, #1
 8008274:	f7f8 fcf4 	bl	8000c60 <__aeabi_dcmplt>
 8008278:	2800      	cmp	r0, #0
 800827a:	f040 82a7 	bne.w	80087cc <_dtoa_r+0xdec>
 800827e:	4632      	mov	r2, r6
 8008280:	463b      	mov	r3, r7
 8008282:	2000      	movs	r0, #0
 8008284:	4974      	ldr	r1, [pc, #464]	; (8008458 <_dtoa_r+0xa78>)
 8008286:	f7f8 f8c5 	bl	8000414 <__aeabi_dsub>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008292:	f7f8 fd03 	bl	8000c9c <__aeabi_dcmpgt>
 8008296:	2800      	cmp	r0, #0
 8008298:	f040 82ad 	bne.w	80087f6 <_dtoa_r+0xe16>
 800829c:	f1b9 0f01 	cmp.w	r9, #1
 80082a0:	f340 8184 	ble.w	80085ac <_dtoa_r+0xbcc>
 80082a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a6:	f8cd b000 	str.w	fp, [sp]
 80082aa:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 80082ae:	4499      	add	r9, r3
 80082b0:	46a0      	mov	r8, r4
 80082b2:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 80082b6:	e00d      	b.n	80082d4 <_dtoa_r+0x8f4>
 80082b8:	2000      	movs	r0, #0
 80082ba:	4967      	ldr	r1, [pc, #412]	; (8008458 <_dtoa_r+0xa78>)
 80082bc:	f7f8 f8aa 	bl	8000414 <__aeabi_dsub>
 80082c0:	4652      	mov	r2, sl
 80082c2:	465b      	mov	r3, fp
 80082c4:	f7f8 fccc 	bl	8000c60 <__aeabi_dcmplt>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	f040 828f 	bne.w	80087ec <_dtoa_r+0xe0c>
 80082ce:	454d      	cmp	r5, r9
 80082d0:	f000 8167 	beq.w	80085a2 <_dtoa_r+0xbc2>
 80082d4:	4650      	mov	r0, sl
 80082d6:	4659      	mov	r1, fp
 80082d8:	2200      	movs	r2, #0
 80082da:	4b62      	ldr	r3, [pc, #392]	; (8008464 <_dtoa_r+0xa84>)
 80082dc:	f7f8 fa4e 	bl	800077c <__aeabi_dmul>
 80082e0:	2200      	movs	r2, #0
 80082e2:	4b60      	ldr	r3, [pc, #384]	; (8008464 <_dtoa_r+0xa84>)
 80082e4:	4682      	mov	sl, r0
 80082e6:	468b      	mov	fp, r1
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f8 fa46 	bl	800077c <__aeabi_dmul>
 80082f0:	460f      	mov	r7, r1
 80082f2:	4606      	mov	r6, r0
 80082f4:	f7f8 fcdc 	bl	8000cb0 <__aeabi_d2iz>
 80082f8:	4604      	mov	r4, r0
 80082fa:	f7f8 f9d9 	bl	80006b0 <__aeabi_i2d>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4630      	mov	r0, r6
 8008304:	4639      	mov	r1, r7
 8008306:	f7f8 f885 	bl	8000414 <__aeabi_dsub>
 800830a:	3430      	adds	r4, #48	; 0x30
 800830c:	b2e4      	uxtb	r4, r4
 800830e:	4652      	mov	r2, sl
 8008310:	465b      	mov	r3, fp
 8008312:	f805 4b01 	strb.w	r4, [r5], #1
 8008316:	4606      	mov	r6, r0
 8008318:	460f      	mov	r7, r1
 800831a:	f7f8 fca1 	bl	8000c60 <__aeabi_dcmplt>
 800831e:	4632      	mov	r2, r6
 8008320:	463b      	mov	r3, r7
 8008322:	2800      	cmp	r0, #0
 8008324:	d0c8      	beq.n	80082b8 <_dtoa_r+0x8d8>
 8008326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008328:	f8dd b000 	ldr.w	fp, [sp]
 800832c:	9305      	str	r3, [sp, #20]
 800832e:	4644      	mov	r4, r8
 8008330:	e52d      	b.n	8007d8e <_dtoa_r+0x3ae>
 8008332:	2300      	movs	r3, #0
 8008334:	930b      	str	r3, [sp, #44]	; 0x2c
 8008336:	9b05      	ldr	r3, [sp, #20]
 8008338:	4453      	add	r3, sl
 800833a:	930e      	str	r3, [sp, #56]	; 0x38
 800833c:	3301      	adds	r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	9308      	str	r3, [sp, #32]
 8008342:	f340 8101 	ble.w	8008548 <_dtoa_r+0xb68>
 8008346:	9d08      	ldr	r5, [sp, #32]
 8008348:	462e      	mov	r6, r5
 800834a:	e6f0      	b.n	800812e <_dtoa_r+0x74e>
 800834c:	2300      	movs	r3, #0
 800834e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008350:	e6e3      	b.n	800811a <_dtoa_r+0x73a>
 8008352:	9b08      	ldr	r3, [sp, #32]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f73f ac67 	bgt.w	8007c28 <_dtoa_r+0x248>
 800835a:	f040 80d4 	bne.w	8008506 <_dtoa_r+0xb26>
 800835e:	4640      	mov	r0, r8
 8008360:	2200      	movs	r2, #0
 8008362:	4b41      	ldr	r3, [pc, #260]	; (8008468 <_dtoa_r+0xa88>)
 8008364:	4649      	mov	r1, r9
 8008366:	f7f8 fa09 	bl	800077c <__aeabi_dmul>
 800836a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800836e:	f7f8 fc8b 	bl	8000c88 <__aeabi_dcmpge>
 8008372:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008376:	4646      	mov	r6, r8
 8008378:	2800      	cmp	r0, #0
 800837a:	f000 808b 	beq.w	8008494 <_dtoa_r+0xab4>
 800837e:	ea6f 030a 	mvn.w	r3, sl
 8008382:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008384:	9305      	str	r3, [sp, #20]
 8008386:	4641      	mov	r1, r8
 8008388:	4620      	mov	r0, r4
 800838a:	f001 fa91 	bl	80098b0 <_Bfree>
 800838e:	2e00      	cmp	r6, #0
 8008390:	f47f ae2b 	bne.w	8007fea <_dtoa_r+0x60a>
 8008394:	e4fb      	b.n	8007d8e <_dtoa_r+0x3ae>
 8008396:	4659      	mov	r1, fp
 8008398:	4620      	mov	r0, r4
 800839a:	f001 fbc7 	bl	8009b2c <__pow5mult>
 800839e:	4683      	mov	fp, r0
 80083a0:	e554      	b.n	8007e4c <_dtoa_r+0x46c>
 80083a2:	9b00      	ldr	r3, [sp, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f47f ad63 	bne.w	8007e70 <_dtoa_r+0x490>
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f47f ad90 	bne.w	8007ed6 <_dtoa_r+0x4f6>
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80083bc:	0d3f      	lsrs	r7, r7, #20
 80083be:	053f      	lsls	r7, r7, #20
 80083c0:	2f00      	cmp	r7, #0
 80083c2:	f000 821c 	beq.w	80087fe <_dtoa_r+0xe1e>
 80083c6:	9b07      	ldr	r3, [sp, #28]
 80083c8:	3301      	adds	r3, #1
 80083ca:	9307      	str	r3, [sp, #28]
 80083cc:	9b06      	ldr	r3, [sp, #24]
 80083ce:	3301      	adds	r3, #1
 80083d0:	9306      	str	r3, [sp, #24]
 80083d2:	f04f 0901 	mov.w	r9, #1
 80083d6:	e580      	b.n	8007eda <_dtoa_r+0x4fa>
 80083d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083da:	2a00      	cmp	r2, #0
 80083dc:	f000 81a7 	beq.w	800872e <_dtoa_r+0xd4e>
 80083e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80083e6:	9d07      	ldr	r5, [sp, #28]
 80083e8:	e4f9      	b.n	8007dde <_dtoa_r+0x3fe>
 80083ea:	f001 fa6b 	bl	80098c4 <__multadd>
 80083ee:	4657      	mov	r7, sl
 80083f0:	4606      	mov	r6, r0
 80083f2:	4681      	mov	r9, r0
 80083f4:	e62f      	b.n	8008056 <_dtoa_r+0x676>
 80083f6:	4601      	mov	r1, r0
 80083f8:	4620      	mov	r0, r4
 80083fa:	f8cd c000 	str.w	ip, [sp]
 80083fe:	f001 fa57 	bl	80098b0 <_Bfree>
 8008402:	2201      	movs	r2, #1
 8008404:	f8dd c000 	ldr.w	ip, [sp]
 8008408:	e652      	b.n	80080b0 <_dtoa_r+0x6d0>
 800840a:	4658      	mov	r0, fp
 800840c:	4641      	mov	r1, r8
 800840e:	f001 fc33 	bl	8009c78 <__mcmp>
 8008412:	2800      	cmp	r0, #0
 8008414:	f6bf ad8f 	bge.w	8007f36 <_dtoa_r+0x556>
 8008418:	9f05      	ldr	r7, [sp, #20]
 800841a:	4659      	mov	r1, fp
 800841c:	2300      	movs	r3, #0
 800841e:	4620      	mov	r0, r4
 8008420:	220a      	movs	r2, #10
 8008422:	3f01      	subs	r7, #1
 8008424:	9705      	str	r7, [sp, #20]
 8008426:	f001 fa4d 	bl	80098c4 <__multadd>
 800842a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842c:	4683      	mov	fp, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	f47f adee 	bne.w	8008010 <_dtoa_r+0x630>
 8008434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008436:	2b00      	cmp	r3, #0
 8008438:	f340 81f5 	ble.w	8008826 <_dtoa_r+0xe46>
 800843c:	9308      	str	r3, [sp, #32]
 800843e:	e581      	b.n	8007f44 <_dtoa_r+0x564>
 8008440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008442:	f7ff bb04 	b.w	8007a4e <_dtoa_r+0x6e>
 8008446:	9b00      	ldr	r3, [sp, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f47f ad44 	bne.w	8007ed6 <_dtoa_r+0x4f6>
 800844e:	e7ac      	b.n	80083aa <_dtoa_r+0x9ca>
 8008450:	08019ea0 	.word	0x08019ea0
 8008454:	08019f78 	.word	0x08019f78
 8008458:	3ff00000 	.word	0x3ff00000
 800845c:	401c0000 	.word	0x401c0000
 8008460:	3fe00000 	.word	0x3fe00000
 8008464:	40240000 	.word	0x40240000
 8008468:	40140000 	.word	0x40140000
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	2b02      	cmp	r3, #2
 8008470:	f77f ad65 	ble.w	8007f3e <_dtoa_r+0x55e>
 8008474:	9b08      	ldr	r3, [sp, #32]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d181      	bne.n	800837e <_dtoa_r+0x99e>
 800847a:	4641      	mov	r1, r8
 800847c:	2205      	movs	r2, #5
 800847e:	4620      	mov	r0, r4
 8008480:	f001 fa20 	bl	80098c4 <__multadd>
 8008484:	4680      	mov	r8, r0
 8008486:	4641      	mov	r1, r8
 8008488:	4658      	mov	r0, fp
 800848a:	f001 fbf5 	bl	8009c78 <__mcmp>
 800848e:	2800      	cmp	r0, #0
 8008490:	f77f af75 	ble.w	800837e <_dtoa_r+0x99e>
 8008494:	9a05      	ldr	r2, [sp, #20]
 8008496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008498:	2331      	movs	r3, #49	; 0x31
 800849a:	3201      	adds	r2, #1
 800849c:	9205      	str	r2, [sp, #20]
 800849e:	700b      	strb	r3, [r1, #0]
 80084a0:	1c4d      	adds	r5, r1, #1
 80084a2:	e770      	b.n	8008386 <_dtoa_r+0x9a6>
 80084a4:	9a05      	ldr	r2, [sp, #20]
 80084a6:	3201      	adds	r2, #1
 80084a8:	9205      	str	r2, [sp, #20]
 80084aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ac:	2331      	movs	r3, #49	; 0x31
 80084ae:	7013      	strb	r3, [r2, #0]
 80084b0:	e58b      	b.n	8007fca <_dtoa_r+0x5ea>
 80084b2:	f8dd b000 	ldr.w	fp, [sp]
 80084b6:	9c03      	ldr	r4, [sp, #12]
 80084b8:	e469      	b.n	8007d8e <_dtoa_r+0x3ae>
 80084ba:	4640      	mov	r0, r8
 80084bc:	f7f8 f8f8 	bl	80006b0 <__aeabi_i2d>
 80084c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084c4:	f7f8 f95a 	bl	800077c <__aeabi_dmul>
 80084c8:	2200      	movs	r2, #0
 80084ca:	4bc2      	ldr	r3, [pc, #776]	; (80087d4 <_dtoa_r+0xdf4>)
 80084cc:	f7f7 ffa4 	bl	8000418 <__adddf3>
 80084d0:	4606      	mov	r6, r0
 80084d2:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80084d6:	2200      	movs	r2, #0
 80084d8:	4bbf      	ldr	r3, [pc, #764]	; (80087d8 <_dtoa_r+0xdf8>)
 80084da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084de:	f7f7 ff99 	bl	8000414 <__aeabi_dsub>
 80084e2:	4632      	mov	r2, r6
 80084e4:	463b      	mov	r3, r7
 80084e6:	4680      	mov	r8, r0
 80084e8:	4689      	mov	r9, r1
 80084ea:	f7f8 fbd7 	bl	8000c9c <__aeabi_dcmpgt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f040 80b6 	bne.w	8008660 <_dtoa_r+0xc80>
 80084f4:	4632      	mov	r2, r6
 80084f6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 fbaf 	bl	8000c60 <__aeabi_dcmplt>
 8008502:	2800      	cmp	r0, #0
 8008504:	d052      	beq.n	80085ac <_dtoa_r+0xbcc>
 8008506:	f04f 0800 	mov.w	r8, #0
 800850a:	4646      	mov	r6, r8
 800850c:	e737      	b.n	800837e <_dtoa_r+0x99e>
 800850e:	4659      	mov	r1, fp
 8008510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008512:	4620      	mov	r0, r4
 8008514:	f001 fb0a 	bl	8009b2c <__pow5mult>
 8008518:	4683      	mov	fp, r0
 800851a:	e497      	b.n	8007e4c <_dtoa_r+0x46c>
 800851c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008520:	970a      	str	r7, [sp, #40]	; 0x28
 8008522:	1afb      	subs	r3, r7, r3
 8008524:	441a      	add	r2, r3
 8008526:	920c      	str	r2, [sp, #48]	; 0x30
 8008528:	2700      	movs	r7, #0
 800852a:	e452      	b.n	8007dd2 <_dtoa_r+0x3f2>
 800852c:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008530:	f04f 0802 	mov.w	r8, #2
 8008534:	ed8d 7b00 	vstr	d7, [sp]
 8008538:	e633      	b.n	80081a2 <_dtoa_r+0x7c2>
 800853a:	2501      	movs	r5, #1
 800853c:	950e      	str	r5, [sp, #56]	; 0x38
 800853e:	9508      	str	r5, [sp, #32]
 8008540:	46aa      	mov	sl, r5
 8008542:	2100      	movs	r1, #0
 8008544:	6461      	str	r1, [r4, #68]	; 0x44
 8008546:	e601      	b.n	800814c <_dtoa_r+0x76c>
 8008548:	461d      	mov	r5, r3
 800854a:	e7fa      	b.n	8008542 <_dtoa_r+0xb62>
 800854c:	2a00      	cmp	r2, #0
 800854e:	dd15      	ble.n	800857c <_dtoa_r+0xb9c>
 8008550:	4659      	mov	r1, fp
 8008552:	2201      	movs	r2, #1
 8008554:	4620      	mov	r0, r4
 8008556:	f8cd c000 	str.w	ip, [sp]
 800855a:	f001 fb37 	bl	8009bcc <__lshift>
 800855e:	4641      	mov	r1, r8
 8008560:	4683      	mov	fp, r0
 8008562:	f001 fb89 	bl	8009c78 <__mcmp>
 8008566:	2800      	cmp	r0, #0
 8008568:	f8dd c000 	ldr.w	ip, [sp]
 800856c:	f340 8154 	ble.w	8008818 <_dtoa_r+0xe38>
 8008570:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008574:	f000 8111 	beq.w	800879a <_dtoa_r+0xdba>
 8008578:	f10c 0c01 	add.w	ip, ip, #1
 800857c:	46b2      	mov	sl, r6
 800857e:	f887 c000 	strb.w	ip, [r7]
 8008582:	1c7d      	adds	r5, r7, #1
 8008584:	464e      	mov	r6, r9
 8008586:	e520      	b.n	8007fca <_dtoa_r+0x5ea>
 8008588:	d104      	bne.n	8008594 <_dtoa_r+0xbb4>
 800858a:	f01c 0f01 	tst.w	ip, #1
 800858e:	d001      	beq.n	8008594 <_dtoa_r+0xbb4>
 8008590:	e50b      	b.n	8007faa <_dtoa_r+0x5ca>
 8008592:	4615      	mov	r5, r2
 8008594:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008598:	2b30      	cmp	r3, #48	; 0x30
 800859a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800859e:	d0f8      	beq.n	8008592 <_dtoa_r+0xbb2>
 80085a0:	e513      	b.n	8007fca <_dtoa_r+0x5ea>
 80085a2:	f8dd b000 	ldr.w	fp, [sp]
 80085a6:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80085aa:	4644      	mov	r4, r8
 80085ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085b0:	e9cd 2300 	strd	r2, r3, [sp]
 80085b4:	f7ff bb27 	b.w	8007c06 <_dtoa_r+0x226>
 80085b8:	9b05      	ldr	r3, [sp, #20]
 80085ba:	425d      	negs	r5, r3
 80085bc:	2d00      	cmp	r5, #0
 80085be:	f000 80bd 	beq.w	800873c <_dtoa_r+0xd5c>
 80085c2:	4b86      	ldr	r3, [pc, #536]	; (80087dc <_dtoa_r+0xdfc>)
 80085c4:	f005 020f 	and.w	r2, r5, #15
 80085c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085d4:	f7f8 f8d2 	bl	800077c <__aeabi_dmul>
 80085d8:	112d      	asrs	r5, r5, #4
 80085da:	e9cd 0100 	strd	r0, r1, [sp]
 80085de:	f000 8127 	beq.w	8008830 <_dtoa_r+0xe50>
 80085e2:	4e7f      	ldr	r6, [pc, #508]	; (80087e0 <_dtoa_r+0xe00>)
 80085e4:	f04f 0802 	mov.w	r8, #2
 80085e8:	07eb      	lsls	r3, r5, #31
 80085ea:	d505      	bpl.n	80085f8 <_dtoa_r+0xc18>
 80085ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085f0:	f7f8 f8c4 	bl	800077c <__aeabi_dmul>
 80085f4:	f108 0801 	add.w	r8, r8, #1
 80085f8:	106d      	asrs	r5, r5, #1
 80085fa:	f106 0608 	add.w	r6, r6, #8
 80085fe:	d1f3      	bne.n	80085e8 <_dtoa_r+0xc08>
 8008600:	e9cd 0100 	strd	r0, r1, [sp]
 8008604:	e5e8      	b.n	80081d8 <_dtoa_r+0x7f8>
 8008606:	9a05      	ldr	r2, [sp, #20]
 8008608:	3201      	adds	r2, #1
 800860a:	9205      	str	r2, [sp, #20]
 800860c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800860e:	2330      	movs	r3, #48	; 0x30
 8008610:	7013      	strb	r3, [r2, #0]
 8008612:	2331      	movs	r3, #49	; 0x31
 8008614:	7013      	strb	r3, [r2, #0]
 8008616:	f7ff bbba 	b.w	8007d8e <_dtoa_r+0x3ae>
 800861a:	6871      	ldr	r1, [r6, #4]
 800861c:	4620      	mov	r0, r4
 800861e:	f001 f921 	bl	8009864 <_Balloc>
 8008622:	6933      	ldr	r3, [r6, #16]
 8008624:	1c9a      	adds	r2, r3, #2
 8008626:	4605      	mov	r5, r0
 8008628:	0092      	lsls	r2, r2, #2
 800862a:	f106 010c 	add.w	r1, r6, #12
 800862e:	300c      	adds	r0, #12
 8008630:	f7f7 fe52 	bl	80002d8 <memcpy>
 8008634:	4620      	mov	r0, r4
 8008636:	4629      	mov	r1, r5
 8008638:	2201      	movs	r2, #1
 800863a:	f001 fac7 	bl	8009bcc <__lshift>
 800863e:	4681      	mov	r9, r0
 8008640:	e4ff      	b.n	8008042 <_dtoa_r+0x662>
 8008642:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008646:	f000 80a8 	beq.w	800879a <_dtoa_r+0xdba>
 800864a:	f10c 0c01 	add.w	ip, ip, #1
 800864e:	46b2      	mov	sl, r6
 8008650:	f887 c000 	strb.w	ip, [r7]
 8008654:	1c7d      	adds	r5, r7, #1
 8008656:	464e      	mov	r6, r9
 8008658:	e4b7      	b.n	8007fca <_dtoa_r+0x5ea>
 800865a:	46b2      	mov	sl, r6
 800865c:	464e      	mov	r6, r9
 800865e:	e494      	b.n	8007f8a <_dtoa_r+0x5aa>
 8008660:	f04f 0800 	mov.w	r8, #0
 8008664:	4646      	mov	r6, r8
 8008666:	e715      	b.n	8008494 <_dtoa_r+0xab4>
 8008668:	495c      	ldr	r1, [pc, #368]	; (80087dc <_dtoa_r+0xdfc>)
 800866a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800866e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008672:	4632      	mov	r2, r6
 8008674:	9315      	str	r3, [sp, #84]	; 0x54
 8008676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800867a:	463b      	mov	r3, r7
 800867c:	f7f8 f87e 	bl	800077c <__aeabi_dmul>
 8008680:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008684:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8008688:	4639      	mov	r1, r7
 800868a:	4630      	mov	r0, r6
 800868c:	f7f8 fb10 	bl	8000cb0 <__aeabi_d2iz>
 8008690:	4605      	mov	r5, r0
 8008692:	f7f8 f80d 	bl	80006b0 <__aeabi_i2d>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4630      	mov	r0, r6
 800869c:	4639      	mov	r1, r7
 800869e:	f7f7 feb9 	bl	8000414 <__aeabi_dsub>
 80086a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086a4:	3530      	adds	r5, #48	; 0x30
 80086a6:	f1b9 0f01 	cmp.w	r9, #1
 80086aa:	7015      	strb	r5, [r2, #0]
 80086ac:	4606      	mov	r6, r0
 80086ae:	460f      	mov	r7, r1
 80086b0:	f102 0501 	add.w	r5, r2, #1
 80086b4:	d023      	beq.n	80086fe <_dtoa_r+0xd1e>
 80086b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b8:	f8cd b000 	str.w	fp, [sp]
 80086bc:	444b      	add	r3, r9
 80086be:	4698      	mov	r8, r3
 80086c0:	46a9      	mov	r9, r5
 80086c2:	46ab      	mov	fp, r5
 80086c4:	2200      	movs	r2, #0
 80086c6:	4b47      	ldr	r3, [pc, #284]	; (80087e4 <_dtoa_r+0xe04>)
 80086c8:	f7f8 f858 	bl	800077c <__aeabi_dmul>
 80086cc:	460f      	mov	r7, r1
 80086ce:	4606      	mov	r6, r0
 80086d0:	f7f8 faee 	bl	8000cb0 <__aeabi_d2iz>
 80086d4:	4605      	mov	r5, r0
 80086d6:	f7f7 ffeb 	bl	80006b0 <__aeabi_i2d>
 80086da:	3530      	adds	r5, #48	; 0x30
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4630      	mov	r0, r6
 80086e2:	4639      	mov	r1, r7
 80086e4:	f7f7 fe96 	bl	8000414 <__aeabi_dsub>
 80086e8:	f809 5b01 	strb.w	r5, [r9], #1
 80086ec:	45c1      	cmp	r9, r8
 80086ee:	d1e9      	bne.n	80086c4 <_dtoa_r+0xce4>
 80086f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086f2:	465d      	mov	r5, fp
 80086f4:	f8dd b000 	ldr.w	fp, [sp]
 80086f8:	4606      	mov	r6, r0
 80086fa:	460f      	mov	r7, r1
 80086fc:	441d      	add	r5, r3
 80086fe:	2200      	movs	r2, #0
 8008700:	4b39      	ldr	r3, [pc, #228]	; (80087e8 <_dtoa_r+0xe08>)
 8008702:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008706:	f7f7 fe87 	bl	8000418 <__adddf3>
 800870a:	4632      	mov	r2, r6
 800870c:	463b      	mov	r3, r7
 800870e:	f7f8 faa7 	bl	8000c60 <__aeabi_dcmplt>
 8008712:	2800      	cmp	r0, #0
 8008714:	d047      	beq.n	80087a6 <_dtoa_r+0xdc6>
 8008716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800871e:	f7ff bb24 	b.w	8007d6a <_dtoa_r+0x38a>
 8008722:	9b07      	ldr	r3, [sp, #28]
 8008724:	9a08      	ldr	r2, [sp, #32]
 8008726:	1a9d      	subs	r5, r3, r2
 8008728:	2300      	movs	r3, #0
 800872a:	f7ff bb58 	b.w	8007dde <_dtoa_r+0x3fe>
 800872e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008730:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008732:	9d07      	ldr	r5, [sp, #28]
 8008734:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008738:	f7ff bb51 	b.w	8007dde <_dtoa_r+0x3fe>
 800873c:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008740:	f04f 0802 	mov.w	r8, #2
 8008744:	ed8d 7b00 	vstr	d7, [sp]
 8008748:	e546      	b.n	80081d8 <_dtoa_r+0x7f8>
 800874a:	9b08      	ldr	r3, [sp, #32]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f43f aeb4 	beq.w	80084ba <_dtoa_r+0xada>
 8008752:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008754:	2d00      	cmp	r5, #0
 8008756:	f77f af29 	ble.w	80085ac <_dtoa_r+0xbcc>
 800875a:	2200      	movs	r2, #0
 800875c:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <_dtoa_r+0xe04>)
 800875e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008762:	f7f8 f80b 	bl	800077c <__aeabi_dmul>
 8008766:	4606      	mov	r6, r0
 8008768:	460f      	mov	r7, r1
 800876a:	f108 0001 	add.w	r0, r8, #1
 800876e:	e9cd 6700 	strd	r6, r7, [sp]
 8008772:	f7f7 ff9d 	bl	80006b0 <__aeabi_i2d>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4630      	mov	r0, r6
 800877c:	4639      	mov	r1, r7
 800877e:	f7f7 fffd 	bl	800077c <__aeabi_dmul>
 8008782:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <_dtoa_r+0xdf4>)
 8008784:	2200      	movs	r2, #0
 8008786:	f7f7 fe47 	bl	8000418 <__adddf3>
 800878a:	9b05      	ldr	r3, [sp, #20]
 800878c:	3b01      	subs	r3, #1
 800878e:	4606      	mov	r6, r0
 8008790:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8008794:	9314      	str	r3, [sp, #80]	; 0x50
 8008796:	46a9      	mov	r9, r5
 8008798:	e53f      	b.n	800821a <_dtoa_r+0x83a>
 800879a:	2239      	movs	r2, #57	; 0x39
 800879c:	46b2      	mov	sl, r6
 800879e:	703a      	strb	r2, [r7, #0]
 80087a0:	464e      	mov	r6, r9
 80087a2:	1c7d      	adds	r5, r7, #1
 80087a4:	e403      	b.n	8007fae <_dtoa_r+0x5ce>
 80087a6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80087aa:	2000      	movs	r0, #0
 80087ac:	490e      	ldr	r1, [pc, #56]	; (80087e8 <_dtoa_r+0xe08>)
 80087ae:	f7f7 fe31 	bl	8000414 <__aeabi_dsub>
 80087b2:	4632      	mov	r2, r6
 80087b4:	463b      	mov	r3, r7
 80087b6:	f7f8 fa71 	bl	8000c9c <__aeabi_dcmpgt>
 80087ba:	b908      	cbnz	r0, 80087c0 <_dtoa_r+0xde0>
 80087bc:	e6f6      	b.n	80085ac <_dtoa_r+0xbcc>
 80087be:	4615      	mov	r5, r2
 80087c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087c4:	2b30      	cmp	r3, #48	; 0x30
 80087c6:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80087ca:	d0f8      	beq.n	80087be <_dtoa_r+0xdde>
 80087cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087ce:	9305      	str	r3, [sp, #20]
 80087d0:	f7ff badd 	b.w	8007d8e <_dtoa_r+0x3ae>
 80087d4:	401c0000 	.word	0x401c0000
 80087d8:	40140000 	.word	0x40140000
 80087dc:	08019ea0 	.word	0x08019ea0
 80087e0:	08019f78 	.word	0x08019f78
 80087e4:	40240000 	.word	0x40240000
 80087e8:	3fe00000 	.word	0x3fe00000
 80087ec:	4643      	mov	r3, r8
 80087ee:	f8dd b000 	ldr.w	fp, [sp]
 80087f2:	46a0      	mov	r8, r4
 80087f4:	461c      	mov	r4, r3
 80087f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087f8:	9305      	str	r3, [sp, #20]
 80087fa:	f7ff bab6 	b.w	8007d6a <_dtoa_r+0x38a>
 80087fe:	46b9      	mov	r9, r7
 8008800:	f7ff bb6b 	b.w	8007eda <_dtoa_r+0x4fa>
 8008804:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008808:	d0c7      	beq.n	800879a <_dtoa_r+0xdba>
 800880a:	f1ba 0f00 	cmp.w	sl, #0
 800880e:	f77f aeb5 	ble.w	800857c <_dtoa_r+0xb9c>
 8008812:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8008816:	e6b1      	b.n	800857c <_dtoa_r+0xb9c>
 8008818:	f47f aeb0 	bne.w	800857c <_dtoa_r+0xb9c>
 800881c:	f01c 0f01 	tst.w	ip, #1
 8008820:	f43f aeac 	beq.w	800857c <_dtoa_r+0xb9c>
 8008824:	e6a4      	b.n	8008570 <_dtoa_r+0xb90>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	2b02      	cmp	r3, #2
 800882a:	dc04      	bgt.n	8008836 <_dtoa_r+0xe56>
 800882c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800882e:	e605      	b.n	800843c <_dtoa_r+0xa5c>
 8008830:	f04f 0802 	mov.w	r8, #2
 8008834:	e4d0      	b.n	80081d8 <_dtoa_r+0x7f8>
 8008836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008838:	9308      	str	r3, [sp, #32]
 800883a:	e61b      	b.n	8008474 <_dtoa_r+0xa94>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	2b02      	cmp	r3, #2
 8008840:	dcf9      	bgt.n	8008836 <_dtoa_r+0xe56>
 8008842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008844:	f7ff bbef 	b.w	8008026 <_dtoa_r+0x646>
 8008848:	2500      	movs	r5, #0
 800884a:	6465      	str	r5, [r4, #68]	; 0x44
 800884c:	4629      	mov	r1, r5
 800884e:	4620      	mov	r0, r4
 8008850:	f001 f808 	bl	8009864 <_Balloc>
 8008854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008858:	9308      	str	r3, [sp, #32]
 800885a:	930e      	str	r3, [sp, #56]	; 0x38
 800885c:	2301      	movs	r3, #1
 800885e:	9009      	str	r0, [sp, #36]	; 0x24
 8008860:	46aa      	mov	sl, r5
 8008862:	6420      	str	r0, [r4, #64]	; 0x40
 8008864:	930b      	str	r3, [sp, #44]	; 0x2c
 8008866:	f7ff b9ce 	b.w	8007c06 <_dtoa_r+0x226>
 800886a:	f43f ab4e 	beq.w	8007f0a <_dtoa_r+0x52a>
 800886e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008872:	f7ff bb43 	b.w	8007efc <_dtoa_r+0x51c>
 8008876:	2301      	movs	r3, #1
 8008878:	930b      	str	r3, [sp, #44]	; 0x2c
 800887a:	e55c      	b.n	8008336 <_dtoa_r+0x956>
 800887c:	2701      	movs	r7, #1
 800887e:	f7ff b98d 	b.w	8007b9c <_dtoa_r+0x1bc>
 8008882:	bf00      	nop
 8008884:	f3af 8000 	nop.w

08008888 <__sflush_r>:
 8008888:	898b      	ldrh	r3, [r1, #12]
 800888a:	b29a      	uxth	r2, r3
 800888c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008890:	460d      	mov	r5, r1
 8008892:	0711      	lsls	r1, r2, #28
 8008894:	4680      	mov	r8, r0
 8008896:	d43c      	bmi.n	8008912 <__sflush_r+0x8a>
 8008898:	686a      	ldr	r2, [r5, #4]
 800889a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800889e:	2a00      	cmp	r2, #0
 80088a0:	81ab      	strh	r3, [r5, #12]
 80088a2:	dd65      	ble.n	8008970 <__sflush_r+0xe8>
 80088a4:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	d04b      	beq.n	8008942 <__sflush_r+0xba>
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80088b0:	2100      	movs	r1, #0
 80088b2:	b292      	uxth	r2, r2
 80088b4:	f8d8 4000 	ldr.w	r4, [r8]
 80088b8:	f8c8 1000 	str.w	r1, [r8]
 80088bc:	2a00      	cmp	r2, #0
 80088be:	d05b      	beq.n	8008978 <__sflush_r+0xf0>
 80088c0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80088c2:	075f      	lsls	r7, r3, #29
 80088c4:	d505      	bpl.n	80088d2 <__sflush_r+0x4a>
 80088c6:	6869      	ldr	r1, [r5, #4]
 80088c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80088ca:	1a52      	subs	r2, r2, r1
 80088cc:	b10b      	cbz	r3, 80088d2 <__sflush_r+0x4a>
 80088ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80088d0:	1ad2      	subs	r2, r2, r3
 80088d2:	4640      	mov	r0, r8
 80088d4:	69e9      	ldr	r1, [r5, #28]
 80088d6:	2300      	movs	r3, #0
 80088d8:	47b0      	blx	r6
 80088da:	1c46      	adds	r6, r0, #1
 80088dc:	d056      	beq.n	800898c <__sflush_r+0x104>
 80088de:	89ab      	ldrh	r3, [r5, #12]
 80088e0:	692a      	ldr	r2, [r5, #16]
 80088e2:	602a      	str	r2, [r5, #0]
 80088e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2200      	movs	r2, #0
 80088ec:	606a      	str	r2, [r5, #4]
 80088ee:	04da      	lsls	r2, r3, #19
 80088f0:	81ab      	strh	r3, [r5, #12]
 80088f2:	d43b      	bmi.n	800896c <__sflush_r+0xe4>
 80088f4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80088f6:	f8c8 4000 	str.w	r4, [r8]
 80088fa:	b311      	cbz	r1, 8008942 <__sflush_r+0xba>
 80088fc:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008900:	4299      	cmp	r1, r3
 8008902:	d002      	beq.n	800890a <__sflush_r+0x82>
 8008904:	4640      	mov	r0, r8
 8008906:	f000 f955 	bl	8008bb4 <_free_r>
 800890a:	2000      	movs	r0, #0
 800890c:	6328      	str	r0, [r5, #48]	; 0x30
 800890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008912:	692e      	ldr	r6, [r5, #16]
 8008914:	b1ae      	cbz	r6, 8008942 <__sflush_r+0xba>
 8008916:	682c      	ldr	r4, [r5, #0]
 8008918:	602e      	str	r6, [r5, #0]
 800891a:	0791      	lsls	r1, r2, #30
 800891c:	bf0c      	ite	eq
 800891e:	696b      	ldreq	r3, [r5, #20]
 8008920:	2300      	movne	r3, #0
 8008922:	1ba4      	subs	r4, r4, r6
 8008924:	60ab      	str	r3, [r5, #8]
 8008926:	e00a      	b.n	800893e <__sflush_r+0xb6>
 8008928:	4632      	mov	r2, r6
 800892a:	4623      	mov	r3, r4
 800892c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800892e:	69e9      	ldr	r1, [r5, #28]
 8008930:	4640      	mov	r0, r8
 8008932:	47b8      	blx	r7
 8008934:	2800      	cmp	r0, #0
 8008936:	eba4 0400 	sub.w	r4, r4, r0
 800893a:	4406      	add	r6, r0
 800893c:	dd04      	ble.n	8008948 <__sflush_r+0xc0>
 800893e:	2c00      	cmp	r4, #0
 8008940:	dcf2      	bgt.n	8008928 <__sflush_r+0xa0>
 8008942:	2000      	movs	r0, #0
 8008944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008948:	89ab      	ldrh	r3, [r5, #12]
 800894a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894e:	81ab      	strh	r3, [r5, #12]
 8008950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008958:	89ab      	ldrh	r3, [r5, #12]
 800895a:	692a      	ldr	r2, [r5, #16]
 800895c:	6069      	str	r1, [r5, #4]
 800895e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008962:	b29b      	uxth	r3, r3
 8008964:	81ab      	strh	r3, [r5, #12]
 8008966:	04db      	lsls	r3, r3, #19
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	d5c3      	bpl.n	80088f4 <__sflush_r+0x6c>
 800896c:	6528      	str	r0, [r5, #80]	; 0x50
 800896e:	e7c1      	b.n	80088f4 <__sflush_r+0x6c>
 8008970:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8008972:	2a00      	cmp	r2, #0
 8008974:	dc96      	bgt.n	80088a4 <__sflush_r+0x1c>
 8008976:	e7e4      	b.n	8008942 <__sflush_r+0xba>
 8008978:	2301      	movs	r3, #1
 800897a:	4640      	mov	r0, r8
 800897c:	69e9      	ldr	r1, [r5, #28]
 800897e:	47b0      	blx	r6
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	4602      	mov	r2, r0
 8008984:	d019      	beq.n	80089ba <__sflush_r+0x132>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800898a:	e79a      	b.n	80088c2 <__sflush_r+0x3a>
 800898c:	f8d8 1000 	ldr.w	r1, [r8]
 8008990:	2900      	cmp	r1, #0
 8008992:	d0e1      	beq.n	8008958 <__sflush_r+0xd0>
 8008994:	291d      	cmp	r1, #29
 8008996:	d007      	beq.n	80089a8 <__sflush_r+0x120>
 8008998:	2916      	cmp	r1, #22
 800899a:	d005      	beq.n	80089a8 <__sflush_r+0x120>
 800899c:	89ab      	ldrh	r3, [r5, #12]
 800899e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a2:	81ab      	strh	r3, [r5, #12]
 80089a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a8:	89ab      	ldrh	r3, [r5, #12]
 80089aa:	692a      	ldr	r2, [r5, #16]
 80089ac:	602a      	str	r2, [r5, #0]
 80089ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089b2:	2200      	movs	r2, #0
 80089b4:	81ab      	strh	r3, [r5, #12]
 80089b6:	606a      	str	r2, [r5, #4]
 80089b8:	e79c      	b.n	80088f4 <__sflush_r+0x6c>
 80089ba:	f8d8 3000 	ldr.w	r3, [r8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0e1      	beq.n	8008986 <__sflush_r+0xfe>
 80089c2:	2b1d      	cmp	r3, #29
 80089c4:	d007      	beq.n	80089d6 <__sflush_r+0x14e>
 80089c6:	2b16      	cmp	r3, #22
 80089c8:	d005      	beq.n	80089d6 <__sflush_r+0x14e>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d0:	81ab      	strh	r3, [r5, #12]
 80089d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d6:	f8c8 4000 	str.w	r4, [r8]
 80089da:	e7b2      	b.n	8008942 <__sflush_r+0xba>

080089dc <_fflush_r>:
 80089dc:	b510      	push	{r4, lr}
 80089de:	4604      	mov	r4, r0
 80089e0:	b082      	sub	sp, #8
 80089e2:	b108      	cbz	r0, 80089e8 <_fflush_r+0xc>
 80089e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80089e6:	b153      	cbz	r3, 80089fe <_fflush_r+0x22>
 80089e8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80089ec:	b908      	cbnz	r0, 80089f2 <_fflush_r+0x16>
 80089ee:	b002      	add	sp, #8
 80089f0:	bd10      	pop	{r4, pc}
 80089f2:	4620      	mov	r0, r4
 80089f4:	b002      	add	sp, #8
 80089f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089fa:	f7ff bf45 	b.w	8008888 <__sflush_r>
 80089fe:	9101      	str	r1, [sp, #4]
 8008a00:	f000 f880 	bl	8008b04 <__sinit>
 8008a04:	9901      	ldr	r1, [sp, #4]
 8008a06:	e7ef      	b.n	80089e8 <_fflush_r+0xc>

08008a08 <_cleanup_r>:
 8008a08:	4901      	ldr	r1, [pc, #4]	; (8008a10 <_cleanup_r+0x8>)
 8008a0a:	f000 bb37 	b.w	800907c <_fwalk_reent>
 8008a0e:	bf00      	nop
 8008a10:	0800a50d 	.word	0x0800a50d

08008a14 <__sinit.part.1>:
 8008a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	4b35      	ldr	r3, [pc, #212]	; (8008af0 <__sinit.part.1+0xdc>)
 8008a1a:	6845      	ldr	r5, [r0, #4]
 8008a1c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008a1e:	2400      	movs	r4, #0
 8008a20:	4607      	mov	r7, r0
 8008a22:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8008a26:	2304      	movs	r3, #4
 8008a28:	2103      	movs	r1, #3
 8008a2a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8008a2e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8008a32:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8008a36:	b083      	sub	sp, #12
 8008a38:	602c      	str	r4, [r5, #0]
 8008a3a:	606c      	str	r4, [r5, #4]
 8008a3c:	60ac      	str	r4, [r5, #8]
 8008a3e:	666c      	str	r4, [r5, #100]	; 0x64
 8008a40:	81ec      	strh	r4, [r5, #14]
 8008a42:	612c      	str	r4, [r5, #16]
 8008a44:	616c      	str	r4, [r5, #20]
 8008a46:	61ac      	str	r4, [r5, #24]
 8008a48:	81ab      	strh	r3, [r5, #12]
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008a50:	2208      	movs	r2, #8
 8008a52:	f7fd f975 	bl	8005d40 <memset>
 8008a56:	68be      	ldr	r6, [r7, #8]
 8008a58:	f8df b098 	ldr.w	fp, [pc, #152]	; 8008af4 <__sinit.part.1+0xe0>
 8008a5c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8008af8 <__sinit.part.1+0xe4>
 8008a60:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8008afc <__sinit.part.1+0xe8>
 8008a64:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008b00 <__sinit.part.1+0xec>
 8008a68:	f8c5 b020 	str.w	fp, [r5, #32]
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	2209      	movs	r2, #9
 8008a70:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008a74:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008a78:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008a7c:	61ed      	str	r5, [r5, #28]
 8008a7e:	4621      	mov	r1, r4
 8008a80:	81f3      	strh	r3, [r6, #14]
 8008a82:	81b2      	strh	r2, [r6, #12]
 8008a84:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008a88:	6034      	str	r4, [r6, #0]
 8008a8a:	6074      	str	r4, [r6, #4]
 8008a8c:	60b4      	str	r4, [r6, #8]
 8008a8e:	6674      	str	r4, [r6, #100]	; 0x64
 8008a90:	6134      	str	r4, [r6, #16]
 8008a92:	6174      	str	r4, [r6, #20]
 8008a94:	61b4      	str	r4, [r6, #24]
 8008a96:	2208      	movs	r2, #8
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	f7fd f951 	bl	8005d40 <memset>
 8008a9e:	68fd      	ldr	r5, [r7, #12]
 8008aa0:	61f6      	str	r6, [r6, #28]
 8008aa2:	2012      	movs	r0, #18
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	f8c6 b020 	str.w	fp, [r6, #32]
 8008aaa:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8008aae:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8008ab2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	81a8      	strh	r0, [r5, #12]
 8008aba:	81ea      	strh	r2, [r5, #14]
 8008abc:	602c      	str	r4, [r5, #0]
 8008abe:	606c      	str	r4, [r5, #4]
 8008ac0:	60ac      	str	r4, [r5, #8]
 8008ac2:	666c      	str	r4, [r5, #100]	; 0x64
 8008ac4:	612c      	str	r4, [r5, #16]
 8008ac6:	616c      	str	r4, [r5, #20]
 8008ac8:	61ac      	str	r4, [r5, #24]
 8008aca:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008ace:	2208      	movs	r2, #8
 8008ad0:	f7fd f936 	bl	8005d40 <memset>
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	61ed      	str	r5, [r5, #28]
 8008ad8:	f8c5 b020 	str.w	fp, [r5, #32]
 8008adc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008ae0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008ae4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008aea:	b003      	add	sp, #12
 8008aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af0:	08008a09 	.word	0x08008a09
 8008af4:	0800a2f1 	.word	0x0800a2f1
 8008af8:	0800a315 	.word	0x0800a315
 8008afc:	0800a34d 	.word	0x0800a34d
 8008b00:	0800a36d 	.word	0x0800a36d

08008b04 <__sinit>:
 8008b04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008b06:	b103      	cbz	r3, 8008b0a <__sinit+0x6>
 8008b08:	4770      	bx	lr
 8008b0a:	f7ff bf83 	b.w	8008a14 <__sinit.part.1>
 8008b0e:	bf00      	nop

08008b10 <__sfp_lock_acquire>:
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop

08008b14 <__sfp_lock_release>:
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop

08008b18 <_malloc_trim_r>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	4f23      	ldr	r7, [pc, #140]	; (8008ba8 <_malloc_trim_r+0x90>)
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	4606      	mov	r6, r0
 8008b20:	f000 fe9c 	bl	800985c <__malloc_lock>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	685d      	ldr	r5, [r3, #4]
 8008b28:	f025 0503 	bic.w	r5, r5, #3
 8008b2c:	1b29      	subs	r1, r5, r4
 8008b2e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8008b32:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8008b36:	f021 010f 	bic.w	r1, r1, #15
 8008b3a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8008b3e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8008b42:	db07      	blt.n	8008b54 <_malloc_trim_r+0x3c>
 8008b44:	4630      	mov	r0, r6
 8008b46:	2100      	movs	r1, #0
 8008b48:	f7f8 fe76 	bl	8001838 <_sbrk_r>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	442b      	add	r3, r5
 8008b50:	4298      	cmp	r0, r3
 8008b52:	d004      	beq.n	8008b5e <_malloc_trim_r+0x46>
 8008b54:	4630      	mov	r0, r6
 8008b56:	f000 fe83 	bl	8009860 <__malloc_unlock>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4261      	negs	r1, r4
 8008b62:	f7f8 fe69 	bl	8001838 <_sbrk_r>
 8008b66:	3001      	adds	r0, #1
 8008b68:	d00d      	beq.n	8008b86 <_malloc_trim_r+0x6e>
 8008b6a:	4b10      	ldr	r3, [pc, #64]	; (8008bac <_malloc_trim_r+0x94>)
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	6819      	ldr	r1, [r3, #0]
 8008b70:	1b2d      	subs	r5, r5, r4
 8008b72:	f045 0501 	orr.w	r5, r5, #1
 8008b76:	4630      	mov	r0, r6
 8008b78:	1b09      	subs	r1, r1, r4
 8008b7a:	6055      	str	r5, [r2, #4]
 8008b7c:	6019      	str	r1, [r3, #0]
 8008b7e:	f000 fe6f 	bl	8009860 <__malloc_unlock>
 8008b82:	2001      	movs	r0, #1
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b86:	4630      	mov	r0, r6
 8008b88:	2100      	movs	r1, #0
 8008b8a:	f7f8 fe55 	bl	8001838 <_sbrk_r>
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	1a83      	subs	r3, r0, r2
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	ddde      	ble.n	8008b54 <_malloc_trim_r+0x3c>
 8008b96:	4c06      	ldr	r4, [pc, #24]	; (8008bb0 <_malloc_trim_r+0x98>)
 8008b98:	4904      	ldr	r1, [pc, #16]	; (8008bac <_malloc_trim_r+0x94>)
 8008b9a:	6824      	ldr	r4, [r4, #0]
 8008b9c:	f043 0301 	orr.w	r3, r3, #1
 8008ba0:	1b00      	subs	r0, r0, r4
 8008ba2:	6053      	str	r3, [r2, #4]
 8008ba4:	6008      	str	r0, [r1, #0]
 8008ba6:	e7d5      	b.n	8008b54 <_malloc_trim_r+0x3c>
 8008ba8:	20000690 	.word	0x20000690
 8008bac:	20000eec 	.word	0x20000eec
 8008bb0:	20000a9c 	.word	0x20000a9c

08008bb4 <_free_r>:
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d04e      	beq.n	8008c56 <_free_r+0xa2>
 8008bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	4680      	mov	r8, r0
 8008bc0:	f000 fe4c 	bl	800985c <__malloc_lock>
 8008bc4:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8008bc8:	4962      	ldr	r1, [pc, #392]	; (8008d54 <_free_r+0x1a0>)
 8008bca:	f027 0201 	bic.w	r2, r7, #1
 8008bce:	f1a4 0508 	sub.w	r5, r4, #8
 8008bd2:	18ab      	adds	r3, r5, r2
 8008bd4:	688e      	ldr	r6, [r1, #8]
 8008bd6:	6858      	ldr	r0, [r3, #4]
 8008bd8:	429e      	cmp	r6, r3
 8008bda:	f020 0003 	bic.w	r0, r0, #3
 8008bde:	d05a      	beq.n	8008c96 <_free_r+0xe2>
 8008be0:	07fe      	lsls	r6, r7, #31
 8008be2:	6058      	str	r0, [r3, #4]
 8008be4:	d40b      	bmi.n	8008bfe <_free_r+0x4a>
 8008be6:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8008bea:	1bed      	subs	r5, r5, r7
 8008bec:	f101 0e08 	add.w	lr, r1, #8
 8008bf0:	68ac      	ldr	r4, [r5, #8]
 8008bf2:	4574      	cmp	r4, lr
 8008bf4:	443a      	add	r2, r7
 8008bf6:	d067      	beq.n	8008cc8 <_free_r+0x114>
 8008bf8:	68ef      	ldr	r7, [r5, #12]
 8008bfa:	60e7      	str	r7, [r4, #12]
 8008bfc:	60bc      	str	r4, [r7, #8]
 8008bfe:	181c      	adds	r4, r3, r0
 8008c00:	6864      	ldr	r4, [r4, #4]
 8008c02:	07e4      	lsls	r4, r4, #31
 8008c04:	d40c      	bmi.n	8008c20 <_free_r+0x6c>
 8008c06:	4f54      	ldr	r7, [pc, #336]	; (8008d58 <_free_r+0x1a4>)
 8008c08:	689c      	ldr	r4, [r3, #8]
 8008c0a:	42bc      	cmp	r4, r7
 8008c0c:	4402      	add	r2, r0
 8008c0e:	d07c      	beq.n	8008d0a <_free_r+0x156>
 8008c10:	68d8      	ldr	r0, [r3, #12]
 8008c12:	60e0      	str	r0, [r4, #12]
 8008c14:	f042 0301 	orr.w	r3, r2, #1
 8008c18:	6084      	str	r4, [r0, #8]
 8008c1a:	606b      	str	r3, [r5, #4]
 8008c1c:	50aa      	str	r2, [r5, r2]
 8008c1e:	e003      	b.n	8008c28 <_free_r+0x74>
 8008c20:	f042 0301 	orr.w	r3, r2, #1
 8008c24:	606b      	str	r3, [r5, #4]
 8008c26:	50aa      	str	r2, [r5, r2]
 8008c28:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8008c2c:	d214      	bcs.n	8008c58 <_free_r+0xa4>
 8008c2e:	08d2      	lsrs	r2, r2, #3
 8008c30:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8008c34:	6848      	ldr	r0, [r1, #4]
 8008c36:	689f      	ldr	r7, [r3, #8]
 8008c38:	60af      	str	r7, [r5, #8]
 8008c3a:	1092      	asrs	r2, r2, #2
 8008c3c:	2401      	movs	r4, #1
 8008c3e:	fa04 f202 	lsl.w	r2, r4, r2
 8008c42:	4310      	orrs	r0, r2
 8008c44:	60eb      	str	r3, [r5, #12]
 8008c46:	6048      	str	r0, [r1, #4]
 8008c48:	609d      	str	r5, [r3, #8]
 8008c4a:	60fd      	str	r5, [r7, #12]
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c52:	f000 be05 	b.w	8009860 <__malloc_unlock>
 8008c56:	4770      	bx	lr
 8008c58:	0a53      	lsrs	r3, r2, #9
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d847      	bhi.n	8008cee <_free_r+0x13a>
 8008c5e:	0993      	lsrs	r3, r2, #6
 8008c60:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8008c64:	0060      	lsls	r0, r4, #1
 8008c66:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8008c6a:	493a      	ldr	r1, [pc, #232]	; (8008d54 <_free_r+0x1a0>)
 8008c6c:	6883      	ldr	r3, [r0, #8]
 8008c6e:	4283      	cmp	r3, r0
 8008c70:	d043      	beq.n	8008cfa <_free_r+0x146>
 8008c72:	6859      	ldr	r1, [r3, #4]
 8008c74:	f021 0103 	bic.w	r1, r1, #3
 8008c78:	4291      	cmp	r1, r2
 8008c7a:	d902      	bls.n	8008c82 <_free_r+0xce>
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	4298      	cmp	r0, r3
 8008c80:	d1f7      	bne.n	8008c72 <_free_r+0xbe>
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	60ea      	str	r2, [r5, #12]
 8008c86:	60ab      	str	r3, [r5, #8]
 8008c88:	4640      	mov	r0, r8
 8008c8a:	6095      	str	r5, [r2, #8]
 8008c8c:	60dd      	str	r5, [r3, #12]
 8008c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c92:	f000 bde5 	b.w	8009860 <__malloc_unlock>
 8008c96:	07ff      	lsls	r7, r7, #31
 8008c98:	4402      	add	r2, r0
 8008c9a:	d407      	bmi.n	8008cac <_free_r+0xf8>
 8008c9c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8008ca0:	1aed      	subs	r5, r5, r3
 8008ca2:	441a      	add	r2, r3
 8008ca4:	68a8      	ldr	r0, [r5, #8]
 8008ca6:	68eb      	ldr	r3, [r5, #12]
 8008ca8:	60c3      	str	r3, [r0, #12]
 8008caa:	6098      	str	r0, [r3, #8]
 8008cac:	4b2b      	ldr	r3, [pc, #172]	; (8008d5c <_free_r+0x1a8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0001 	orr.w	r0, r2, #1
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	6068      	str	r0, [r5, #4]
 8008cb8:	608d      	str	r5, [r1, #8]
 8008cba:	d3c7      	bcc.n	8008c4c <_free_r+0x98>
 8008cbc:	4b28      	ldr	r3, [pc, #160]	; (8008d60 <_free_r+0x1ac>)
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	f7ff ff29 	bl	8008b18 <_malloc_trim_r>
 8008cc6:	e7c1      	b.n	8008c4c <_free_r+0x98>
 8008cc8:	1819      	adds	r1, r3, r0
 8008cca:	6849      	ldr	r1, [r1, #4]
 8008ccc:	07c9      	lsls	r1, r1, #31
 8008cce:	d409      	bmi.n	8008ce4 <_free_r+0x130>
 8008cd0:	68d9      	ldr	r1, [r3, #12]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	4402      	add	r2, r0
 8008cd6:	f042 0001 	orr.w	r0, r2, #1
 8008cda:	60d9      	str	r1, [r3, #12]
 8008cdc:	608b      	str	r3, [r1, #8]
 8008cde:	6068      	str	r0, [r5, #4]
 8008ce0:	50aa      	str	r2, [r5, r2]
 8008ce2:	e7b3      	b.n	8008c4c <_free_r+0x98>
 8008ce4:	f042 0301 	orr.w	r3, r2, #1
 8008ce8:	606b      	str	r3, [r5, #4]
 8008cea:	50aa      	str	r2, [r5, r2]
 8008cec:	e7ae      	b.n	8008c4c <_free_r+0x98>
 8008cee:	2b14      	cmp	r3, #20
 8008cf0:	d814      	bhi.n	8008d1c <_free_r+0x168>
 8008cf2:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8008cf6:	0060      	lsls	r0, r4, #1
 8008cf8:	e7b5      	b.n	8008c66 <_free_r+0xb2>
 8008cfa:	684a      	ldr	r2, [r1, #4]
 8008cfc:	10a4      	asrs	r4, r4, #2
 8008cfe:	2001      	movs	r0, #1
 8008d00:	40a0      	lsls	r0, r4
 8008d02:	4302      	orrs	r2, r0
 8008d04:	604a      	str	r2, [r1, #4]
 8008d06:	461a      	mov	r2, r3
 8008d08:	e7bc      	b.n	8008c84 <_free_r+0xd0>
 8008d0a:	f042 0301 	orr.w	r3, r2, #1
 8008d0e:	614d      	str	r5, [r1, #20]
 8008d10:	610d      	str	r5, [r1, #16]
 8008d12:	60ec      	str	r4, [r5, #12]
 8008d14:	60ac      	str	r4, [r5, #8]
 8008d16:	606b      	str	r3, [r5, #4]
 8008d18:	50aa      	str	r2, [r5, r2]
 8008d1a:	e797      	b.n	8008c4c <_free_r+0x98>
 8008d1c:	2b54      	cmp	r3, #84	; 0x54
 8008d1e:	d804      	bhi.n	8008d2a <_free_r+0x176>
 8008d20:	0b13      	lsrs	r3, r2, #12
 8008d22:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8008d26:	0060      	lsls	r0, r4, #1
 8008d28:	e79d      	b.n	8008c66 <_free_r+0xb2>
 8008d2a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008d2e:	d804      	bhi.n	8008d3a <_free_r+0x186>
 8008d30:	0bd3      	lsrs	r3, r2, #15
 8008d32:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8008d36:	0060      	lsls	r0, r4, #1
 8008d38:	e795      	b.n	8008c66 <_free_r+0xb2>
 8008d3a:	f240 5054 	movw	r0, #1364	; 0x554
 8008d3e:	4283      	cmp	r3, r0
 8008d40:	d804      	bhi.n	8008d4c <_free_r+0x198>
 8008d42:	0c93      	lsrs	r3, r2, #18
 8008d44:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8008d48:	0060      	lsls	r0, r4, #1
 8008d4a:	e78c      	b.n	8008c66 <_free_r+0xb2>
 8008d4c:	20fc      	movs	r0, #252	; 0xfc
 8008d4e:	247e      	movs	r4, #126	; 0x7e
 8008d50:	e789      	b.n	8008c66 <_free_r+0xb2>
 8008d52:	bf00      	nop
 8008d54:	20000690 	.word	0x20000690
 8008d58:	20000698 	.word	0x20000698
 8008d5c:	20000a98 	.word	0x20000a98
 8008d60:	20000ee8 	.word	0x20000ee8

08008d64 <__sfvwrite_r>:
 8008d64:	6893      	ldr	r3, [r2, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d07a      	beq.n	8008e60 <__sfvwrite_r+0xfc>
 8008d6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8008d72:	f01e 0f08 	tst.w	lr, #8
 8008d76:	b083      	sub	sp, #12
 8008d78:	460c      	mov	r4, r1
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	4616      	mov	r6, r2
 8008d7e:	d026      	beq.n	8008dce <__sfvwrite_r+0x6a>
 8008d80:	690b      	ldr	r3, [r1, #16]
 8008d82:	b323      	cbz	r3, 8008dce <__sfvwrite_r+0x6a>
 8008d84:	f00e 0802 	and.w	r8, lr, #2
 8008d88:	fa1f f088 	uxth.w	r0, r8
 8008d8c:	6835      	ldr	r5, [r6, #0]
 8008d8e:	b370      	cbz	r0, 8008dee <__sfvwrite_r+0x8a>
 8008d90:	f04f 0a00 	mov.w	sl, #0
 8008d94:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8009078 <__sfvwrite_r+0x314>
 8008d98:	46d0      	mov	r8, sl
 8008d9a:	45d8      	cmp	r8, fp
 8008d9c:	4643      	mov	r3, r8
 8008d9e:	4652      	mov	r2, sl
 8008da0:	bf28      	it	cs
 8008da2:	465b      	movcs	r3, fp
 8008da4:	4648      	mov	r0, r9
 8008da6:	f1b8 0f00 	cmp.w	r8, #0
 8008daa:	d053      	beq.n	8008e54 <__sfvwrite_r+0xf0>
 8008dac:	69e1      	ldr	r1, [r4, #28]
 8008dae:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008db0:	47b8      	blx	r7
 8008db2:	2800      	cmp	r0, #0
 8008db4:	dd73      	ble.n	8008e9e <__sfvwrite_r+0x13a>
 8008db6:	68b3      	ldr	r3, [r6, #8]
 8008db8:	1a1b      	subs	r3, r3, r0
 8008dba:	4482      	add	sl, r0
 8008dbc:	ebc0 0808 	rsb	r8, r0, r8
 8008dc0:	60b3      	str	r3, [r6, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e9      	bne.n	8008d9a <__sfvwrite_r+0x36>
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	b003      	add	sp, #12
 8008dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dce:	4648      	mov	r0, r9
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f7fe fcb1 	bl	8007738 <__swsetup_r>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f040 8145 	bne.w	8009066 <__sfvwrite_r+0x302>
 8008ddc:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8008de0:	6835      	ldr	r5, [r6, #0]
 8008de2:	f00e 0802 	and.w	r8, lr, #2
 8008de6:	fa1f f088 	uxth.w	r0, r8
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d1d0      	bne.n	8008d90 <__sfvwrite_r+0x2c>
 8008dee:	f01e 0b01 	ands.w	fp, lr, #1
 8008df2:	d15d      	bne.n	8008eb0 <__sfvwrite_r+0x14c>
 8008df4:	46d8      	mov	r8, fp
 8008df6:	f1b8 0f00 	cmp.w	r8, #0
 8008dfa:	d025      	beq.n	8008e48 <__sfvwrite_r+0xe4>
 8008dfc:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8008e00:	68a7      	ldr	r7, [r4, #8]
 8008e02:	d02f      	beq.n	8008e64 <__sfvwrite_r+0x100>
 8008e04:	45b8      	cmp	r8, r7
 8008e06:	46ba      	mov	sl, r7
 8008e08:	f0c0 80a9 	bcc.w	8008f5e <__sfvwrite_r+0x1fa>
 8008e0c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8008e10:	f040 80b6 	bne.w	8008f80 <__sfvwrite_r+0x21c>
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	4652      	mov	r2, sl
 8008e18:	4659      	mov	r1, fp
 8008e1a:	f000 fcbb 	bl	8009794 <memmove>
 8008e1e:	68a0      	ldr	r0, [r4, #8]
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	1bc0      	subs	r0, r0, r7
 8008e24:	eb02 030a 	add.w	r3, r2, sl
 8008e28:	60a0      	str	r0, [r4, #8]
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	68b3      	ldr	r3, [r6, #8]
 8008e30:	1a1b      	subs	r3, r3, r0
 8008e32:	4483      	add	fp, r0
 8008e34:	ebc0 0808 	rsb	r8, r0, r8
 8008e38:	60b3      	str	r3, [r6, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0c3      	beq.n	8008dc6 <__sfvwrite_r+0x62>
 8008e3e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8008e42:	f1b8 0f00 	cmp.w	r8, #0
 8008e46:	d1d9      	bne.n	8008dfc <__sfvwrite_r+0x98>
 8008e48:	f8d5 b000 	ldr.w	fp, [r5]
 8008e4c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008e50:	3508      	adds	r5, #8
 8008e52:	e7d0      	b.n	8008df6 <__sfvwrite_r+0x92>
 8008e54:	f8d5 a000 	ldr.w	sl, [r5]
 8008e58:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008e5c:	3508      	adds	r5, #8
 8008e5e:	e79c      	b.n	8008d9a <__sfvwrite_r+0x36>
 8008e60:	2000      	movs	r0, #0
 8008e62:	4770      	bx	lr
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	4298      	cmp	r0, r3
 8008e6a:	d803      	bhi.n	8008e74 <__sfvwrite_r+0x110>
 8008e6c:	6962      	ldr	r2, [r4, #20]
 8008e6e:	4590      	cmp	r8, r2
 8008e70:	f080 80b9 	bcs.w	8008fe6 <__sfvwrite_r+0x282>
 8008e74:	4547      	cmp	r7, r8
 8008e76:	bf28      	it	cs
 8008e78:	4647      	movcs	r7, r8
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	f000 fc89 	bl	8009794 <memmove>
 8008e82:	68a3      	ldr	r3, [r4, #8]
 8008e84:	6822      	ldr	r2, [r4, #0]
 8008e86:	1bdb      	subs	r3, r3, r7
 8008e88:	443a      	add	r2, r7
 8008e8a:	60a3      	str	r3, [r4, #8]
 8008e8c:	6022      	str	r2, [r4, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d14a      	bne.n	8008f28 <__sfvwrite_r+0x1c4>
 8008e92:	4648      	mov	r0, r9
 8008e94:	4621      	mov	r1, r4
 8008e96:	f7ff fda1 	bl	80089dc <_fflush_r>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d044      	beq.n	8008f28 <__sfvwrite_r+0x1c4>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	b003      	add	sp, #12
 8008eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	9000      	str	r0, [sp, #0]
 8008eb4:	4683      	mov	fp, r0
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	f1ba 0f00 	cmp.w	sl, #0
 8008ebc:	d02c      	beq.n	8008f18 <__sfvwrite_r+0x1b4>
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d050      	beq.n	8008f66 <__sfvwrite_r+0x202>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	6921      	ldr	r1, [r4, #16]
 8008ec8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8008ecc:	6962      	ldr	r2, [r4, #20]
 8008ece:	45d0      	cmp	r8, sl
 8008ed0:	4643      	mov	r3, r8
 8008ed2:	bf28      	it	cs
 8008ed4:	4653      	movcs	r3, sl
 8008ed6:	4288      	cmp	r0, r1
 8008ed8:	461f      	mov	r7, r3
 8008eda:	d904      	bls.n	8008ee6 <__sfvwrite_r+0x182>
 8008edc:	eb0e 0c02 	add.w	ip, lr, r2
 8008ee0:	4563      	cmp	r3, ip
 8008ee2:	f300 8092 	bgt.w	800900a <__sfvwrite_r+0x2a6>
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	db20      	blt.n	8008f2c <__sfvwrite_r+0x1c8>
 8008eea:	4613      	mov	r3, r2
 8008eec:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008eee:	69e1      	ldr	r1, [r4, #28]
 8008ef0:	4648      	mov	r0, r9
 8008ef2:	465a      	mov	r2, fp
 8008ef4:	47b8      	blx	r7
 8008ef6:	1e07      	subs	r7, r0, #0
 8008ef8:	ddd1      	ble.n	8008e9e <__sfvwrite_r+0x13a>
 8008efa:	ebb8 0807 	subs.w	r8, r8, r7
 8008efe:	d025      	beq.n	8008f4c <__sfvwrite_r+0x1e8>
 8008f00:	68b3      	ldr	r3, [r6, #8]
 8008f02:	1bdb      	subs	r3, r3, r7
 8008f04:	44bb      	add	fp, r7
 8008f06:	ebc7 0a0a 	rsb	sl, r7, sl
 8008f0a:	60b3      	str	r3, [r6, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f43f af5a 	beq.w	8008dc6 <__sfvwrite_r+0x62>
 8008f12:	f1ba 0f00 	cmp.w	sl, #0
 8008f16:	d1d2      	bne.n	8008ebe <__sfvwrite_r+0x15a>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8d5 b000 	ldr.w	fp, [r5]
 8008f1e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	3508      	adds	r5, #8
 8008f26:	e7c7      	b.n	8008eb8 <__sfvwrite_r+0x154>
 8008f28:	4638      	mov	r0, r7
 8008f2a:	e780      	b.n	8008e2e <__sfvwrite_r+0xca>
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4659      	mov	r1, fp
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	f000 fc2f 	bl	8009794 <memmove>
 8008f36:	68a2      	ldr	r2, [r4, #8]
 8008f38:	6821      	ldr	r1, [r4, #0]
 8008f3a:	9b01      	ldr	r3, [sp, #4]
 8008f3c:	ebb8 0807 	subs.w	r8, r8, r7
 8008f40:	eba2 0203 	sub.w	r2, r2, r3
 8008f44:	440b      	add	r3, r1
 8008f46:	60a2      	str	r2, [r4, #8]
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	d1d9      	bne.n	8008f00 <__sfvwrite_r+0x19c>
 8008f4c:	4648      	mov	r0, r9
 8008f4e:	4621      	mov	r1, r4
 8008f50:	f7ff fd44 	bl	80089dc <_fflush_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d1a2      	bne.n	8008e9e <__sfvwrite_r+0x13a>
 8008f58:	f8cd 8000 	str.w	r8, [sp]
 8008f5c:	e7d0      	b.n	8008f00 <__sfvwrite_r+0x19c>
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	4647      	mov	r7, r8
 8008f62:	46c2      	mov	sl, r8
 8008f64:	e757      	b.n	8008e16 <__sfvwrite_r+0xb2>
 8008f66:	4658      	mov	r0, fp
 8008f68:	210a      	movs	r1, #10
 8008f6a:	4652      	mov	r2, sl
 8008f6c:	f000 fbc8 	bl	8009700 <memchr>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d073      	beq.n	800905c <__sfvwrite_r+0x2f8>
 8008f74:	3001      	adds	r0, #1
 8008f76:	2301      	movs	r3, #1
 8008f78:	ebcb 0800 	rsb	r8, fp, r0
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	e7a1      	b.n	8008ec4 <__sfvwrite_r+0x160>
 8008f80:	6967      	ldr	r7, [r4, #20]
 8008f82:	6921      	ldr	r1, [r4, #16]
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008f8a:	1a5b      	subs	r3, r3, r1
 8008f8c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8008f90:	1c58      	adds	r0, r3, #1
 8008f92:	107f      	asrs	r7, r7, #1
 8008f94:	4440      	add	r0, r8
 8008f96:	4287      	cmp	r7, r0
 8008f98:	463a      	mov	r2, r7
 8008f9a:	bf3c      	itt	cc
 8008f9c:	4607      	movcc	r7, r0
 8008f9e:	463a      	movcc	r2, r7
 8008fa0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	d046      	beq.n	8009036 <__sfvwrite_r+0x2d2>
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4648      	mov	r0, r9
 8008fac:	f000 f916 	bl	80091dc <_malloc_r>
 8008fb0:	9b00      	ldr	r3, [sp, #0]
 8008fb2:	4682      	mov	sl, r0
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d059      	beq.n	800906c <__sfvwrite_r+0x308>
 8008fb8:	461a      	mov	r2, r3
 8008fba:	6921      	ldr	r1, [r4, #16]
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	f7f7 f98b 	bl	80002d8 <memcpy>
 8008fc2:	89a2      	ldrh	r2, [r4, #12]
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fce:	81a2      	strh	r2, [r4, #12]
 8008fd0:	eb0a 0003 	add.w	r0, sl, r3
 8008fd4:	1afb      	subs	r3, r7, r3
 8008fd6:	f8c4 a010 	str.w	sl, [r4, #16]
 8008fda:	6167      	str	r7, [r4, #20]
 8008fdc:	6020      	str	r0, [r4, #0]
 8008fde:	60a3      	str	r3, [r4, #8]
 8008fe0:	4647      	mov	r7, r8
 8008fe2:	46c2      	mov	sl, r8
 8008fe4:	e717      	b.n	8008e16 <__sfvwrite_r+0xb2>
 8008fe6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008fea:	4543      	cmp	r3, r8
 8008fec:	bf28      	it	cs
 8008fee:	4643      	movcs	r3, r8
 8008ff0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008ff2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ff6:	4648      	mov	r0, r9
 8008ff8:	fb03 f302 	mul.w	r3, r3, r2
 8008ffc:	69e1      	ldr	r1, [r4, #28]
 8008ffe:	465a      	mov	r2, fp
 8009000:	47b8      	blx	r7
 8009002:	2800      	cmp	r0, #0
 8009004:	f73f af13 	bgt.w	8008e2e <__sfvwrite_r+0xca>
 8009008:	e749      	b.n	8008e9e <__sfvwrite_r+0x13a>
 800900a:	4662      	mov	r2, ip
 800900c:	4659      	mov	r1, fp
 800900e:	f8cd c004 	str.w	ip, [sp, #4]
 8009012:	f000 fbbf 	bl	8009794 <memmove>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	f8dd c004 	ldr.w	ip, [sp, #4]
 800901c:	4463      	add	r3, ip
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	4648      	mov	r0, r9
 8009022:	4621      	mov	r1, r4
 8009024:	f7ff fcda 	bl	80089dc <_fflush_r>
 8009028:	f8dd c004 	ldr.w	ip, [sp, #4]
 800902c:	2800      	cmp	r0, #0
 800902e:	f47f af36 	bne.w	8008e9e <__sfvwrite_r+0x13a>
 8009032:	4667      	mov	r7, ip
 8009034:	e761      	b.n	8008efa <__sfvwrite_r+0x196>
 8009036:	4648      	mov	r0, r9
 8009038:	f000 ff36 	bl	8009ea8 <_realloc_r>
 800903c:	9b00      	ldr	r3, [sp, #0]
 800903e:	4682      	mov	sl, r0
 8009040:	2800      	cmp	r0, #0
 8009042:	d1c5      	bne.n	8008fd0 <__sfvwrite_r+0x26c>
 8009044:	4648      	mov	r0, r9
 8009046:	6921      	ldr	r1, [r4, #16]
 8009048:	f7ff fdb4 	bl	8008bb4 <_free_r>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	220c      	movs	r2, #12
 8009050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009054:	b29b      	uxth	r3, r3
 8009056:	f8c9 2000 	str.w	r2, [r9]
 800905a:	e721      	b.n	8008ea0 <__sfvwrite_r+0x13c>
 800905c:	2301      	movs	r3, #1
 800905e:	f10a 0801 	add.w	r8, sl, #1
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	e72e      	b.n	8008ec4 <__sfvwrite_r+0x160>
 8009066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800906a:	e6ad      	b.n	8008dc8 <__sfvwrite_r+0x64>
 800906c:	230c      	movs	r3, #12
 800906e:	f8c9 3000 	str.w	r3, [r9]
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	e714      	b.n	8008ea0 <__sfvwrite_r+0x13c>
 8009076:	bf00      	nop
 8009078:	7ffffc00 	.word	0x7ffffc00

0800907c <_fwalk_reent>:
 800907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009080:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8009084:	d01f      	beq.n	80090c6 <_fwalk_reent+0x4a>
 8009086:	4688      	mov	r8, r1
 8009088:	4606      	mov	r6, r0
 800908a:	f04f 0900 	mov.w	r9, #0
 800908e:	687d      	ldr	r5, [r7, #4]
 8009090:	68bc      	ldr	r4, [r7, #8]
 8009092:	3d01      	subs	r5, #1
 8009094:	d411      	bmi.n	80090ba <_fwalk_reent+0x3e>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	2b01      	cmp	r3, #1
 800909a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800909e:	d908      	bls.n	80090b2 <_fwalk_reent+0x36>
 80090a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80090a4:	3301      	adds	r3, #1
 80090a6:	4621      	mov	r1, r4
 80090a8:	4630      	mov	r0, r6
 80090aa:	d002      	beq.n	80090b2 <_fwalk_reent+0x36>
 80090ac:	47c0      	blx	r8
 80090ae:	ea49 0900 	orr.w	r9, r9, r0
 80090b2:	1c6b      	adds	r3, r5, #1
 80090b4:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80090b8:	d1ed      	bne.n	8009096 <_fwalk_reent+0x1a>
 80090ba:	683f      	ldr	r7, [r7, #0]
 80090bc:	2f00      	cmp	r7, #0
 80090be:	d1e6      	bne.n	800908e <_fwalk_reent+0x12>
 80090c0:	4648      	mov	r0, r9
 80090c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c6:	46b9      	mov	r9, r7
 80090c8:	4648      	mov	r0, r9
 80090ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ce:	bf00      	nop

080090d0 <__locale_charset>:
 80090d0:	4800      	ldr	r0, [pc, #0]	; (80090d4 <__locale_charset+0x4>)
 80090d2:	4770      	bx	lr
 80090d4:	2000066c 	.word	0x2000066c

080090d8 <__locale_mb_cur_max>:
 80090d8:	4b01      	ldr	r3, [pc, #4]	; (80090e0 <__locale_mb_cur_max+0x8>)
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	2000068c 	.word	0x2000068c

080090e4 <_localeconv_r>:
 80090e4:	4800      	ldr	r0, [pc, #0]	; (80090e8 <_localeconv_r+0x4>)
 80090e6:	4770      	bx	lr
 80090e8:	20000634 	.word	0x20000634

080090ec <__smakebuf_r>:
 80090ec:	898b      	ldrh	r3, [r1, #12]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	f012 0f02 	tst.w	r2, #2
 80090f4:	d13c      	bne.n	8009170 <__smakebuf_r+0x84>
 80090f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090f8:	460c      	mov	r4, r1
 80090fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fe:	2900      	cmp	r1, #0
 8009100:	b091      	sub	sp, #68	; 0x44
 8009102:	4605      	mov	r5, r0
 8009104:	db19      	blt.n	800913a <__smakebuf_r+0x4e>
 8009106:	aa01      	add	r2, sp, #4
 8009108:	f7f8 fbb3 	bl	8001872 <_fstat_r>
 800910c:	2800      	cmp	r0, #0
 800910e:	db12      	blt.n	8009136 <__smakebuf_r+0x4a>
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800911a:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 800911e:	fab7 f787 	clz	r7, r7
 8009122:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8009126:	d02a      	beq.n	800917e <__smakebuf_r+0x92>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800912e:	81a3      	strh	r3, [r4, #12]
 8009130:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8009134:	e00b      	b.n	800914e <__smakebuf_r+0x62>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	b29a      	uxth	r2, r3
 800913a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800913e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	bf0c      	ite	eq
 8009146:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800914a:	2640      	movne	r6, #64	; 0x40
 800914c:	2700      	movs	r7, #0
 800914e:	4628      	mov	r0, r5
 8009150:	4631      	mov	r1, r6
 8009152:	f000 f843 	bl	80091dc <_malloc_r>
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	b340      	cbz	r0, 80091ac <__smakebuf_r+0xc0>
 800915a:	4a1a      	ldr	r2, [pc, #104]	; (80091c4 <__smakebuf_r+0xd8>)
 800915c:	63ea      	str	r2, [r5, #60]	; 0x3c
 800915e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	6020      	str	r0, [r4, #0]
 8009166:	6120      	str	r0, [r4, #16]
 8009168:	6166      	str	r6, [r4, #20]
 800916a:	b99f      	cbnz	r7, 8009194 <__smakebuf_r+0xa8>
 800916c:	b011      	add	sp, #68	; 0x44
 800916e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009170:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8009174:	2201      	movs	r2, #1
 8009176:	600b      	str	r3, [r1, #0]
 8009178:	610b      	str	r3, [r1, #16]
 800917a:	614a      	str	r2, [r1, #20]
 800917c:	4770      	bx	lr
 800917e:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <__smakebuf_r+0xdc>)
 8009180:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009182:	429a      	cmp	r2, r3
 8009184:	d1d0      	bne.n	8009128 <__smakebuf_r+0x3c>
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800918c:	4333      	orrs	r3, r6
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	64e6      	str	r6, [r4, #76]	; 0x4c
 8009192:	e7dc      	b.n	800914e <__smakebuf_r+0x62>
 8009194:	4628      	mov	r0, r5
 8009196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919a:	f7f8 fb6f 	bl	800187c <_isatty_r>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d0e4      	beq.n	800916c <__smakebuf_r+0x80>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f043 0301 	orr.w	r3, r3, #1
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	e7df      	b.n	800916c <__smakebuf_r+0x80>
 80091ac:	059a      	lsls	r2, r3, #22
 80091ae:	d4dd      	bmi.n	800916c <__smakebuf_r+0x80>
 80091b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091b4:	f043 0302 	orr.w	r3, r3, #2
 80091b8:	2101      	movs	r1, #1
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	6022      	str	r2, [r4, #0]
 80091be:	6122      	str	r2, [r4, #16]
 80091c0:	6161      	str	r1, [r4, #20]
 80091c2:	e7d3      	b.n	800916c <__smakebuf_r+0x80>
 80091c4:	08008a09 	.word	0x08008a09
 80091c8:	0800a34d 	.word	0x0800a34d

080091cc <malloc>:
 80091cc:	4b02      	ldr	r3, [pc, #8]	; (80091d8 <malloc+0xc>)
 80091ce:	4601      	mov	r1, r0
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	f000 b803 	b.w	80091dc <_malloc_r>
 80091d6:	bf00      	nop
 80091d8:	20000630 	.word	0x20000630

080091dc <_malloc_r>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	f101 050b 	add.w	r5, r1, #11
 80091e4:	2d16      	cmp	r5, #22
 80091e6:	b083      	sub	sp, #12
 80091e8:	4606      	mov	r6, r0
 80091ea:	d927      	bls.n	800923c <_malloc_r+0x60>
 80091ec:	f035 0507 	bics.w	r5, r5, #7
 80091f0:	f100 80b6 	bmi.w	8009360 <_malloc_r+0x184>
 80091f4:	42a9      	cmp	r1, r5
 80091f6:	f200 80b3 	bhi.w	8009360 <_malloc_r+0x184>
 80091fa:	f000 fb2f 	bl	800985c <__malloc_lock>
 80091fe:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8009202:	d222      	bcs.n	800924a <_malloc_r+0x6e>
 8009204:	4fc2      	ldr	r7, [pc, #776]	; (8009510 <_malloc_r+0x334>)
 8009206:	08e8      	lsrs	r0, r5, #3
 8009208:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 800920c:	68dc      	ldr	r4, [r3, #12]
 800920e:	429c      	cmp	r4, r3
 8009210:	f000 81c8 	beq.w	80095a4 <_malloc_r+0x3c8>
 8009214:	6863      	ldr	r3, [r4, #4]
 8009216:	68e1      	ldr	r1, [r4, #12]
 8009218:	68a5      	ldr	r5, [r4, #8]
 800921a:	f023 0303 	bic.w	r3, r3, #3
 800921e:	4423      	add	r3, r4
 8009220:	4630      	mov	r0, r6
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	60e9      	str	r1, [r5, #12]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	608d      	str	r5, [r1, #8]
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	f000 fb17 	bl	8009860 <__malloc_unlock>
 8009232:	3408      	adds	r4, #8
 8009234:	4620      	mov	r0, r4
 8009236:	b003      	add	sp, #12
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	2910      	cmp	r1, #16
 800923e:	f200 808f 	bhi.w	8009360 <_malloc_r+0x184>
 8009242:	f000 fb0b 	bl	800985c <__malloc_lock>
 8009246:	2510      	movs	r5, #16
 8009248:	e7dc      	b.n	8009204 <_malloc_r+0x28>
 800924a:	0a68      	lsrs	r0, r5, #9
 800924c:	f000 808f 	beq.w	800936e <_malloc_r+0x192>
 8009250:	2804      	cmp	r0, #4
 8009252:	f200 8154 	bhi.w	80094fe <_malloc_r+0x322>
 8009256:	09a8      	lsrs	r0, r5, #6
 8009258:	3038      	adds	r0, #56	; 0x38
 800925a:	0041      	lsls	r1, r0, #1
 800925c:	4fac      	ldr	r7, [pc, #688]	; (8009510 <_malloc_r+0x334>)
 800925e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8009262:	68cc      	ldr	r4, [r1, #12]
 8009264:	42a1      	cmp	r1, r4
 8009266:	d106      	bne.n	8009276 <_malloc_r+0x9a>
 8009268:	e00c      	b.n	8009284 <_malloc_r+0xa8>
 800926a:	2a00      	cmp	r2, #0
 800926c:	f280 8082 	bge.w	8009374 <_malloc_r+0x198>
 8009270:	68e4      	ldr	r4, [r4, #12]
 8009272:	42a1      	cmp	r1, r4
 8009274:	d006      	beq.n	8009284 <_malloc_r+0xa8>
 8009276:	6863      	ldr	r3, [r4, #4]
 8009278:	f023 0303 	bic.w	r3, r3, #3
 800927c:	1b5a      	subs	r2, r3, r5
 800927e:	2a0f      	cmp	r2, #15
 8009280:	ddf3      	ble.n	800926a <_malloc_r+0x8e>
 8009282:	3801      	subs	r0, #1
 8009284:	3001      	adds	r0, #1
 8009286:	49a2      	ldr	r1, [pc, #648]	; (8009510 <_malloc_r+0x334>)
 8009288:	693c      	ldr	r4, [r7, #16]
 800928a:	f101 0e08 	add.w	lr, r1, #8
 800928e:	4574      	cmp	r4, lr
 8009290:	f000 817d 	beq.w	800958e <_malloc_r+0x3b2>
 8009294:	6863      	ldr	r3, [r4, #4]
 8009296:	f023 0303 	bic.w	r3, r3, #3
 800929a:	1b5a      	subs	r2, r3, r5
 800929c:	2a0f      	cmp	r2, #15
 800929e:	f300 8163 	bgt.w	8009568 <_malloc_r+0x38c>
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	f8c1 e014 	str.w	lr, [r1, #20]
 80092a8:	f8c1 e010 	str.w	lr, [r1, #16]
 80092ac:	da73      	bge.n	8009396 <_malloc_r+0x1ba>
 80092ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092b2:	f080 8139 	bcs.w	8009528 <_malloc_r+0x34c>
 80092b6:	08db      	lsrs	r3, r3, #3
 80092b8:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80092bc:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 80092c0:	684a      	ldr	r2, [r1, #4]
 80092c2:	f8d8 9008 	ldr.w	r9, [r8, #8]
 80092c6:	f8c4 9008 	str.w	r9, [r4, #8]
 80092ca:	2301      	movs	r3, #1
 80092cc:	fa03 f30c 	lsl.w	r3, r3, ip
 80092d0:	4313      	orrs	r3, r2
 80092d2:	f8c4 800c 	str.w	r8, [r4, #12]
 80092d6:	604b      	str	r3, [r1, #4]
 80092d8:	f8c8 4008 	str.w	r4, [r8, #8]
 80092dc:	f8c9 400c 	str.w	r4, [r9, #12]
 80092e0:	1082      	asrs	r2, r0, #2
 80092e2:	2401      	movs	r4, #1
 80092e4:	4094      	lsls	r4, r2
 80092e6:	429c      	cmp	r4, r3
 80092e8:	d862      	bhi.n	80093b0 <_malloc_r+0x1d4>
 80092ea:	4223      	tst	r3, r4
 80092ec:	d106      	bne.n	80092fc <_malloc_r+0x120>
 80092ee:	f020 0003 	bic.w	r0, r0, #3
 80092f2:	0064      	lsls	r4, r4, #1
 80092f4:	4223      	tst	r3, r4
 80092f6:	f100 0004 	add.w	r0, r0, #4
 80092fa:	d0fa      	beq.n	80092f2 <_malloc_r+0x116>
 80092fc:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8009300:	46c4      	mov	ip, r8
 8009302:	4681      	mov	r9, r0
 8009304:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8009308:	459c      	cmp	ip, r3
 800930a:	d107      	bne.n	800931c <_malloc_r+0x140>
 800930c:	e141      	b.n	8009592 <_malloc_r+0x3b6>
 800930e:	2900      	cmp	r1, #0
 8009310:	f280 8151 	bge.w	80095b6 <_malloc_r+0x3da>
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	459c      	cmp	ip, r3
 8009318:	f000 813b 	beq.w	8009592 <_malloc_r+0x3b6>
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	f022 0203 	bic.w	r2, r2, #3
 8009322:	1b51      	subs	r1, r2, r5
 8009324:	290f      	cmp	r1, #15
 8009326:	ddf2      	ble.n	800930e <_malloc_r+0x132>
 8009328:	461c      	mov	r4, r3
 800932a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800932e:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8009332:	195a      	adds	r2, r3, r5
 8009334:	f045 0901 	orr.w	r9, r5, #1
 8009338:	f041 0501 	orr.w	r5, r1, #1
 800933c:	f8c3 9004 	str.w	r9, [r3, #4]
 8009340:	4630      	mov	r0, r6
 8009342:	f8c8 c00c 	str.w	ip, [r8, #12]
 8009346:	f8cc 8008 	str.w	r8, [ip, #8]
 800934a:	617a      	str	r2, [r7, #20]
 800934c:	613a      	str	r2, [r7, #16]
 800934e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009352:	f8c2 e008 	str.w	lr, [r2, #8]
 8009356:	6055      	str	r5, [r2, #4]
 8009358:	5051      	str	r1, [r2, r1]
 800935a:	f000 fa81 	bl	8009860 <__malloc_unlock>
 800935e:	e769      	b.n	8009234 <_malloc_r+0x58>
 8009360:	2400      	movs	r4, #0
 8009362:	230c      	movs	r3, #12
 8009364:	4620      	mov	r0, r4
 8009366:	6033      	str	r3, [r6, #0]
 8009368:	b003      	add	sp, #12
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	217e      	movs	r1, #126	; 0x7e
 8009370:	203f      	movs	r0, #63	; 0x3f
 8009372:	e773      	b.n	800925c <_malloc_r+0x80>
 8009374:	4423      	add	r3, r4
 8009376:	68e1      	ldr	r1, [r4, #12]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	68a5      	ldr	r5, [r4, #8]
 800937c:	f042 0201 	orr.w	r2, r2, #1
 8009380:	60e9      	str	r1, [r5, #12]
 8009382:	4630      	mov	r0, r6
 8009384:	608d      	str	r5, [r1, #8]
 8009386:	605a      	str	r2, [r3, #4]
 8009388:	f000 fa6a 	bl	8009860 <__malloc_unlock>
 800938c:	3408      	adds	r4, #8
 800938e:	4620      	mov	r0, r4
 8009390:	b003      	add	sp, #12
 8009392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009396:	4423      	add	r3, r4
 8009398:	4630      	mov	r0, r6
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	f042 0201 	orr.w	r2, r2, #1
 80093a0:	605a      	str	r2, [r3, #4]
 80093a2:	f000 fa5d 	bl	8009860 <__malloc_unlock>
 80093a6:	3408      	adds	r4, #8
 80093a8:	4620      	mov	r0, r4
 80093aa:	b003      	add	sp, #12
 80093ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b0:	68bc      	ldr	r4, [r7, #8]
 80093b2:	6863      	ldr	r3, [r4, #4]
 80093b4:	f023 0803 	bic.w	r8, r3, #3
 80093b8:	4545      	cmp	r5, r8
 80093ba:	d804      	bhi.n	80093c6 <_malloc_r+0x1ea>
 80093bc:	ebc5 0308 	rsb	r3, r5, r8
 80093c0:	2b0f      	cmp	r3, #15
 80093c2:	f300 808c 	bgt.w	80094de <_malloc_r+0x302>
 80093c6:	4b53      	ldr	r3, [pc, #332]	; (8009514 <_malloc_r+0x338>)
 80093c8:	f8df a158 	ldr.w	sl, [pc, #344]	; 8009524 <_malloc_r+0x348>
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	f8da 3000 	ldr.w	r3, [sl]
 80093d2:	3301      	adds	r3, #1
 80093d4:	442a      	add	r2, r5
 80093d6:	eb04 0b08 	add.w	fp, r4, r8
 80093da:	f000 8150 	beq.w	800967e <_malloc_r+0x4a2>
 80093de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093e2:	320f      	adds	r2, #15
 80093e4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80093e8:	f022 020f 	bic.w	r2, r2, #15
 80093ec:	4611      	mov	r1, r2
 80093ee:	4630      	mov	r0, r6
 80093f0:	9201      	str	r2, [sp, #4]
 80093f2:	f7f8 fa21 	bl	8001838 <_sbrk_r>
 80093f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80093fa:	4681      	mov	r9, r0
 80093fc:	9a01      	ldr	r2, [sp, #4]
 80093fe:	f000 8147 	beq.w	8009690 <_malloc_r+0x4b4>
 8009402:	4583      	cmp	fp, r0
 8009404:	f200 80ee 	bhi.w	80095e4 <_malloc_r+0x408>
 8009408:	4b43      	ldr	r3, [pc, #268]	; (8009518 <_malloc_r+0x33c>)
 800940a:	6819      	ldr	r1, [r3, #0]
 800940c:	45cb      	cmp	fp, r9
 800940e:	4411      	add	r1, r2
 8009410:	6019      	str	r1, [r3, #0]
 8009412:	f000 8142 	beq.w	800969a <_malloc_r+0x4be>
 8009416:	f8da 0000 	ldr.w	r0, [sl]
 800941a:	f8df e108 	ldr.w	lr, [pc, #264]	; 8009524 <_malloc_r+0x348>
 800941e:	3001      	adds	r0, #1
 8009420:	bf1b      	ittet	ne
 8009422:	ebcb 0b09 	rsbne	fp, fp, r9
 8009426:	4459      	addne	r1, fp
 8009428:	f8ce 9000 	streq.w	r9, [lr]
 800942c:	6019      	strne	r1, [r3, #0]
 800942e:	f019 0107 	ands.w	r1, r9, #7
 8009432:	f000 8107 	beq.w	8009644 <_malloc_r+0x468>
 8009436:	f1c1 0008 	rsb	r0, r1, #8
 800943a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800943e:	4481      	add	r9, r0
 8009440:	3108      	adds	r1, #8
 8009442:	444a      	add	r2, r9
 8009444:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009448:	ebc2 0a01 	rsb	sl, r2, r1
 800944c:	4651      	mov	r1, sl
 800944e:	4630      	mov	r0, r6
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	f7f8 f9f1 	bl	8001838 <_sbrk_r>
 8009456:	1c43      	adds	r3, r0, #1
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	f000 812c 	beq.w	80096b6 <_malloc_r+0x4da>
 800945e:	ebc9 0200 	rsb	r2, r9, r0
 8009462:	4452      	add	r2, sl
 8009464:	f042 0201 	orr.w	r2, r2, #1
 8009468:	6819      	ldr	r1, [r3, #0]
 800946a:	f8c7 9008 	str.w	r9, [r7, #8]
 800946e:	4451      	add	r1, sl
 8009470:	42bc      	cmp	r4, r7
 8009472:	f8c9 2004 	str.w	r2, [r9, #4]
 8009476:	6019      	str	r1, [r3, #0]
 8009478:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8009518 <_malloc_r+0x33c>
 800947c:	d016      	beq.n	80094ac <_malloc_r+0x2d0>
 800947e:	f1b8 0f0f 	cmp.w	r8, #15
 8009482:	f240 80ee 	bls.w	8009662 <_malloc_r+0x486>
 8009486:	6862      	ldr	r2, [r4, #4]
 8009488:	f1a8 030c 	sub.w	r3, r8, #12
 800948c:	f023 0307 	bic.w	r3, r3, #7
 8009490:	18e0      	adds	r0, r4, r3
 8009492:	f002 0201 	and.w	r2, r2, #1
 8009496:	f04f 0e05 	mov.w	lr, #5
 800949a:	431a      	orrs	r2, r3
 800949c:	2b0f      	cmp	r3, #15
 800949e:	6062      	str	r2, [r4, #4]
 80094a0:	f8c0 e004 	str.w	lr, [r0, #4]
 80094a4:	f8c0 e008 	str.w	lr, [r0, #8]
 80094a8:	f200 8109 	bhi.w	80096be <_malloc_r+0x4e2>
 80094ac:	4b1b      	ldr	r3, [pc, #108]	; (800951c <_malloc_r+0x340>)
 80094ae:	68bc      	ldr	r4, [r7, #8]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4291      	cmp	r1, r2
 80094b4:	bf88      	it	hi
 80094b6:	6019      	strhi	r1, [r3, #0]
 80094b8:	4b19      	ldr	r3, [pc, #100]	; (8009520 <_malloc_r+0x344>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	4291      	cmp	r1, r2
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	bf88      	it	hi
 80094c2:	6019      	strhi	r1, [r3, #0]
 80094c4:	f022 0203 	bic.w	r2, r2, #3
 80094c8:	4295      	cmp	r5, r2
 80094ca:	eba2 0305 	sub.w	r3, r2, r5
 80094ce:	d801      	bhi.n	80094d4 <_malloc_r+0x2f8>
 80094d0:	2b0f      	cmp	r3, #15
 80094d2:	dc04      	bgt.n	80094de <_malloc_r+0x302>
 80094d4:	4630      	mov	r0, r6
 80094d6:	f000 f9c3 	bl	8009860 <__malloc_unlock>
 80094da:	2400      	movs	r4, #0
 80094dc:	e6aa      	b.n	8009234 <_malloc_r+0x58>
 80094de:	1962      	adds	r2, r4, r5
 80094e0:	f043 0301 	orr.w	r3, r3, #1
 80094e4:	f045 0501 	orr.w	r5, r5, #1
 80094e8:	6065      	str	r5, [r4, #4]
 80094ea:	4630      	mov	r0, r6
 80094ec:	60ba      	str	r2, [r7, #8]
 80094ee:	6053      	str	r3, [r2, #4]
 80094f0:	f000 f9b6 	bl	8009860 <__malloc_unlock>
 80094f4:	3408      	adds	r4, #8
 80094f6:	4620      	mov	r0, r4
 80094f8:	b003      	add	sp, #12
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	2814      	cmp	r0, #20
 8009500:	d968      	bls.n	80095d4 <_malloc_r+0x3f8>
 8009502:	2854      	cmp	r0, #84	; 0x54
 8009504:	f200 8097 	bhi.w	8009636 <_malloc_r+0x45a>
 8009508:	0b28      	lsrs	r0, r5, #12
 800950a:	306e      	adds	r0, #110	; 0x6e
 800950c:	0041      	lsls	r1, r0, #1
 800950e:	e6a5      	b.n	800925c <_malloc_r+0x80>
 8009510:	20000690 	.word	0x20000690
 8009514:	20000ee8 	.word	0x20000ee8
 8009518:	20000eec 	.word	0x20000eec
 800951c:	20000ee4 	.word	0x20000ee4
 8009520:	20000ee0 	.word	0x20000ee0
 8009524:	20000a9c 	.word	0x20000a9c
 8009528:	0a5a      	lsrs	r2, r3, #9
 800952a:	2a04      	cmp	r2, #4
 800952c:	d955      	bls.n	80095da <_malloc_r+0x3fe>
 800952e:	2a14      	cmp	r2, #20
 8009530:	f200 80a7 	bhi.w	8009682 <_malloc_r+0x4a6>
 8009534:	325b      	adds	r2, #91	; 0x5b
 8009536:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800953a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800953e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80096fc <_malloc_r+0x520>
 8009542:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009546:	4561      	cmp	r1, ip
 8009548:	d07f      	beq.n	800964a <_malloc_r+0x46e>
 800954a:	684a      	ldr	r2, [r1, #4]
 800954c:	f022 0203 	bic.w	r2, r2, #3
 8009550:	4293      	cmp	r3, r2
 8009552:	d202      	bcs.n	800955a <_malloc_r+0x37e>
 8009554:	6889      	ldr	r1, [r1, #8]
 8009556:	458c      	cmp	ip, r1
 8009558:	d1f7      	bne.n	800954a <_malloc_r+0x36e>
 800955a:	68ca      	ldr	r2, [r1, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	60e2      	str	r2, [r4, #12]
 8009560:	60a1      	str	r1, [r4, #8]
 8009562:	6094      	str	r4, [r2, #8]
 8009564:	60cc      	str	r4, [r1, #12]
 8009566:	e6bb      	b.n	80092e0 <_malloc_r+0x104>
 8009568:	1963      	adds	r3, r4, r5
 800956a:	f042 0701 	orr.w	r7, r2, #1
 800956e:	f045 0501 	orr.w	r5, r5, #1
 8009572:	6065      	str	r5, [r4, #4]
 8009574:	4630      	mov	r0, r6
 8009576:	614b      	str	r3, [r1, #20]
 8009578:	610b      	str	r3, [r1, #16]
 800957a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800957e:	f8c3 e008 	str.w	lr, [r3, #8]
 8009582:	605f      	str	r7, [r3, #4]
 8009584:	509a      	str	r2, [r3, r2]
 8009586:	3408      	adds	r4, #8
 8009588:	f000 f96a 	bl	8009860 <__malloc_unlock>
 800958c:	e652      	b.n	8009234 <_malloc_r+0x58>
 800958e:	684b      	ldr	r3, [r1, #4]
 8009590:	e6a6      	b.n	80092e0 <_malloc_r+0x104>
 8009592:	f109 0901 	add.w	r9, r9, #1
 8009596:	f019 0f03 	tst.w	r9, #3
 800959a:	f10c 0c08 	add.w	ip, ip, #8
 800959e:	f47f aeb1 	bne.w	8009304 <_malloc_r+0x128>
 80095a2:	e02c      	b.n	80095fe <_malloc_r+0x422>
 80095a4:	f104 0308 	add.w	r3, r4, #8
 80095a8:	6964      	ldr	r4, [r4, #20]
 80095aa:	42a3      	cmp	r3, r4
 80095ac:	bf08      	it	eq
 80095ae:	3002      	addeq	r0, #2
 80095b0:	f43f ae69 	beq.w	8009286 <_malloc_r+0xaa>
 80095b4:	e62e      	b.n	8009214 <_malloc_r+0x38>
 80095b6:	441a      	add	r2, r3
 80095b8:	461c      	mov	r4, r3
 80095ba:	6851      	ldr	r1, [r2, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80095c2:	f041 0101 	orr.w	r1, r1, #1
 80095c6:	6051      	str	r1, [r2, #4]
 80095c8:	4630      	mov	r0, r6
 80095ca:	60eb      	str	r3, [r5, #12]
 80095cc:	609d      	str	r5, [r3, #8]
 80095ce:	f000 f947 	bl	8009860 <__malloc_unlock>
 80095d2:	e62f      	b.n	8009234 <_malloc_r+0x58>
 80095d4:	305b      	adds	r0, #91	; 0x5b
 80095d6:	0041      	lsls	r1, r0, #1
 80095d8:	e640      	b.n	800925c <_malloc_r+0x80>
 80095da:	099a      	lsrs	r2, r3, #6
 80095dc:	3238      	adds	r2, #56	; 0x38
 80095de:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80095e2:	e7aa      	b.n	800953a <_malloc_r+0x35e>
 80095e4:	42bc      	cmp	r4, r7
 80095e6:	4b45      	ldr	r3, [pc, #276]	; (80096fc <_malloc_r+0x520>)
 80095e8:	f43f af0e 	beq.w	8009408 <_malloc_r+0x22c>
 80095ec:	689c      	ldr	r4, [r3, #8]
 80095ee:	6862      	ldr	r2, [r4, #4]
 80095f0:	f022 0203 	bic.w	r2, r2, #3
 80095f4:	e768      	b.n	80094c8 <_malloc_r+0x2ec>
 80095f6:	f8d8 8000 	ldr.w	r8, [r8]
 80095fa:	4598      	cmp	r8, r3
 80095fc:	d17c      	bne.n	80096f8 <_malloc_r+0x51c>
 80095fe:	f010 0f03 	tst.w	r0, #3
 8009602:	f1a8 0308 	sub.w	r3, r8, #8
 8009606:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800960a:	d1f4      	bne.n	80095f6 <_malloc_r+0x41a>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	ea23 0304 	bic.w	r3, r3, r4
 8009612:	607b      	str	r3, [r7, #4]
 8009614:	0064      	lsls	r4, r4, #1
 8009616:	429c      	cmp	r4, r3
 8009618:	f63f aeca 	bhi.w	80093b0 <_malloc_r+0x1d4>
 800961c:	2c00      	cmp	r4, #0
 800961e:	f43f aec7 	beq.w	80093b0 <_malloc_r+0x1d4>
 8009622:	4223      	tst	r3, r4
 8009624:	4648      	mov	r0, r9
 8009626:	f47f ae69 	bne.w	80092fc <_malloc_r+0x120>
 800962a:	0064      	lsls	r4, r4, #1
 800962c:	4223      	tst	r3, r4
 800962e:	f100 0004 	add.w	r0, r0, #4
 8009632:	d0fa      	beq.n	800962a <_malloc_r+0x44e>
 8009634:	e662      	b.n	80092fc <_malloc_r+0x120>
 8009636:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800963a:	d818      	bhi.n	800966e <_malloc_r+0x492>
 800963c:	0be8      	lsrs	r0, r5, #15
 800963e:	3077      	adds	r0, #119	; 0x77
 8009640:	0041      	lsls	r1, r0, #1
 8009642:	e60b      	b.n	800925c <_malloc_r+0x80>
 8009644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009648:	e6fb      	b.n	8009442 <_malloc_r+0x266>
 800964a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800964e:	1092      	asrs	r2, r2, #2
 8009650:	f04f 0c01 	mov.w	ip, #1
 8009654:	fa0c f202 	lsl.w	r2, ip, r2
 8009658:	4313      	orrs	r3, r2
 800965a:	f8c8 3004 	str.w	r3, [r8, #4]
 800965e:	460a      	mov	r2, r1
 8009660:	e77d      	b.n	800955e <_malloc_r+0x382>
 8009662:	2301      	movs	r3, #1
 8009664:	f8c9 3004 	str.w	r3, [r9, #4]
 8009668:	464c      	mov	r4, r9
 800966a:	2200      	movs	r2, #0
 800966c:	e72c      	b.n	80094c8 <_malloc_r+0x2ec>
 800966e:	f240 5354 	movw	r3, #1364	; 0x554
 8009672:	4298      	cmp	r0, r3
 8009674:	d81c      	bhi.n	80096b0 <_malloc_r+0x4d4>
 8009676:	0ca8      	lsrs	r0, r5, #18
 8009678:	307c      	adds	r0, #124	; 0x7c
 800967a:	0041      	lsls	r1, r0, #1
 800967c:	e5ee      	b.n	800925c <_malloc_r+0x80>
 800967e:	3210      	adds	r2, #16
 8009680:	e6b4      	b.n	80093ec <_malloc_r+0x210>
 8009682:	2a54      	cmp	r2, #84	; 0x54
 8009684:	d823      	bhi.n	80096ce <_malloc_r+0x4f2>
 8009686:	0b1a      	lsrs	r2, r3, #12
 8009688:	326e      	adds	r2, #110	; 0x6e
 800968a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800968e:	e754      	b.n	800953a <_malloc_r+0x35e>
 8009690:	68bc      	ldr	r4, [r7, #8]
 8009692:	6862      	ldr	r2, [r4, #4]
 8009694:	f022 0203 	bic.w	r2, r2, #3
 8009698:	e716      	b.n	80094c8 <_malloc_r+0x2ec>
 800969a:	f3cb 000b 	ubfx	r0, fp, #0, #12
 800969e:	2800      	cmp	r0, #0
 80096a0:	f47f aeb9 	bne.w	8009416 <_malloc_r+0x23a>
 80096a4:	4442      	add	r2, r8
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	605a      	str	r2, [r3, #4]
 80096ae:	e6fd      	b.n	80094ac <_malloc_r+0x2d0>
 80096b0:	21fc      	movs	r1, #252	; 0xfc
 80096b2:	207e      	movs	r0, #126	; 0x7e
 80096b4:	e5d2      	b.n	800925c <_malloc_r+0x80>
 80096b6:	2201      	movs	r2, #1
 80096b8:	f04f 0a00 	mov.w	sl, #0
 80096bc:	e6d4      	b.n	8009468 <_malloc_r+0x28c>
 80096be:	f104 0108 	add.w	r1, r4, #8
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff fa76 	bl	8008bb4 <_free_r>
 80096c8:	f8da 1000 	ldr.w	r1, [sl]
 80096cc:	e6ee      	b.n	80094ac <_malloc_r+0x2d0>
 80096ce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80096d2:	d804      	bhi.n	80096de <_malloc_r+0x502>
 80096d4:	0bda      	lsrs	r2, r3, #15
 80096d6:	3277      	adds	r2, #119	; 0x77
 80096d8:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80096dc:	e72d      	b.n	800953a <_malloc_r+0x35e>
 80096de:	f240 5154 	movw	r1, #1364	; 0x554
 80096e2:	428a      	cmp	r2, r1
 80096e4:	d804      	bhi.n	80096f0 <_malloc_r+0x514>
 80096e6:	0c9a      	lsrs	r2, r3, #18
 80096e8:	327c      	adds	r2, #124	; 0x7c
 80096ea:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80096ee:	e724      	b.n	800953a <_malloc_r+0x35e>
 80096f0:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 80096f4:	227e      	movs	r2, #126	; 0x7e
 80096f6:	e720      	b.n	800953a <_malloc_r+0x35e>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	e78b      	b.n	8009614 <_malloc_r+0x438>
 80096fc:	20000690 	.word	0x20000690

08009700 <memchr>:
 8009700:	0783      	lsls	r3, r0, #30
 8009702:	b470      	push	{r4, r5, r6}
 8009704:	b2c9      	uxtb	r1, r1
 8009706:	d040      	beq.n	800978a <memchr+0x8a>
 8009708:	1e54      	subs	r4, r2, #1
 800970a:	2a00      	cmp	r2, #0
 800970c:	d03f      	beq.n	800978e <memchr+0x8e>
 800970e:	7803      	ldrb	r3, [r0, #0]
 8009710:	428b      	cmp	r3, r1
 8009712:	bf18      	it	ne
 8009714:	1c43      	addne	r3, r0, #1
 8009716:	d106      	bne.n	8009726 <memchr+0x26>
 8009718:	e01d      	b.n	8009756 <memchr+0x56>
 800971a:	b1f4      	cbz	r4, 800975a <memchr+0x5a>
 800971c:	7802      	ldrb	r2, [r0, #0]
 800971e:	428a      	cmp	r2, r1
 8009720:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009724:	d017      	beq.n	8009756 <memchr+0x56>
 8009726:	f013 0f03 	tst.w	r3, #3
 800972a:	4618      	mov	r0, r3
 800972c:	f103 0301 	add.w	r3, r3, #1
 8009730:	d1f3      	bne.n	800971a <memchr+0x1a>
 8009732:	2c03      	cmp	r4, #3
 8009734:	d814      	bhi.n	8009760 <memchr+0x60>
 8009736:	b184      	cbz	r4, 800975a <memchr+0x5a>
 8009738:	7803      	ldrb	r3, [r0, #0]
 800973a:	428b      	cmp	r3, r1
 800973c:	d00b      	beq.n	8009756 <memchr+0x56>
 800973e:	1905      	adds	r5, r0, r4
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	e002      	b.n	800974a <memchr+0x4a>
 8009744:	7802      	ldrb	r2, [r0, #0]
 8009746:	428a      	cmp	r2, r1
 8009748:	d005      	beq.n	8009756 <memchr+0x56>
 800974a:	42ab      	cmp	r3, r5
 800974c:	4618      	mov	r0, r3
 800974e:	f103 0301 	add.w	r3, r3, #1
 8009752:	d1f7      	bne.n	8009744 <memchr+0x44>
 8009754:	2000      	movs	r0, #0
 8009756:	bc70      	pop	{r4, r5, r6}
 8009758:	4770      	bx	lr
 800975a:	4620      	mov	r0, r4
 800975c:	bc70      	pop	{r4, r5, r6}
 800975e:	4770      	bx	lr
 8009760:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8009764:	4602      	mov	r2, r0
 8009766:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800976a:	4610      	mov	r0, r2
 800976c:	3204      	adds	r2, #4
 800976e:	6803      	ldr	r3, [r0, #0]
 8009770:	4073      	eors	r3, r6
 8009772:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8009776:	ea25 0303 	bic.w	r3, r5, r3
 800977a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800977e:	d1da      	bne.n	8009736 <memchr+0x36>
 8009780:	3c04      	subs	r4, #4
 8009782:	2c03      	cmp	r4, #3
 8009784:	4610      	mov	r0, r2
 8009786:	d8f0      	bhi.n	800976a <memchr+0x6a>
 8009788:	e7d5      	b.n	8009736 <memchr+0x36>
 800978a:	4614      	mov	r4, r2
 800978c:	e7d1      	b.n	8009732 <memchr+0x32>
 800978e:	4610      	mov	r0, r2
 8009790:	e7e1      	b.n	8009756 <memchr+0x56>
 8009792:	bf00      	nop

08009794 <memmove>:
 8009794:	4288      	cmp	r0, r1
 8009796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009798:	d90d      	bls.n	80097b6 <memmove+0x22>
 800979a:	188b      	adds	r3, r1, r2
 800979c:	4298      	cmp	r0, r3
 800979e:	d20a      	bcs.n	80097b6 <memmove+0x22>
 80097a0:	1881      	adds	r1, r0, r2
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	d054      	beq.n	8009850 <memmove+0xbc>
 80097a6:	1a9a      	subs	r2, r3, r2
 80097a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d1f9      	bne.n	80097a8 <memmove+0x14>
 80097b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b6:	2a0f      	cmp	r2, #15
 80097b8:	d948      	bls.n	800984c <memmove+0xb8>
 80097ba:	ea40 0301 	orr.w	r3, r0, r1
 80097be:	079b      	lsls	r3, r3, #30
 80097c0:	d147      	bne.n	8009852 <memmove+0xbe>
 80097c2:	f100 0410 	add.w	r4, r0, #16
 80097c6:	f101 0310 	add.w	r3, r1, #16
 80097ca:	4615      	mov	r5, r2
 80097cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80097d0:	f844 6c10 	str.w	r6, [r4, #-16]
 80097d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80097d8:	f844 6c0c 	str.w	r6, [r4, #-12]
 80097dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80097e0:	f844 6c08 	str.w	r6, [r4, #-8]
 80097e4:	3d10      	subs	r5, #16
 80097e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80097ea:	f844 6c04 	str.w	r6, [r4, #-4]
 80097ee:	2d0f      	cmp	r5, #15
 80097f0:	f103 0310 	add.w	r3, r3, #16
 80097f4:	f104 0410 	add.w	r4, r4, #16
 80097f8:	d8e8      	bhi.n	80097cc <memmove+0x38>
 80097fa:	f1a2 0310 	sub.w	r3, r2, #16
 80097fe:	f023 030f 	bic.w	r3, r3, #15
 8009802:	f002 0e0f 	and.w	lr, r2, #15
 8009806:	3310      	adds	r3, #16
 8009808:	f1be 0f03 	cmp.w	lr, #3
 800980c:	4419      	add	r1, r3
 800980e:	4403      	add	r3, r0
 8009810:	d921      	bls.n	8009856 <memmove+0xc2>
 8009812:	1f1e      	subs	r6, r3, #4
 8009814:	460d      	mov	r5, r1
 8009816:	4674      	mov	r4, lr
 8009818:	3c04      	subs	r4, #4
 800981a:	f855 7b04 	ldr.w	r7, [r5], #4
 800981e:	f846 7f04 	str.w	r7, [r6, #4]!
 8009822:	2c03      	cmp	r4, #3
 8009824:	d8f8      	bhi.n	8009818 <memmove+0x84>
 8009826:	f1ae 0404 	sub.w	r4, lr, #4
 800982a:	f024 0403 	bic.w	r4, r4, #3
 800982e:	3404      	adds	r4, #4
 8009830:	4423      	add	r3, r4
 8009832:	4421      	add	r1, r4
 8009834:	f002 0203 	and.w	r2, r2, #3
 8009838:	b152      	cbz	r2, 8009850 <memmove+0xbc>
 800983a:	3b01      	subs	r3, #1
 800983c:	440a      	add	r2, r1
 800983e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009846:	4291      	cmp	r1, r2
 8009848:	d1f9      	bne.n	800983e <memmove+0xaa>
 800984a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984c:	4603      	mov	r3, r0
 800984e:	e7f3      	b.n	8009838 <memmove+0xa4>
 8009850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009852:	4603      	mov	r3, r0
 8009854:	e7f1      	b.n	800983a <memmove+0xa6>
 8009856:	4672      	mov	r2, lr
 8009858:	e7ee      	b.n	8009838 <memmove+0xa4>
 800985a:	bf00      	nop

0800985c <__malloc_lock>:
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop

08009860 <__malloc_unlock>:
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop

08009864 <_Balloc>:
 8009864:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	4605      	mov	r5, r0
 800986a:	460c      	mov	r4, r1
 800986c:	b14b      	cbz	r3, 8009882 <_Balloc+0x1e>
 800986e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009872:	b180      	cbz	r0, 8009896 <_Balloc+0x32>
 8009874:	6802      	ldr	r2, [r0, #0]
 8009876:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800987a:	2300      	movs	r3, #0
 800987c:	6103      	str	r3, [r0, #16]
 800987e:	60c3      	str	r3, [r0, #12]
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	2104      	movs	r1, #4
 8009884:	2221      	movs	r2, #33	; 0x21
 8009886:	f000 fe11 	bl	800a4ac <_calloc_r>
 800988a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800988c:	4603      	mov	r3, r0
 800988e:	2800      	cmp	r0, #0
 8009890:	d1ed      	bne.n	800986e <_Balloc+0xa>
 8009892:	2000      	movs	r0, #0
 8009894:	bd70      	pop	{r4, r5, r6, pc}
 8009896:	2101      	movs	r1, #1
 8009898:	fa01 f604 	lsl.w	r6, r1, r4
 800989c:	1d72      	adds	r2, r6, #5
 800989e:	4628      	mov	r0, r5
 80098a0:	0092      	lsls	r2, r2, #2
 80098a2:	f000 fe03 	bl	800a4ac <_calloc_r>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d0f3      	beq.n	8009892 <_Balloc+0x2e>
 80098aa:	6044      	str	r4, [r0, #4]
 80098ac:	6086      	str	r6, [r0, #8]
 80098ae:	e7e4      	b.n	800987a <_Balloc+0x16>

080098b0 <_Bfree>:
 80098b0:	b131      	cbz	r1, 80098c0 <_Bfree+0x10>
 80098b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80098b4:	684a      	ldr	r2, [r1, #4]
 80098b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80098ba:	6008      	str	r0, [r1, #0]
 80098bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop

080098c4 <__multadd>:
 80098c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c6:	690c      	ldr	r4, [r1, #16]
 80098c8:	b083      	sub	sp, #12
 80098ca:	460d      	mov	r5, r1
 80098cc:	4606      	mov	r6, r0
 80098ce:	f101 0e14 	add.w	lr, r1, #20
 80098d2:	2700      	movs	r7, #0
 80098d4:	f8de 1000 	ldr.w	r1, [lr]
 80098d8:	b288      	uxth	r0, r1
 80098da:	0c09      	lsrs	r1, r1, #16
 80098dc:	fb02 3300 	mla	r3, r2, r0, r3
 80098e0:	fb02 f101 	mul.w	r1, r2, r1
 80098e4:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 80098e8:	3701      	adds	r7, #1
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80098f0:	42bc      	cmp	r4, r7
 80098f2:	f84e 3b04 	str.w	r3, [lr], #4
 80098f6:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80098fa:	dceb      	bgt.n	80098d4 <__multadd+0x10>
 80098fc:	b13b      	cbz	r3, 800990e <__multadd+0x4a>
 80098fe:	68aa      	ldr	r2, [r5, #8]
 8009900:	4294      	cmp	r4, r2
 8009902:	da07      	bge.n	8009914 <__multadd+0x50>
 8009904:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8009908:	3401      	adds	r4, #1
 800990a:	6153      	str	r3, [r2, #20]
 800990c:	612c      	str	r4, [r5, #16]
 800990e:	4628      	mov	r0, r5
 8009910:	b003      	add	sp, #12
 8009912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009914:	6869      	ldr	r1, [r5, #4]
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	3101      	adds	r1, #1
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff ffa2 	bl	8009864 <_Balloc>
 8009920:	692a      	ldr	r2, [r5, #16]
 8009922:	3202      	adds	r2, #2
 8009924:	f105 010c 	add.w	r1, r5, #12
 8009928:	4607      	mov	r7, r0
 800992a:	0092      	lsls	r2, r2, #2
 800992c:	300c      	adds	r0, #12
 800992e:	f7f6 fcd3 	bl	80002d8 <memcpy>
 8009932:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8009934:	6869      	ldr	r1, [r5, #4]
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800993c:	6028      	str	r0, [r5, #0]
 800993e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8009942:	463d      	mov	r5, r7
 8009944:	e7de      	b.n	8009904 <__multadd+0x40>
 8009946:	bf00      	nop

08009948 <__hi0bits>:
 8009948:	0c03      	lsrs	r3, r0, #16
 800994a:	041b      	lsls	r3, r3, #16
 800994c:	b9b3      	cbnz	r3, 800997c <__hi0bits+0x34>
 800994e:	0400      	lsls	r0, r0, #16
 8009950:	2310      	movs	r3, #16
 8009952:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009956:	bf04      	itt	eq
 8009958:	0200      	lsleq	r0, r0, #8
 800995a:	3308      	addeq	r3, #8
 800995c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009960:	bf04      	itt	eq
 8009962:	0100      	lsleq	r0, r0, #4
 8009964:	3304      	addeq	r3, #4
 8009966:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800996a:	bf04      	itt	eq
 800996c:	0080      	lsleq	r0, r0, #2
 800996e:	3302      	addeq	r3, #2
 8009970:	2800      	cmp	r0, #0
 8009972:	db07      	blt.n	8009984 <__hi0bits+0x3c>
 8009974:	0042      	lsls	r2, r0, #1
 8009976:	d403      	bmi.n	8009980 <__hi0bits+0x38>
 8009978:	2020      	movs	r0, #32
 800997a:	4770      	bx	lr
 800997c:	2300      	movs	r3, #0
 800997e:	e7e8      	b.n	8009952 <__hi0bits+0xa>
 8009980:	1c58      	adds	r0, r3, #1
 8009982:	4770      	bx	lr
 8009984:	4618      	mov	r0, r3
 8009986:	4770      	bx	lr

08009988 <__lo0bits>:
 8009988:	6803      	ldr	r3, [r0, #0]
 800998a:	f013 0207 	ands.w	r2, r3, #7
 800998e:	d007      	beq.n	80099a0 <__lo0bits+0x18>
 8009990:	07d9      	lsls	r1, r3, #31
 8009992:	d420      	bmi.n	80099d6 <__lo0bits+0x4e>
 8009994:	079a      	lsls	r2, r3, #30
 8009996:	d420      	bmi.n	80099da <__lo0bits+0x52>
 8009998:	089b      	lsrs	r3, r3, #2
 800999a:	6003      	str	r3, [r0, #0]
 800999c:	2002      	movs	r0, #2
 800999e:	4770      	bx	lr
 80099a0:	b299      	uxth	r1, r3
 80099a2:	b909      	cbnz	r1, 80099a8 <__lo0bits+0x20>
 80099a4:	0c1b      	lsrs	r3, r3, #16
 80099a6:	2210      	movs	r2, #16
 80099a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099ac:	bf04      	itt	eq
 80099ae:	0a1b      	lsreq	r3, r3, #8
 80099b0:	3208      	addeq	r2, #8
 80099b2:	0719      	lsls	r1, r3, #28
 80099b4:	bf04      	itt	eq
 80099b6:	091b      	lsreq	r3, r3, #4
 80099b8:	3204      	addeq	r2, #4
 80099ba:	0799      	lsls	r1, r3, #30
 80099bc:	bf04      	itt	eq
 80099be:	089b      	lsreq	r3, r3, #2
 80099c0:	3202      	addeq	r2, #2
 80099c2:	07d9      	lsls	r1, r3, #31
 80099c4:	d404      	bmi.n	80099d0 <__lo0bits+0x48>
 80099c6:	085b      	lsrs	r3, r3, #1
 80099c8:	d101      	bne.n	80099ce <__lo0bits+0x46>
 80099ca:	2020      	movs	r0, #32
 80099cc:	4770      	bx	lr
 80099ce:	3201      	adds	r2, #1
 80099d0:	6003      	str	r3, [r0, #0]
 80099d2:	4610      	mov	r0, r2
 80099d4:	4770      	bx	lr
 80099d6:	2000      	movs	r0, #0
 80099d8:	4770      	bx	lr
 80099da:	085b      	lsrs	r3, r3, #1
 80099dc:	6003      	str	r3, [r0, #0]
 80099de:	2001      	movs	r0, #1
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop

080099e4 <__i2b>:
 80099e4:	b510      	push	{r4, lr}
 80099e6:	460c      	mov	r4, r1
 80099e8:	2101      	movs	r1, #1
 80099ea:	f7ff ff3b 	bl	8009864 <_Balloc>
 80099ee:	2201      	movs	r2, #1
 80099f0:	6144      	str	r4, [r0, #20]
 80099f2:	6102      	str	r2, [r0, #16]
 80099f4:	bd10      	pop	{r4, pc}
 80099f6:	bf00      	nop

080099f8 <__multiply>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	690f      	ldr	r7, [r1, #16]
 80099fe:	6916      	ldr	r6, [r2, #16]
 8009a00:	42b7      	cmp	r7, r6
 8009a02:	b083      	sub	sp, #12
 8009a04:	460d      	mov	r5, r1
 8009a06:	4614      	mov	r4, r2
 8009a08:	f2c0 808d 	blt.w	8009b26 <__multiply+0x12e>
 8009a0c:	4633      	mov	r3, r6
 8009a0e:	463e      	mov	r6, r7
 8009a10:	461f      	mov	r7, r3
 8009a12:	68ab      	ldr	r3, [r5, #8]
 8009a14:	6869      	ldr	r1, [r5, #4]
 8009a16:	eb06 0807 	add.w	r8, r6, r7
 8009a1a:	4598      	cmp	r8, r3
 8009a1c:	bfc8      	it	gt
 8009a1e:	3101      	addgt	r1, #1
 8009a20:	f7ff ff20 	bl	8009864 <_Balloc>
 8009a24:	f100 0c14 	add.w	ip, r0, #20
 8009a28:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8009a2c:	45cc      	cmp	ip, r9
 8009a2e:	9000      	str	r0, [sp, #0]
 8009a30:	d205      	bcs.n	8009a3e <__multiply+0x46>
 8009a32:	4663      	mov	r3, ip
 8009a34:	2100      	movs	r1, #0
 8009a36:	f843 1b04 	str.w	r1, [r3], #4
 8009a3a:	4599      	cmp	r9, r3
 8009a3c:	d8fb      	bhi.n	8009a36 <__multiply+0x3e>
 8009a3e:	f104 0214 	add.w	r2, r4, #20
 8009a42:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8009a46:	f105 0314 	add.w	r3, r5, #20
 8009a4a:	4552      	cmp	r2, sl
 8009a4c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8009a50:	d254      	bcs.n	8009afc <__multiply+0x104>
 8009a52:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a56:	4699      	mov	r9, r3
 8009a58:	f852 3b04 	ldr.w	r3, [r2], #4
 8009a5c:	fa1f fb83 	uxth.w	fp, r3
 8009a60:	f1bb 0f00 	cmp.w	fp, #0
 8009a64:	d020      	beq.n	8009aa8 <__multiply+0xb0>
 8009a66:	2000      	movs	r0, #0
 8009a68:	464f      	mov	r7, r9
 8009a6a:	4666      	mov	r6, ip
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	e000      	b.n	8009a72 <__multiply+0x7a>
 8009a70:	461e      	mov	r6, r3
 8009a72:	f857 4b04 	ldr.w	r4, [r7], #4
 8009a76:	6830      	ldr	r0, [r6, #0]
 8009a78:	b2a1      	uxth	r1, r4
 8009a7a:	b283      	uxth	r3, r0
 8009a7c:	fb0b 3101 	mla	r1, fp, r1, r3
 8009a80:	0c24      	lsrs	r4, r4, #16
 8009a82:	0c00      	lsrs	r0, r0, #16
 8009a84:	194b      	adds	r3, r1, r5
 8009a86:	fb0b 0004 	mla	r0, fp, r4, r0
 8009a8a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8009a8e:	b299      	uxth	r1, r3
 8009a90:	4633      	mov	r3, r6
 8009a92:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a96:	45be      	cmp	lr, r7
 8009a98:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8009a9c:	f843 1b04 	str.w	r1, [r3], #4
 8009aa0:	d8e6      	bhi.n	8009a70 <__multiply+0x78>
 8009aa2:	6075      	str	r5, [r6, #4]
 8009aa4:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009aa8:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8009aac:	d020      	beq.n	8009af0 <__multiply+0xf8>
 8009aae:	f8dc 3000 	ldr.w	r3, [ip]
 8009ab2:	4667      	mov	r7, ip
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	464d      	mov	r5, r9
 8009ab8:	2100      	movs	r1, #0
 8009aba:	e000      	b.n	8009abe <__multiply+0xc6>
 8009abc:	4637      	mov	r7, r6
 8009abe:	882c      	ldrh	r4, [r5, #0]
 8009ac0:	0c00      	lsrs	r0, r0, #16
 8009ac2:	fb0b 0004 	mla	r0, fp, r4, r0
 8009ac6:	4401      	add	r1, r0
 8009ac8:	b29c      	uxth	r4, r3
 8009aca:	463e      	mov	r6, r7
 8009acc:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8009ad0:	f846 3b04 	str.w	r3, [r6], #4
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f855 4b04 	ldr.w	r4, [r5], #4
 8009ada:	b283      	uxth	r3, r0
 8009adc:	0c24      	lsrs	r4, r4, #16
 8009ade:	fb0b 3404 	mla	r4, fp, r4, r3
 8009ae2:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8009ae6:	45ae      	cmp	lr, r5
 8009ae8:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8009aec:	d8e6      	bhi.n	8009abc <__multiply+0xc4>
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	4592      	cmp	sl, r2
 8009af2:	f10c 0c04 	add.w	ip, ip, #4
 8009af6:	d8af      	bhi.n	8009a58 <__multiply+0x60>
 8009af8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009afc:	f1b8 0f00 	cmp.w	r8, #0
 8009b00:	dd0b      	ble.n	8009b1a <__multiply+0x122>
 8009b02:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009b06:	f1a9 0904 	sub.w	r9, r9, #4
 8009b0a:	b11b      	cbz	r3, 8009b14 <__multiply+0x11c>
 8009b0c:	e005      	b.n	8009b1a <__multiply+0x122>
 8009b0e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8009b12:	b913      	cbnz	r3, 8009b1a <__multiply+0x122>
 8009b14:	f1b8 0801 	subs.w	r8, r8, #1
 8009b18:	d1f9      	bne.n	8009b0e <__multiply+0x116>
 8009b1a:	9800      	ldr	r0, [sp, #0]
 8009b1c:	f8c0 8010 	str.w	r8, [r0, #16]
 8009b20:	b003      	add	sp, #12
 8009b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b26:	4615      	mov	r5, r2
 8009b28:	460c      	mov	r4, r1
 8009b2a:	e772      	b.n	8009a12 <__multiply+0x1a>

08009b2c <__pow5mult>:
 8009b2c:	f012 0303 	ands.w	r3, r2, #3
 8009b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b34:	4614      	mov	r4, r2
 8009b36:	4607      	mov	r7, r0
 8009b38:	460e      	mov	r6, r1
 8009b3a:	d12d      	bne.n	8009b98 <__pow5mult+0x6c>
 8009b3c:	10a4      	asrs	r4, r4, #2
 8009b3e:	d01c      	beq.n	8009b7a <__pow5mult+0x4e>
 8009b40:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8009b42:	b395      	cbz	r5, 8009baa <__pow5mult+0x7e>
 8009b44:	07e3      	lsls	r3, r4, #31
 8009b46:	f04f 0800 	mov.w	r8, #0
 8009b4a:	d406      	bmi.n	8009b5a <__pow5mult+0x2e>
 8009b4c:	1064      	asrs	r4, r4, #1
 8009b4e:	d014      	beq.n	8009b7a <__pow5mult+0x4e>
 8009b50:	6828      	ldr	r0, [r5, #0]
 8009b52:	b1a8      	cbz	r0, 8009b80 <__pow5mult+0x54>
 8009b54:	4605      	mov	r5, r0
 8009b56:	07e3      	lsls	r3, r4, #31
 8009b58:	d5f8      	bpl.n	8009b4c <__pow5mult+0x20>
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	462a      	mov	r2, r5
 8009b60:	f7ff ff4a 	bl	80099f8 <__multiply>
 8009b64:	b1b6      	cbz	r6, 8009b94 <__pow5mult+0x68>
 8009b66:	6872      	ldr	r2, [r6, #4]
 8009b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b6a:	1064      	asrs	r4, r4, #1
 8009b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b70:	6031      	str	r1, [r6, #0]
 8009b72:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8009b76:	4606      	mov	r6, r0
 8009b78:	d1ea      	bne.n	8009b50 <__pow5mult+0x24>
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b80:	4629      	mov	r1, r5
 8009b82:	462a      	mov	r2, r5
 8009b84:	4638      	mov	r0, r7
 8009b86:	f7ff ff37 	bl	80099f8 <__multiply>
 8009b8a:	6028      	str	r0, [r5, #0]
 8009b8c:	f8c0 8000 	str.w	r8, [r0]
 8009b90:	4605      	mov	r5, r0
 8009b92:	e7e0      	b.n	8009b56 <__pow5mult+0x2a>
 8009b94:	4606      	mov	r6, r0
 8009b96:	e7d9      	b.n	8009b4c <__pow5mult+0x20>
 8009b98:	1e5a      	subs	r2, r3, #1
 8009b9a:	4d0b      	ldr	r5, [pc, #44]	; (8009bc8 <__pow5mult+0x9c>)
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009ba2:	f7ff fe8f 	bl	80098c4 <__multadd>
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	e7c8      	b.n	8009b3c <__pow5mult+0x10>
 8009baa:	2101      	movs	r1, #1
 8009bac:	4638      	mov	r0, r7
 8009bae:	f7ff fe59 	bl	8009864 <_Balloc>
 8009bb2:	f240 2171 	movw	r1, #625	; 0x271
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	2300      	movs	r3, #0
 8009bba:	6141      	str	r1, [r0, #20]
 8009bbc:	6102      	str	r2, [r0, #16]
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	64b8      	str	r0, [r7, #72]	; 0x48
 8009bc2:	6003      	str	r3, [r0, #0]
 8009bc4:	e7be      	b.n	8009b44 <__pow5mult+0x18>
 8009bc6:	bf00      	nop
 8009bc8:	08019f68 	.word	0x08019f68

08009bcc <__lshift>:
 8009bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	690f      	ldr	r7, [r1, #16]
 8009bd2:	688b      	ldr	r3, [r1, #8]
 8009bd4:	ea4f 1962 	mov.w	r9, r2, asr #5
 8009bd8:	444f      	add	r7, r9
 8009bda:	1c7d      	adds	r5, r7, #1
 8009bdc:	429d      	cmp	r5, r3
 8009bde:	460e      	mov	r6, r1
 8009be0:	4614      	mov	r4, r2
 8009be2:	6849      	ldr	r1, [r1, #4]
 8009be4:	4680      	mov	r8, r0
 8009be6:	dd04      	ble.n	8009bf2 <__lshift+0x26>
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	429d      	cmp	r5, r3
 8009bec:	f101 0101 	add.w	r1, r1, #1
 8009bf0:	dcfa      	bgt.n	8009be8 <__lshift+0x1c>
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f7ff fe36 	bl	8009864 <_Balloc>
 8009bf8:	f1b9 0f00 	cmp.w	r9, #0
 8009bfc:	f100 0114 	add.w	r1, r0, #20
 8009c00:	dd09      	ble.n	8009c16 <__lshift+0x4a>
 8009c02:	2300      	movs	r3, #0
 8009c04:	469e      	mov	lr, r3
 8009c06:	460a      	mov	r2, r1
 8009c08:	3301      	adds	r3, #1
 8009c0a:	454b      	cmp	r3, r9
 8009c0c:	f842 eb04 	str.w	lr, [r2], #4
 8009c10:	d1fa      	bne.n	8009c08 <__lshift+0x3c>
 8009c12:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009c16:	6932      	ldr	r2, [r6, #16]
 8009c18:	f106 0314 	add.w	r3, r6, #20
 8009c1c:	f014 0c1f 	ands.w	ip, r4, #31
 8009c20:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8009c24:	d01f      	beq.n	8009c66 <__lshift+0x9a>
 8009c26:	f1cc 0920 	rsb	r9, ip, #32
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	681c      	ldr	r4, [r3, #0]
 8009c2e:	fa04 f40c 	lsl.w	r4, r4, ip
 8009c32:	4314      	orrs	r4, r2
 8009c34:	468a      	mov	sl, r1
 8009c36:	f841 4b04 	str.w	r4, [r1], #4
 8009c3a:	f853 4b04 	ldr.w	r4, [r3], #4
 8009c3e:	459e      	cmp	lr, r3
 8009c40:	fa24 f209 	lsr.w	r2, r4, r9
 8009c44:	d8f2      	bhi.n	8009c2c <__lshift+0x60>
 8009c46:	f8ca 2004 	str.w	r2, [sl, #4]
 8009c4a:	b102      	cbz	r2, 8009c4e <__lshift+0x82>
 8009c4c:	1cbd      	adds	r5, r7, #2
 8009c4e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8009c52:	6872      	ldr	r2, [r6, #4]
 8009c54:	3d01      	subs	r5, #1
 8009c56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c5a:	6105      	str	r5, [r0, #16]
 8009c5c:	6031      	str	r1, [r6, #0]
 8009c5e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8009c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c66:	3904      	subs	r1, #4
 8009c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c70:	459e      	cmp	lr, r3
 8009c72:	d8f9      	bhi.n	8009c68 <__lshift+0x9c>
 8009c74:	e7eb      	b.n	8009c4e <__lshift+0x82>
 8009c76:	bf00      	nop

08009c78 <__mcmp>:
 8009c78:	6902      	ldr	r2, [r0, #16]
 8009c7a:	690b      	ldr	r3, [r1, #16]
 8009c7c:	1ad2      	subs	r2, r2, r3
 8009c7e:	d113      	bne.n	8009ca8 <__mcmp+0x30>
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	3014      	adds	r0, #20
 8009c84:	3114      	adds	r1, #20
 8009c86:	4419      	add	r1, r3
 8009c88:	b410      	push	{r4}
 8009c8a:	4403      	add	r3, r0
 8009c8c:	e001      	b.n	8009c92 <__mcmp+0x1a>
 8009c8e:	4298      	cmp	r0, r3
 8009c90:	d20c      	bcs.n	8009cac <__mcmp+0x34>
 8009c92:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009c96:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c9a:	4294      	cmp	r4, r2
 8009c9c:	d0f7      	beq.n	8009c8e <__mcmp+0x16>
 8009c9e:	d309      	bcc.n	8009cb4 <__mcmp+0x3c>
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	4610      	mov	r0, r2
 8009caa:	4770      	bx	lr
 8009cac:	2000      	movs	r0, #0
 8009cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop

08009cc0 <__mdiff>:
 8009cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	4611      	mov	r1, r2
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4614      	mov	r4, r2
 8009cce:	f7ff ffd3 	bl	8009c78 <__mcmp>
 8009cd2:	1e07      	subs	r7, r0, #0
 8009cd4:	d054      	beq.n	8009d80 <__mdiff+0xc0>
 8009cd6:	db4d      	blt.n	8009d74 <__mdiff+0xb4>
 8009cd8:	f04f 0800 	mov.w	r8, #0
 8009cdc:	6871      	ldr	r1, [r6, #4]
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f7ff fdc0 	bl	8009864 <_Balloc>
 8009ce4:	6937      	ldr	r7, [r6, #16]
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	f8c0 800c 	str.w	r8, [r0, #12]
 8009cec:	3614      	adds	r6, #20
 8009cee:	f104 0214 	add.w	r2, r4, #20
 8009cf2:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8009cf6:	f100 0514 	add.w	r5, r0, #20
 8009cfa:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d04:	f852 4b04 	ldr.w	r4, [r2], #4
 8009d08:	fa13 f388 	uxtah	r3, r3, r8
 8009d0c:	b2a1      	uxth	r1, r4
 8009d0e:	0c24      	lsrs	r4, r4, #16
 8009d10:	1a59      	subs	r1, r3, r1
 8009d12:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8009d16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d1a:	b289      	uxth	r1, r1
 8009d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009d20:	4594      	cmp	ip, r2
 8009d22:	f845 1b04 	str.w	r1, [r5], #4
 8009d26:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009d2a:	4634      	mov	r4, r6
 8009d2c:	d8e8      	bhi.n	8009d00 <__mdiff+0x40>
 8009d2e:	45b6      	cmp	lr, r6
 8009d30:	46ac      	mov	ip, r5
 8009d32:	d915      	bls.n	8009d60 <__mdiff+0xa0>
 8009d34:	f854 2b04 	ldr.w	r2, [r4], #4
 8009d38:	fa13 f182 	uxtah	r1, r3, r2
 8009d3c:	0c13      	lsrs	r3, r2, #16
 8009d3e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d42:	b289      	uxth	r1, r1
 8009d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009d48:	45a6      	cmp	lr, r4
 8009d4a:	f845 1b04 	str.w	r1, [r5], #4
 8009d4e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009d52:	d8ef      	bhi.n	8009d34 <__mdiff+0x74>
 8009d54:	43f6      	mvns	r6, r6
 8009d56:	4476      	add	r6, lr
 8009d58:	f026 0503 	bic.w	r5, r6, #3
 8009d5c:	3504      	adds	r5, #4
 8009d5e:	4465      	add	r5, ip
 8009d60:	3d04      	subs	r5, #4
 8009d62:	b921      	cbnz	r1, 8009d6e <__mdiff+0xae>
 8009d64:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009d68:	3f01      	subs	r7, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0fa      	beq.n	8009d64 <__mdiff+0xa4>
 8009d6e:	6107      	str	r7, [r0, #16]
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	4633      	mov	r3, r6
 8009d76:	f04f 0801 	mov.w	r8, #1
 8009d7a:	4626      	mov	r6, r4
 8009d7c:	461c      	mov	r4, r3
 8009d7e:	e7ad      	b.n	8009cdc <__mdiff+0x1c>
 8009d80:	4628      	mov	r0, r5
 8009d82:	4639      	mov	r1, r7
 8009d84:	f7ff fd6e 	bl	8009864 <_Balloc>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	6147      	str	r7, [r0, #20]
 8009d8c:	6103      	str	r3, [r0, #16]
 8009d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d92:	bf00      	nop

08009d94 <__d2b>:
 8009d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d98:	ec57 6b10 	vmov	r6, r7, d0
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	4688      	mov	r8, r1
 8009da0:	2101      	movs	r1, #1
 8009da2:	463c      	mov	r4, r7
 8009da4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009da8:	4617      	mov	r7, r2
 8009daa:	f7ff fd5b 	bl	8009864 <_Balloc>
 8009dae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009db2:	4681      	mov	r9, r0
 8009db4:	b10d      	cbz	r5, 8009dba <__d2b+0x26>
 8009db6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009dba:	9401      	str	r4, [sp, #4]
 8009dbc:	b31e      	cbz	r6, 8009e06 <__d2b+0x72>
 8009dbe:	a802      	add	r0, sp, #8
 8009dc0:	f840 6d08 	str.w	r6, [r0, #-8]!
 8009dc4:	f7ff fde0 	bl	8009988 <__lo0bits>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d134      	bne.n	8009e36 <__d2b+0xa2>
 8009dcc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009dd0:	f8c9 2014 	str.w	r2, [r9, #20]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bf14      	ite	ne
 8009dd8:	2402      	movne	r4, #2
 8009dda:	2401      	moveq	r4, #1
 8009ddc:	f8c9 3018 	str.w	r3, [r9, #24]
 8009de0:	f8c9 4010 	str.w	r4, [r9, #16]
 8009de4:	b9dd      	cbnz	r5, 8009e1e <__d2b+0x8a>
 8009de6:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8009dea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dee:	f8c8 0000 	str.w	r0, [r8]
 8009df2:	6918      	ldr	r0, [r3, #16]
 8009df4:	f7ff fda8 	bl	8009948 <__hi0bits>
 8009df8:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8009dfc:	6038      	str	r0, [r7, #0]
 8009dfe:	4648      	mov	r0, r9
 8009e00:	b003      	add	sp, #12
 8009e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e06:	a801      	add	r0, sp, #4
 8009e08:	f7ff fdbe 	bl	8009988 <__lo0bits>
 8009e0c:	2401      	movs	r4, #1
 8009e0e:	9b01      	ldr	r3, [sp, #4]
 8009e10:	f8c9 3014 	str.w	r3, [r9, #20]
 8009e14:	3020      	adds	r0, #32
 8009e16:	f8c9 4010 	str.w	r4, [r9, #16]
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	d0e3      	beq.n	8009de6 <__d2b+0x52>
 8009e1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e22:	4405      	add	r5, r0
 8009e24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e28:	f8c8 5000 	str.w	r5, [r8]
 8009e2c:	6038      	str	r0, [r7, #0]
 8009e2e:	4648      	mov	r0, r9
 8009e30:	b003      	add	sp, #12
 8009e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e36:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009e3a:	f1c0 0120 	rsb	r1, r0, #32
 8009e3e:	fa03 f101 	lsl.w	r1, r3, r1
 8009e42:	430a      	orrs	r2, r1
 8009e44:	40c3      	lsrs	r3, r0
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	f8c9 2014 	str.w	r2, [r9, #20]
 8009e4c:	e7c2      	b.n	8009dd4 <__d2b+0x40>
 8009e4e:	bf00      	nop

08009e50 <_putc_r>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	460d      	mov	r5, r1
 8009e54:	4614      	mov	r4, r2
 8009e56:	4606      	mov	r6, r0
 8009e58:	b108      	cbz	r0, 8009e5e <_putc_r+0xe>
 8009e5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009e5c:	b1d3      	cbz	r3, 8009e94 <_putc_r+0x44>
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	db06      	blt.n	8009e76 <_putc_r+0x26>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	701d      	strb	r5, [r3, #0]
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	6022      	str	r2, [r4, #0]
 8009e72:	7818      	ldrb	r0, [r3, #0]
 8009e74:	bd70      	pop	{r4, r5, r6, pc}
 8009e76:	69a2      	ldr	r2, [r4, #24]
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	db0e      	blt.n	8009e9a <_putc_r+0x4a>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	701d      	strb	r5, [r3, #0]
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	7819      	ldrb	r1, [r3, #0]
 8009e84:	290a      	cmp	r1, #10
 8009e86:	d1f2      	bne.n	8009e6e <_putc_r+0x1e>
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e90:	f000 bab8 	b.w	800a404 <__swbuf_r>
 8009e94:	f7fe fe36 	bl	8008b04 <__sinit>
 8009e98:	e7e1      	b.n	8009e5e <_putc_r+0xe>
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ea4:	f000 baae 	b.w	800a404 <__swbuf_r>

08009ea8 <_realloc_r>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	4617      	mov	r7, r2
 8009eae:	b083      	sub	sp, #12
 8009eb0:	460e      	mov	r6, r1
 8009eb2:	2900      	cmp	r1, #0
 8009eb4:	f000 80e7 	beq.w	800a086 <_realloc_r+0x1de>
 8009eb8:	4681      	mov	r9, r0
 8009eba:	f107 050b 	add.w	r5, r7, #11
 8009ebe:	f7ff fccd 	bl	800985c <__malloc_lock>
 8009ec2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ec6:	2d16      	cmp	r5, #22
 8009ec8:	f023 0403 	bic.w	r4, r3, #3
 8009ecc:	f1a6 0808 	sub.w	r8, r6, #8
 8009ed0:	d84c      	bhi.n	8009f6c <_realloc_r+0xc4>
 8009ed2:	2210      	movs	r2, #16
 8009ed4:	4615      	mov	r5, r2
 8009ed6:	42af      	cmp	r7, r5
 8009ed8:	d84d      	bhi.n	8009f76 <_realloc_r+0xce>
 8009eda:	4294      	cmp	r4, r2
 8009edc:	f280 8084 	bge.w	8009fe8 <_realloc_r+0x140>
 8009ee0:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 800a290 <_realloc_r+0x3e8>
 8009ee4:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009ee8:	eb08 0104 	add.w	r1, r8, r4
 8009eec:	4288      	cmp	r0, r1
 8009eee:	f000 80d6 	beq.w	800a09e <_realloc_r+0x1f6>
 8009ef2:	6848      	ldr	r0, [r1, #4]
 8009ef4:	f020 0e01 	bic.w	lr, r0, #1
 8009ef8:	448e      	add	lr, r1
 8009efa:	f8de e004 	ldr.w	lr, [lr, #4]
 8009efe:	f01e 0f01 	tst.w	lr, #1
 8009f02:	d13f      	bne.n	8009f84 <_realloc_r+0xdc>
 8009f04:	f020 0003 	bic.w	r0, r0, #3
 8009f08:	4420      	add	r0, r4
 8009f0a:	4290      	cmp	r0, r2
 8009f0c:	f280 80c1 	bge.w	800a092 <_realloc_r+0x1ea>
 8009f10:	07db      	lsls	r3, r3, #31
 8009f12:	f100 808f 	bmi.w	800a034 <_realloc_r+0x18c>
 8009f16:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009f1a:	ebc3 0a08 	rsb	sl, r3, r8
 8009f1e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f22:	f023 0303 	bic.w	r3, r3, #3
 8009f26:	eb00 0e03 	add.w	lr, r0, r3
 8009f2a:	4596      	cmp	lr, r2
 8009f2c:	db34      	blt.n	8009f98 <_realloc_r+0xf0>
 8009f2e:	68cb      	ldr	r3, [r1, #12]
 8009f30:	688a      	ldr	r2, [r1, #8]
 8009f32:	4657      	mov	r7, sl
 8009f34:	60d3      	str	r3, [r2, #12]
 8009f36:	609a      	str	r2, [r3, #8]
 8009f38:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009f3c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009f40:	60cb      	str	r3, [r1, #12]
 8009f42:	1f22      	subs	r2, r4, #4
 8009f44:	2a24      	cmp	r2, #36	; 0x24
 8009f46:	6099      	str	r1, [r3, #8]
 8009f48:	f200 8136 	bhi.w	800a1b8 <_realloc_r+0x310>
 8009f4c:	2a13      	cmp	r2, #19
 8009f4e:	f240 80fd 	bls.w	800a14c <_realloc_r+0x2a4>
 8009f52:	6833      	ldr	r3, [r6, #0]
 8009f54:	f8ca 3008 	str.w	r3, [sl, #8]
 8009f58:	6873      	ldr	r3, [r6, #4]
 8009f5a:	f8ca 300c 	str.w	r3, [sl, #12]
 8009f5e:	2a1b      	cmp	r2, #27
 8009f60:	f200 8140 	bhi.w	800a1e4 <_realloc_r+0x33c>
 8009f64:	3608      	adds	r6, #8
 8009f66:	f10a 0310 	add.w	r3, sl, #16
 8009f6a:	e0f0      	b.n	800a14e <_realloc_r+0x2a6>
 8009f6c:	f025 0507 	bic.w	r5, r5, #7
 8009f70:	2d00      	cmp	r5, #0
 8009f72:	462a      	mov	r2, r5
 8009f74:	daaf      	bge.n	8009ed6 <_realloc_r+0x2e>
 8009f76:	230c      	movs	r3, #12
 8009f78:	2000      	movs	r0, #0
 8009f7a:	f8c9 3000 	str.w	r3, [r9]
 8009f7e:	b003      	add	sp, #12
 8009f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f84:	07d9      	lsls	r1, r3, #31
 8009f86:	d455      	bmi.n	800a034 <_realloc_r+0x18c>
 8009f88:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009f8c:	ebc3 0a08 	rsb	sl, r3, r8
 8009f90:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f94:	f023 0303 	bic.w	r3, r3, #3
 8009f98:	4423      	add	r3, r4
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	db4a      	blt.n	800a034 <_realloc_r+0x18c>
 8009f9e:	4657      	mov	r7, sl
 8009fa0:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009fa4:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009fa8:	1f22      	subs	r2, r4, #4
 8009faa:	2a24      	cmp	r2, #36	; 0x24
 8009fac:	60c1      	str	r1, [r0, #12]
 8009fae:	6088      	str	r0, [r1, #8]
 8009fb0:	f200 810e 	bhi.w	800a1d0 <_realloc_r+0x328>
 8009fb4:	2a13      	cmp	r2, #19
 8009fb6:	f240 8109 	bls.w	800a1cc <_realloc_r+0x324>
 8009fba:	6831      	ldr	r1, [r6, #0]
 8009fbc:	f8ca 1008 	str.w	r1, [sl, #8]
 8009fc0:	6871      	ldr	r1, [r6, #4]
 8009fc2:	f8ca 100c 	str.w	r1, [sl, #12]
 8009fc6:	2a1b      	cmp	r2, #27
 8009fc8:	f200 8121 	bhi.w	800a20e <_realloc_r+0x366>
 8009fcc:	3608      	adds	r6, #8
 8009fce:	f10a 0210 	add.w	r2, sl, #16
 8009fd2:	6831      	ldr	r1, [r6, #0]
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	6871      	ldr	r1, [r6, #4]
 8009fd8:	6051      	str	r1, [r2, #4]
 8009fda:	68b1      	ldr	r1, [r6, #8]
 8009fdc:	6091      	str	r1, [r2, #8]
 8009fde:	461c      	mov	r4, r3
 8009fe0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009fe4:	463e      	mov	r6, r7
 8009fe6:	46d0      	mov	r8, sl
 8009fe8:	1b62      	subs	r2, r4, r5
 8009fea:	2a0f      	cmp	r2, #15
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	d80e      	bhi.n	800a010 <_realloc_r+0x168>
 8009ff2:	4323      	orrs	r3, r4
 8009ff4:	4444      	add	r4, r8
 8009ff6:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ffa:	6863      	ldr	r3, [r4, #4]
 8009ffc:	f043 0301 	orr.w	r3, r3, #1
 800a000:	6063      	str	r3, [r4, #4]
 800a002:	4648      	mov	r0, r9
 800a004:	f7ff fc2c 	bl	8009860 <__malloc_unlock>
 800a008:	4630      	mov	r0, r6
 800a00a:	b003      	add	sp, #12
 800a00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a010:	eb08 0105 	add.w	r1, r8, r5
 800a014:	431d      	orrs	r5, r3
 800a016:	f042 0301 	orr.w	r3, r2, #1
 800a01a:	440a      	add	r2, r1
 800a01c:	f8c8 5004 	str.w	r5, [r8, #4]
 800a020:	604b      	str	r3, [r1, #4]
 800a022:	6853      	ldr	r3, [r2, #4]
 800a024:	f043 0301 	orr.w	r3, r3, #1
 800a028:	3108      	adds	r1, #8
 800a02a:	6053      	str	r3, [r2, #4]
 800a02c:	4648      	mov	r0, r9
 800a02e:	f7fe fdc1 	bl	8008bb4 <_free_r>
 800a032:	e7e6      	b.n	800a002 <_realloc_r+0x15a>
 800a034:	4639      	mov	r1, r7
 800a036:	4648      	mov	r0, r9
 800a038:	f7ff f8d0 	bl	80091dc <_malloc_r>
 800a03c:	4607      	mov	r7, r0
 800a03e:	b1d8      	cbz	r0, 800a078 <_realloc_r+0x1d0>
 800a040:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a044:	f023 0201 	bic.w	r2, r3, #1
 800a048:	4442      	add	r2, r8
 800a04a:	f1a0 0108 	sub.w	r1, r0, #8
 800a04e:	4291      	cmp	r1, r2
 800a050:	f000 80ac 	beq.w	800a1ac <_realloc_r+0x304>
 800a054:	1f22      	subs	r2, r4, #4
 800a056:	2a24      	cmp	r2, #36	; 0x24
 800a058:	f200 8099 	bhi.w	800a18e <_realloc_r+0x2e6>
 800a05c:	2a13      	cmp	r2, #19
 800a05e:	d86a      	bhi.n	800a136 <_realloc_r+0x28e>
 800a060:	4603      	mov	r3, r0
 800a062:	4632      	mov	r2, r6
 800a064:	6811      	ldr	r1, [r2, #0]
 800a066:	6019      	str	r1, [r3, #0]
 800a068:	6851      	ldr	r1, [r2, #4]
 800a06a:	6059      	str	r1, [r3, #4]
 800a06c:	6892      	ldr	r2, [r2, #8]
 800a06e:	609a      	str	r2, [r3, #8]
 800a070:	4631      	mov	r1, r6
 800a072:	4648      	mov	r0, r9
 800a074:	f7fe fd9e 	bl	8008bb4 <_free_r>
 800a078:	4648      	mov	r0, r9
 800a07a:	f7ff fbf1 	bl	8009860 <__malloc_unlock>
 800a07e:	4638      	mov	r0, r7
 800a080:	b003      	add	sp, #12
 800a082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a086:	4611      	mov	r1, r2
 800a088:	b003      	add	sp, #12
 800a08a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08e:	f7ff b8a5 	b.w	80091dc <_malloc_r>
 800a092:	68ca      	ldr	r2, [r1, #12]
 800a094:	6889      	ldr	r1, [r1, #8]
 800a096:	4604      	mov	r4, r0
 800a098:	60ca      	str	r2, [r1, #12]
 800a09a:	6091      	str	r1, [r2, #8]
 800a09c:	e7a4      	b.n	8009fe8 <_realloc_r+0x140>
 800a09e:	6841      	ldr	r1, [r0, #4]
 800a0a0:	f021 0103 	bic.w	r1, r1, #3
 800a0a4:	4421      	add	r1, r4
 800a0a6:	f105 0010 	add.w	r0, r5, #16
 800a0aa:	4281      	cmp	r1, r0
 800a0ac:	da5b      	bge.n	800a166 <_realloc_r+0x2be>
 800a0ae:	07db      	lsls	r3, r3, #31
 800a0b0:	d4c0      	bmi.n	800a034 <_realloc_r+0x18c>
 800a0b2:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800a0b6:	ebc3 0a08 	rsb	sl, r3, r8
 800a0ba:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a0be:	f023 0303 	bic.w	r3, r3, #3
 800a0c2:	eb01 0c03 	add.w	ip, r1, r3
 800a0c6:	4560      	cmp	r0, ip
 800a0c8:	f73f af66 	bgt.w	8009f98 <_realloc_r+0xf0>
 800a0cc:	4657      	mov	r7, sl
 800a0ce:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a0d2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800a0d6:	1f22      	subs	r2, r4, #4
 800a0d8:	2a24      	cmp	r2, #36	; 0x24
 800a0da:	60cb      	str	r3, [r1, #12]
 800a0dc:	6099      	str	r1, [r3, #8]
 800a0de:	f200 80b8 	bhi.w	800a252 <_realloc_r+0x3aa>
 800a0e2:	2a13      	cmp	r2, #19
 800a0e4:	f240 80a9 	bls.w	800a23a <_realloc_r+0x392>
 800a0e8:	6833      	ldr	r3, [r6, #0]
 800a0ea:	f8ca 3008 	str.w	r3, [sl, #8]
 800a0ee:	6873      	ldr	r3, [r6, #4]
 800a0f0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a0f4:	2a1b      	cmp	r2, #27
 800a0f6:	f200 80b5 	bhi.w	800a264 <_realloc_r+0x3bc>
 800a0fa:	3608      	adds	r6, #8
 800a0fc:	f10a 0310 	add.w	r3, sl, #16
 800a100:	6832      	ldr	r2, [r6, #0]
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	6872      	ldr	r2, [r6, #4]
 800a106:	605a      	str	r2, [r3, #4]
 800a108:	68b2      	ldr	r2, [r6, #8]
 800a10a:	609a      	str	r2, [r3, #8]
 800a10c:	eb0a 0205 	add.w	r2, sl, r5
 800a110:	ebc5 030c 	rsb	r3, r5, ip
 800a114:	f043 0301 	orr.w	r3, r3, #1
 800a118:	f8cb 2008 	str.w	r2, [fp, #8]
 800a11c:	6053      	str	r3, [r2, #4]
 800a11e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	431d      	orrs	r5, r3
 800a128:	4648      	mov	r0, r9
 800a12a:	f8ca 5004 	str.w	r5, [sl, #4]
 800a12e:	f7ff fb97 	bl	8009860 <__malloc_unlock>
 800a132:	4638      	mov	r0, r7
 800a134:	e769      	b.n	800a00a <_realloc_r+0x162>
 800a136:	6833      	ldr	r3, [r6, #0]
 800a138:	6003      	str	r3, [r0, #0]
 800a13a:	6873      	ldr	r3, [r6, #4]
 800a13c:	6043      	str	r3, [r0, #4]
 800a13e:	2a1b      	cmp	r2, #27
 800a140:	d829      	bhi.n	800a196 <_realloc_r+0x2ee>
 800a142:	f100 0308 	add.w	r3, r0, #8
 800a146:	f106 0208 	add.w	r2, r6, #8
 800a14a:	e78b      	b.n	800a064 <_realloc_r+0x1bc>
 800a14c:	463b      	mov	r3, r7
 800a14e:	6832      	ldr	r2, [r6, #0]
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	6872      	ldr	r2, [r6, #4]
 800a154:	605a      	str	r2, [r3, #4]
 800a156:	68b2      	ldr	r2, [r6, #8]
 800a158:	609a      	str	r2, [r3, #8]
 800a15a:	463e      	mov	r6, r7
 800a15c:	4674      	mov	r4, lr
 800a15e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a162:	46d0      	mov	r8, sl
 800a164:	e740      	b.n	8009fe8 <_realloc_r+0x140>
 800a166:	eb08 0205 	add.w	r2, r8, r5
 800a16a:	1b4b      	subs	r3, r1, r5
 800a16c:	f043 0301 	orr.w	r3, r3, #1
 800a170:	f8cb 2008 	str.w	r2, [fp, #8]
 800a174:	6053      	str	r3, [r2, #4]
 800a176:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	431d      	orrs	r5, r3
 800a180:	4648      	mov	r0, r9
 800a182:	f846 5c04 	str.w	r5, [r6, #-4]
 800a186:	f7ff fb6b 	bl	8009860 <__malloc_unlock>
 800a18a:	4630      	mov	r0, r6
 800a18c:	e73d      	b.n	800a00a <_realloc_r+0x162>
 800a18e:	4631      	mov	r1, r6
 800a190:	f7ff fb00 	bl	8009794 <memmove>
 800a194:	e76c      	b.n	800a070 <_realloc_r+0x1c8>
 800a196:	68b3      	ldr	r3, [r6, #8]
 800a198:	6083      	str	r3, [r0, #8]
 800a19a:	68f3      	ldr	r3, [r6, #12]
 800a19c:	60c3      	str	r3, [r0, #12]
 800a19e:	2a24      	cmp	r2, #36	; 0x24
 800a1a0:	d02c      	beq.n	800a1fc <_realloc_r+0x354>
 800a1a2:	f100 0310 	add.w	r3, r0, #16
 800a1a6:	f106 0210 	add.w	r2, r6, #16
 800a1aa:	e75b      	b.n	800a064 <_realloc_r+0x1bc>
 800a1ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a1b0:	f022 0203 	bic.w	r2, r2, #3
 800a1b4:	4414      	add	r4, r2
 800a1b6:	e717      	b.n	8009fe8 <_realloc_r+0x140>
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	4674      	mov	r4, lr
 800a1be:	463e      	mov	r6, r7
 800a1c0:	f7ff fae8 	bl	8009794 <memmove>
 800a1c4:	46d0      	mov	r8, sl
 800a1c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a1ca:	e70d      	b.n	8009fe8 <_realloc_r+0x140>
 800a1cc:	463a      	mov	r2, r7
 800a1ce:	e700      	b.n	8009fd2 <_realloc_r+0x12a>
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	461c      	mov	r4, r3
 800a1d6:	463e      	mov	r6, r7
 800a1d8:	f7ff fadc 	bl	8009794 <memmove>
 800a1dc:	46d0      	mov	r8, sl
 800a1de:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a1e2:	e701      	b.n	8009fe8 <_realloc_r+0x140>
 800a1e4:	68b3      	ldr	r3, [r6, #8]
 800a1e6:	f8ca 3010 	str.w	r3, [sl, #16]
 800a1ea:	68f3      	ldr	r3, [r6, #12]
 800a1ec:	f8ca 3014 	str.w	r3, [sl, #20]
 800a1f0:	2a24      	cmp	r2, #36	; 0x24
 800a1f2:	d018      	beq.n	800a226 <_realloc_r+0x37e>
 800a1f4:	3610      	adds	r6, #16
 800a1f6:	f10a 0318 	add.w	r3, sl, #24
 800a1fa:	e7a8      	b.n	800a14e <_realloc_r+0x2a6>
 800a1fc:	6933      	ldr	r3, [r6, #16]
 800a1fe:	6103      	str	r3, [r0, #16]
 800a200:	6973      	ldr	r3, [r6, #20]
 800a202:	6143      	str	r3, [r0, #20]
 800a204:	f106 0218 	add.w	r2, r6, #24
 800a208:	f100 0318 	add.w	r3, r0, #24
 800a20c:	e72a      	b.n	800a064 <_realloc_r+0x1bc>
 800a20e:	68b1      	ldr	r1, [r6, #8]
 800a210:	f8ca 1010 	str.w	r1, [sl, #16]
 800a214:	68f1      	ldr	r1, [r6, #12]
 800a216:	f8ca 1014 	str.w	r1, [sl, #20]
 800a21a:	2a24      	cmp	r2, #36	; 0x24
 800a21c:	d00f      	beq.n	800a23e <_realloc_r+0x396>
 800a21e:	3610      	adds	r6, #16
 800a220:	f10a 0218 	add.w	r2, sl, #24
 800a224:	e6d5      	b.n	8009fd2 <_realloc_r+0x12a>
 800a226:	6933      	ldr	r3, [r6, #16]
 800a228:	f8ca 3018 	str.w	r3, [sl, #24]
 800a22c:	6973      	ldr	r3, [r6, #20]
 800a22e:	f8ca 301c 	str.w	r3, [sl, #28]
 800a232:	3618      	adds	r6, #24
 800a234:	f10a 0320 	add.w	r3, sl, #32
 800a238:	e789      	b.n	800a14e <_realloc_r+0x2a6>
 800a23a:	463b      	mov	r3, r7
 800a23c:	e760      	b.n	800a100 <_realloc_r+0x258>
 800a23e:	6932      	ldr	r2, [r6, #16]
 800a240:	f8ca 2018 	str.w	r2, [sl, #24]
 800a244:	6972      	ldr	r2, [r6, #20]
 800a246:	f8ca 201c 	str.w	r2, [sl, #28]
 800a24a:	3618      	adds	r6, #24
 800a24c:	f10a 0220 	add.w	r2, sl, #32
 800a250:	e6bf      	b.n	8009fd2 <_realloc_r+0x12a>
 800a252:	4631      	mov	r1, r6
 800a254:	4638      	mov	r0, r7
 800a256:	f8cd c004 	str.w	ip, [sp, #4]
 800a25a:	f7ff fa9b 	bl	8009794 <memmove>
 800a25e:	f8dd c004 	ldr.w	ip, [sp, #4]
 800a262:	e753      	b.n	800a10c <_realloc_r+0x264>
 800a264:	68b3      	ldr	r3, [r6, #8]
 800a266:	f8ca 3010 	str.w	r3, [sl, #16]
 800a26a:	68f3      	ldr	r3, [r6, #12]
 800a26c:	f8ca 3014 	str.w	r3, [sl, #20]
 800a270:	2a24      	cmp	r2, #36	; 0x24
 800a272:	d003      	beq.n	800a27c <_realloc_r+0x3d4>
 800a274:	3610      	adds	r6, #16
 800a276:	f10a 0318 	add.w	r3, sl, #24
 800a27a:	e741      	b.n	800a100 <_realloc_r+0x258>
 800a27c:	6933      	ldr	r3, [r6, #16]
 800a27e:	f8ca 3018 	str.w	r3, [sl, #24]
 800a282:	6973      	ldr	r3, [r6, #20]
 800a284:	f8ca 301c 	str.w	r3, [sl, #28]
 800a288:	3618      	adds	r6, #24
 800a28a:	f10a 0320 	add.w	r3, sl, #32
 800a28e:	e737      	b.n	800a100 <_realloc_r+0x258>
 800a290:	20000690 	.word	0x20000690

0800a294 <__fpclassifyd>:
 800a294:	ec53 2b10 	vmov	r2, r3, d0
 800a298:	b410      	push	{r4}
 800a29a:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 800a29e:	d008      	beq.n	800a2b2 <__fpclassifyd+0x1e>
 800a2a0:	4911      	ldr	r1, [pc, #68]	; (800a2e8 <__fpclassifyd+0x54>)
 800a2a2:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800a2a6:	4288      	cmp	r0, r1
 800a2a8:	d808      	bhi.n	800a2bc <__fpclassifyd+0x28>
 800a2aa:	2004      	movs	r0, #4
 800a2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	b91a      	cbnz	r2, 800a2bc <__fpclassifyd+0x28>
 800a2b4:	2002      	movs	r0, #2
 800a2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800a2c0:	4909      	ldr	r1, [pc, #36]	; (800a2e8 <__fpclassifyd+0x54>)
 800a2c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a2c6:	428b      	cmp	r3, r1
 800a2c8:	d9ef      	bls.n	800a2aa <__fpclassifyd+0x16>
 800a2ca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a2ce:	d201      	bcs.n	800a2d4 <__fpclassifyd+0x40>
 800a2d0:	2003      	movs	r0, #3
 800a2d2:	e7eb      	b.n	800a2ac <__fpclassifyd+0x18>
 800a2d4:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <__fpclassifyd+0x58>)
 800a2d6:	429c      	cmp	r4, r3
 800a2d8:	d001      	beq.n	800a2de <__fpclassifyd+0x4a>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	e7e6      	b.n	800a2ac <__fpclassifyd+0x18>
 800a2de:	fab2 f082 	clz	r0, r2
 800a2e2:	0940      	lsrs	r0, r0, #5
 800a2e4:	e7e2      	b.n	800a2ac <__fpclassifyd+0x18>
 800a2e6:	bf00      	nop
 800a2e8:	7fdfffff 	.word	0x7fdfffff
 800a2ec:	7ff00000 	.word	0x7ff00000

0800a2f0 <__sread>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f8:	f7f7 fb92 	bl	8001a20 <_read_r>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	db03      	blt.n	800a308 <__sread+0x18>
 800a300:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a302:	4403      	add	r3, r0
 800a304:	6523      	str	r3, [r4, #80]	; 0x50
 800a306:	bd10      	pop	{r4, pc}
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	bd10      	pop	{r4, pc}
 800a312:	bf00      	nop

0800a314 <__swrite>:
 800a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a318:	4616      	mov	r6, r2
 800a31a:	898a      	ldrh	r2, [r1, #12]
 800a31c:	461d      	mov	r5, r3
 800a31e:	05d3      	lsls	r3, r2, #23
 800a320:	460c      	mov	r4, r1
 800a322:	4607      	mov	r7, r0
 800a324:	d506      	bpl.n	800a334 <__swrite+0x20>
 800a326:	2200      	movs	r2, #0
 800a328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32c:	2302      	movs	r3, #2
 800a32e:	f7f7 faa7 	bl	8001880 <_lseek_r>
 800a332:	89a2      	ldrh	r2, [r4, #12]
 800a334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a338:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a33c:	81a2      	strh	r2, [r4, #12]
 800a33e:	4638      	mov	r0, r7
 800a340:	4632      	mov	r2, r6
 800a342:	462b      	mov	r3, r5
 800a344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	f7f7 bbf4 	b.w	8001b34 <_write_r>

0800a34c <__sseek>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	460c      	mov	r4, r1
 800a350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a354:	f7f7 fa94 	bl	8001880 <_lseek_r>
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	1c42      	adds	r2, r0, #1
 800a35c:	bf0e      	itee	eq
 800a35e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a366:	6520      	strne	r0, [r4, #80]	; 0x50
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	bd10      	pop	{r4, pc}

0800a36c <__sclose>:
 800a36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a370:	f7f7 ba7c 	b.w	800186c <_close_r>

0800a374 <__sprint_r.part.0>:
 800a374:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a37a:	049c      	lsls	r4, r3, #18
 800a37c:	460f      	mov	r7, r1
 800a37e:	4692      	mov	sl, r2
 800a380:	d52b      	bpl.n	800a3da <__sprint_r.part.0+0x66>
 800a382:	6893      	ldr	r3, [r2, #8]
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	b333      	cbz	r3, 800a3d6 <__sprint_r.part.0+0x62>
 800a388:	4680      	mov	r8, r0
 800a38a:	f102 0908 	add.w	r9, r2, #8
 800a38e:	e919 0060 	ldmdb	r9, {r5, r6}
 800a392:	08b6      	lsrs	r6, r6, #2
 800a394:	d017      	beq.n	800a3c6 <__sprint_r.part.0+0x52>
 800a396:	3d04      	subs	r5, #4
 800a398:	2400      	movs	r4, #0
 800a39a:	e001      	b.n	800a3a0 <__sprint_r.part.0+0x2c>
 800a39c:	42a6      	cmp	r6, r4
 800a39e:	d010      	beq.n	800a3c2 <__sprint_r.part.0+0x4e>
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a3a6:	463a      	mov	r2, r7
 800a3a8:	f000 f94a 	bl	800a640 <_fputwc_r>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	f104 0401 	add.w	r4, r4, #1
 800a3b2:	d1f3      	bne.n	800a39c <__sprint_r.part.0+0x28>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f8ca 3008 	str.w	r3, [sl, #8]
 800a3ba:	f8ca 3004 	str.w	r3, [sl, #4]
 800a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c2:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a3c6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800a3ca:	f8ca 3008 	str.w	r3, [sl, #8]
 800a3ce:	f109 0908 	add.w	r9, r9, #8
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1db      	bne.n	800a38e <__sprint_r.part.0+0x1a>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e7ec      	b.n	800a3b4 <__sprint_r.part.0+0x40>
 800a3da:	f7fe fcc3 	bl	8008d64 <__sfvwrite_r>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f8ca 3008 	str.w	r3, [sl, #8]
 800a3e4:	f8ca 3004 	str.w	r3, [sl, #4]
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a3ec <__sprint_r>:
 800a3ec:	6893      	ldr	r3, [r2, #8]
 800a3ee:	b410      	push	{r4}
 800a3f0:	b11b      	cbz	r3, 800a3fa <__sprint_r+0xe>
 800a3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3f6:	f7ff bfbd 	b.w	800a374 <__sprint_r.part.0>
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	6053      	str	r3, [r2, #4]
 800a3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <__swbuf_r>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	460d      	mov	r5, r1
 800a408:	4614      	mov	r4, r2
 800a40a:	4606      	mov	r6, r0
 800a40c:	b110      	cbz	r0, 800a414 <__swbuf_r+0x10>
 800a40e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a410:	2b00      	cmp	r3, #0
 800a412:	d048      	beq.n	800a4a6 <__swbuf_r+0xa2>
 800a414:	89a2      	ldrh	r2, [r4, #12]
 800a416:	69a3      	ldr	r3, [r4, #24]
 800a418:	60a3      	str	r3, [r4, #8]
 800a41a:	b291      	uxth	r1, r2
 800a41c:	0708      	lsls	r0, r1, #28
 800a41e:	d538      	bpl.n	800a492 <__swbuf_r+0x8e>
 800a420:	6923      	ldr	r3, [r4, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d035      	beq.n	800a492 <__swbuf_r+0x8e>
 800a426:	0489      	lsls	r1, r1, #18
 800a428:	b2ed      	uxtb	r5, r5
 800a42a:	d515      	bpl.n	800a458 <__swbuf_r+0x54>
 800a42c:	6822      	ldr	r2, [r4, #0]
 800a42e:	6961      	ldr	r1, [r4, #20]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	428b      	cmp	r3, r1
 800a434:	da1c      	bge.n	800a470 <__swbuf_r+0x6c>
 800a436:	3301      	adds	r3, #1
 800a438:	68a1      	ldr	r1, [r4, #8]
 800a43a:	1c50      	adds	r0, r2, #1
 800a43c:	3901      	subs	r1, #1
 800a43e:	60a1      	str	r1, [r4, #8]
 800a440:	6020      	str	r0, [r4, #0]
 800a442:	7015      	strb	r5, [r2, #0]
 800a444:	6962      	ldr	r2, [r4, #20]
 800a446:	429a      	cmp	r2, r3
 800a448:	d01a      	beq.n	800a480 <__swbuf_r+0x7c>
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	07db      	lsls	r3, r3, #31
 800a44e:	d501      	bpl.n	800a454 <__swbuf_r+0x50>
 800a450:	2d0a      	cmp	r5, #10
 800a452:	d015      	beq.n	800a480 <__swbuf_r+0x7c>
 800a454:	4628      	mov	r0, r5
 800a456:	bd70      	pop	{r4, r5, r6, pc}
 800a458:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a45a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a45e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a462:	81a2      	strh	r2, [r4, #12]
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	6661      	str	r1, [r4, #100]	; 0x64
 800a468:	6961      	ldr	r1, [r4, #20]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	428b      	cmp	r3, r1
 800a46e:	dbe2      	blt.n	800a436 <__swbuf_r+0x32>
 800a470:	4630      	mov	r0, r6
 800a472:	4621      	mov	r1, r4
 800a474:	f7fe fab2 	bl	80089dc <_fflush_r>
 800a478:	b940      	cbnz	r0, 800a48c <__swbuf_r+0x88>
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	2301      	movs	r3, #1
 800a47e:	e7db      	b.n	800a438 <__swbuf_r+0x34>
 800a480:	4630      	mov	r0, r6
 800a482:	4621      	mov	r1, r4
 800a484:	f7fe faaa 	bl	80089dc <_fflush_r>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d0e3      	beq.n	800a454 <__swbuf_r+0x50>
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a490:	bd70      	pop	{r4, r5, r6, pc}
 800a492:	4630      	mov	r0, r6
 800a494:	4621      	mov	r1, r4
 800a496:	f7fd f94f 	bl	8007738 <__swsetup_r>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1f6      	bne.n	800a48c <__swbuf_r+0x88>
 800a49e:	89a2      	ldrh	r2, [r4, #12]
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	b291      	uxth	r1, r2
 800a4a4:	e7bf      	b.n	800a426 <__swbuf_r+0x22>
 800a4a6:	f7fe fb2d 	bl	8008b04 <__sinit>
 800a4aa:	e7b3      	b.n	800a414 <__swbuf_r+0x10>

0800a4ac <_calloc_r>:
 800a4ac:	b510      	push	{r4, lr}
 800a4ae:	fb02 f101 	mul.w	r1, r2, r1
 800a4b2:	f7fe fe93 	bl	80091dc <_malloc_r>
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	b168      	cbz	r0, 800a4d6 <_calloc_r+0x2a>
 800a4ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a4be:	f022 0203 	bic.w	r2, r2, #3
 800a4c2:	3a04      	subs	r2, #4
 800a4c4:	2a24      	cmp	r2, #36	; 0x24
 800a4c6:	d818      	bhi.n	800a4fa <_calloc_r+0x4e>
 800a4c8:	2a13      	cmp	r2, #19
 800a4ca:	d806      	bhi.n	800a4da <_calloc_r+0x2e>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	605a      	str	r2, [r3, #4]
 800a4d4:	609a      	str	r2, [r3, #8]
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	2300      	movs	r3, #0
 800a4dc:	2a1b      	cmp	r2, #27
 800a4de:	6003      	str	r3, [r0, #0]
 800a4e0:	6043      	str	r3, [r0, #4]
 800a4e2:	d90f      	bls.n	800a504 <_calloc_r+0x58>
 800a4e4:	2a24      	cmp	r2, #36	; 0x24
 800a4e6:	6083      	str	r3, [r0, #8]
 800a4e8:	60c3      	str	r3, [r0, #12]
 800a4ea:	bf05      	ittet	eq
 800a4ec:	6103      	streq	r3, [r0, #16]
 800a4ee:	6143      	streq	r3, [r0, #20]
 800a4f0:	f100 0310 	addne.w	r3, r0, #16
 800a4f4:	f100 0318 	addeq.w	r3, r0, #24
 800a4f8:	e7e9      	b.n	800a4ce <_calloc_r+0x22>
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	f7fb fc20 	bl	8005d40 <memset>
 800a500:	4620      	mov	r0, r4
 800a502:	bd10      	pop	{r4, pc}
 800a504:	f100 0308 	add.w	r3, r0, #8
 800a508:	e7e1      	b.n	800a4ce <_calloc_r+0x22>
 800a50a:	bf00      	nop

0800a50c <_fclose_r>:
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d03d      	beq.n	800a58c <_fclose_r+0x80>
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	4605      	mov	r5, r0
 800a514:	460c      	mov	r4, r1
 800a516:	b108      	cbz	r0, 800a51c <_fclose_r+0x10>
 800a518:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a51a:	b37b      	cbz	r3, 800a57c <_fclose_r+0x70>
 800a51c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a520:	b90b      	cbnz	r3, 800a526 <_fclose_r+0x1a>
 800a522:	2000      	movs	r0, #0
 800a524:	bd70      	pop	{r4, r5, r6, pc}
 800a526:	4628      	mov	r0, r5
 800a528:	4621      	mov	r1, r4
 800a52a:	f7fe f9ad 	bl	8008888 <__sflush_r>
 800a52e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a530:	4606      	mov	r6, r0
 800a532:	b133      	cbz	r3, 800a542 <_fclose_r+0x36>
 800a534:	4628      	mov	r0, r5
 800a536:	69e1      	ldr	r1, [r4, #28]
 800a538:	4798      	blx	r3
 800a53a:	2800      	cmp	r0, #0
 800a53c:	bfb8      	it	lt
 800a53e:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	061b      	lsls	r3, r3, #24
 800a546:	d41c      	bmi.n	800a582 <_fclose_r+0x76>
 800a548:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a54a:	b141      	cbz	r1, 800a55e <_fclose_r+0x52>
 800a54c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a550:	4299      	cmp	r1, r3
 800a552:	d002      	beq.n	800a55a <_fclose_r+0x4e>
 800a554:	4628      	mov	r0, r5
 800a556:	f7fe fb2d 	bl	8008bb4 <_free_r>
 800a55a:	2300      	movs	r3, #0
 800a55c:	6323      	str	r3, [r4, #48]	; 0x30
 800a55e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a560:	b121      	cbz	r1, 800a56c <_fclose_r+0x60>
 800a562:	4628      	mov	r0, r5
 800a564:	f7fe fb26 	bl	8008bb4 <_free_r>
 800a568:	2300      	movs	r3, #0
 800a56a:	6463      	str	r3, [r4, #68]	; 0x44
 800a56c:	f7fe fad0 	bl	8008b10 <__sfp_lock_acquire>
 800a570:	2300      	movs	r3, #0
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	f7fe face 	bl	8008b14 <__sfp_lock_release>
 800a578:	4630      	mov	r0, r6
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	f7fe fac2 	bl	8008b04 <__sinit>
 800a580:	e7cc      	b.n	800a51c <_fclose_r+0x10>
 800a582:	4628      	mov	r0, r5
 800a584:	6921      	ldr	r1, [r4, #16]
 800a586:	f7fe fb15 	bl	8008bb4 <_free_r>
 800a58a:	e7dd      	b.n	800a548 <_fclose_r+0x3c>
 800a58c:	2000      	movs	r0, #0
 800a58e:	4770      	bx	lr

0800a590 <__fputwc>:
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	4607      	mov	r7, r0
 800a598:	460e      	mov	r6, r1
 800a59a:	4614      	mov	r4, r2
 800a59c:	f7fe fd9c 	bl	80090d8 <__locale_mb_cur_max>
 800a5a0:	2801      	cmp	r0, #1
 800a5a2:	d041      	beq.n	800a628 <__fputwc+0x98>
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	a901      	add	r1, sp, #4
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a5ae:	f000 f859 	bl	800a664 <_wcrtomb_r>
 800a5b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	d02f      	beq.n	800a61a <__fputwc+0x8a>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d03c      	beq.n	800a638 <__fputwc+0xa8>
 800a5be:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a5c2:	2500      	movs	r5, #0
 800a5c4:	e009      	b.n	800a5da <__fputwc+0x4a>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	7019      	strb	r1, [r3, #0]
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	6023      	str	r3, [r4, #0]
 800a5d0:	3501      	adds	r5, #1
 800a5d2:	45a8      	cmp	r8, r5
 800a5d4:	d930      	bls.n	800a638 <__fputwc+0xa8>
 800a5d6:	ab01      	add	r3, sp, #4
 800a5d8:	5d59      	ldrb	r1, [r3, r5]
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	60a3      	str	r3, [r4, #8]
 800a5e2:	daf0      	bge.n	800a5c6 <__fputwc+0x36>
 800a5e4:	69a2      	ldr	r2, [r4, #24]
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	db07      	blt.n	800a5fa <__fputwc+0x6a>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	7019      	strb	r1, [r3, #0]
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	7819      	ldrb	r1, [r3, #0]
 800a5f2:	290a      	cmp	r1, #10
 800a5f4:	f103 0301 	add.w	r3, r3, #1
 800a5f8:	d1e9      	bne.n	800a5ce <__fputwc+0x3e>
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	f7ff ff01 	bl	800a404 <__swbuf_r>
 800a602:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800a606:	fab0 f080 	clz	r0, r0
 800a60a:	0940      	lsrs	r0, r0, #5
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d0df      	beq.n	800a5d0 <__fputwc+0x40>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a614:	b002      	add	sp, #8
 800a616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	b002      	add	sp, #8
 800a624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a628:	1e73      	subs	r3, r6, #1
 800a62a:	2bfe      	cmp	r3, #254	; 0xfe
 800a62c:	d8ba      	bhi.n	800a5a4 <__fputwc+0x14>
 800a62e:	b2f1      	uxtb	r1, r6
 800a630:	4680      	mov	r8, r0
 800a632:	f88d 1004 	strb.w	r1, [sp, #4]
 800a636:	e7c4      	b.n	800a5c2 <__fputwc+0x32>
 800a638:	4630      	mov	r0, r6
 800a63a:	b002      	add	sp, #8
 800a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a640 <_fputwc_r>:
 800a640:	8993      	ldrh	r3, [r2, #12]
 800a642:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a646:	d10b      	bne.n	800a660 <_fputwc_r+0x20>
 800a648:	b410      	push	{r4}
 800a64a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800a64c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a650:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800a654:	6654      	str	r4, [r2, #100]	; 0x64
 800a656:	8193      	strh	r3, [r2, #12]
 800a658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65c:	f7ff bf98 	b.w	800a590 <__fputwc>
 800a660:	f7ff bf96 	b.w	800a590 <__fputwc>

0800a664 <_wcrtomb_r>:
 800a664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a668:	4605      	mov	r5, r0
 800a66a:	b086      	sub	sp, #24
 800a66c:	461e      	mov	r6, r3
 800a66e:	460c      	mov	r4, r1
 800a670:	b1a1      	cbz	r1, 800a69c <_wcrtomb_r+0x38>
 800a672:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <_wcrtomb_r+0x50>)
 800a674:	4617      	mov	r7, r2
 800a676:	f8d3 8000 	ldr.w	r8, [r3]
 800a67a:	f7fe fd29 	bl	80090d0 <__locale_charset>
 800a67e:	9600      	str	r6, [sp, #0]
 800a680:	4603      	mov	r3, r0
 800a682:	4621      	mov	r1, r4
 800a684:	463a      	mov	r2, r7
 800a686:	4628      	mov	r0, r5
 800a688:	47c0      	blx	r8
 800a68a:	1c43      	adds	r3, r0, #1
 800a68c:	d103      	bne.n	800a696 <_wcrtomb_r+0x32>
 800a68e:	2200      	movs	r2, #0
 800a690:	238a      	movs	r3, #138	; 0x8a
 800a692:	6032      	str	r2, [r6, #0]
 800a694:	602b      	str	r3, [r5, #0]
 800a696:	b006      	add	sp, #24
 800a698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69c:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <_wcrtomb_r+0x50>)
 800a69e:	681f      	ldr	r7, [r3, #0]
 800a6a0:	f7fe fd16 	bl	80090d0 <__locale_charset>
 800a6a4:	9600      	str	r6, [sp, #0]
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	a903      	add	r1, sp, #12
 800a6ae:	47b8      	blx	r7
 800a6b0:	e7eb      	b.n	800a68a <_wcrtomb_r+0x26>
 800a6b2:	bf00      	nop
 800a6b4:	20000aa0 	.word	0x20000aa0

0800a6b8 <__ascii_wctomb>:
 800a6b8:	b121      	cbz	r1, 800a6c4 <__ascii_wctomb+0xc>
 800a6ba:	2aff      	cmp	r2, #255	; 0xff
 800a6bc:	d804      	bhi.n	800a6c8 <__ascii_wctomb+0x10>
 800a6be:	700a      	strb	r2, [r1, #0]
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	4770      	bx	lr
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	4770      	bx	lr
 800a6c8:	238a      	movs	r3, #138	; 0x8a
 800a6ca:	6003      	str	r3, [r0, #0]
 800a6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop

0800a6d4 <_init>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	bf00      	nop
 800a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6da:	bc08      	pop	{r3}
 800a6dc:	469e      	mov	lr, r3
 800a6de:	4770      	bx	lr

0800a6e0 <_fini>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr
