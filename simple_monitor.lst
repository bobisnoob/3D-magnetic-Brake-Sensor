
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
08009720 l    d  .rodata	00000000 .rodata
08018f98 l    d  .ARM	00000000 .ARM
08018fa0 l    d  .init_array	00000000 .init_array
08018fa8 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
200008e8 l    d  .bss	00000000 .bss
20000f3c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
08019890 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
080047f0 l       .text	00000000 LoopCopyDataInit
080047e8 l       .text	00000000 CopyDataInit
08004804 l       .text	00000000 LoopFillZerobss
080047fe l       .text	00000000 FillZerobss
08004816 l       .text	00000000 LoopForever
08004830 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08009708 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 deregister_tm_clones
080001a8 l     F .text	00000000 register_tm_clones
080001cc l     F .text	00000000 __do_global_dtors_aux
200008e8 l       .bss	00000000 completed.6266
08018fa8 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001f4 l     F .text	00000000 frame_dummy
200008ec l       .bss	00000000 object.6271
08018fa4 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
0800025c l       .text	00000000 turnOnLed
08000268 l       .text	00000000 resetCounter
08000294 l       .text	00000000 continue
0800028a l       .text	00000000 resetLED
0800029a l       .text	00000000 skip
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 3dmagnetic.c
20000904 l     O .bss	00000001 CurrentFRM.10706
20000905 l     O .bss	00000001 OldFRM.10705
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
2000000c l     O .data	00000004 printPrompt.10720
20000908 l     O .bss	00000004 saved.10718
20000010 l     O .data	00000004 buf.10719
08009f02 l     O .rodata	00000006 __FUNCTION__.10734
2000090c l     O .bss	00000004 count.10717
00000000 l    df *ABS*	00000000 dump.c
20000910 l     O .bss	00000004 address.10727
20000018 l     O .data	00000004 count.10728
00000000 l    df *ABS*	00000000 syscall.c
20000914 l     O .bss	00000004 heap_end.5843
00000000 l    df *ABS*	00000000 terminal.c
20000918 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08001d1c l     F .text	00000078 Uncompress
20000a3c l     O .bss	00000014 buf.10706
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000a50 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
08003cc8 l     F .text	0000002a I2C_TransferConfig
08003cf4 l     F .text	00000090 I2C_IsAcknowledgeFailed
08003d84 l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
08003dec l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
08003e40 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000a54 l     O .bss	00000001 cfgidx.10117
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
00000000 l    df *ABS*	00000000 usbd_conf.c
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000a58 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000a5c l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
08006150 l     F .text	00000076 __sbprintf
08018dd4 l     O .rodata	00000010 zeroes.6926
08018e28 l     O .rodata	00000010 blanks.6925
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08006330 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
08006344 l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080074a4 l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
20000474 l     O .data	00000038 lconv
200004ac l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
08018f20 l     O .rodata	0000000c p05.5302
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
08008e04 l     F .text	00000078 __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 s_atan.c
08018f58 l     O .rodata	00000020 atanlo
08018f78 l     O .rodata	00000020 atanhi
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000048 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
08018fac l       .fini_array	00000000 __fini_array_end
200008e8 l       .bss	00000000 __bss_start__
20000f3c l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
08018fa8 l       .fini_array	00000000 __fini_array_start
08018fa8 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08018fa0 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08018fa0 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
08018fa0 l       .init_array	00000000 __preinit_array_start
08004830  w    F .text	00000002 RTC_Alarm_IRQHandler
08014a10 g     O .rodata	00000008 RTC_BKP19R_fields
08018c84 g     O .rodata	00000010 APBAHBPrescTable
0800b150 g     O .rodata	00000050 TIM2_SR_fields
08011fb0 g     O .rodata	00000100 CAN_F10R1_fields
080157c0 g     O .rodata	00000008 TIM16_DMAR_fields
0800498c g     F .text	00000014 putchar
08004830  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08014660 g     O .rodata	00000008 I2C1_RXDR_fields
08004830  w    F .text	00000002 TIM8_CC_IRQHandler
08014ba8 g     O .rodata	00000030 TIM6_CR1_fields
0800adc8 g     O .rodata	00000048 I2C1_ICR_fields
08001b1c g     F .text	00000004 _isatty_r
20000af9 g     O .bss	00000050 input_b
08000b40 g     F .text	00000012 .hidden __aeabi_dcmple
080148e8 g     O .rodata	00000008 TIM2_PSC_fields
0800b8e0 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
08004a58 g     F .text	000000ba strcpy
08014e00 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08000d60 g     F .text	0000002e .hidden __gnu_uldivmod_helper
08010988 g     O .rodata	00000008 I2C1_TXDR_fields
080049a0 g     F .text	00000064 _puts_r
0800cd50 g     O .rodata	00000100 CAN_F19R1_fields
08000a7c g     F .text	0000007a .hidden __cmpdf2
08001dec g     F .text	00000054 DecodeWriteRegister
08001418 g     F .text	00000078 i2cInit
080039dc g     F .text	000000c8 HAL_PCD_EP_ClrStall
08011b60 g     O .rodata	00000008 TIM16_CCR1_fields
080096f8 g     F .text	0000000e fabs
08004830  w    F .text	00000002 DebugMon_Handler
08001b20 g     F .text	00000004 _lseek_r
080110e8 g     O .rodata	00000020 FPU_MVFR1_fields
080046b8 g     F .text	0000001a HAL_PCD_ResetCallback
08003aa4 g     F .text	0000002e PCD_WritePMA
08015a28 g     O .rodata	00000100 CAN_F22R1_fields
0800b358 g     O .rodata	000000e0 CAN_FA1R_fields
20000b9c g     O .bss	00000224 hUSBDDevice
0800cf48 g     O .rodata	00000048 TIM2_SMCR_fields
0800b8a0 g     O .rodata	00000020 NVIC_IPR1_fields
08000a7c g     F .text	0000007a .hidden __eqdf2
08010df8 g     O .rodata	00000100 CAN_F14R1_fields
08011fa8 g     O .rodata	00000008 TIM8_PSC_fields
08010240 g     O .rodata	00000030 TIM15_EGR_fields
08000d94 g     F .text	0000029c .hidden __divdi3
08001b24 g     F .text	00000054 CmdStats
08012b88 g     O .rodata	00000140 TIM2_registers
08014320 g     O .rodata	00000058 TIM15_DIER_fields
0800c0a0 g     O .rodata	00000008 DMA1_CMAR3_fields
0800c840 g     O .rodata	00000100 GPIOA_BSRR_fields
0801883c g     O .rodata	00000060 DMA1_CCR7_fields
08011240 g     O .rodata	00000008 TSC_IOG6CR_fields
0800c0a8 g     O .rodata	00000028 ADC1_SQR1_fields
080005ec g     F .text	0000005a .hidden __floatdidf
0800bf80 g     O .rodata	000000e0 CAN_FS1R_fields
08011aa8 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800aad0 g     O .rodata	00000010 RTC_SHIFTR_fields
08004964 g     F .text	00000028 printf
08014a50 g     O .rodata	00000028 CAN_TI1R_fields
080040dc g     F .text	00000016 USBD_SetClassConfig
08011718 g     O .rodata	00000020 NVIC_IPR14_fields
080090f4 g     F .text	00000054 _wcrtomb_r
08004830  w    F .text	00000002 TIM1_CC_IRQHandler
08002c88 g     F .text	00000060 HAL_NVIC_SetPriority
0800d4f8 g     O .rodata	000001b0 ADC1_registers
080046a0 g     F .text	00000010 HAL_PCD_DataInStageCallback
08014a18 g     O .rodata	00000018 TIM2_CR2_fields
08011660 g     O .rodata	00000008 Flash_WRPR_fields
08008ddc g     F .text	00000020 __sseek
08007594 g     F .text	0000000a __sinit
0800cac8 g     O .rodata	00000060 DMA1_CCR2_fields
08008e94 g     F .text	000000a8 __swbuf_r
08004830  w    F .text	00000002 HardFault_Handler
0800b4e8 g     O .rodata	00000100 TSC_IOHCR_fields
08010858 g     O .rodata	00000020 CRC_CR_fields
0800b4d8 g     O .rodata	00000008 NVIC_ISER0_fields
080082f0 g     F .text	00000002 __malloc_unlock
08013670 g     O .rodata	00000008 TIM15_ARR_fields
08010d20 g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
08010d18 g     O .rodata	00000008 TIM1_CCR3_fields
080188ac g     O .rodata	00000008 TIM1_DMAR_fields
0800c7c8 g     O .rodata	00000008 TIM15_CCR1_fields
08004830  w    F .text	00000002 USB_HP_IRQHandler
080148d0 g     O .rodata	00000010 USART1_RTOR_fields
0800efe0 g     O .rodata	00000070 RCC_AHBENR_fields
08012508 g     O .rodata	00000018 TIM2_CNT_fields
08013550 g     O .rodata	000000b0 I2C1_registers
08001414 g     F .text	00000004 SysTick_Handler
0800f830 g     O .rodata	00000008 RTC_WPR_fields
080154a0 g     O .rodata	00000008 RTC_SSR_fields
08002ea8 g     F .text	0000000a HAL_GPIO_WritePin
08010fd8 g     O .rodata	00000008 TSC_IOG2CR_fields
20000ad0 g     O .bss	00000002 x
08004830  w    F .text	00000002 PVD_IRQHandler
0800b4e0 g     O .rodata	00000008 DMA1_CPAR7_fields
08012520 g     O .rodata	00000010 TIM6_CNT_fields
0800c5e8 g     O .rodata	00000078 TIM1_DIER_fields
080046b0 g     F .text	00000008 HAL_PCD_SOFCallback
080102b8 g     O .rodata	00000008 NVIC_ICPR0_fields
08008224 g     F .text	000000c6 memmove
08004830  w    F .text	00000002 TAMP_STAMP_IRQHandler
08015248 g     O .rodata	00000020 NVIC_IPR2_fields
08018fac g       *ABS*	00000000 _sidata
08002bc4 g     F .text	00000038 HAL_RCC_GetHCLKFreq
08004830  w    F .text	00000002 PendSV_Handler
0801989c g     O .parsetable	0000000c CmdButtonE
08013998 g     O .rodata	00000008 NVIC_ICPR1_fields
08004830  w    F .text	00000002 NMI_Handler
080082f4 g     F .text	0000004c _Balloc
08018fa0 g       .ARM	00000000 __exidx_end
08004b80 g     F .text	00000064 __strtok_r
08004830  w    F .text	00000002 EXTI3_IRQHandler
08002b58 g     F .text	0000006c HAL_RCC_GetSysClockFreq
08004774 g     F .text	0000001c BSP_LED_Off
080185bc g     O .rodata	00000008 DMA1_CNDTR5_fields
0800f328 g     O .rodata	00000098 TIM8_CCER_fields
0800fb50 g     O .rodata	00000100 CAN_F8R2_fields
08000a6c g     F .text	0000008a .hidden __gtdf2
08019914 g       .parsetable	00000000 _parsetable_end
080141a8 g     O .rodata	00000048 RCC_AHBRSTR_fields
08004840 g     F .text	0000000c __errno
0800b438 g     O .rodata	00000008 RTC_BKP6R_fields
0800b9c8 g     O .rodata	00000028 CAN_TI2R_fields
080042dc g     F .text	00000218 USBD_StdDevReq
08003e92 g     F .text	00000090 HAL_I2C_Init
080137b8 g     O .rodata	00000008 NVIC_ISER2_fields
080198fc g     O .parsetable	0000000c CmdWE
0800e7a8 g     O .rodata	00000020 CAN_RDH0R_fields
08010ce0 g     O .rodata	00000020 FPU_FPDSCR_fields
08002bfc  w    F .text	00000002 HAL_MspInit
0800cc48 g     O .rodata	00000100 CAN_F0R2_fields
0800aa30 g     O .rodata	00000008 TSC_IOG8CR_fields
08004706 g     F .text	00000026 USBD_LL_IsStallEP
08014d00 g     O .rodata	00000100 CAN_F0R1_fields
0800fc50 g     O .rodata	00000020 TIM15_SMCR_fields
08001b12 g     F .text	0000000a _fstat_r
08002eb2 g     F .text	00000008 HAL_GPIO_TogglePin
08013ac8 g     O .rodata	00000048 TIM8_CR1_fields
08011910 g     O .rodata	00000008 Flash_AR_fields
0800dd80 g     O .rodata	00000100 CAN_F2R1_fields
080109f0 g     O .rodata	00000058 COMP_COMP4_CSR_fields
0800c410 g     O .rodata	00000040 GPIOB_AFRH_fields
08009720 g       .text	00000000 _etext
080109c0 g     O .rodata	00000010 EXTI_PR2_fields
08011748 g     O .rodata	00000028 USB_FS_FNR_fields
200008e8 g       .bss	00000000 _sbss
08010780 g     O .rodata	00000070 COMP_registers
080139a0 g     O .rodata	00000100 CAN_F4R2_fields
08010238 g     O .rodata	00000008 DMA1_CMAR1_fields
0800db18 g     O .rodata	00000060 TIM2_DIER_fields
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmple
0800e998 g     O .rodata	00000008 TSC_IOG1CR_fields
08015790 g     O .rodata	00000020 TIM17_CCER_fields
08015590 g     O .rodata	00000008 TIM8_RCR_fields
08011d18 g     O .rodata	00000010 TIM16_CNT_fields
08011bf8 g     O .rodata	00000100 GPIOB_BSRR_fields
0800ee28 g     O .rodata	00000100 CAN_F16R2_fields
0800ca70 g     O .rodata	00000018 ADC1_OFR1_fields
20000ad2 g     O .bss	00000004 WriteBuffer
08014378 g     O .rodata	00000100 CAN_F24R2_fields
0800e100 g     O .rodata	00000008 RTC_BKP23R_fields
08011428 g     O .rodata	00000008 TIM15_CCR2_fields
0800bcf0 g     O .rodata	00000098 ADC1_CFGR_fields
0800b820 g     O .rodata	00000008 RTC_BKP13R_fields
0800f058 g     O .rodata	00000100 CAN_F20R1_fields
0800ef28 g     O .rodata	00000060 USART1_ICR_fields
08018b34 g     O .rodata	00000100 CAN_F25R2_fields
080157b0 g     O .rodata	00000008 TSC_IOG4CR_fields
0800f158 g     O .rodata	00000100 CAN_F27R2_fields
08018ab4 g     O .rodata	00000078 TIM8_SR_fields
0800ad78 g     O .rodata	00000050 USB_FS_ISTR_fields
08013650 g     O .rodata	00000008 DMA1_CMAR2_fields
20000ad6 g     O .bss	0000000a ReadBuffer
0800c660 g     O .rodata	00000008 RTC_BKP26R_fields
08010290 g     O .rodata	00000028 ADC1_SQR2_fields
0800f838 g     O .rodata	00000010 TIM17_CNT_fields
0800c4c0 g     O .rodata	00000008 WWDG_SR_fields
0800dc78 g     O .rodata	000000c0 EXTI_registers
08002d14 g     F .text	00000188 HAL_GPIO_Init
08004280 g     F .text	00000006 USBD_LL_SetSpeed
20000020 g     O .data	00000004 BUTTON_PORT
080047c0 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800e0f0 g     O .rodata	00000008 NVIC_ICTR_fields
0800b6e8 g     O .rodata	00000008 TIM6_ARR_fields
0800e7c8 g     O .rodata	000000b0 CAN_TSR_fields
080019d0 g     F .text	000000b4 DumpBuffer
0800fad0 g     O .rodata	00000080 GPIOA_IDR_fields
0800a960 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
080046d4 g     F .text	00000002 HAL_PCD_ResumeCallback
08000b7c g     F .text	00000134 memcpy
08000af8 g     F .text	00000020 .hidden __aeabi_cdrcmple
080148f0 g     O .rodata	00000100 CAN_F7R2_fields
08014508 g     O .rodata	00000010 TIM1_CNT_fields
0800129c g     F .text	0000005c CmdLED
200008e4 g     O .data	00000000 .hidden __TMC_END__
0800df90 g     O .rodata	00000078 TIM1_SR_fields
0800cb28 g     O .rodata	00000020 NVIC_IPR13_fields
0800b8c0 g     O .rodata	00000008 TIM15_PSC_fields
08004524 g     F .text	000000b2 USBD_StdEPReq
08007498 g     F .text	0000000c _cleanup_r
08012150 g     O .rodata	00000040 GPIOA_AFRH_fields
0800057c g     F .text	00000022 .hidden __floatsidf
08013800 g     O .rodata	00000010 DAC_DHR12RD_fields
08013b48 g     O .rodata	00000058 COMP_COMP2_CSR_fields
08013810 g     O .rodata	00000078 TIM8_DIER_fields
0801889c g     O .rodata	00000010 ADC1_DIFSEL_fields
08000a74 g     F .text	00000082 .hidden __ltdf2
08004830  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
08004830  w    F .text	00000002 EXTI0_IRQHandler
08014ec0 g     O .rodata	00000010 TIM8_OR_fields
08004830  w    F .text	00000002 I2C2_EV_IRQHandler
0800b998 g     O .rodata	00000020 CAN_TDH0R_fields
0800de88 g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08000d00 g     F .text	00000000 .hidden __aeabi_uldivmod
08010990 g     O .rodata	00000030 WWDG_registers
0800ac70 g     O .rodata	00000008 TIM17_RCR_fields
08004a04 g     F .text	00000010 puts
08004616 g     F .text	00000016 USBD_CtlSendStatus
08004830  w    F .text	00000002 FPU_IRQHandler
080044f4 g     F .text	00000030 USBD_StdItfReq
0800de80 g     O .rodata	00000008 TIM8_CCR4_fields
2000001c g     O .data	00000004 SystemCoreClock
08008d24 g     F .text	0000005c __fpclassifyd
08014518 g     O .rodata	00000120 TIM15_registers
08003312 g     F .text	00000182 HAL_PCD_EP_Transmit
08000244 g     F .text	0000005c my_Tick
08010be0 g     O .rodata	00000100 CAN_F3R1_fields
0800429e g     F .text	00000028 USBD_ParseSetupRequest
08011a58 g     O .rodata	00000010 TIM2_CCR1_fields
0800ec78 g     O .rodata	00000010 DAC_SWTRIGR_fields
08004830  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800d8f8 g     O .rodata	00000100 CAN_F13R1_fields
08007c5c g     F .text	00000010 malloc
08010068 g     O .rodata	00000008 IWDG_RLR_fields
08003ad2 g     F .text	00000022 PCD_ReadPMA
08001320 g     F .text	00000054 CmdGyro
08015478 g     O .rodata	00000010 CAN_FMR_fields
08018e58 g     O .rodata	000000c8 __mprec_tens
0801890c g     O .rodata	00000040 OPAMP_registers
08013378 g     O .rodata	00000008 DMA1_CNDTR4_fields
08014c78 g     O .rodata	00000008 NVIC_IABR1_fields
08014b78 g     O .rodata	00000030 ADC1_2_registers
08014698 g     O .rodata	000000d0 EXTI_PR1_fields
08004830  w    F .text	00000002 UsageFault_Handler
08007b60 g     F .text	00000008 __locale_charset
08012f58 g     O .rodata	00000020 TIM8_CCR5_fields
08004830  w    F .text	00000002 ADC1_2_IRQHandler
20000a68 g     O .bss	00000004 __malloc_top_pad
20000b49 g     O .bss	00000050 input
08013ba0 g     O .rodata	00000100 CAN_F4R1_fields
08011738 g     O .rodata	00000010 ADC1_TR3_fields
0800e008 g     O .rodata	00000008 DMA1_CPAR2_fields
0800c4c8 g     O .rodata	00000048 TIM16_DIER_fields
08002e9c g     F .text	0000000c HAL_GPIO_ReadPin
08010978 g     O .rodata	00000008 NVIC_ICER2_fields
08004d0c g     F .text	00000018 strtoul
200004cc g     O .data	00000004 __mb_cur_max
0800055c g     F .text	0000001e .hidden __aeabi_ui2d
08007b74 g     F .text	00000008 _localeconv_r
0800c4b8 g     O .rodata	00000008 TIM8_CCR1_fields
08015060 g     O .rodata	00000100 CAN_F9R2_fields
08012b80 g     O .rodata	00000008 DAC_DHR12L2_fields
08008474 g     F .text	00000012 __i2b
080077f4 g     F .text	00000318 __sfvwrite_r
08004286 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08004830  w    F .text	00000002 SPI1_IRQHandler
08010d28 g     O .rodata	00000028 CAN_TI0R_fields
08004830  w    F .text	00000002 CAN_SCE_IRQHandler
080002d8 g     F .text	00000000 .hidden __aeabi_drsub
080151b0 g     O .rodata	00000048 ADC1_SMPR2_fields
08011bd8 g     O .rodata	00000020 NVIC_IPR4_fields
08001ad8 g     F .text	00000034 _sbrk_r
0800b800 g     O .rodata	00000020 NVIC_IPR18_fields
08012dd8 g     O .rodata	00000010 TIM6_DIER_fields
0800c290 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
080184a4 g     O .rodata	000000b0 USART1_ISR_fields
08004830  w    F .text	00000002 TIM6_DAC_IRQHandler
0800d000 g     O .rodata	00000068 I2C1_CR2_fields
08010fd0 g     O .rodata	00000008 TIM8_CCR2_fields
0800393a g     F .text	000000a2 HAL_PCD_EP_SetStall
08001bc4 g     F .text	0000000a _read_r
0800aa88 g     O .rodata	00000048 TIM1_SMCR_fields
080111b0 g     O .rodata	00000030 CAN_ESR_fields
08013cb0 g     O .rodata	00000080 GPIOB_BRR_fields
20000dc4 g     O .bss	00000178 hpcd
08000b2c g     F .text	00000012 .hidden __aeabi_dcmplt
08008f9c g     F .text	00000084 _fclose_r
08011b68 g     O .rodata	00000018 ADC1_OFR2_fields
0800b908 g     O .rodata	00000010 TIM2_ARR_fields
20000a64 g     O .bss	00000004 __malloc_max_sbrked_mem
080157f8 g     O .rodata	00000100 CAN_F9R1_fields
08011918 g     O .rodata	00000038 RTC_DR_fields
08014488 g     O .rodata	00000008 TIM1_CCR1_fields
08002ce8 g     F .text	0000002c HAL_SYSTICK_Config
080005a0 g     F .text	0000003a .hidden __extendsfdf2
08013270 g     O .rodata	00000008 Flash_OPTKEYR_fields
0800e5e8 g     O .rodata	00000018 ADC1_OFR4_fields
20000dc0 g     O .bss	00000004 USBDDataIn
0800089c g     F .text	000001d0 .hidden __aeabi_ddiv
08004830  w    F .text	00000002 TIM8_UP_IRQHandler
0800eaa8 g     O .rodata	00000100 CAN_F25R1_fields
080155c0 g     O .rodata	00000018 SPI1_I2SPR_fields
08012e50 g     O .rodata	00000008 ADC1_JDR1_fields
08013990 g     O .rodata	00000008 IWDG_KR_fields
08014bd8 g     O .rodata	00000050 USB_FS_USB_EP0R_fields
080002e4 g     F .text	00000276 .hidden __adddf3
08010fe0 g     O .rodata	00000100 CAN_F23R2_fields
08010d70 g     O .rodata	00000050 CRC_registers
0800d850 g     O .rodata	000000a0 USART1_CR1_fields
0800e128 g     O .rodata	00000320 RTC_registers
0800e898 g     O .rodata	00000100 CAN_F5R2_fields
0800d6a8 g     O .rodata	00000028 TIM17_CR2_fields
08018f98 g       .ARM	00000000 __exidx_start
0800cf30 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
0800bc70 g     O .rodata	00000008 Flash_KEYR_fields
08000648 g     F .text	00000254 .hidden __aeabi_dmul
080115f8 g     O .rodata	00000060 TIM8_CCMR2_Output_fields
0800c3e8 g     O .rodata	00000028 PWR_CSR_fields
08014310 g     O .rodata	00000010 RTC_ALRMASSR_fields
080149f0 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
0800da48 g     O .rodata	00000008 NVIC_IABR0_fields
08018dcc g     O .rodata	00000004 _global_impure_ptr
0800dbc8 g     O .rodata	00000040 FPU_MVFR0_fields
08013538 g     O .rodata	00000008 TIM16_RCR_fields
08008938 g     F .text	000003ec _realloc_r
08004878 g     F .text	00000050 __libc_init_array
08004604 g     F .text	00000012 USBD_CtlContinueRx
080148e0 g     O .rodata	00000008 RTC_BKP12R_fields
0800b240 g     O .rodata	00000010 USART1_GTPR_fields
08002ee6 g     F .text	00000338 HAL_PCD_EP_Open
08004830  w    F .text	00000002 DMA2_Channel2_IRQHandler
08001030 g     F .text	0000026a .hidden __udivdi3
08004830  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800c2f8 g     O .rodata	00000010 TIM1_OR_fields
0800a9b0 g     O .rodata	00000080 GPIOB_PUPDR_fields
08003494 g     F .text	000004a6 HAL_PCD_IRQHandler
08001738 g     F .text	00000020 CmdR
080198e4 g     O .parsetable	0000000c CmdReadE
080090d0 g     F .text	00000024 _fputwc_r
08018f30 g     O .rodata	00000028 __mprec_bigtens
080154a8 g     O .rodata	00000008 TIM1_CCR4_fields
0800055c g     F .text	0000001e .hidden __floatunsidf
08010210 g     O .rodata	00000020 CAN_TDL1R_fields
08008708 g     F .text	00000046 __mcmp
08013b28 g     O .rodata	00000020 NVIC_IPR7_fields
08014668 g     O .rodata	00000008 TIM17_DMAR_fields
08012dc8 g     O .rodata	00000010 TIM15_CNT_fields
0800d1b0 g     O .rodata	00000008 RTC_BKP10R_fields
0800db78 g     O .rodata	00000048 CAN_MSR_fields
080117c0 g     O .rodata	000000d0 RCC_registers
08009708 g     F .text	00000000 _init
0800e878 g     O .rodata	00000020 CAN_TDL0R_fields
08010d00 g     O .rodata	00000008 DAC_DHR8R2_fields
08012190 g     O .rodata	00000090 RCC_APB1RSTR_fields
080047d0 g     F .text	00000010 BSP_GYRO_GetXYZ
0800cd48 g     O .rodata	00000008 RTC_BKP0R_fields
080125c0 g     O .rodata	00000590 CAN_registers
08019890 g       .parsetable	00000000 _parsetable_start
0800e730 g     O .rodata	00000060 DMA1_CCR5_fields
0800dd78 g     O .rodata	00000008 RTC_BKP8R_fields
0800d3e8 g     O .rodata	00000110 TSC_registers
08010a48 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
080046ea g     F .text	0000000e USBD_LL_StallEP
0800bf50 g     O .rodata	00000008 NVIC_ICER1_fields
08014670 g     O .rodata	00000028 TIM16_EGR_fields
080198d8 g     O .parsetable	0000000c CmdRE
08012cc8 g     O .rodata	00000100 CAN_F8R1_fields
08004830  w    F .text	00000002 USART3_IRQHandler
080100f8 g     O .rodata	00000100 CAN_F21R1_fields
0800d9f8 g     O .rodata	00000050 RCC_CSR_fields
080105c8 g     O .rodata	00000080 GPIOA_OTYPER_fields
080157c8 g     O .rodata	00000010 DAC_DHR12LD_fields
0800c940 g     O .rodata	00000030 TIM16_SR_fields
08012220 g     O .rodata	000001a0 TIM1_registers
0800484c g     F .text	0000002c __libc_fini_array
08014e88 g     O .rodata	00000038 ADC1_JSQR_fields
20000f3c g       .bss	00000000 _ebss
08003f24 g     F .text	000000dc HAL_I2C_Master_Transmit
08010a90 g     O .rodata	00000050 FPU_CPACR_fields
08004830  w    F .text	00000002 DMA1_Channel7_IRQHandler
08010f08 g     O .rodata	00000020 CAN_TDL2R_fields
0800c060 g     O .rodata	00000040 GPIOA_AFRL_fields
080047e0  w    F .text	00000038 Reset_Handler
0801871c g     O .rodata	00000008 RTC_BKP29R_fields
0800be30 g     O .rodata	00000020 NVIC_IPR0_fields
080102e8 g     O .rodata	00000080 GPIOA_ODR_fields
080083d8 g     F .text	00000040 __hi0bits
0800e010 g     O .rodata	00000020 NVIC_IPR15_fields
0800c2f0 g     O .rodata	00000008 TIM1_CCR2_fields
0800d6f8 g     O .rodata	000000d0 EXTI_RTSR1_fields
0800e728 g     O .rodata	00000008 DAC_DOR2_fields
08010230 g     O .rodata	00000008 CRC_DR_fields
08000cb0 g     F .text	0000004e .hidden __fixdfsi
0800be78 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
080198cc g     O .parsetable	0000000c CmdLEDE
08004830  w    F .text	00000002 UART5_IRQHandler
08001ee8 g     F .text	00000050 DecodePeripheral
08014640 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
0800d1c0 g     O .rodata	00000100 CAN_F11R2_fields
08004830  w    F .text	00000002 ADC3_IRQHandler
08010070 g     O .rodata	00000038 RTC_TSTR_fields
08011168 g     O .rodata	00000048 TIM2_CR1_fields
08002c24 g     F .text	00000024 HAL_Init
0800fcf8 g     O .rodata	00000100 CAN_F1R2_fields
080088e0 g     F .text	00000058 _putc_r
08009168 g     F .text	00000224 __ieee754_atan2
0800f8c8 g     O .rodata	00000008 RTC_BKP17R_fields
080123c0 g     O .rodata	00000020 CAN_RDL1R_fields
08013438 g     O .rodata	00000100 CAN_F23R1_fields
20000ae0 g     O .bss	00000002 z
08004830  w    F .text	00000002 TIM4_IRQHandler
0800e620 g     O .rodata	00000100 CAN_F18R1_fields
080154b0 g     O .rodata	000000d0 USB_FS_registers
080002e4 g     F .text	00000276 .hidden __aeabi_dadd
08015788 g     O .rodata	00000008 TIM8_CCR3_fields
08000a74 g     F .text	00000082 .hidden __ledf2
08013278 g     O .rodata	00000100 CAN_F13R2_fields
08009d6a g     O .rodata	00000008 LEDs
08011890 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
08018b2c g     O .rodata	00000008 DAC_DHR12R1_fields
080159f8 g     O .rodata	00000028 I2C1_OAR1_fields
0800bf60 g     O .rodata	00000020 CAN_RF0R_fields
08004830  w    F .text	00000002 CAN_RX1_IRQHandler
08004830  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800bf58 g     O .rodata	00000008 RTC_BKP7R_fields
080085bc g     F .text	000000a0 __pow5mult
08010648 g     O .rodata	00000010 ADC1_TR1_fields
080153a8 g     O .rodata	00000008 DMA1_CNDTR7_fields
080005dc g     F .text	0000006a .hidden __aeabi_ul2d
08004652 g     F .text	0000002e USBD_CDC_TransmitPacket
0800e720 g     O .rodata	00000008 TSC_IOG5CR_fields
0800efd8 g     O .rodata	00000008 DAC_DHR12R2_fields
08010d10 g     O .rodata	00000008 RTC_BKP18R_fields
0800022c g     F .text	00000016 mytest
0800d1b8 g     O .rodata	00000008 DMA1_CMAR6_fields
08001490 g     F .text	0000006c Init_3DMagneticSensor
0800efa8 g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08001374 g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
0800462c g     F .text	00000016 USBD_CtlReceiveStatus
0800e558 g     O .rodata	00000010 TIM2_CCR4_fields
20000f3c g       ._user_heap_stack	00000000 end
0800dc08 g     O .rodata	00000070 SPI1_CR1_fields
08004830  w    F .text	00000002 I2C1_EV_IRQHandler
08012530 g     O .rodata	00000090 SPI1_registers
080046d6 g     F .text	00000014 USBD_LL_OpenEP
08011b80 g     O .rodata	00000010 TIM8_DCR_fields
08001f80 g     F .text	00000058 DecodePrintRegisters
080104e8 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0800ebc8 g     O .rodata	000000b0 USART1_registers
0800c308 g     O .rodata	00000008 USART1_TDR_fields
080120b8 g     O .rodata	00000078 RCC_APB1ENR_fields
08015a20 g     O .rodata	00000008 DMA1_CNDTR2_fields
08013888 g     O .rodata	00000070 CAN_IER_fields
08014c80 g     O .rodata	00000060 DMA1_CCR1_fields
08015058 g     O .rodata	00000008 NVIC_ICER0_fields
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
080100e8 g     O .rodata	00000008 NVIC_ISER1_fields
080041ba g     F .text	00000088 USBD_LL_DataInStage
08018714 g     O .rodata	00000008 RTC_BKP31R_fields
080104a0 g     O .rodata	00000048 TIM1_EGR_fields
080144a8 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
08013678 g     O .rodata	00000010 DAC_SR_fields
080114d0 g     O .rodata	00000010 TIM2_CCR2_fields
08013ac0 g     O .rodata	00000008 RTC_BKP3R_fields
08004758 g     F .text	0000001c BSP_LED_On
08000b68 g     F .text	00000012 .hidden __aeabi_dcmpgt
08004830  w    F .text	00000002 DMA1_Channel6_IRQHandler
080042c6 g     F .text	00000016 USBD_CtlError
080040f2 g     F .text	0000000e USBD_ClrClassConfig
08018554 g     O .rodata	00000008 RTC_BKP5R_fields
08004830  w    F .text	00000002 UART4_IRQHandler
08004830  w    F .text	00000002 DMA2_Channel4_IRQHandler
080075a0 g     F .text	00000002 __sfp_lock_acquire
08008190 g     F .text	00000092 memchr
08007644 g     F .text	000001b0 _free_r
08004830  w    F .text	00000002 TIM3_IRQHandler
08004830  w    F .text	00000002 RCC_IRQHandler
0800b130 g     O .rodata	00000020 RTC_CALR_fields
08007b68 g     F .text	0000000c __locale_mb_cur_max
08000b54 g     F .text	00000012 .hidden __aeabi_dcmpge
0800dbc0 g     O .rodata	00000008 DAC_DHR12L1_fields
0800b210 g     O .rodata	00000030 TIM17_SR_fields
00001000 g       *ABS*	00000000 _Min_Heap_Size
080103e8 g     O .rodata	00000080 GPIOB_OTYPER_fields
08004830  w    F .text	00000002 DMA1_Channel1_IRQHandler
080147e8 g     O .rodata	00000008 RTC_BKP9R_fields
080155d8 g     O .rodata	00000100 CAN_F14R2_fields
080002e0 g     F .text	0000027a .hidden __aeabi_dsub
0800468e g     F .text	00000012 HAL_PCD_DataOutStageCallback
08004830 g       .text	00000002 Default_Handler
200008dc g     O .data	00000004 __malloc_sbrk_base
08011ad8 g     O .rodata	00000088 GPIOA_LCKR_fields
0800ed90 g     O .rodata	00000090 RTC_TAFCR_fields
080156d8 g     O .rodata	000000b0 GPIOA_registers
0800e548 g     O .rodata	00000008 NVIC_ISPR2_fields
08004830  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08012df0 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
0800c200 g     O .rodata	00000088 GPIOB_LCKR_fields
0800bc78 g     O .rodata	00000078 TIM8_CR2_fields
20000ae2 g     O .bss	00000006 Reading
0800b828 g     O .rodata	00000030 CAN_BTR_fields
080005dc g     F .text	0000006a .hidden __floatundidf
0801855c g     O .rodata	00000060 DMA1_CCR4_fields
0800c7a8 g     O .rodata	00000020 NVIC_IPR10_fields
0800ee20 g     O .rodata	00000008 TIM17_ARR_fields
0800ec88 g     O .rodata	00000100 CAN_F12R2_fields
0800865c g     F .text	000000aa __lshift
080130c8 g     O .rodata	00000028 USART1_RQR_fields
08011778 g     O .rodata	00000048 TIM17_DIER_fields
08009164 g     F .text	00000004 atan2
0800ac08 g     O .rodata	00000008 RTC_BKP22R_fields
080130f0 g     O .rodata	00000020 CAN_TDH2R_fields
08010800 g     O .rodata	00000008 TIM1_RCR_fields
080046f8 g     F .text	0000000e USBD_LL_ClearStallEP
08018a94 g     O .rodata	00000020 NVIC_IPR5_fields
0800c668 g     O .rodata	00000058 Flash_OBR_fields
08004830  w    F .text	00000002 EXTI15_10_IRQHandler
0800cf90 g     O .rodata	00000018 CAN_TDT1R_fields
08011288 g     O .rodata	00000038 RTC_TR_fields
08011cf8 g     O .rodata	00000020 NVIC_IPR17_fields
0800628c g     F .text	000000a4 __register_exitproc
0800c590 g     O .rodata	00000058 Flash_CR_fields
0800e090 g     O .rodata	00000058 SPI1_SR_fields
0800dd38 g     O .rodata	00000040 USB_FS_DADDR_fields
0800e798 g     O .rodata	00000010 EXTI_SWIER2_fields
08002eba g     F .text	0000002c HAL_PCD_SetAddress
08010270 g     O .rodata	00000020 NVIC_IPR19_fields
0800f258 g     O .rodata	00000008 TIM6_SR_fields
0800b258 g     O .rodata	00000100 CAN_F1R1_fields
08013ca8 g     O .rodata	00000008 TIM17_PSC_fields
0800b1a0 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
08008488 g     F .text	00000134 __multiply
08015bb0 g     O .rodata	00000008 SPI1_CRCPR_fields
0800288c g     F .text	000002cc HAL_RCC_ClockConfig
08002c64 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
20000014 g     O .data	00000004 Commands
08015160 g     O .rodata	00000010 ADC1_TR2_fields
20000a6c g     O .bss	00000028 __malloc_current_mallinfo
08010d68 g     O .rodata	00000008 RTC_TSSSR_fields
0800185c g     F .text	0000012c TaskInput
0800eaa0 g     O .rodata	00000008 TIM6_CR2_fields
080133e0 g     O .rodata	00000050 RCC_CR_fields
08010658 g     O .rodata	000000e0 CAN_FM1R_fields
080110e0 g     O .rodata	00000008 TIM1_CCR6_fields
08008824 g     F .text	000000ba __d2b
080153b0 g     O .rodata	00000098 USART1_CR2_fields
08012fc8 g     O .rodata	00000060 TIM1_BDTR_fields
08004a14 g     F .text	00000044 strcasecmp
0800b008 g     O .rodata	00000008 IWDG_WINR_fields
08010738 g     O .rodata	00000048 ADC1_SMPR1_fields
080002c8 g     F .text	00000004 my_Init
0800e108 g     O .rodata	00000018 I2C1_OAR2_fields
08014ed0 g     O .rodata	00000100 CAN_F26R1_fields
08004be4 g     F .text	00000128 _strtoul_r
08011658 g     O .rodata	00000008 CRC_POL_fields
08018724 g     O .rodata	00000008 DMA1_CMAR4_fields
08004830  w    F .text	00000002 TIM7_IRQHandler
080046d2 g     F .text	00000002 HAL_PCD_SuspendCallback
08013118 g     O .rodata	00000008 DMA1_CPAR3_fields
0800f050 g     O .rodata	00000008 RTC_BKP14R_fields
08001b0c g     F .text	00000006 _close_r
0800a8a8 g     O .rodata	00000008 SPI1_DR_fields
0800bc50 g     O .rodata	00000018 RCC_CFGR2_fields
0800057c g     F .text	00000022 .hidden __aeabi_i2d
080015fc g     F .text	000000d4 ReadSensor
0800b7f0 g     O .rodata	00000010 TIM15_DCR_fields
0800b8c8 g     O .rodata	00000018 Flash_ACR_fields
0801882c g     O .rodata	00000008 CRC_IDR_fields
0800e550 g     O .rodata	00000008 DMA1_CPAR5_fields
08014a78 g     O .rodata	00000100 CAN_F18R2_fields
08012f78 g     O .rodata	00000050 IWDG_registers
08004b70 g     F .text	00000010 strtok
080198c0 g     O .parsetable	0000000c CmdGyroE
080100f0 g     O .rodata	00000008 IWDG_PR_fields
08011408 g     O .rodata	00000020 NVIC_IPR11_fields
08010808 g     O .rodata	00000050 COMP_COMP7_CSR_fields
0800b110 g     O .rodata	00000020 CAN_RF1R_fields
080061c8 g     F .text	000000c4 __swsetup_r
0800d6f0 g     O .rodata	00000008 TIM8_ARR_fields
08000d90  w    F .text	00000002 .hidden __aeabi_ldiv0
08004830  w    F .text	00000002 EXTI9_5_IRQHandler
0800089c g     F .text	000001d0 .hidden __divdf3
0800d2e0 g     O .rodata	00000008 ADC1_DR_fields
08004000 g     F .text	000000dc HAL_I2C_Master_Receive
08004830  w    F .text	00000002 RTC_WKUP_IRQHandler
08018704 g     O .rodata	00000010 USART1_BRR_fields
08014c28 g     O .rodata	00000050 TIM15_CCMR1_Output_fields
200004d0 g     O .data	00000408 __malloc_av_
080119c8 g     O .rodata	00000088 SYSCFG_CFGR1_fields
08001bce g     F .text	00000010 TerminalReadNonBlock
08000648 g     F .text	00000254 .hidden __muldf3
080157e0 g     O .rodata	00000018 CAN_TDT0R_fields
08001a84 g     F .text	00000054 CmdDump
08008d80 g     F .text	00000022 __sread
080102c0 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
08013658 g     O .rodata	00000018 WWDG_CFR_fields
08013e38 g     O .rodata	00000370 Peripherals
20000008 g       .data	00000000 LEDsAddress
08014768 g     O .rodata	00000080 GPIOB_ODR_fields
08002c58  w    F .text	0000000c HAL_GetTick
08011668 g     O .rodata	00000050 USB_FS_USB_EP5R_fields
0800e9a0 g     O .rodata	00000100 CAN_F11R1_fields
080082ec g     F .text	00000002 __malloc_lock
08013110 g     O .rodata	00000008 NVIC_ISPR0_fields
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0800bef8 g     O .rodata	00000058 ADC1_ISR_fields
0800c450 g     O .rodata	00000048 FPU_FPCCR_fields
08015580 g     O .rodata	00000010 TSC_ICR_fields
0800cac0 g     O .rodata	00000008 NVIC_IABR2_fields
0800746c g     F .text	0000002c _fflush_r
08001bde g     F .text	00000012 TerminalReadAnyNonBlock
08008f3c g     F .text	0000005e _calloc_r
08015b28 g     O .rodata	00000080 GPIOA_PUPDR_fields
08004830  w    F .text	00000002 SPI2_IRQHandler
08013b10 g     O .rodata	00000008 RTC_BKP21R_fields
0800abe0 g     O .rodata	00000028 RTC_TSDR_fields
08001d10 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
080136e8 g     O .rodata	00000048 RCC_CFGR3_fields
080048c8 g     F .text	0000009a memset
08004830  w    F .text	00000002 MemManage_Handler
080013a0 g     F .text	00000074 main
08013120 g     O .rodata	00000100 TSC_IOSCR_fields
0800a6c8 g     O .rodata	000001e0 DMA1_registers
080047ac g     F .text	00000014 BSP_PB_GetState
08011430 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000a60 g     O .bss	00000004 __malloc_max_total_mem
20000004 g       .data	00000000 ledCounter
0800e0e8 g     O .rodata	00000008 ADC1_JDR3_fields
08011400 g     O .rodata	00000008 SPI1_TXCRCR_fields
08019890 g       *ABS*	00000000 _siccmram
080188bc g     O .rodata	00000050 COMP_COMP3_CSR_fields
0800f308 g     O .rodata	00000020 NVIC_IPR9_fields
0800f5a8 g     O .rodata	00000040 DBGMCU_registers
08013aa0 g     O .rodata	00000020 NVIC_IPR16_fields
0800e448 g     O .rodata	00000100 CAN_F2R2_fields
08004830  w    F .text	00000002 SVC_Handler
08008dfc g     F .text	00000008 __sclose
08004830  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800ce50 g     O .rodata	000000e0 DMA1_IFCR_fields
08001500 g     F .text	000000fc findAngle
0800bdb0 g     O .rodata	00000080 TSC_IOGCSR_fields
20000a94 g     O .bss	00000038 i2c1
080157b8 g     O .rodata	00000008 DMA1_CPAR1_fields
08006470 g     F .text	00000ea2 _dtoa_r
08007c6c g     F .text	00000524 _malloc_r
08011248 g     O .rodata	00000040 GPIOB_AFRL_fields
08009148 g     F .text	0000001a __ascii_wctomb
0800b9f0 g     O .rodata	00000058 ADC1_IER_fields
20000ae8 g     O .bss	00000002 y
080005ec g     F .text	0000005a .hidden __aeabi_l2d
0800c288 g     O .rodata	00000008 DAC_DHR8R1_fields
08012b50 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
0800bb50 g     O .rodata	00000100 TSC_IOASCR_fields
0800d2c0 g     O .rodata	00000020 NVIC_IPR20_fields
08004242 g     F .text	0000003e USBD_LL_Reset
080123e0 g     O .rodata	00000018 CAN_RDT1R_fields
0800f848 g     O .rodata	00000080 GPIOA_BRR_fields
08013d38 g     O .rodata	00000100 CAN_F20R2_fields
080107f0 g     O .rodata	00000010 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
08004830  w    F .text	00000002 DMA1_Channel5_IRQHandler
08004830  w    F .text	00000002 USB_LP_IRQHandler
080113c0 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0800c0d0 g     O .rodata	00000100 CAN_F15R2_fields
08004830  w    F .text	00000002 EXTI4_IRQHandler
08013600 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
20000024 g     O .data	00000020 LED_PORT
0800aea8 g     O .rodata	00000008 TIM8_CCR6_fields
0800415a g     F .text	00000060 USBD_LL_DataOutStage
0800ed88 g     O .rodata	00000008 RTC_BKP4R_fields
080075a8 g     F .text	0000009c _malloc_trim_r
08014638 g     O .rodata	00000008 TSC_IOG7CR_fields
08013260 g     O .rodata	00000008 RTC_BKP16R_fields
08010468 g     O .rodata	00000028 DBGMCU_CR_fields
08010d50 g     O .rodata	00000018 CAN_RDT0R_fields
0800c6c0 g     O .rodata	00000008 ADC1_AWD2CR_fields
08014fd0 g     O .rodata	00000008 DMA1_CMAR5_fields
0800eba8 g     O .rodata	00000020 CAN_RDL0R_fields
08015bb8 g     O .rodata	00000008 DMA1_CPAR4_fields
080138f8 g     O .rodata	00000080 TIM6_registers
080012f8 g     F .text	00000028 CmdAccel
08010a88 g     O .rodata	00000008 RTC_BKP11R_fields
08002250 g     F .text	00000068 SystemInit
08011b90 g     O .rodata	00000048 TIM16_BDTR_fields
08000a7c g     F .text	0000007a .hidden __nedf2
08010558 g     O .rodata	00000070 RTC_ALRMBR_fields
08010ef8 g     O .rodata	00000010 TIM2_DCR_fields
08018c34 g     O .rodata	00000050 ADC1_CR_fields
08009714 g     F .text	00000000 _fini
0800171c g     F .text	0000001c CmdW
08004830  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0800f5e8 g     O .rodata	00000020 EXTI_EMR2_fields
08009390 g     F .text	00000368 atan
0800be70 g     O .rodata	00000008 RTC_WUTR_fields
08013430 g     O .rodata	00000008 DMA1_CPAR6_fields
08014e80 g     O .rodata	00000008 CRC_INIT_fields
0800ae18 g     O .rodata	00000088 RTC_ISR_fields
0800b9b8 g     O .rodata	00000010 TIM1_DCR_fields
0800b4a0 g     O .rodata	00000038 PWR_CR_fields
0800da50 g     O .rodata	00000030 TIM2_EGR_fields
08004834 g     F .text	0000000c atexit
08014fd8 g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0800c6c8 g     O .rodata	00000060 FPU_registers
0800ba50 g     O .rodata	00000100 EXTI_IMR1_fields
08001cd8 g     F .text	00000038 _write_r
0800c368 g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08015448 g     O .rodata	00000028 ADC1_SQR3_fields
08004830  w    F .text	00000002 DMA1_Channel3_IRQHandler
08015978 g     O .rodata	00000080 DBGMCU_APB1FZ_fields
08011108 g     O .rodata	00000060 SPI1_CR2_fields
08015490 g     O .rodata	00000010 ADC1_CALFACT_fields
08013ca0 g     O .rodata	00000008 RTC_BKP28R_fields
08002bfe  w    F .text	00000024 HAL_InitTick
0800c510 g     O .rodata	00000020 TIM1_CCR5_fields
0800472c g     F .text	0000000e USBD_LL_SetUSBAddress
08014ce0 g     O .rodata	00000020 NVIC_IPR12_fields
08018cb4 g     O .rodata	00000010 LED_PIN
20000470 g     O .data	00000004 _impure_ptr
080109d0 g     O .rodata	00000018 CAN_TDT2R_fields
08013268 g     O .rodata	00000008 ADC1_JDR4_fields
08013220 g     O .rodata	00000040 TIM15_CR2_fields
08007318 g     F .text	00000154 __sflush_r
0800b440 g     O .rodata	00000060 RCC_CFGR_fields
08002c48  w    F .text	00000010 HAL_IncTick
0800bd88 g     O .rodata	00000028 TIM17_EGR_fields
08004830  w    F .text	00000002 ADC4_IRQHandler
08013028 g     O .rodata	000000a0 RTC_CR_fields
080045f2 g     F .text	00000012 USBD_CtlContinueSendData
080147f0 g     O .rodata	000000e0 DMA1_ISR_fields
0800c970 g     O .rodata	00000100 CAN_F6R1_fields
08004830  w    F .text	00000002 WWDG_IRQHandler
08003e90  w    F .text	00000002 HAL_I2C_MspInit
0800ac78 g     O .rodata	00000100 EXTI_EMR1_fields
0800ef88 g     O .rodata	00000020 NVIC_IPR6_fields
08015bc0 g     O .rodata	00000010 TIM2_CCR3_fields
08013688 g     O .rodata	00000060 DMA1_CCR6_fields
08010368 g     O .rodata	00000080 GPIOA_MODER_fields
08013738 g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08011950 g     O .rodata	00000078 TIM1_CR2_fields
0800df80 g     O .rodata	00000010 RTC_PRER_fields
0800473a g     F .text	0000000e USBD_LL_Transmit
08004830  w    F .text	00000002 TIM2_IRQHandler
080002c4 g     F .text	00000004 my_Loop
08014e50 g     O .rodata	00000020 TIM16_CCER_fields
080198b4 g     O .parsetable	0000000c CmdDecodeE
0800d0b0 g     O .rodata	00000100 CAN_F26R2_fields
080114e0 g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
0800d2e8 g     O .rodata	00000100 CAN_F16R1_fields
0800aea0 g     O .rodata	00000008 RTC_BKP27R_fields
08010a78 g     O .rodata	00000010 EXTI_RTSR2_fields
08015598 g     O .rodata	00000028 TIM16_CR2_fields
0800c7d0 g     O .rodata	00000070 RTC_ALRMAR_fields
08013988 g     O .rodata	00000008 TIM1_ARR_fields
08004790 g     F .text	0000001c BSP_LED_Toggle
0800cb48 g     O .rodata	00000100 CAN_F22R2_fields
0800aae0 g     O .rodata	00000100 CAN_F24R1_fields
08004680 g     F .text	0000000e HAL_PCD_SetupStageCallback
0801872c g     O .rodata	00000100 CAN_F5R1_fields
08004830  w    F .text	00000002 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
08001758 g     F .text	00000104 parse
080120b0 g     O .rodata	00000008 RTC_BKP2R_fields
08004830  w    F .text	00000002 COMP1_2_3_IRQHandler
080112c0 g     O .rodata	00000100 CAN_F17R1_fields
080016d0 g     F .text	0000004c CmdRead
08004830  w    F .text	00000002 EXTI1_IRQHandler
0800c530 g     O .rodata	00000060 TIM8_BDTR_fields
08000b18 g     F .text	00000012 .hidden __aeabi_dcmpeq
080118c0 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0800a8b0 g     O .rodata	000000b0 ADC1_2_CSR_fields
08011770 g     O .rodata	00000008 FPU_FPCAR_fields
200008e4 g       .data	00000000 _edata
0800fdf8 g     O .rodata	000001a0 TIM8_registers
0800e0f8 g     O .rodata	00000008 RTC_BKP30R_fields
080115e0 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
08010dc0 g     O .rodata	00000038 TIM16_CR1_fields
0801894c g     O .rodata	00000100 CAN_F17R2_fields
0800ca88 g     O .rodata	00000038 TIM15_CR1_fields
08009020 g     F .text	000000b0 __fputwc
08001fd8 g     F .text	00000278 CmdDecode
080109e8 g     O .rodata	00000008 TIM15_RCR_fields
0800e568 g     O .rodata	00000080 GPIOB_IDR_fields
0800aa38 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
08010550 g     O .rodata	00000008 TIM8_DMAR_fields
0800b918 g     O .rodata	00000080 Flash_registers
0800f758 g     O .rodata	00000010 TIM16_DCR_fields
080186c4 g     O .rodata	00000040 RCC_APB2RSTR_fields
08001988 g     F .text	00000028 fetch_uint32_arg
08013978 g     O .rodata	00000010 RTC_ALRMBSSR_fields
080137c0 g     O .rodata	00000040 SYSCFG_RCR_fields
08004830  w    F .text	00000002 USART2_IRQHandler
08015178 g     O .rodata	00000038 TIM17_CR1_fields
08011d48 g     O .rodata	00000260 NVIC_registers
08004830  w    F .text	00000002 COMP4_5_6_IRQHandler
08008da4 g     F .text	00000038 __swrite
080022b8 g     F .text	000005d4 HAL_RCC_OscConfig
200008d8 g     O .data	00000004 __malloc_trim_threshold
08010980 g     O .rodata	00000008 TIM17_CCR1_fields
0800d828 g     O .rodata	00000028 I2C1_TIMINGR_fields
08013d30 g     O .rodata	00000008 USB_FS_BTABLE_fields
0800f2e8 g     O .rodata	00000020 CAN_TDH1R_fields
08010f28 g     O .rodata	000000a8 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
080045d6 g     F .text	0000001c USBD_CtlSendData
08014210 g     O .rodata	00000100 CAN_F15R1_fields
08013540 g     O .rodata	00000010 ADC1_2_CDR_fields
08007b0c g     F .text	00000052 _fwalk_reent
08008750 g     F .text	000000d2 __mdiff
08015170 g     O .rodata	00000008 TIM6_PSC_fields
08000cb0 g     F .text	0000004e .hidden __aeabi_d2iz
08012de8 g     O .rodata	00000008 RTC_BKP15R_fields
0800d6d0 g     O .rodata	00000020 PWR_registers
08003af4 g     F .text	000001d4 HAL_RCCEx_PeriphCLKConfig
080141f0 g     O .rodata	00000020 Flash_SR_fields
080157d8 g     O .rodata	00000008 ADC1_JDR2_fields
08010208 g     O .rodata	00000008 RTC_BKP20R_fields
20000044 g     O .data	00000004 __ctype_ptr__
0800e790 g     O .rodata	00000008 DMA1_CNDTR6_fields
0800b010 g     O .rodata	00000100 CAN_F19R2_fields
08004830  w    F .text	00000002 I2C2_ER_IRQHandler
0800f768 g     O .rodata	00000040 ADC1_2_CCR_fields
08004830  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800af28 g     O .rodata	000000e0 DAC_registers
080158f8 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
08018694 g     O .rodata	00000030 TIM8_CCMR2_Input_fields
080075a4 g     F .text	00000002 __sfp_lock_release
0800aeb0 g     O .rodata	00000048 TIM17_BDTR_fields
08011d28 g     O .rodata	00000020 CAN_RDH1R_fields
080111e0 g     O .rodata	00000060 TIM2_CCER_fields
08014e70 g     O .rodata	00000010 DAC_DHR8RD_fields
080019b0 g     F .text	00000020 fetch_string_arg
0800f9d0 g     O .rodata	00000080 GPIOB_MODER_fields
080198a8 g     O .parsetable	0000000c CmdDumpE
08018ca4 g     O .rodata	00000010 PLLMULFactorTable
0800da80 g     O .rodata	00000098 USART1_CR3_fields
08001e40 g     F .text	0000004c DecodeField
08014a30 g     O .rodata	00000020 CAN_RI0R_fields
08004830  w    F .text	00000002 TIM8_BRK_IRQHandler
0800c498 g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0800bc68 g     O .rodata	00000008 TIM1_PSC_fields
08001f38 g     F .text	00000048 DecodePrintPeripherals
0800f7a8 g     O .rodata	00000038 TIM15_CCER_fields
08018cc4 g     O .rodata	00000101 _ctype_
08011a50 g     O .rodata	00000008 DMA1_CMAR7_fields
08000d90  w    F .text	00000002 .hidden __aeabi_idiv0
0800e600 g     O .rodata	00000020 CAN_RI1R_fields
08015268 g     O .rodata	00000028 SYSCFG_CFGR2_fields
0800f260 g     O .rodata	00000088 RCC_CIR_fields
080198f0 g     O .parsetable	0000000c CmdStatsE
08004830  w    F .text	00000002 FLASH_IRQHandler
0800f5a0 g     O .rodata	00000008 TIM15_DMAR_fields
08015290 g     O .rodata	00000010 EXTI_FTSR2_fields
0800f650 g     O .rodata	00000100 CAN_F10R2_fields
0800d808 g     O .rodata	00000020 NVIC_IPR3_fields
08015488 g     O .rodata	00000008 DMA1_CNDTR1_fields
0800c1d8 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
0800b858 g     O .rodata	00000048 TIM15_BDTR_fields
08001bf0 g     F .text	000000e8 TerminalOutputBufferWrite
20000af0 g     O .bss	00000008 Phi
08004830  w    F .text	00000002 BusFault_Handler
08004830  w    F .text	00000002 USART1_IRQHandler
0800f7e0 g     O .rodata	00000050 COMP_COMP1_CSR_fields
08018a4c g     O .rodata	00000048 TIM8_EGR_fields
08007b7c g     F .text	000000e0 __smakebuf_r
080100a8 g     O .rodata	00000040 TIM15_SR_fields
08004b14 g     F .text	0000005c strlen
0800d7c8 g     O .rodata	00000040 RCC_APB2ENR_fields
08004830  w    F .text	00000002 SPI3_IRQHandler
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000a6c g     F .text	0000008a .hidden __gedf2
080116b8 g     O .rodata	00000060 DMA1_CCR3_fields
0800d068 g     O .rodata	00000048 TIM1_CR1_fields
08014490 g     O .rodata	00000018 IWDG_SR_fields
080151f8 g     O .rodata	00000050 USB_FS_USB_EP6R_fields
080123f8 g     O .rodata	00000110 TIM16_registers
0800f4a0 g     O .rodata	00000100 TIM17_registers
0800ded8 g     O .rodata	00000098 TIM1_CCER_fields
200008e0 g     O .data	00000004 __wctomb
08010ae0 g     O .rodata	00000100 CAN_F3R2_fields
08000d30 g     F .text	0000002e .hidden __gnu_ldivmod_helper
0800c728 g     O .rodata	00000080 DAC_CR_fields
08004830  w    F .text	00000002 I2C1_ER_IRQHandler
08008e7c g     F .text	00000018 __sprint_r
0800c318 g     O .rodata	00000050 USB_FS_USB_EP7R_fields
0800fc70 g     O .rodata	00000088 I2C1_ISR_fields
0800ac10 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
0800be50 g     O .rodata	00000020 NVIC_IPR8_fields
08018c94 g     O .rodata	00000010 PredivFactorTable
080152a0 g     O .rodata	00000008 TSC_IOG3CR_fields
080005a0 g     F .text	0000003a .hidden __aeabi_f2d
08004748 g     F .text	0000000e USBD_LL_PrepareReceive
0800e120 g     O .rodata	00000008 DMA1_CNDTR3_fields
0800b5e8 g     O .rodata	00000100 CAN_F27R1_fields
08010490 g     O .rodata	00000010 TSC_IER_fields
0800f3c0 g     O .rodata	000000e0 CAN_FFA1R_fields
0800df70 g     O .rodata	00000010 TIM8_CNT_fields
0800f750 g     O .rodata	00000008 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08015470 g     O .rodata	00000008 RTC_BKP25R_fields
08010878 g     O .rodata	00000100 TSC_IOCCR_fields
08011450 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
080185c4 g     O .rodata	000000d0 EXTI_SWIER1_fields
080002e0 g     F .text	0000027a .hidden __subdf3
0800ae10 g     O .rodata	00000008 TIM16_ARR_fields
080101f8 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08004d28 g     F .text	00001424 _vfprintf_r
08008418 g     F .text	0000005a __lo0bits
08012130 g     O .rodata	00000020 EXTI_IMR2_fields
08013730 g     O .rodata	00000008 TIM6_EGR_fields
08011aa0 g     O .rodata	00000008 SPI1_RXCRCR_fields
080188b4 g     O .rodata	00000008 I2C1_PECR_fields
0800321e g     F .text	000000f4 HAL_PCD_EP_Receive
0801848c g     O .rodata	00000018 ADC1_OFR3_fields
0800cfa8 g     O .rodata	00000058 COMP_COMP6_CSR_fields
08010d08 g     O .rodata	00000008 RTC_BKP1R_fields
08013380 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08012ea8 g     O .rodata	000000b0 GPIOB_registers
08001e8c g     F .text	0000005c DecodeRegister
0800f608 g     O .rodata	00000048 TIM8_SMCR_fields
08001d94 g     F .text	00000058 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
0800b1c0 g     O .rodata	00000050 CAN_MCR_fields
0800b250 g     O .rodata	00000008 DAC_DOR1_fields
08001b78 g     F .text	0000004c TerminalRead
0800e030 g     O .rodata	00000060 TSC_CR_fields
0800c1d0 g     O .rodata	00000008 TIM2_DMAR_fields
0800aef8 g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800b6f0 g     O .rodata	00000100 CAN_F12R1_fields
20000af8 g     O .bss	00000001 Flag
08004830  w    F .text	00000002 USBWakeUp_IRQHandler
08018834 g     O .rodata	00000008 TIM16_PSC_fields
0800d8f0 g     O .rodata	00000008 USART1_RDR_fields
08011a68 g     O .rodata	00000038 RCC_BDCR_fields
08013b18 g     O .rodata	00000010 TIM17_DCR_fields
08015ba8 g     O .rodata	00000008 NVIC_ISPR1_fields
0800ba48 g     O .rodata	00000008 NVIC_ICPR2_fields
080002a0 g     F .text	00000022 my_LED_Function
08019890 g     O .parsetable	0000000c CmdAccelE
080152a8 g     O .rodata	00000100 CAN_F21R2_fields
08004642 g     F .text	00000010 USBD_CDC_SetTxBuffer
0800c378 g     O .rodata	00000070 SYSCFG_registers
0800fa50 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08004830  w    F .text	00000002 DMA2_Channel3_IRQHandler
0800ff98 g     O .rodata	000000d0 EXTI_FTSR1_fields
0800f8d0 g     O .rodata	00000100 CAN_F7R1_fields
08008354 g     F .text	00000082 __multadd
08004100 g     F .text	0000005a USBD_LL_SetupStage
08008340 g     F .text	00000012 _Bfree
08014478 g     O .rodata	00000010 WWDG_CR_fields
08004830  w    F .text	00000002 EXTI2_TSC_IRQHandler
0800c310 g     O .rodata	00000008 NVIC_STIR_fields
08004830  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
08012e58 g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	200008e7 	.word	0x200008e7
 80001a0:	200008e4 	.word	0x200008e4
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	200008e4 	.word	0x200008e4
 80001c4:	200008e4 	.word	0x200008e4
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200008e8 	.word	0x200008e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009708 	.word	0x08009708

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4908      	ldr	r1, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	08009708 	.word	0x08009708
 8000220:	200008ec 	.word	0x200008ec
 8000224:	200008e4 	.word	0x200008e4
 8000228:	00000000 	.word	0x00000000

0800022c <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 800022c:	b500      	push	{lr}
    push {r1}
 800022e:	b402      	push	{r1}
    push {r0-r7}
 8000230:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =7
 8000232:	2007      	movs	r0, #7
    bl   BSP_LED_Toggle           @@ call BSP function
 8000234:	f004 faac 	bl	8004790 <BSP_LED_Toggle>
    pop  {r0-r7}
 8000238:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 800023a:	4924      	ldr	r1, [pc, #144]	; (80002cc <my_Init+0x4>)
    ldr  r0, [r1]
 800023c:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 800023e:	bc02      	pop	{r1}
    pop  {pc}
 8000240:	bd00      	pop	{pc}
 8000242:	bf00      	nop

08000244 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 8000244:	b500      	push	{lr}
    push {r4-r11}
 8000246:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ldr  r1,=myTickCount
 800024a:	4920      	ldr	r1, [pc, #128]	; (80002cc <my_Init+0x4>)
    ldr  r0, [r1]
 800024c:	6808      	ldr	r0, [r1, #0]
	ldr  r3,=ledCounter
 800024e:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <my_Init+0x8>)
	cmp  r0,#0
 8000250:	2800      	cmp	r0, #0
	beq	 turnOnLed
 8000252:	d003      	beq.n	800025c <turnOnLed>
	cmp  r0,#500
 8000254:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
	beq  resetCounter
 8000258:	d006      	beq.n	8000268 <resetCounter>
	b    continue
 800025a:	e01b      	b.n	8000294 <continue>

0800025c <turnOnLed>:
turnOnLed:						  @@Turn on LED[x] at 0 ms
	push {r0,r1,r3}
 800025c:	b40b      	push	{r0, r1, r3}
	ldr  r0,[r3]
 800025e:	6818      	ldr	r0, [r3, #0]
    bl   my_LED_Function         @@ turn off LED[x] after 500 ms
 8000260:	f000 f81e 	bl	80002a0 <my_LED_Function>
    pop  {r0,r1,r3}
 8000264:	bc0b      	pop	{r0, r1, r3}
	b    continue
 8000266:	e015      	b.n	8000294 <continue>

08000268 <resetCounter>:
resetCounter:
	mov r0,#0
 8000268:	f04f 0000 	mov.w	r0, #0
	str r0,[r1]					  @@ reset myTickCount to zero
 800026c:	6008      	str	r0, [r1, #0]
	push {r0,r1,r3}
 800026e:	b40b      	push	{r0, r1, r3}
	ldr  r0,[r3]
 8000270:	6818      	ldr	r0, [r3, #0]
    bl   my_LED_Function         @@ turn off LED[x] after 500 ms
 8000272:	f000 f815 	bl	80002a0 <my_LED_Function>
    pop  {r0,r1,r3}
 8000276:	bc0b      	pop	{r0, r1, r3}
	ldr r3,=ledCounter
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <my_Init+0x8>)
	ldr r3,[r3]
 800027a:	681b      	ldr	r3, [r3, #0]
	add r3,r3,#1
 800027c:	f103 0301 	add.w	r3, r3, #1
	ldr r4,=ledCounter
 8000280:	4c13      	ldr	r4, [pc, #76]	; (80002d0 <my_Init+0x8>)
	str r3,[r4]					  @@ increment Led index
 8000282:	6023      	str	r3, [r4, #0]
	cmp r3,#7
 8000284:	2b07      	cmp	r3, #7
	bgt resetLED				  @@ branch to resetLED when led index is >7
 8000286:	dc00      	bgt.n	800028a <resetLED>
	b	skip
 8000288:	e007      	b.n	800029a <skip>

0800028a <resetLED>:
resetLED:
	mov r3,#0				
 800028a:	f04f 0300 	mov.w	r3, #0
	ldr r4,=ledCounter
 800028e:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <my_Init+0x8>)
	str r3,[r4]					  @@ reset led index to 0
 8000290:	6023      	str	r3, [r4, #0]
	b skip
 8000292:	e002      	b.n	800029a <skip>

08000294 <continue>:
continue:	
	add  r0, r0, #1				  @@ increment myTickCount by 1
 8000294:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000298:	6008      	str	r0, [r1, #0]

0800029a <skip>:
skip:
    pop  {r4-r11}
 800029a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    pop  {pc}
 800029e:	bd00      	pop	{pc}

080002a0 <my_LED_Function>:
    .global my_LED_Function          @@ - Symbol name for function
    .code   16              @@ - 16bit THUMB code (BOTH are required!)
    .thumb_func             @@ /
    .type   my_LED_Function, %function   @@ - symbol type (not req)
my_LED_Function:      @@ This function replaces BSP_LEDToggle function for toggling on board leds
	push {r4-r12,lr}
 80002a0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	ldr r1,=LEDsAddress
 80002a4:	490b      	ldr	r1, [pc, #44]	; (80002d4 <my_Init+0xc>)
	ldr r1,[r1]
 80002a6:	6809      	ldr	r1, [r1, #0]
	ldrh r3,[r1] 
 80002a8:	880b      	ldrh	r3, [r1, #0]
	mov r2,#0x1     
 80002aa:	f04f 0201 	mov.w	r2, #1
	add r0,#8			   @@ add offset to the LED wants to be toggled by 8
 80002ae:	f100 0008 	add.w	r0, r0, #8
	lsl r2,r2,r0		   @@ shift r0 to the left by led place + offset
 80002b2:	fa02 f200 	lsl.w	r2, r2, r0

	eor r3,r3,r2           @@ toggle LED
 80002b6:	ea83 0302 	eor.w	r3, r3, r2
	strh r3,[r1]		   @@ store xored value into LEDsAddress register	
 80002ba:	800b      	strh	r3, [r1, #0]
	pop {r4-r12,lr}
 80002bc:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	bx lr	
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop

080002c4 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 80002c4:	b500      	push	{lr}
    pop  {pc}
 80002c6:	bd00      	pop	{pc}

080002c8 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 80002c8:	b500      	push	{lr}
    pop  {pc}
 80002ca:	bd00      	pop	{pc}
    push {r1}
    push {r0-r7}
    ldr  r0, =7
    bl   BSP_LED_Toggle           @@ call BSP function
    pop  {r0-r7}
    ldr  r1, =myTickCount
 80002cc:	20000000 	.word	0x20000000
my_Tick:
    push {lr}
    push {r4-r11}
    ldr  r1,=myTickCount
    ldr  r0, [r1]
	ldr  r3,=ledCounter
 80002d0:	20000004 	.word	0x20000004
    .code   16              @@ - 16bit THUMB code (BOTH are required!)
    .thumb_func             @@ /
    .type   my_LED_Function, %function   @@ - symbol type (not req)
my_LED_Function:      @@ This function replaces BSP_LEDToggle function for toggling on board leds
	push {r4-r12,lr}
	ldr r1,=LEDsAddress
 80002d4:	20000008 	.word	0x20000008

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000416:	f1a4 0401 	sub.w	r4, r4, #1
 800041a:	d1e9      	bne.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f092 0f00 	teq	r2, #0
 80005c2:	bf14      	ite	ne
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e720      	b.n	800041c <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aedc 	beq.w	80003ca <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6c1      	b.n	80003ca <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <memcpy>:
 8000b7c:	4684      	mov	ip, r0
 8000b7e:	ea41 0300 	orr.w	r3, r1, r0
 8000b82:	f013 0303 	ands.w	r3, r3, #3
 8000b86:	d16d      	bne.n	8000c64 <memcpy+0xe8>
 8000b88:	3a40      	subs	r2, #64	; 0x40
 8000b8a:	d341      	bcc.n	8000c10 <memcpy+0x94>
 8000b8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b90:	f840 3b04 	str.w	r3, [r0], #4
 8000b94:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b98:	f840 3b04 	str.w	r3, [r0], #4
 8000b9c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ba0:	f840 3b04 	str.w	r3, [r0], #4
 8000ba4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ba8:	f840 3b04 	str.w	r3, [r0], #4
 8000bac:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bb0:	f840 3b04 	str.w	r3, [r0], #4
 8000bb4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bb8:	f840 3b04 	str.w	r3, [r0], #4
 8000bbc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bc0:	f840 3b04 	str.w	r3, [r0], #4
 8000bc4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bc8:	f840 3b04 	str.w	r3, [r0], #4
 8000bcc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bd0:	f840 3b04 	str.w	r3, [r0], #4
 8000bd4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bd8:	f840 3b04 	str.w	r3, [r0], #4
 8000bdc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000be0:	f840 3b04 	str.w	r3, [r0], #4
 8000be4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000be8:	f840 3b04 	str.w	r3, [r0], #4
 8000bec:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bf0:	f840 3b04 	str.w	r3, [r0], #4
 8000bf4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bf8:	f840 3b04 	str.w	r3, [r0], #4
 8000bfc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c00:	f840 3b04 	str.w	r3, [r0], #4
 8000c04:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c08:	f840 3b04 	str.w	r3, [r0], #4
 8000c0c:	3a40      	subs	r2, #64	; 0x40
 8000c0e:	d2bd      	bcs.n	8000b8c <memcpy+0x10>
 8000c10:	3230      	adds	r2, #48	; 0x30
 8000c12:	d311      	bcc.n	8000c38 <memcpy+0xbc>
 8000c14:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c18:	f840 3b04 	str.w	r3, [r0], #4
 8000c1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c20:	f840 3b04 	str.w	r3, [r0], #4
 8000c24:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c28:	f840 3b04 	str.w	r3, [r0], #4
 8000c2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c30:	f840 3b04 	str.w	r3, [r0], #4
 8000c34:	3a10      	subs	r2, #16
 8000c36:	d2ed      	bcs.n	8000c14 <memcpy+0x98>
 8000c38:	320c      	adds	r2, #12
 8000c3a:	d305      	bcc.n	8000c48 <memcpy+0xcc>
 8000c3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c40:	f840 3b04 	str.w	r3, [r0], #4
 8000c44:	3a04      	subs	r2, #4
 8000c46:	d2f9      	bcs.n	8000c3c <memcpy+0xc0>
 8000c48:	3204      	adds	r2, #4
 8000c4a:	d008      	beq.n	8000c5e <memcpy+0xe2>
 8000c4c:	07d2      	lsls	r2, r2, #31
 8000c4e:	bf1c      	itt	ne
 8000c50:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000c54:	f800 3b01 	strbne.w	r3, [r0], #1
 8000c58:	d301      	bcc.n	8000c5e <memcpy+0xe2>
 8000c5a:	880b      	ldrh	r3, [r1, #0]
 8000c5c:	8003      	strh	r3, [r0, #0]
 8000c5e:	4660      	mov	r0, ip
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	2a08      	cmp	r2, #8
 8000c66:	d313      	bcc.n	8000c90 <memcpy+0x114>
 8000c68:	078b      	lsls	r3, r1, #30
 8000c6a:	d08d      	beq.n	8000b88 <memcpy+0xc>
 8000c6c:	f010 0303 	ands.w	r3, r0, #3
 8000c70:	d08a      	beq.n	8000b88 <memcpy+0xc>
 8000c72:	f1c3 0304 	rsb	r3, r3, #4
 8000c76:	1ad2      	subs	r2, r2, r3
 8000c78:	07db      	lsls	r3, r3, #31
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000c80:	f800 3b01 	strbne.w	r3, [r0], #1
 8000c84:	d380      	bcc.n	8000b88 <memcpy+0xc>
 8000c86:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000c8a:	f820 3b02 	strh.w	r3, [r0], #2
 8000c8e:	e77b      	b.n	8000b88 <memcpy+0xc>
 8000c90:	3a04      	subs	r2, #4
 8000c92:	d3d9      	bcc.n	8000c48 <memcpy+0xcc>
 8000c94:	3a01      	subs	r2, #1
 8000c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c9a:	f800 3b01 	strb.w	r3, [r0], #1
 8000c9e:	d2f9      	bcs.n	8000c94 <memcpy+0x118>
 8000ca0:	780b      	ldrb	r3, [r1, #0]
 8000ca2:	7003      	strb	r3, [r0, #0]
 8000ca4:	784b      	ldrb	r3, [r1, #1]
 8000ca6:	7043      	strb	r3, [r0, #1]
 8000ca8:	788b      	ldrb	r3, [r1, #2]
 8000caa:	7083      	strb	r3, [r0, #2]
 8000cac:	4660      	mov	r0, ip
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_d2iz>:
 8000cb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb8:	d215      	bcs.n	8000ce6 <__aeabi_d2iz+0x36>
 8000cba:	d511      	bpl.n	8000ce0 <__aeabi_d2iz+0x30>
 8000cbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cc4:	d912      	bls.n	8000cec <__aeabi_d2iz+0x3c>
 8000cc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	4770      	bx	lr
 8000ce0:	f04f 0000 	mov.w	r0, #0
 8000ce4:	4770      	bx	lr
 8000ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cea:	d105      	bne.n	8000cf8 <__aeabi_d2iz+0x48>
 8000cec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cf6:	4770      	bx	lr
 8000cf8:	f04f 0000 	mov.w	r0, #0
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <__aeabi_uldivmod>:
 8000d00:	b953      	cbnz	r3, 8000d18 <__aeabi_uldivmod+0x18>
 8000d02:	b94a      	cbnz	r2, 8000d18 <__aeabi_uldivmod+0x18>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bf08      	it	eq
 8000d08:	2800      	cmpeq	r0, #0
 8000d0a:	bf1c      	itt	ne
 8000d0c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d14:	f000 b83c 	b.w	8000d90 <__aeabi_idiv0>
 8000d18:	b082      	sub	sp, #8
 8000d1a:	46ec      	mov	ip, sp
 8000d1c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d20:	f000 f81e 	bl	8000d60 <__gnu_uldivmod_helper>
 8000d24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d28:	b002      	add	sp, #8
 8000d2a:	bc0c      	pop	{r2, r3}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <__gnu_ldivmod_helper>:
 8000d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d34:	9c06      	ldr	r4, [sp, #24]
 8000d36:	4615      	mov	r5, r2
 8000d38:	4606      	mov	r6, r0
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4698      	mov	r8, r3
 8000d3e:	f000 f829 	bl	8000d94 <__divdi3>
 8000d42:	fb05 f301 	mul.w	r3, r5, r1
 8000d46:	fb00 3808 	mla	r8, r0, r8, r3
 8000d4a:	fba5 2300 	umull	r2, r3, r5, r0
 8000d4e:	1ab2      	subs	r2, r6, r2
 8000d50:	4443      	add	r3, r8
 8000d52:	eb67 0303 	sbc.w	r3, r7, r3
 8000d56:	e9c4 2300 	strd	r2, r3, [r4]
 8000d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d5e:	bf00      	nop

08000d60 <__gnu_uldivmod_helper>:
 8000d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d64:	9c06      	ldr	r4, [sp, #24]
 8000d66:	4690      	mov	r8, r2
 8000d68:	4606      	mov	r6, r0
 8000d6a:	460f      	mov	r7, r1
 8000d6c:	461d      	mov	r5, r3
 8000d6e:	f000 f95f 	bl	8001030 <__udivdi3>
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	fba0 2308 	umull	r2, r3, r0, r8
 8000d7a:	fb08 5501 	mla	r5, r8, r1, r5
 8000d7e:	1ab2      	subs	r2, r6, r2
 8000d80:	442b      	add	r3, r5
 8000d82:	eb67 0303 	sbc.w	r3, r7, r3
 8000d86:	e9c4 2300 	strd	r2, r3, [r4]
 8000d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <__divdi3>:
 8000d94:	2900      	cmp	r1, #0
 8000d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d9a:	f2c0 80a6 	blt.w	8000eea <__divdi3+0x156>
 8000d9e:	2600      	movs	r6, #0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f2c0 809c 	blt.w	8000ede <__divdi3+0x14a>
 8000da6:	4688      	mov	r8, r1
 8000da8:	4694      	mov	ip, r2
 8000daa:	469e      	mov	lr, r3
 8000dac:	4615      	mov	r5, r2
 8000dae:	4604      	mov	r4, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d13d      	bne.n	8000e32 <__divdi3+0x9e>
 8000db6:	428a      	cmp	r2, r1
 8000db8:	d959      	bls.n	8000e6e <__divdi3+0xda>
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	b13b      	cbz	r3, 8000dd0 <__divdi3+0x3c>
 8000dc0:	f1c3 0220 	rsb	r2, r3, #32
 8000dc4:	409f      	lsls	r7, r3
 8000dc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000dca:	409d      	lsls	r5, r3
 8000dcc:	4317      	orrs	r7, r2
 8000dce:	409c      	lsls	r4, r3
 8000dd0:	0c29      	lsrs	r1, r5, #16
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fbb7 fef1 	udiv	lr, r7, r1
 8000dd8:	b2a8      	uxth	r0, r5
 8000dda:	fb01 771e 	mls	r7, r1, lr, r7
 8000dde:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000de2:	fb00 f30e 	mul.w	r3, r0, lr
 8000de6:	42bb      	cmp	r3, r7
 8000de8:	d90a      	bls.n	8000e00 <__divdi3+0x6c>
 8000dea:	197f      	adds	r7, r7, r5
 8000dec:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8000df0:	f080 8105 	bcs.w	8000ffe <__divdi3+0x26a>
 8000df4:	42bb      	cmp	r3, r7
 8000df6:	f240 8102 	bls.w	8000ffe <__divdi3+0x26a>
 8000dfa:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfe:	442f      	add	r7, r5
 8000e00:	1aff      	subs	r7, r7, r3
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb7 f3f1 	udiv	r3, r7, r1
 8000e08:	fb01 7713 	mls	r7, r1, r3, r7
 8000e0c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000e10:	fb00 f003 	mul.w	r0, r0, r3
 8000e14:	42b8      	cmp	r0, r7
 8000e16:	d908      	bls.n	8000e2a <__divdi3+0x96>
 8000e18:	197f      	adds	r7, r7, r5
 8000e1a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000e1e:	f080 80f0 	bcs.w	8001002 <__divdi3+0x26e>
 8000e22:	42b8      	cmp	r0, r7
 8000e24:	f240 80ed 	bls.w	8001002 <__divdi3+0x26e>
 8000e28:	3b02      	subs	r3, #2
 8000e2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	e003      	b.n	8000e3a <__divdi3+0xa6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d90f      	bls.n	8000e56 <__divdi3+0xc2>
 8000e36:	2200      	movs	r2, #0
 8000e38:	4613      	mov	r3, r2
 8000e3a:	1c34      	adds	r4, r6, #0
 8000e3c:	bf18      	it	ne
 8000e3e:	2401      	movne	r4, #1
 8000e40:	4260      	negs	r0, r4
 8000e42:	f04f 0500 	mov.w	r5, #0
 8000e46:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000e4a:	4058      	eors	r0, r3
 8000e4c:	4051      	eors	r1, r2
 8000e4e:	1900      	adds	r0, r0, r4
 8000e50:	4169      	adcs	r1, r5
 8000e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e56:	fab3 f283 	clz	r2, r3
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	f040 8086 	bne.w	8000f6c <__divdi3+0x1d8>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d302      	bcc.n	8000e6a <__divdi3+0xd6>
 8000e64:	4584      	cmp	ip, r0
 8000e66:	f200 80db 	bhi.w	8001020 <__divdi3+0x28c>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e7e5      	b.n	8000e3a <__divdi3+0xa6>
 8000e6e:	b912      	cbnz	r2, 8000e76 <__divdi3+0xe2>
 8000e70:	2301      	movs	r3, #1
 8000e72:	fbb3 f5f2 	udiv	r5, r3, r2
 8000e76:	fab5 f085 	clz	r0, r5
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d13b      	bne.n	8000ef6 <__divdi3+0x162>
 8000e7e:	1b78      	subs	r0, r7, r5
 8000e80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e84:	fa1f fc85 	uxth.w	ip, r5
 8000e88:	2201      	movs	r2, #1
 8000e8a:	fbb0 f8fe 	udiv	r8, r0, lr
 8000e8e:	0c21      	lsrs	r1, r4, #16
 8000e90:	fb0e 0718 	mls	r7, lr, r8, r0
 8000e94:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000e98:	fb0c f308 	mul.w	r3, ip, r8
 8000e9c:	42bb      	cmp	r3, r7
 8000e9e:	d907      	bls.n	8000eb0 <__divdi3+0x11c>
 8000ea0:	197f      	adds	r7, r7, r5
 8000ea2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__divdi3+0x11a>
 8000ea8:	42bb      	cmp	r3, r7
 8000eaa:	f200 80bd 	bhi.w	8001028 <__divdi3+0x294>
 8000eae:	4688      	mov	r8, r1
 8000eb0:	1aff      	subs	r7, r7, r3
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb7 f3fe 	udiv	r3, r7, lr
 8000eb8:	fb0e 7713 	mls	r7, lr, r3, r7
 8000ebc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000ec0:	fb0c fc03 	mul.w	ip, ip, r3
 8000ec4:	45bc      	cmp	ip, r7
 8000ec6:	d907      	bls.n	8000ed8 <__divdi3+0x144>
 8000ec8:	197f      	adds	r7, r7, r5
 8000eca:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000ece:	d202      	bcs.n	8000ed6 <__divdi3+0x142>
 8000ed0:	45bc      	cmp	ip, r7
 8000ed2:	f200 80a7 	bhi.w	8001024 <__divdi3+0x290>
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000edc:	e7ad      	b.n	8000e3a <__divdi3+0xa6>
 8000ede:	4252      	negs	r2, r2
 8000ee0:	ea6f 0606 	mvn.w	r6, r6
 8000ee4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ee8:	e75d      	b.n	8000da6 <__divdi3+0x12>
 8000eea:	4240      	negs	r0, r0
 8000eec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000ef4:	e754      	b.n	8000da0 <__divdi3+0xc>
 8000ef6:	f1c0 0220 	rsb	r2, r0, #32
 8000efa:	fa24 f102 	lsr.w	r1, r4, r2
 8000efe:	fa07 f300 	lsl.w	r3, r7, r0
 8000f02:	4085      	lsls	r5, r0
 8000f04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f08:	40d7      	lsrs	r7, r2
 8000f0a:	4319      	orrs	r1, r3
 8000f0c:	fbb7 f2fe 	udiv	r2, r7, lr
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	fb0e 7712 	mls	r7, lr, r2, r7
 8000f16:	fa1f fc85 	uxth.w	ip, r5
 8000f1a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000f1e:	fb0c f702 	mul.w	r7, ip, r2
 8000f22:	429f      	cmp	r7, r3
 8000f24:	fa04 f400 	lsl.w	r4, r4, r0
 8000f28:	d907      	bls.n	8000f3a <__divdi3+0x1a6>
 8000f2a:	195b      	adds	r3, r3, r5
 8000f2c:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8000f30:	d274      	bcs.n	800101c <__divdi3+0x288>
 8000f32:	429f      	cmp	r7, r3
 8000f34:	d972      	bls.n	800101c <__divdi3+0x288>
 8000f36:	3a02      	subs	r2, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	1bdf      	subs	r7, r3, r7
 8000f3c:	b289      	uxth	r1, r1
 8000f3e:	fbb7 f8fe 	udiv	r8, r7, lr
 8000f42:	fb0e 7318 	mls	r3, lr, r8, r7
 8000f46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f4a:	fb0c f708 	mul.w	r7, ip, r8
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__divdi3+0x1d0>
 8000f52:	195b      	adds	r3, r3, r5
 8000f54:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000f58:	d25c      	bcs.n	8001014 <__divdi3+0x280>
 8000f5a:	429f      	cmp	r7, r3
 8000f5c:	d95a      	bls.n	8001014 <__divdi3+0x280>
 8000f5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f62:	442b      	add	r3, r5
 8000f64:	1bd8      	subs	r0, r3, r7
 8000f66:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000f6a:	e78e      	b.n	8000e8a <__divdi3+0xf6>
 8000f6c:	f1c2 0320 	rsb	r3, r2, #32
 8000f70:	fa2c f103 	lsr.w	r1, ip, r3
 8000f74:	fa0e fe02 	lsl.w	lr, lr, r2
 8000f78:	fa20 f703 	lsr.w	r7, r0, r3
 8000f7c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000f80:	fa08 f002 	lsl.w	r0, r8, r2
 8000f84:	fa28 f103 	lsr.w	r1, r8, r3
 8000f88:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000f8c:	4338      	orrs	r0, r7
 8000f8e:	fbb1 f8f5 	udiv	r8, r1, r5
 8000f92:	0c03      	lsrs	r3, r0, #16
 8000f94:	fb05 1118 	mls	r1, r5, r8, r1
 8000f98:	fa1f f78e 	uxth.w	r7, lr
 8000f9c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fa0:	fb07 f308 	mul.w	r3, r7, r8
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000faa:	d909      	bls.n	8000fc0 <__divdi3+0x22c>
 8000fac:	eb11 010e 	adds.w	r1, r1, lr
 8000fb0:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8000fb4:	d230      	bcs.n	8001018 <__divdi3+0x284>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d92e      	bls.n	8001018 <__divdi3+0x284>
 8000fba:	f1a8 0802 	sub.w	r8, r8, #2
 8000fbe:	4471      	add	r1, lr
 8000fc0:	1ac9      	subs	r1, r1, r3
 8000fc2:	b280      	uxth	r0, r0
 8000fc4:	fbb1 f3f5 	udiv	r3, r1, r5
 8000fc8:	fb05 1113 	mls	r1, r5, r3, r1
 8000fcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fd0:	fb07 f703 	mul.w	r7, r7, r3
 8000fd4:	428f      	cmp	r7, r1
 8000fd6:	d908      	bls.n	8000fea <__divdi3+0x256>
 8000fd8:	eb11 010e 	adds.w	r1, r1, lr
 8000fdc:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000fe0:	d216      	bcs.n	8001010 <__divdi3+0x27c>
 8000fe2:	428f      	cmp	r7, r1
 8000fe4:	d914      	bls.n	8001010 <__divdi3+0x27c>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	4471      	add	r1, lr
 8000fea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fee:	1bc9      	subs	r1, r1, r7
 8000ff0:	fba3 890c 	umull	r8, r9, r3, ip
 8000ff4:	4549      	cmp	r1, r9
 8000ff6:	d309      	bcc.n	800100c <__divdi3+0x278>
 8000ff8:	d005      	beq.n	8001006 <__divdi3+0x272>
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	e71d      	b.n	8000e3a <__divdi3+0xa6>
 8000ffe:	4696      	mov	lr, r2
 8001000:	e6fe      	b.n	8000e00 <__divdi3+0x6c>
 8001002:	4613      	mov	r3, r2
 8001004:	e711      	b.n	8000e2a <__divdi3+0x96>
 8001006:	4094      	lsls	r4, r2
 8001008:	4544      	cmp	r4, r8
 800100a:	d2f6      	bcs.n	8000ffa <__divdi3+0x266>
 800100c:	3b01      	subs	r3, #1
 800100e:	e7f4      	b.n	8000ffa <__divdi3+0x266>
 8001010:	4603      	mov	r3, r0
 8001012:	e7ea      	b.n	8000fea <__divdi3+0x256>
 8001014:	4688      	mov	r8, r1
 8001016:	e7a5      	b.n	8000f64 <__divdi3+0x1d0>
 8001018:	46c8      	mov	r8, r9
 800101a:	e7d1      	b.n	8000fc0 <__divdi3+0x22c>
 800101c:	4602      	mov	r2, r0
 800101e:	e78c      	b.n	8000f3a <__divdi3+0x1a6>
 8001020:	4613      	mov	r3, r2
 8001022:	e70a      	b.n	8000e3a <__divdi3+0xa6>
 8001024:	3b02      	subs	r3, #2
 8001026:	e757      	b.n	8000ed8 <__divdi3+0x144>
 8001028:	f1a8 0802 	sub.w	r8, r8, #2
 800102c:	442f      	add	r7, r5
 800102e:	e73f      	b.n	8000eb0 <__divdi3+0x11c>

08001030 <__udivdi3>:
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	2b00      	cmp	r3, #0
 8001036:	d144      	bne.n	80010c2 <__udivdi3+0x92>
 8001038:	428a      	cmp	r2, r1
 800103a:	4615      	mov	r5, r2
 800103c:	4604      	mov	r4, r0
 800103e:	d94f      	bls.n	80010e0 <__udivdi3+0xb0>
 8001040:	fab2 f782 	clz	r7, r2
 8001044:	460e      	mov	r6, r1
 8001046:	b14f      	cbz	r7, 800105c <__udivdi3+0x2c>
 8001048:	f1c7 0320 	rsb	r3, r7, #32
 800104c:	40b9      	lsls	r1, r7
 800104e:	fa20 f603 	lsr.w	r6, r0, r3
 8001052:	fa02 f507 	lsl.w	r5, r2, r7
 8001056:	430e      	orrs	r6, r1
 8001058:	fa00 f407 	lsl.w	r4, r0, r7
 800105c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001060:	0c23      	lsrs	r3, r4, #16
 8001062:	fbb6 f0fe 	udiv	r0, r6, lr
 8001066:	b2af      	uxth	r7, r5
 8001068:	fb0e 6110 	mls	r1, lr, r0, r6
 800106c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001070:	fb07 f100 	mul.w	r1, r7, r0
 8001074:	4299      	cmp	r1, r3
 8001076:	d909      	bls.n	800108c <__udivdi3+0x5c>
 8001078:	195b      	adds	r3, r3, r5
 800107a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800107e:	f080 80ec 	bcs.w	800125a <__udivdi3+0x22a>
 8001082:	4299      	cmp	r1, r3
 8001084:	f240 80e9 	bls.w	800125a <__udivdi3+0x22a>
 8001088:	3802      	subs	r0, #2
 800108a:	442b      	add	r3, r5
 800108c:	1a5a      	subs	r2, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb2 f3fe 	udiv	r3, r2, lr
 8001094:	fb0e 2213 	mls	r2, lr, r3, r2
 8001098:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800109c:	fb07 f703 	mul.w	r7, r7, r3
 80010a0:	4297      	cmp	r7, r2
 80010a2:	d908      	bls.n	80010b6 <__udivdi3+0x86>
 80010a4:	1952      	adds	r2, r2, r5
 80010a6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80010aa:	f080 80d8 	bcs.w	800125e <__udivdi3+0x22e>
 80010ae:	4297      	cmp	r7, r2
 80010b0:	f240 80d5 	bls.w	800125e <__udivdi3+0x22e>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80010ba:	2600      	movs	r6, #0
 80010bc:	4631      	mov	r1, r6
 80010be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d847      	bhi.n	8001156 <__udivdi3+0x126>
 80010c6:	fab3 f683 	clz	r6, r3
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d148      	bne.n	8001160 <__udivdi3+0x130>
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d302      	bcc.n	80010d8 <__udivdi3+0xa8>
 80010d2:	4282      	cmp	r2, r0
 80010d4:	f200 80cd 	bhi.w	8001272 <__udivdi3+0x242>
 80010d8:	2001      	movs	r0, #1
 80010da:	4631      	mov	r1, r6
 80010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e0:	b912      	cbnz	r2, 80010e8 <__udivdi3+0xb8>
 80010e2:	2501      	movs	r5, #1
 80010e4:	fbb5 f5f2 	udiv	r5, r5, r2
 80010e8:	fab5 f885 	clz	r8, r5
 80010ec:	f1b8 0f00 	cmp.w	r8, #0
 80010f0:	d177      	bne.n	80011e2 <__udivdi3+0x1b2>
 80010f2:	1b4a      	subs	r2, r1, r5
 80010f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010f8:	b2af      	uxth	r7, r5
 80010fa:	2601      	movs	r6, #1
 80010fc:	fbb2 f0fe 	udiv	r0, r2, lr
 8001100:	0c23      	lsrs	r3, r4, #16
 8001102:	fb0e 2110 	mls	r1, lr, r0, r2
 8001106:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800110a:	fb07 f300 	mul.w	r3, r7, r0
 800110e:	428b      	cmp	r3, r1
 8001110:	d907      	bls.n	8001122 <__udivdi3+0xf2>
 8001112:	1949      	adds	r1, r1, r5
 8001114:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001118:	d202      	bcs.n	8001120 <__udivdi3+0xf0>
 800111a:	428b      	cmp	r3, r1
 800111c:	f200 80ba 	bhi.w	8001294 <__udivdi3+0x264>
 8001120:	4610      	mov	r0, r2
 8001122:	1ac9      	subs	r1, r1, r3
 8001124:	b2a4      	uxth	r4, r4
 8001126:	fbb1 f3fe 	udiv	r3, r1, lr
 800112a:	fb0e 1113 	mls	r1, lr, r3, r1
 800112e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001132:	fb07 f703 	mul.w	r7, r7, r3
 8001136:	42a7      	cmp	r7, r4
 8001138:	d908      	bls.n	800114c <__udivdi3+0x11c>
 800113a:	1964      	adds	r4, r4, r5
 800113c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8001140:	f080 808f 	bcs.w	8001262 <__udivdi3+0x232>
 8001144:	42a7      	cmp	r7, r4
 8001146:	f240 808c 	bls.w	8001262 <__udivdi3+0x232>
 800114a:	3b02      	subs	r3, #2
 800114c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001150:	4631      	mov	r1, r6
 8001152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001156:	2600      	movs	r6, #0
 8001158:	4630      	mov	r0, r6
 800115a:	4631      	mov	r1, r6
 800115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001160:	f1c6 0420 	rsb	r4, r6, #32
 8001164:	fa22 f504 	lsr.w	r5, r2, r4
 8001168:	40b3      	lsls	r3, r6
 800116a:	432b      	orrs	r3, r5
 800116c:	fa20 fc04 	lsr.w	ip, r0, r4
 8001170:	fa01 f706 	lsl.w	r7, r1, r6
 8001174:	fa21 f504 	lsr.w	r5, r1, r4
 8001178:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800117c:	ea4c 0707 	orr.w	r7, ip, r7
 8001180:	fbb5 f8fe 	udiv	r8, r5, lr
 8001184:	0c39      	lsrs	r1, r7, #16
 8001186:	fb0e 5518 	mls	r5, lr, r8, r5
 800118a:	fa1f fc83 	uxth.w	ip, r3
 800118e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8001192:	fb0c f108 	mul.w	r1, ip, r8
 8001196:	42a9      	cmp	r1, r5
 8001198:	fa02 f206 	lsl.w	r2, r2, r6
 800119c:	d904      	bls.n	80011a8 <__udivdi3+0x178>
 800119e:	18ed      	adds	r5, r5, r3
 80011a0:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80011a4:	d367      	bcc.n	8001276 <__udivdi3+0x246>
 80011a6:	46a0      	mov	r8, r4
 80011a8:	1a6d      	subs	r5, r5, r1
 80011aa:	b2bf      	uxth	r7, r7
 80011ac:	fbb5 f4fe 	udiv	r4, r5, lr
 80011b0:	fb0e 5514 	mls	r5, lr, r4, r5
 80011b4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80011b8:	fb0c fc04 	mul.w	ip, ip, r4
 80011bc:	458c      	cmp	ip, r1
 80011be:	d904      	bls.n	80011ca <__udivdi3+0x19a>
 80011c0:	18c9      	adds	r1, r1, r3
 80011c2:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 80011c6:	d35c      	bcc.n	8001282 <__udivdi3+0x252>
 80011c8:	462c      	mov	r4, r5
 80011ca:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80011ce:	ebcc 0101 	rsb	r1, ip, r1
 80011d2:	fba4 2302 	umull	r2, r3, r4, r2
 80011d6:	4299      	cmp	r1, r3
 80011d8:	d348      	bcc.n	800126c <__udivdi3+0x23c>
 80011da:	d044      	beq.n	8001266 <__udivdi3+0x236>
 80011dc:	4620      	mov	r0, r4
 80011de:	2600      	movs	r6, #0
 80011e0:	e76c      	b.n	80010bc <__udivdi3+0x8c>
 80011e2:	f1c8 0420 	rsb	r4, r8, #32
 80011e6:	fa01 f308 	lsl.w	r3, r1, r8
 80011ea:	fa05 f508 	lsl.w	r5, r5, r8
 80011ee:	fa20 f704 	lsr.w	r7, r0, r4
 80011f2:	40e1      	lsrs	r1, r4
 80011f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011f8:	431f      	orrs	r7, r3
 80011fa:	fbb1 f6fe 	udiv	r6, r1, lr
 80011fe:	0c3a      	lsrs	r2, r7, #16
 8001200:	fb0e 1116 	mls	r1, lr, r6, r1
 8001204:	fa1f fc85 	uxth.w	ip, r5
 8001208:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800120c:	fb0c f206 	mul.w	r2, ip, r6
 8001210:	429a      	cmp	r2, r3
 8001212:	fa00 f408 	lsl.w	r4, r0, r8
 8001216:	d907      	bls.n	8001228 <__udivdi3+0x1f8>
 8001218:	195b      	adds	r3, r3, r5
 800121a:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800121e:	d237      	bcs.n	8001290 <__udivdi3+0x260>
 8001220:	429a      	cmp	r2, r3
 8001222:	d935      	bls.n	8001290 <__udivdi3+0x260>
 8001224:	3e02      	subs	r6, #2
 8001226:	442b      	add	r3, r5
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	b2bf      	uxth	r7, r7
 800122c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001230:	fb0e 3310 	mls	r3, lr, r0, r3
 8001234:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8001238:	fb0c f100 	mul.w	r1, ip, r0
 800123c:	4299      	cmp	r1, r3
 800123e:	d907      	bls.n	8001250 <__udivdi3+0x220>
 8001240:	195b      	adds	r3, r3, r5
 8001242:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001246:	d221      	bcs.n	800128c <__udivdi3+0x25c>
 8001248:	4299      	cmp	r1, r3
 800124a:	d91f      	bls.n	800128c <__udivdi3+0x25c>
 800124c:	3802      	subs	r0, #2
 800124e:	442b      	add	r3, r5
 8001250:	1a5a      	subs	r2, r3, r1
 8001252:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001256:	4667      	mov	r7, ip
 8001258:	e750      	b.n	80010fc <__udivdi3+0xcc>
 800125a:	4610      	mov	r0, r2
 800125c:	e716      	b.n	800108c <__udivdi3+0x5c>
 800125e:	460b      	mov	r3, r1
 8001260:	e729      	b.n	80010b6 <__udivdi3+0x86>
 8001262:	4613      	mov	r3, r2
 8001264:	e772      	b.n	800114c <__udivdi3+0x11c>
 8001266:	40b0      	lsls	r0, r6
 8001268:	4290      	cmp	r0, r2
 800126a:	d2b7      	bcs.n	80011dc <__udivdi3+0x1ac>
 800126c:	1e60      	subs	r0, r4, #1
 800126e:	2600      	movs	r6, #0
 8001270:	e724      	b.n	80010bc <__udivdi3+0x8c>
 8001272:	4630      	mov	r0, r6
 8001274:	e722      	b.n	80010bc <__udivdi3+0x8c>
 8001276:	42a9      	cmp	r1, r5
 8001278:	d995      	bls.n	80011a6 <__udivdi3+0x176>
 800127a:	f1a8 0802 	sub.w	r8, r8, #2
 800127e:	441d      	add	r5, r3
 8001280:	e792      	b.n	80011a8 <__udivdi3+0x178>
 8001282:	458c      	cmp	ip, r1
 8001284:	d9a0      	bls.n	80011c8 <__udivdi3+0x198>
 8001286:	3c02      	subs	r4, #2
 8001288:	4419      	add	r1, r3
 800128a:	e79e      	b.n	80011ca <__udivdi3+0x19a>
 800128c:	4610      	mov	r0, r2
 800128e:	e7df      	b.n	8001250 <__udivdi3+0x220>
 8001290:	460e      	mov	r6, r1
 8001292:	e7c9      	b.n	8001228 <__udivdi3+0x1f8>
 8001294:	3802      	subs	r0, #2
 8001296:	4429      	add	r1, r5
 8001298:	e743      	b.n	8001122 <__udivdi3+0xf2>
 800129a:	bf00      	nop

0800129c <CmdLED>:
{
    HAL_IncTick();
}

void CmdLED(int mode)
{
 800129c:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 800129e:	b9f8      	cbnz	r0, 80012e0 <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 80012a0:	4668      	mov	r0, sp
 80012a2:	f000 fb71 	bl	8001988 <fetch_uint32_arg>
  if(rc) {
 80012a6:	b108      	cbz	r0, 80012ac <CmdLED+0x10>
    printf("Missing LED index\n");
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <CmdLED+0x4c>)
 80012aa:	e004      	b.n	80012b6 <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 80012ac:	a801      	add	r0, sp, #4
 80012ae:	f000 fb6b 	bl	8001988 <fetch_uint32_arg>
  if(rc) {
 80012b2:	b118      	cbz	r0, 80012bc <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <CmdLED+0x50>)
 80012b6:	f003 fba5 	bl	8004a04 <puts>
    return;
 80012ba:	e011      	b.n	80012e0 <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 80012bc:	9900      	ldr	r1, [sp, #0]
 80012be:	1ecb      	subs	r3, r1, #3
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	d903      	bls.n	80012cc <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <CmdLED+0x54>)
 80012c6:	f003 fb4d 	bl	8004964 <printf>
	   (unsigned int)led);
    return;
 80012ca:	e009      	b.n	80012e0 <CmdLED+0x44>
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 80012ce:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 80012d0:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 80012d2:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 80012d4:	b111      	cbz	r1, 80012dc <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 80012d6:	f003 fa3f 	bl	8004758 <BSP_LED_On>
 80012da:	e001      	b.n	80012e0 <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 80012dc:	f003 fa4a 	bl	8004774 <BSP_LED_Off>
  }

} 
 80012e0:	b003      	add	sp, #12
 80012e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012e6:	bf00      	nop
 80012e8:	08009bb8 	.word	0x08009bb8
 80012ec:	08009bca 	.word	0x08009bca
 80012f0:	08009bf3 	.word	0x08009bf3
 80012f4:	08009d6a 	.word	0x08009d6a

080012f8 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80012f8:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80012fa:	b958      	cbnz	r0, 8001314 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80012fc:	4668      	mov	r0, sp
 80012fe:	f003 fa5f 	bl	80047c0 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <CmdAccel+0x24>)
 8001304:	f9bd 1000 	ldrsh.w	r1, [sp]
 8001308:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800130c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001310:	f003 fb28 	bl	8004964 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8001314:	b003      	add	sp, #12
 8001316:	f85d fb04 	ldr.w	pc, [sp], #4
 800131a:	bf00      	nop
 800131c:	08009c20 	.word	0x08009c20

08001320 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8001320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8001322:	b9f8      	cbnz	r0, 8001364 <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8001324:	a801      	add	r0, sp, #4
 8001326:	f003 fa53 	bl	80047d0 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800132a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800136c <CmdGyro+0x4c>
 800132e:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 8001332:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 8001336:	eddd 7a03 	vldr	s15, [sp, #12]
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <CmdGyro+0x50>)
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800133c:	ee66 6a86 	vmul.f32	s13, s13, s12
	 (int)(xyz[1]*256),
 8001340:	ee27 7a06 	vmul.f32	s14, s14, s12
	 (int)(xyz[2]*256));
 8001344:	ee67 7a86 	vmul.f32	s15, s15, s12
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8001348:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800134c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001354:	ee16 1a90 	vmov	r1, s13
 8001358:	ee17 2a10 	vmov	r2, s14
 800135c:	ee17 3a90 	vmov	r3, s15
 8001360:	f003 fb00 	bl	8004964 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8001364:	b005      	add	sp, #20
 8001366:	f85d fb04 	ldr.w	pc, [sp], #4
 800136a:	bf00      	nop
 800136c:	43800000 	.word	0x43800000
 8001370:	08009c53 	.word	0x08009c53

08001374 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8001374:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8001376:	b958      	cbnz	r0, 8001390 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8001378:	f003 fa18 	bl	80047ac <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <CmdButton+0x20>)
 800137e:	4906      	ldr	r1, [pc, #24]	; (8001398 <CmdButton+0x24>)
 8001380:	2800      	cmp	r0, #0
 8001382:	bf18      	it	ne
 8001384:	4619      	movne	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8001388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 800138c:	f003 baea 	b.w	8004964 <printf>
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	08009c82 	.word	0x08009c82
 8001398:	08009c8a 	.word	0x08009c8a
 800139c:	08009c93 	.word	0x08009c93

080013a0 <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);
extern void my_LED_Function(uint8_t);
int main(int argc, char **argv)
{
 80013a0:	b500      	push	{lr}
 80013a2:	b09f      	sub	sp, #124	; 0x7c
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80013b6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013be:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80013c0:	f000 ff7a 	bl	80022b8 <HAL_RCC_OscConfig>
 80013c4:	b100      	cbz	r0, 80013c8 <main+0x28>
 80013c6:	e7fe      	b.n	80013c6 <main+0x26>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013c8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ca:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80013d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d4:	9004      	str	r0, [sp, #16]
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80013d6:	4621      	mov	r1, r4
 80013d8:	4668      	mov	r0, sp
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80013da:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80013dc:	f001 fa56 	bl	800288c <HAL_RCC_ClockConfig>
 80013e0:	b100      	cbz	r0, 80013e4 <main+0x44>
 80013e2:	e7fe      	b.n	80013e2 <main+0x42>
  {
    Error_Handler();
  }

  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80013e4:	2310      	movs	r3, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e6:	a81e      	add	r0, sp, #120	; 0x78
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80013e8:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013ea:	2320      	movs	r3, #32
 80013ec:	f840 3d3c 	str.w	r3, [r0, #-60]!
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) !=HAL_OK)
 80013f0:	f002 fb80 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	b110      	cbz	r0, 80013fc <main+0x5c>
  {
    
    printf("Error in I2C clock intialization\n");
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <main+0x70>)
 80013f8:	f003 fb04 	bl	8004a04 <puts>
int main(int argc, char **argv)
{
  /* Configure the system clock */
  SystemClock_Config();

  HAL_Init();
 80013fc:	f001 fc12 	bl	8002c24 <HAL_Init>


//  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */

  my_Init();
 8001400:	f7fe ff62 	bl	80002c8 <my_Init>
  
  i2cInit();
 8001404:	f000 f808 	bl	8001418 <i2cInit>
 //Init_3DMagneticSensor();

  while(1) {
  TaskInput();
 8001408:	f000 fa28 	bl	800185c <TaskInput>
    /* Tickle the watchdog */
  //  MagneticSensorTask();
  }
 800140c:	e7fc      	b.n	8001408 <main+0x68>
 800140e:	bf00      	nop
 8001410:	08009cac 	.word	0x08009cac

08001414 <SysTick_Handler>:
  }
}

void SysTick_Handler(void)
{
    HAL_IncTick();
 8001414:	f001 bc18 	b.w	8002c48 <HAL_IncTick>

08001418 <i2cInit>:
#include "common.h"

I2C_HandleTypeDef i2c1;
void i2cInit(void)
{
 8001418:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;

  __I2C2_CLK_ENABLE();
 800141a:	4c17      	ldr	r4, [pc, #92]	; (8001478 <i2cInit+0x60>)


  i2c1.Instance = I2C1;
 800141c:	4817      	ldr	r0, [pc, #92]	; (800147c <i2cInit+0x64>)
I2C_HandleTypeDef i2c1;
void i2cInit(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  __I2C2_CLK_ENABLE();
 800141e:	69e3      	ldr	r3, [r4, #28]


  i2c1.Instance = I2C1;
  i2c1.Init.Timing = 0x10808DD3; //400kHz
 8001420:	4917      	ldr	r1, [pc, #92]	; (8001480 <i2cInit+0x68>)
I2C_HandleTypeDef i2c1;
void i2cInit(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  __I2C2_CLK_ENABLE();
 8001422:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001426:	61e3      	str	r3, [r4, #28]


  i2c1.Instance = I2C1;
  i2c1.Init.Timing = 0x10808DD3; //400kHz
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <i2cInit+0x6c>)
#include "common.h"

I2C_HandleTypeDef i2c1;
void i2cInit(void)
{
 800142a:	b086      	sub	sp, #24

  __I2C2_CLK_ENABLE();


  i2c1.Instance = I2C1;
  i2c1.Init.Timing = 0x10808DD3; //400kHz
 800142c:	e880 000a 	stmia.w	r0, {r1, r3}
  i2c1.Init.OwnAddress1        = 0x00;
  i2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	2201      	movs	r2, #1
  __I2C2_CLK_ENABLE();


  i2c1.Instance = I2C1;
  i2c1.Init.Timing = 0x10808DD3; //400kHz
  i2c1.Init.OwnAddress1        = 0x00;
 8001432:	2300      	movs	r3, #0
 8001434:	6083      	str	r3, [r0, #8]
  i2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	60c2      	str	r2, [r0, #12]
  i2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001438:	6103      	str	r3, [r0, #16]
  i2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800143a:	61c3      	str	r3, [r0, #28]
  i2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800143c:	6203      	str	r3, [r0, #32]
  i2c1.Init.OwnAddress2        = 0x00;
 800143e:	6143      	str	r3, [r0, #20]
  i2c1.Init.OwnAddress2Masks   = I2C_OA2_NOMASK;
 8001440:	6183      	str	r3, [r0, #24]
  if(HAL_I2C_Init(&i2c1) !=HAL_OK)
 8001442:	f002 fd26 	bl	8003e92 <HAL_I2C_Init>
 8001446:	b110      	cbz	r0, 800144e <i2cInit+0x36>
  {
    printf("Error in I2C initializaion\n");
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <i2cInit+0x70>)
 800144a:	f003 fadb 	bl	8004a04 <puts>
  }
  
  __GPIOB_CLK_ENABLE();
 800144e:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <i2cInit+0x74>)
  if(HAL_I2C_Init(&i2c1) !=HAL_OK)
  {
    printf("Error in I2C initializaion\n");
  }
  
  __GPIOB_CLK_ENABLE();
 8001452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001456:	6163      	str	r3, [r4, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001458:	23c0      	movs	r3, #192	; 0xc0
 800145a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001468:	2304      	movs	r3, #4

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	eb0d 0103 	add.w	r1, sp, r3
  __GPIOB_CLK_ENABLE();
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	9305      	str	r3, [sp, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f001 fc50 	bl	8002d14 <HAL_GPIO_Init>

}
 8001474:	b006      	add	sp, #24
 8001476:	bd10      	pop	{r4, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	20000a94 	.word	0x20000a94
 8001480:	40005400 	.word	0x40005400
 8001484:	10808dd3 	.word	0x10808dd3
 8001488:	08009d72 	.word	0x08009d72
 800148c:	48000400 	.word	0x48000400

08001490 <Init_3DMagneticSensor>:
int16_t z;
double Phi;
uint8_t Flag;
void  ReadSensor(void);
void Init_3DMagneticSensor(void)
{
 8001490:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	uint8_t InitWrite[4]={0x00, 0x05,0x00,0x04};
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <Init_3DMagneticSensor+0x5c>)
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,10,100);
 8001494:	4c16      	ldr	r4, [pc, #88]	; (80014f0 <Init_3DMagneticSensor+0x60>)
uint8_t Flag;
void  ReadSensor(void);
void Init_3DMagneticSensor(void)
{

	uint8_t InitWrite[4]={0x00, 0x05,0x00,0x04};
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,10,100);
 800149a:	2364      	movs	r3, #100	; 0x64
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	21bd      	movs	r1, #189	; 0xbd
 80014a0:	4622      	mov	r2, r4
 80014a2:	230a      	movs	r3, #10
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <Init_3DMagneticSensor+0x64>)
 80014a6:	f002 fdab 	bl	8004000 <HAL_I2C_Master_Receive>
	WriteBuffer[0] = 0x00;
	WriteBuffer[1] = ReadBuffer[7] & 0x78;
 80014aa:	79e1      	ldrb	r1, [r4, #7]
void Init_3DMagneticSensor(void)
{

	uint8_t InitWrite[4]={0x00, 0x05,0x00,0x04};
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,10,100);
	WriteBuffer[0] = 0x00;
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <Init_3DMagneticSensor+0x68>)
	WriteBuffer[1] = ReadBuffer[7] & 0x78;
 80014ae:	f001 0178 	and.w	r1, r1, #120	; 0x78
 80014b2:	7051      	strb	r1, [r2, #1]
	WriteBuffer[2] = ReadBuffer[8];
 80014b4:	7a21      	ldrb	r1, [r4, #8]
 80014b6:	7091      	strb	r1, [r2, #2]
	WriteBuffer[3] = ReadBuffer[9] & 0x0F;
 80014b8:	7a61      	ldrb	r1, [r4, #9]
void Init_3DMagneticSensor(void)
{

	uint8_t InitWrite[4]={0x00, 0x05,0x00,0x04};
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,10,100);
	WriteBuffer[0] = 0x00;
 80014ba:	2300      	movs	r3, #0
	WriteBuffer[1] = ReadBuffer[7] & 0x78;
	WriteBuffer[2] = ReadBuffer[8];
	WriteBuffer[3] = ReadBuffer[9] & 0x0F;
 80014bc:	f001 010f 	and.w	r1, r1, #15
void Init_3DMagneticSensor(void)
{

	uint8_t InitWrite[4]={0x00, 0x05,0x00,0x04};
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,10,100);
	WriteBuffer[0] = 0x00;
 80014c0:	7013      	strb	r3, [r2, #0]
	WriteBuffer[1] = ReadBuffer[7] & 0x78;
	WriteBuffer[2] = ReadBuffer[8];
	WriteBuffer[3] = ReadBuffer[9] & 0x0F;
 80014c2:	70d1      	strb	r1, [r2, #3]
 80014c4:	3a01      	subs	r2, #1
	for(int i =0; i<4; i++)
	{
		WriteBuffer[i] |= InitWrite[i];
 80014c6:	a903      	add	r1, sp, #12
 80014c8:	5c58      	ldrb	r0, [r3, r1]
 80014ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,10,100);
	WriteBuffer[0] = 0x00;
	WriteBuffer[1] = ReadBuffer[7] & 0x78;
	WriteBuffer[2] = ReadBuffer[8];
	WriteBuffer[3] = ReadBuffer[9] & 0x0F;
	for(int i =0; i<4; i++)
 80014ce:	3301      	adds	r3, #1
	{
		WriteBuffer[i] |= InitWrite[i];
 80014d0:	4301      	orrs	r1, r0
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,10,100);
	WriteBuffer[0] = 0x00;
	WriteBuffer[1] = ReadBuffer[7] & 0x78;
	WriteBuffer[2] = ReadBuffer[8];
	WriteBuffer[3] = ReadBuffer[9] & 0x0F;
	for(int i =0; i<4; i++)
 80014d2:	2b04      	cmp	r3, #4
	{
		WriteBuffer[i] |= InitWrite[i];
 80014d4:	7011      	strb	r1, [r2, #0]
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,10,100);
	WriteBuffer[0] = 0x00;
	WriteBuffer[1] = ReadBuffer[7] & 0x78;
	WriteBuffer[2] = ReadBuffer[8];
	WriteBuffer[3] = ReadBuffer[9] & 0x0F;
	for(int i =0; i<4; i++)
 80014d6:	d1f6      	bne.n	80014c6 <Init_3DMagneticSensor+0x36>
	{
		WriteBuffer[i] |= InitWrite[i];
	}
	HAL_I2C_Master_Transmit(&i2c1,WRITE_ADDRESS, WriteBuffer,4,100);
 80014d8:	2264      	movs	r2, #100	; 0x64
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	21bc      	movs	r1, #188	; 0xbc
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <Init_3DMagneticSensor+0x68>)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <Init_3DMagneticSensor+0x64>)
 80014e2:	f002 fd1f 	bl	8003f24 <HAL_I2C_Master_Transmit>
}
 80014e6:	b004      	add	sp, #16
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	bf00      	nop
 80014ec:	08009720 	.word	0x08009720
 80014f0:	20000ad6 	.word	0x20000ad6
 80014f4:	20000a94 	.word	0x20000a94
 80014f8:	20000ad2 	.word	0x20000ad2
 80014fc:	00000000 	.word	0x00000000

08001500 <findAngle>:
  uint8_t Sleep[2] ={0}; 
	HAL_I2C_Master_Transmit(&i2c1,WRITE_ADDRESS, Sleep,2,100);
}

void findAngle(double x, double y)
{
 8001500:	b510      	push	{r4, lr}
	if(x> 0){
 8001502:	ec51 0b10 	vmov	r0, r1, d0
  uint8_t Sleep[2] ={0}; 
	HAL_I2C_Master_Transmit(&i2c1,WRITE_ADDRESS, Sleep,2,100);
}

void findAngle(double x, double y)
{
 8001506:	ed2d 8b04 	vpush	{d8-d9}
 800150a:	eeb0 8a40 	vmov.f32	s16, s0
 800150e:	eef0 8a60 	vmov.f32	s17, s1
 8001512:	eeb0 9a41 	vmov.f32	s18, s2
 8001516:	eef0 9a61 	vmov.f32	s19, s3
	if(x> 0){
 800151a:	2200      	movs	r2, #0
 800151c:	2300      	movs	r3, #0
 800151e:	f7ff fb23 	bl	8000b68 <__aeabi_dcmpgt>
 8001522:	b190      	cbz	r0, 800154a <findAngle+0x4a>
		Phi = atan2(y,x)*RADTODEG;
 8001524:	eeb0 1a48 	vmov.f32	s2, s16
 8001528:	eef0 1a68 	vmov.f32	s3, s17
 800152c:	eeb0 0a49 	vmov.f32	s0, s18
 8001530:	eef0 0a69 	vmov.f32	s1, s19
 8001534:	f007 fe16 	bl	8009164 <atan2>
 8001538:	a32b      	add	r3, pc, #172	; (adr r3, 80015e8 <findAngle+0xe8>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	ec51 0b10 	vmov	r0, r1, d0
 8001542:	f7ff f881 	bl	8000648 <__aeabi_dmul>
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <findAngle+0xf0>)
 8001548:	e013      	b.n	8001572 <findAngle+0x72>
	}else if(x ==0){
 800154a:	ec51 0b18 	vmov	r0, r1, d8
 800154e:	2200      	movs	r2, #0
 8001550:	2300      	movs	r3, #0
 8001552:	f7ff fae1 	bl	8000b18 <__aeabi_dcmpeq>
 8001556:	b178      	cbz	r0, 8001578 <findAngle+0x78>
		if(y<0){
 8001558:	2300      	movs	r3, #0
 800155a:	ec51 0b19 	vmov	r0, r1, d9
 800155e:	2200      	movs	r2, #0
 8001560:	f7ff fae4 	bl	8000b2c <__aeabi_dcmplt>
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <findAngle+0xf0>)
 8001566:	b110      	cbz	r0, 800156e <findAngle+0x6e>
			Phi = -90;
 8001568:	2000      	movs	r0, #0
 800156a:	4922      	ldr	r1, [pc, #136]	; (80015f4 <findAngle+0xf4>)
 800156c:	e001      	b.n	8001572 <findAngle+0x72>
		}else{
			Phi = 90;
 800156e:	4922      	ldr	r1, [pc, #136]	; (80015f8 <findAngle+0xf8>)
 8001570:	2000      	movs	r0, #0
 8001572:	e9c3 0100 	strd	r0, r1, [r3]
 8001576:	e030      	b.n	80015da <findAngle+0xda>
		}
	}else if(x<0){
 8001578:	ec51 0b18 	vmov	r0, r1, d8
 800157c:	2200      	movs	r2, #0
 800157e:	2300      	movs	r3, #0
 8001580:	f7ff fad4 	bl	8000b2c <__aeabi_dcmplt>
 8001584:	b348      	cbz	r0, 80015da <findAngle+0xda>
		if(y>=0){
 8001586:	ec51 0b19 	vmov	r0, r1, d9
 800158a:	2200      	movs	r2, #0
 800158c:	2300      	movs	r3, #0
 800158e:	f7ff fae1 	bl	8000b54 <__aeabi_dcmpge>
			Phi = (atan2(y,x)+PI)*RADTODEG;
 8001592:	eeb0 0a49 	vmov.f32	s0, s18
 8001596:	eef0 0a69 	vmov.f32	s1, s19
 800159a:	eeb0 1a48 	vmov.f32	s2, s16
 800159e:	eef0 1a68 	vmov.f32	s3, s17
 80015a2:	4c13      	ldr	r4, [pc, #76]	; (80015f0 <findAngle+0xf0>)
			Phi = -90;
		}else{
			Phi = 90;
		}
	}else if(x<0){
		if(y>=0){
 80015a4:	b148      	cbz	r0, 80015ba <findAngle+0xba>
			Phi = (atan2(y,x)+PI)*RADTODEG;
 80015a6:	f007 fddd 	bl	8009164 <atan2>
 80015aa:	a30d      	add	r3, pc, #52	; (adr r3, 80015e0 <findAngle+0xe0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	ec51 0b10 	vmov	r0, r1, d0
 80015b4:	f7fe fe96 	bl	80002e4 <__adddf3>
 80015b8:	e008      	b.n	80015cc <findAngle+0xcc>
		}else{
			Phi = (atan2(y,x)-PI)*RADTODEG;
 80015ba:	f007 fdd3 	bl	8009164 <atan2>
 80015be:	a308      	add	r3, pc, #32	; (adr r3, 80015e0 <findAngle+0xe0>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	ec51 0b10 	vmov	r0, r1, d0
 80015c8:	f7fe fe8a 	bl	80002e0 <__aeabi_dsub>
 80015cc:	a306      	add	r3, pc, #24	; (adr r3, 80015e8 <findAngle+0xe8>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f839 	bl	8000648 <__aeabi_dmul>
 80015d6:	e9c4 0100 	strd	r0, r1, [r4]
		}
	}
}
 80015da:	ecbd 8b04 	vpop	{d8-d9}
 80015de:	bd10      	pop	{r4, pc}
 80015e0:	53c8d4f1 	.word	0x53c8d4f1
 80015e4:	400921fb 	.word	0x400921fb
 80015e8:	1af05a77 	.word	0x1af05a77
 80015ec:	404ca5dc 	.word	0x404ca5dc
 80015f0:	20000af0 	.word	0x20000af0
 80015f4:	c0568000 	.word	0xc0568000
 80015f8:	40568000 	.word	0x40568000

080015fc <ReadSensor>:
{
  
}

void ReadSensor(void)
{
 80015fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  static uint8_t OldFRM = 0;
  static uint8_t CurrentFRM = 0;
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,6,100);
 80015fe:	4c2b      	ldr	r4, [pc, #172]	; (80016ac <ReadSensor+0xb0>)
 8001600:	482b      	ldr	r0, [pc, #172]	; (80016b0 <ReadSensor+0xb4>)
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	4622      	mov	r2, r4
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	21bd      	movs	r1, #189	; 0xbd
 800160a:	2306      	movs	r3, #6
 800160c:	f002 fcf8 	bl	8004000 <HAL_I2C_Master_Receive>
	Reading[0] = (ReadBuffer[0]<<4) | ((ReadBuffer[4] &0xF0)>>4);
 8001610:	7921      	ldrb	r1, [r4, #4]
 8001612:	7822      	ldrb	r2, [r4, #0]
 8001614:	4827      	ldr	r0, [pc, #156]	; (80016b4 <ReadSensor+0xb8>)
 8001616:	090b      	lsrs	r3, r1, #4
 8001618:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	x = Reading[0];
 800161c:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <ReadSensor+0xbc>)
void ReadSensor(void)
{
  static uint8_t OldFRM = 0;
  static uint8_t CurrentFRM = 0;
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,6,100);
	Reading[0] = (ReadBuffer[0]<<4) | ((ReadBuffer[4] &0xF0)>>4);
 800161e:	8003      	strh	r3, [r0, #0]
	x = Reading[0];
	if(Reading[0] & 0x800)
 8001620:	051d      	lsls	r5, r3, #20
{
  static uint8_t OldFRM = 0;
  static uint8_t CurrentFRM = 0;
	HAL_I2C_Master_Receive(&i2c1,READ_ADDRESS, ReadBuffer,6,100);
	Reading[0] = (ReadBuffer[0]<<4) | ((ReadBuffer[4] &0xF0)>>4);
	x = Reading[0];
 8001622:	8013      	strh	r3, [r2, #0]
	if(Reading[0] & 0x800)
	{
		Reading[0] &=0x7FF;
		Reading[0] -=2048;
 8001624:	bf42      	ittt	mi
 8001626:	f443 4378 	orrmi.w	r3, r3, #63488	; 0xf800
		x = Reading[0];
 800162a:	8013      	strhmi	r3, [r2, #0]
	Reading[0] = (ReadBuffer[0]<<4) | ((ReadBuffer[4] &0xF0)>>4);
	x = Reading[0];
	if(Reading[0] & 0x800)
	{
		Reading[0] &=0x7FF;
		Reading[0] -=2048;
 800162c:	8003      	strhmi	r3, [r0, #0]
		x = Reading[0];
	}
	Reading[1] = (ReadBuffer[1]<<4) | ((ReadBuffer[4]&0x0F));
 800162e:	7863      	ldrb	r3, [r4, #1]
	y = Reading[1];
 8001630:	4a22      	ldr	r2, [pc, #136]	; (80016bc <ReadSensor+0xc0>)
	{
		Reading[0] &=0x7FF;
		Reading[0] -=2048;
		x = Reading[0];
	}
	Reading[1] = (ReadBuffer[1]<<4) | ((ReadBuffer[4]&0x0F));
 8001632:	f001 010f 	and.w	r1, r1, #15
 8001636:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
	y = Reading[1];
	if(Reading[1] & 0x800)
 800163a:	051d      	lsls	r5, r3, #20
	{
		Reading[1] &=0x7FF;
		Reading[1] -=2048;
 800163c:	bf48      	it	mi
 800163e:	491d      	ldrmi	r1, [pc, #116]	; (80016b4 <ReadSensor+0xb8>)
		Reading[0] &=0x7FF;
		Reading[0] -=2048;
		x = Reading[0];
	}
	Reading[1] = (ReadBuffer[1]<<4) | ((ReadBuffer[4]&0x0F));
	y = Reading[1];
 8001640:	8013      	strh	r3, [r2, #0]
	{
		Reading[0] &=0x7FF;
		Reading[0] -=2048;
		x = Reading[0];
	}
	Reading[1] = (ReadBuffer[1]<<4) | ((ReadBuffer[4]&0x0F));
 8001642:	8043      	strh	r3, [r0, #2]
	y = Reading[1];
	if(Reading[1] & 0x800)
	{
		Reading[1] &=0x7FF;
		Reading[1] -=2048;
 8001644:	bf42      	ittt	mi
 8001646:	f443 4378 	orrmi.w	r3, r3, #63488	; 0xf800
		y = Reading[1];
 800164a:	8013      	strhmi	r3, [r2, #0]
	Reading[1] = (ReadBuffer[1]<<4) | ((ReadBuffer[4]&0x0F));
	y = Reading[1];
	if(Reading[1] & 0x800)
	{
		Reading[1] &=0x7FF;
		Reading[1] -=2048;
 800164c:	804b      	strhmi	r3, [r1, #2]
		y = Reading[1];
	}
	Reading[2] = (ReadBuffer[2]<<4) | ((ReadBuffer[5]&0x0F));
 800164e:	7963      	ldrb	r3, [r4, #5]
 8001650:	78a2      	ldrb	r2, [r4, #2]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	z = Reading[2];
	if(Reading[2] & 0x800)
 800165a:	0519      	lsls	r1, r3, #20
		Reading[1] &=0x7FF;
		Reading[1] -=2048;
		y = Reading[1];
	}
	Reading[2] = (ReadBuffer[2]<<4) | ((ReadBuffer[5]&0x0F));
	z = Reading[2];
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <ReadSensor+0xc4>)
	if(Reading[2] & 0x800)
	{
		Reading[2] &=0x7FF;
		Reading[2] -=2048;
 800165e:	bf48      	it	mi
 8001660:	4914      	ldrmi	r1, [pc, #80]	; (80016b4 <ReadSensor+0xb8>)
		Reading[1] &=0x7FF;
		Reading[1] -=2048;
		y = Reading[1];
	}
	Reading[2] = (ReadBuffer[2]<<4) | ((ReadBuffer[5]&0x0F));
	z = Reading[2];
 8001662:	8013      	strh	r3, [r2, #0]
	{
		Reading[1] &=0x7FF;
		Reading[1] -=2048;
		y = Reading[1];
	}
	Reading[2] = (ReadBuffer[2]<<4) | ((ReadBuffer[5]&0x0F));
 8001664:	8083      	strh	r3, [r0, #4]
	z = Reading[2];
	if(Reading[2] & 0x800)
	{
		Reading[2] &=0x7FF;
		Reading[2] -=2048;
 8001666:	bf42      	ittt	mi
 8001668:	f443 4378 	orrmi.w	r3, r3, #63488	; 0xf800
 800166c:	808b      	strhmi	r3, [r1, #4]
		z = Reading[2];
 800166e:	8013      	strhmi	r3, [r2, #0]
	}

  CurrentFRM = ReadBuffer[3] & 0x0C;

  if(CurrentFRM == OldFRM)
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <ReadSensor+0xc8>)
		Reading[2] &=0x7FF;
		Reading[2] -=2048;
		z = Reading[2];
	}

  CurrentFRM = ReadBuffer[3] & 0x0C;
 8001672:	78e2      	ldrb	r2, [r4, #3]

  if(CurrentFRM == OldFRM)
 8001674:	7819      	ldrb	r1, [r3, #0]
		Reading[2] &=0x7FF;
		Reading[2] -=2048;
		z = Reading[2];
	}

  CurrentFRM = ReadBuffer[3] & 0x0C;
 8001676:	4c14      	ldr	r4, [pc, #80]	; (80016c8 <ReadSensor+0xcc>)
 8001678:	f002 020c 	and.w	r2, r2, #12

  if(CurrentFRM == OldFRM)
 800167c:	4291      	cmp	r1, r2
		Reading[2] &=0x7FF;
		Reading[2] -=2048;
		z = Reading[2];
	}

  CurrentFRM = ReadBuffer[3] & 0x0C;
 800167e:	7022      	strb	r2, [r4, #0]
 8001680:	461d      	mov	r5, r3

  if(CurrentFRM == OldFRM)
 8001682:	d10e      	bne.n	80016a2 <ReadSensor+0xa6>
  {
    //ADC hang up we need to reset the sensor
    printf("Sensor is Stuck resetting .. \n");
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <ReadSensor+0xd0>)
 8001686:	f003 f9bd 	bl	8004a04 <puts>
    HAL_I2C_Master_Transmit(&i2c1,0x00,0x00,1,100);
 800168a:	2100      	movs	r1, #0
 800168c:	2364      	movs	r3, #100	; 0x64
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	460a      	mov	r2, r1
 8001692:	2301      	movs	r3, #1
 8001694:	4806      	ldr	r0, [pc, #24]	; (80016b0 <ReadSensor+0xb4>)
 8001696:	f002 fc45 	bl	8003f24 <HAL_I2C_Master_Transmit>
    Init_3DMagneticSensor();
 800169a:	f7ff fef9 	bl	8001490 <Init_3DMagneticSensor>
    CurrentFRM = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	7023      	strb	r3, [r4, #0]
  }
  OldFRM = CurrentFRM;
 80016a2:	7823      	ldrb	r3, [r4, #0]
 80016a4:	702b      	strb	r3, [r5, #0]

}
 80016a6:	b003      	add	sp, #12
 80016a8:	bd30      	pop	{r4, r5, pc}
 80016aa:	bf00      	nop
 80016ac:	20000ad6 	.word	0x20000ad6
 80016b0:	20000a94 	.word	0x20000a94
 80016b4:	20000ae2 	.word	0x20000ae2
 80016b8:	20000ad0 	.word	0x20000ad0
 80016bc:	20000ae8 	.word	0x20000ae8
 80016c0:	20000ae0 	.word	0x20000ae0
 80016c4:	20000905 	.word	0x20000905
 80016c8:	20000904 	.word	0x20000904
 80016cc:	08009d8d 	.word	0x08009d8d

080016d0 <CmdRead>:
        HAL_Delay(500);
   }

}

void CmdRead(int mode){
 80016d0:	b570      	push	{r4, r5, r6, lr}

        ReadSensor();
 80016d2:	f7ff ff93 	bl	80015fc <ReadSensor>
        findAngle(x,y);
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <CmdRead+0x3c>)
 80016d8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80016dc:	f7fe ff4e 	bl	800057c <__aeabi_i2d>
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <CmdRead+0x40>)
 80016e2:	4604      	mov	r4, r0
 80016e4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80016e8:	460d      	mov	r5, r1
 80016ea:	f7fe ff47 	bl	800057c <__aeabi_i2d>
 80016ee:	ec45 4b10 	vmov	d0, r4, r5
 80016f2:	ec41 0b11 	vmov	d1, r0, r1
 80016f6:	f7ff ff03 	bl	8001500 <findAngle>
        printf("Phi = %f\n" , Phi);
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <CmdRead+0x44>)
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <CmdRead+0x48>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
        return;
}
 8001702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void CmdRead(int mode){

        ReadSensor();
        findAngle(x,y);
        printf("Phi = %f\n" , Phi);
 8001706:	f003 b92d 	b.w	8004964 <printf>
 800170a:	bf00      	nop
 800170c:	20000ad0 	.word	0x20000ad0
 8001710:	20000ae8 	.word	0x20000ae8
 8001714:	20000af0 	.word	0x20000af0
 8001718:	08009dab 	.word	0x08009dab

0800171c <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 800171c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 800171e:	b940      	cbnz	r0, 8001732 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8001720:	4668      	mov	r0, sp
 8001722:	f000 f931 	bl	8001988 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8001726:	a801      	add	r0, sp, #4
 8001728:	f000 f92e 	bl	8001988 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 800172c:	9b00      	ldr	r3, [sp, #0]
 800172e:	9a01      	ldr	r2, [sp, #4]
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	b003      	add	sp, #12
 8001734:	f85d fb04 	ldr.w	pc, [sp], #4

08001738 <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 8001738:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 800173a:	b938      	cbnz	r0, 800174c <CmdR+0x14>

  fetch_uint32_arg(&addr);
 800173c:	a801      	add	r0, sp, #4
 800173e:	f000 f923 	bl	8001988 <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 8001742:	9901      	ldr	r1, [sp, #4]
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <CmdR+0x1c>)
 8001746:	680a      	ldr	r2, [r1, #0]
 8001748:	f003 f90c 	bl	8004964 <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 800174c:	b003      	add	sp, #12
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001752:	bf00      	nop
 8001754:	08009dd6 	.word	0x08009dd6

08001758 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8001758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800175c:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 800175e:	b908      	cbnz	r0, 8001764 <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8001760:	4833      	ldr	r0, [pc, #204]	; (8001830 <parse+0xd8>)
 8001762:	e020      	b.n	80017a6 <parse+0x4e>
    return -1;
  }

  if(len==0) {
 8001764:	b909      	cbnz	r1, 800176a <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 8001766:	4833      	ldr	r0, [pc, #204]	; (8001834 <parse+0xdc>)
 8001768:	e01d      	b.n	80017a6 <parse+0x4e>
    return -1;
  }

  if(table == NULL) {
 800176a:	b122      	cbz	r2, 8001776 <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800176c:	4b32      	ldr	r3, [pc, #200]	; (8001838 <parse+0xe0>)
 800176e:	1e4c      	subs	r4, r1, #1
 8001770:	681e      	ldr	r6, [r3, #0]
 8001772:	4603      	mov	r3, r0
 8001774:	e00a      	b.n	800178c <parse+0x34>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8001776:	4831      	ldr	r0, [pc, #196]	; (800183c <parse+0xe4>)
 8001778:	e015      	b.n	80017a6 <parse+0x4e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800177a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800177e:	2a00      	cmp	r2, #0
 8001780:	d04d      	beq.n	800181e <parse+0xc6>
 8001782:	4432      	add	r2, r6
 8001784:	3c01      	subs	r4, #1
 8001786:	7852      	ldrb	r2, [r2, #1]
 8001788:	0712      	lsls	r2, r2, #28
 800178a:	d54b      	bpl.n	8001824 <parse+0xcc>
 800178c:	1c67      	adds	r7, r4, #1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	d1f2      	bne.n	800177a <parse+0x22>
  if((i==0) || (*buf==0)) {
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d047      	beq.n	800182a <parse+0xd2>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 800179a:	4929      	ldr	r1, [pc, #164]	; (8001840 <parse+0xe8>)
 800179c:	f003 f9e8 	bl	8004b70 <strtok>
  if(p==NULL) {
 80017a0:	4606      	mov	r6, r0
 80017a2:	b910      	cbnz	r0, 80017aa <parse+0x52>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80017a4:	4827      	ldr	r0, [pc, #156]	; (8001844 <parse+0xec>)
 80017a6:	4928      	ldr	r1, [pc, #160]	; (8001848 <parse+0xf0>)
 80017a8:	e037      	b.n	800181a <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 80017aa:	4928      	ldr	r1, [pc, #160]	; (800184c <parse+0xf4>)
 80017ac:	f003 f932 	bl	8004a14 <strcasecmp>
 80017b0:	4604      	mov	r4, r0
 80017b2:	b9a0      	cbnz	r0, 80017de <parse+0x86>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 80017b4:	4922      	ldr	r1, [pc, #136]	; (8001840 <parse+0xe8>)
 80017b6:	f003 f9db 	bl	8004b70 <strtok>
    if(p == NULL) {
 80017ba:	4606      	mov	r6, r0
 80017bc:	b990      	cbnz	r0, 80017e4 <parse+0x8c>
 80017be:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 80017c0:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80017c4:	b389      	cbz	r1, 800182a <parse+0xd2>
	if(t->help != NULL) {
 80017c6:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80017ca:	b11a      	cbz	r2, 80017d4 <parse+0x7c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80017cc:	4820      	ldr	r0, [pc, #128]	; (8001850 <parse+0xf8>)
 80017ce:	f003 f8c9 	bl	8004964 <printf>
 80017d2:	e7f4      	b.n	80017be <parse+0x66>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80017d4:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80017d8:	2001      	movs	r0, #1
 80017da:	4798      	blx	r3
 80017dc:	e7ef      	b.n	80017be <parse+0x66>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80017de:	f04f 0800 	mov.w	r8, #0
 80017e2:	e009      	b.n	80017f8 <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 80017e4:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 80017e8:	e006      	b.n	80017f8 <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 80017ea:	4630      	mov	r0, r6
 80017ec:	4639      	mov	r1, r7
 80017ee:	f003 f911 	bl	8004a14 <strcasecmp>
 80017f2:	4604      	mov	r4, r0
 80017f4:	b120      	cbz	r0, 8001800 <parse+0xa8>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 80017f6:	350c      	adds	r5, #12
 80017f8:	682f      	ldr	r7, [r5, #0]
 80017fa:	2f00      	cmp	r7, #0
 80017fc:	d1f5      	bne.n	80017ea <parse+0x92>
 80017fe:	e00a      	b.n	8001816 <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8001800:	f1b8 0f00 	cmp.w	r8, #0
 8001804:	d003      	beq.n	800180e <parse+0xb6>
	printf("%s:\n",t->cmdname);
 8001806:	4813      	ldr	r0, [pc, #76]	; (8001854 <parse+0xfc>)
 8001808:	4639      	mov	r1, r7
 800180a:	f003 f8ab 	bl	8004964 <printf>
      }
      t->func(arg);
 800180e:	686b      	ldr	r3, [r5, #4]
 8001810:	4640      	mov	r0, r8
 8001812:	4798      	blx	r3
      return 0;
 8001814:	e009      	b.n	800182a <parse+0xd2>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <parse+0x100>)
 8001818:	4631      	mov	r1, r6
 800181a:	f003 f8a3 	bl	8004964 <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 800181e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001822:	e002      	b.n	800182a <parse+0xd2>


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
  if((i==0) || (*buf==0)) {
 8001824:	2900      	cmp	r1, #0
 8001826:	d1b8      	bne.n	800179a <parse+0x42>
 8001828:	e7f9      	b.n	800181e <parse+0xc6>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 800182a:	4620      	mov	r0, r4
 800182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001830:	08009e21 	.word	0x08009e21
 8001834:	08009e42 	.word	0x08009e42
 8001838:	20000044 	.word	0x20000044
 800183c:	08009e52 	.word	0x08009e52
 8001840:	08009e75 	.word	0x08009e75
 8001844:	08009e7c 	.word	0x08009e7c
 8001848:	08009f02 	.word	0x08009f02
 800184c:	08009eac 	.word	0x08009eac
 8001850:	08009eb1 	.word	0x08009eb1
 8001854:	08009ebd 	.word	0x08009ebd
 8001858:	08009ec2 	.word	0x08009ec2

0800185c <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 800185c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 800185e:	4d3f      	ldr	r5, [pc, #252]	; (800195c <TaskInput+0x100>)
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	b123      	cbz	r3, 800186e <TaskInput+0x12>
    printf("ARMON>");
 8001864:	483e      	ldr	r0, [pc, #248]	; (8001960 <TaskInput+0x104>)
 8001866:	f003 f87d 	bl	8004964 <printf>
    printPrompt = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 800186e:	f10d 0007 	add.w	r0, sp, #7
 8001872:	f000 f9b4 	bl	8001bde <TerminalReadAnyNonBlock>
  if(rc) {
 8001876:	2800      	cmp	r0, #0
 8001878:	d16e      	bne.n	8001958 <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 800187a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800187e:	2b08      	cmp	r3, #8
 8001880:	d001      	beq.n	8001886 <TaskInput+0x2a>
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	d10d      	bne.n	80018a2 <TaskInput+0x46>
 8001886:	4c37      	ldr	r4, [pc, #220]	; (8001964 <TaskInput+0x108>)
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	b152      	cbz	r2, 80018a2 <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 800188c:	4836      	ldr	r0, [pc, #216]	; (8001968 <TaskInput+0x10c>)
 800188e:	f003 f869 	bl	8004964 <printf>
    buf--;     /* Then remove it from the buffer */
 8001892:	4a36      	ldr	r2, [pc, #216]	; (800196c <TaskInput+0x110>)
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	3b01      	subs	r3, #1
 8001898:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	3b01      	subs	r3, #1
 800189e:	6023      	str	r3, [r4, #0]
 80018a0:	e05a      	b.n	8001958 <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 80018a2:	2b21      	cmp	r3, #33	; 0x21
 80018a4:	d115      	bne.n	80018d2 <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <TaskInput+0x114>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d054      	beq.n	8001958 <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 80018ae:	4c31      	ldr	r4, [pc, #196]	; (8001974 <TaskInput+0x118>)
 80018b0:	4931      	ldr	r1, [pc, #196]	; (8001978 <TaskInput+0x11c>)
 80018b2:	4620      	mov	r0, r4
 80018b4:	f003 f8d0 	bl	8004a58 <strcpy>
      printf("%s",input);
 80018b8:	4621      	mov	r1, r4
 80018ba:	4830      	ldr	r0, [pc, #192]	; (800197c <TaskInput+0x120>)
 80018bc:	f003 f852 	bl	8004964 <printf>
      count = strlen(input);
 80018c0:	4620      	mov	r0, r4
 80018c2:	f003 f927 	bl	8004b14 <strlen>
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <TaskInput+0x108>)
 80018c8:	6018      	str	r0, [r3, #0]
      buf = input+count;
 80018ca:	4b28      	ldr	r3, [pc, #160]	; (800196c <TaskInput+0x110>)
 80018cc:	4404      	add	r4, r0
 80018ce:	601c      	str	r4, [r3, #0]
      goto parseme;
 80018d0:	e025      	b.n	800191e <TaskInput+0xc2>
    }
  } else if(isprint((unsigned int)c)) {
 80018d2:	4a2b      	ldr	r2, [pc, #172]	; (8001980 <TaskInput+0x124>)
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	441a      	add	r2, r3
 80018d8:	7852      	ldrb	r2, [r2, #1]
 80018da:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 80018de:	d012      	beq.n	8001906 <TaskInput+0xaa>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 80018e0:	4920      	ldr	r1, [pc, #128]	; (8001964 <TaskInput+0x108>)
 80018e2:	680a      	ldr	r2, [r1, #0]
 80018e4:	2a4f      	cmp	r2, #79	; 0x4f
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 80018e6:	bf9f      	itttt	ls
 80018e8:	4c20      	ldrls	r4, [pc, #128]	; (800196c <TaskInput+0x110>)
 80018ea:	6820      	ldrls	r0, [r4, #0]
 80018ec:	7003      	strbls	r3, [r0, #0]
 80018ee:	1c45      	addls	r5, r0, #1
      count++;
 80018f0:	bf97      	itett	ls
 80018f2:	3201      	addls	r2, #1
    }
  } else if(isprint((unsigned int)c)) {
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
 80018f4:	2007      	movhi	r0, #7
      return;
    } else {
      *buf++ = c;
      count++;
      /* Echo it back to the user */
      printf("%c",c);
 80018f6:	f89d 0007 	ldrbls.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 80018fa:	6025      	strls	r5, [r4, #0]
      count++;
 80018fc:	bf98      	it	ls
 80018fe:	600a      	strls	r2, [r1, #0]
      /* Echo it back to the user */
      printf("%c",c);
 8001900:	f003 f844 	bl	800498c <putchar>
 8001904:	e028      	b.n	8001958 <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 8001906:	2b0d      	cmp	r3, #13
 8001908:	d126      	bne.n	8001958 <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 800190c:	481a      	ldr	r0, [pc, #104]	; (8001978 <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800190e:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001910:	4918      	ldr	r1, [pc, #96]	; (8001974 <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001912:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001914:	f003 f8a0 	bl	8004a58 <strcpy>
    saved = 1;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <TaskInput+0x114>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 800191e:	200a      	movs	r0, #10
 8001920:	4c12      	ldr	r4, [pc, #72]	; (800196c <TaskInput+0x110>)
 8001922:	f003 f833 	bl	800498c <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <TaskInput+0x108>)
 8001928:	6820      	ldr	r0, [r4, #0]
 800192a:	681e      	ldr	r6, [r3, #0]
 800192c:	4602      	mov	r2, r0
 800192e:	1a31      	subs	r1, r6, r0
 8001930:	4411      	add	r1, r2
 8001932:	294f      	cmp	r1, #79	; 0x4f
 8001934:	f04f 0100 	mov.w	r1, #0
 8001938:	d802      	bhi.n	8001940 <TaskInput+0xe4>
 800193a:	f802 1b01 	strb.w	r1, [r2], #1
 800193e:	e7f6      	b.n	800192e <TaskInput+0xd2>
    count = 0;
 8001940:	6019      	str	r1, [r3, #0]
    parse(input, sizeof(input), Commands);
 8001942:	4e0c      	ldr	r6, [pc, #48]	; (8001974 <TaskInput+0x118>)
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <TaskInput+0x128>)
 8001946:	6022      	str	r2, [r4, #0]
 8001948:	4630      	mov	r0, r6
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2150      	movs	r1, #80	; 0x50
 800194e:	f7ff ff03 	bl	8001758 <parse>
    buf = input;
    printPrompt = 1;
 8001952:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 8001954:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8001956:	602b      	str	r3, [r5, #0]
  }
}
 8001958:	b002      	add	sp, #8
 800195a:	bd70      	pop	{r4, r5, r6, pc}
 800195c:	2000000c 	.word	0x2000000c
 8001960:	08009ef7 	.word	0x08009ef7
 8001964:	2000090c 	.word	0x2000090c
 8001968:	08009efe 	.word	0x08009efe
 800196c:	20000010 	.word	0x20000010
 8001970:	20000908 	.word	0x20000908
 8001974:	20000b49 	.word	0x20000b49
 8001978:	20000af9 	.word	0x20000af9
 800197c:	0800a1f3 	.word	0x0800a1f3
 8001980:	20000044 	.word	0x20000044
 8001984:	20000014 	.word	0x20000014

08001988 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8001988:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 800198c:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 800198e:	2000      	movs	r0, #0
 8001990:	f003 f8ee 	bl	8004b70 <strtok>
  if(p == NULL) {
 8001994:	b130      	cbz	r0, 80019a4 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8001996:	2100      	movs	r1, #0
 8001998:	460a      	mov	r2, r1
 800199a:	f003 f9b7 	bl	8004d0c <strtoul>
 800199e:	6020      	str	r0, [r4, #0]
  return 0;
 80019a0:	2000      	movs	r0, #0
 80019a2:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 80019a8:	bd10      	pop	{r4, pc}
 80019aa:	bf00      	nop
 80019ac:	08009e75 	.word	0x08009e75

080019b0 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80019b0:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80019b2:	4906      	ldr	r1, [pc, #24]	; (80019cc <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80019b4:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f003 f8da 	bl	8004b70 <strtok>
  if(p == NULL) {
 80019bc:	b110      	cbz	r0, 80019c4 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 80019be:	6020      	str	r0, [r4, #0]
  return 0;
 80019c0:	2000      	movs	r0, #0
 80019c2:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	bf00      	nop
 80019cc:	08009e75 	.word	0x08009e75

080019d0 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 80019d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d4:	4680      	mov	r8, r0
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 80019da:	460d      	mov	r5, r1
 80019dc:	2900      	cmp	r1, #0
 80019de:	d044      	beq.n	8001a6a <DumpBuffer+0x9a>
 80019e0:	ac03      	add	r4, sp, #12
 80019e2:	eb00 0901 	add.w	r9, r0, r1
 80019e6:	4606      	mov	r6, r0
 80019e8:	4627      	mov	r7, r4
 80019ea:	ebc8 010a 	rsb	r1, r8, sl

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 80019ee:	454e      	cmp	r6, r9
 80019f0:	4431      	add	r1, r6
 80019f2:	ebc8 0306 	rsb	r3, r8, r6
 80019f6:	d025      	beq.n	8001a44 <DumpBuffer+0x74>
    if((i% BYTES_PER_LINE) == 0) {
 80019f8:	f013 0b0f 	ands.w	fp, r3, #15
 80019fc:	d103      	bne.n	8001a06 <DumpBuffer+0x36>
      printf("%08x:",(unsigned int)address);
 80019fe:	481c      	ldr	r0, [pc, #112]	; (8001a70 <DumpBuffer+0xa0>)
 8001a00:	f002 ffb0 	bl	8004964 <printf>
      bufp = buf;
 8001a04:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <DumpBuffer+0xa4>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 8001a08:	f816 1b01 	ldrb.w	r1, [r6], #1
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001a0c:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001a0e:	481a      	ldr	r0, [pc, #104]	; (8001a78 <DumpBuffer+0xa8>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001a10:	440b      	add	r3, r1
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8001a18:	bf08      	it	eq
 8001a1a:	222e      	moveq	r2, #46	; 0x2e
 8001a1c:	f104 0301 	add.w	r3, r4, #1
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 8001a20:	bf14      	ite	ne
 8001a22:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 8001a24:	7022      	strbeq	r2, [r4, #0]
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	461c      	mov	r4, r3
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001a2a:	f002 ff9b 	bl	8004964 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8001a2e:	f1bb 0f0f 	cmp.w	fp, #15
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	d1d9      	bne.n	80019ea <DumpBuffer+0x1a>
      *bufp = '\0';  /* NULL terminate buffer */
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8001a3a:	4639      	mov	r1, r7
 8001a3c:	480f      	ldr	r0, [pc, #60]	; (8001a7c <DumpBuffer+0xac>)
 8001a3e:	f002 ff91 	bl	8004964 <printf>
 8001a42:	e7d2      	b.n	80019ea <DumpBuffer+0x1a>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8001a44:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 8001a46:	f015 050f 	ands.w	r5, r5, #15
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8001a4a:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 8001a4c:	d00d      	beq.n	8001a6a <DumpBuffer+0x9a>
 8001a4e:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001a50:	f1c5 0310 	rsb	r3, r5, #16
 8001a54:	429c      	cmp	r4, r3
 8001a56:	d204      	bcs.n	8001a62 <DumpBuffer+0x92>
      printf("   ");
 8001a58:	4809      	ldr	r0, [pc, #36]	; (8001a80 <DumpBuffer+0xb0>)
 8001a5a:	f002 ff83 	bl	8004964 <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001a5e:	3401      	adds	r4, #1
 8001a60:	e7f6      	b.n	8001a50 <DumpBuffer+0x80>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <DumpBuffer+0xac>)
 8001a64:	4639      	mov	r1, r7
 8001a66:	f002 ff7d 	bl	8004964 <printf>
  }



}
 8001a6a:	b009      	add	sp, #36	; 0x24
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a70:	08009f08 	.word	0x08009f08
 8001a74:	20000044 	.word	0x20000044
 8001a78:	08009f0e 	.word	0x08009f0e
 8001a7c:	08009f14 	.word	0x08009f14
 8001a80:	08009f1a 	.word	0x08009f1a

08001a84 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8001a84:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 8001a86:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8001a88:	d01d      	beq.n	8001ac6 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8001a8a:	2802      	cmp	r0, #2
 8001a8c:	4c0e      	ldr	r4, [pc, #56]	; (8001ac8 <CmdDump+0x44>)
 8001a8e:	4d0f      	ldr	r5, [pc, #60]	; (8001acc <CmdDump+0x48>)
 8001a90:	d109      	bne.n	8001aa6 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8001a92:	480f      	ldr	r0, [pc, #60]	; (8001ad0 <CmdDump+0x4c>)
 8001a94:	f002 ffb6 	bl	8004a04 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001a98:	6821      	ldr	r1, [r4, #0]
 8001a9a:	682a      	ldr	r2, [r5, #0]
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8001a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001aa2:	f002 bf5f 	b.w	8004964 <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff ff6e 	bl	8001988 <fetch_uint32_arg>
  if(rc == 0) {
 8001aac:	b910      	cbnz	r0, 8001ab4 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f7ff ff6a 	bl	8001988 <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 8001ab4:	6820      	ldr	r0, [r4, #0]
 8001ab6:	6829      	ldr	r1, [r5, #0]
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f7ff ff89 	bl	80019d0 <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	682a      	ldr	r2, [r5, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	6023      	str	r3, [r4, #0]
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	20000910 	.word	0x20000910
 8001acc:	20000018 	.word	0x20000018
 8001ad0:	08009f1e 	.word	0x08009f1e
 8001ad4:	0800a0b6 	.word	0x0800a0b6

08001ad8 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8001ad8:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <_sbrk_r+0x2c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	b90a      	cbnz	r2, 8001ae4 <_sbrk_r+0xc>
                heap_end = &end;
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <_sbrk_r+0x30>)
 8001ae2:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8001ae4:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8001ae6:	466b      	mov	r3, sp
 8001ae8:	4401      	add	r1, r0
 8001aea:	4299      	cmp	r1, r3
 8001aec:	d906      	bls.n	8001afc <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 8001aee:	f002 fea7 	bl	8004840 <__errno>
 8001af2:	230c      	movs	r3, #12
 8001af4:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001afa:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 8001afc:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <_sbrk_r+0x2c>)
 8001afe:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8001b00:	bd08      	pop	{r3, pc}
 8001b02:	bf00      	nop
 8001b04:	20000914 	.word	0x20000914
 8001b08:	20000f3c 	.word	0x20000f3c

08001b0c <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b10:	4770      	bx	lr

08001b12 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8001b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b16:	6053      	str	r3, [r2, #4]
        return 0;
}
 8001b18:	2000      	movs	r0, #0
 8001b1a:	4770      	bx	lr

08001b1c <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	4770      	bx	lr

08001b20 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8001b20:	2000      	movs	r0, #0
 8001b22:	4770      	bx	lr

08001b24 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8001b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8001b28:	4604      	mov	r4, r0

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8001b2a:	b085      	sub	sp, #20
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8001b2c:	b9e8      	cbnz	r0, 8001b6a <CmdStats+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2e:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001b30:	480f      	ldr	r0, [pc, #60]	; (8001b70 <CmdStats+0x4c>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001b32:	4621      	mov	r1, r4
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001b34:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8001b38:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
 8001b3c:	f8d0 9118 	ldr.w	r9, [r0, #280]	; 0x118
 8001b40:	f8d0 811c 	ldr.w	r8, [r0, #284]	; 0x11c
 8001b44:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001b48:	2214      	movs	r2, #20
 8001b4a:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8001b4e:	f002 febb 	bl	80048c8 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001b52:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <CmdStats+0x50>)
 8001b56:	f8cd 9000 	str.w	r9, [sp]
 8001b5a:	f8cd 8004 	str.w	r8, [sp, #4]
 8001b5e:	9702      	str	r7, [sp, #8]
 8001b60:	4621      	mov	r1, r4
 8001b62:	4632      	mov	r2, r6
 8001b64:	462b      	mov	r3, r5
 8001b66:	f002 fefd 	bl	8004964 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8001b6a:	b005      	add	sp, #20
 8001b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b70:	20000918 	.word	0x20000918
 8001b74:	0800a104 	.word	0x0800a104

08001b78 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7a:	b672      	cpsid	i
 8001b7c:	440a      	add	r2, r1
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8001b7e:	460e      	mov	r6, r1
 8001b80:	4f0f      	ldr	r7, [pc, #60]	; (8001bc0 <TerminalRead+0x48>)
 8001b82:	f44f 7592 	mov.w	r5, #292	; 0x124
 8001b86:	4345      	muls	r5, r0
 8001b88:	197c      	adds	r4, r7, r5
 8001b8a:	3480      	adds	r4, #128	; 0x80
 8001b8c:	88a3      	ldrh	r3, [r4, #4]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	ebc1 0e06 	rsb	lr, r1, r6
 8001b94:	b183      	cbz	r3, 8001bb8 <TerminalRead+0x40>
 8001b96:	4296      	cmp	r6, r2
 8001b98:	d00e      	beq.n	8001bb8 <TerminalRead+0x40>
    tail   = TerminalState[index].inTail;
 8001b9a:	8863      	ldrh	r3, [r4, #2]
 8001b9c:	b29b      	uxth	r3, r3
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001b9e:	441d      	add	r5, r3
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001ba0:	3301      	adds	r3, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001ba2:	5d7d      	ldrb	r5, [r7, r5]
 8001ba4:	f806 5b01 	strb.w	r5, [r6], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bac:	8063      	strh	r3, [r4, #2]
    TerminalState[index].inCount--;
 8001bae:	88a3      	ldrh	r3, [r4, #4]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	80a3      	strh	r3, [r4, #4]
 8001bb6:	e7e3      	b.n	8001b80 <TerminalRead+0x8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb8:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8001bba:	4670      	mov	r0, lr
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000918 	.word	0x20000918

08001bc4 <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f7ff bfd5 	b.w	8001b78 <TerminalRead>

08001bce <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 8001bce:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f7ff ffd1 	bl	8001b78 <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 8001bd6:	fab0 f080 	clz	r0, r0
 8001bda:	0940      	lsrs	r0, r0, #5
 8001bdc:	bd08      	pop	{r3, pc}

08001bde <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 8001bde:	4601      	mov	r1, r0
 8001be0:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff fff3 	bl	8001bce <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 8001be8:	3000      	adds	r0, #0
 8001bea:	bf18      	it	ne
 8001bec:	2001      	movne	r0, #1
 8001bee:	bd08      	pop	{r3, pc}

08001bf0 <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf2:	4e37      	ldr	r6, [pc, #220]	; (8001cd0 <TerminalOutputBufferWrite+0xe0>)
 8001bf4:	f44f 7392 	mov.w	r3, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001bf8:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001bfa:	fb03 6300 	mla	r3, r3, r0, r6
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001bfe:	d906      	bls.n	8001c0e <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001c00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001c04:	3201      	adds	r2, #1
 8001c06:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001c0e:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8001c12:	fa12 f484 	uxtah	r4, r2, r4
 8001c16:	2c7f      	cmp	r4, #127	; 0x7f
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8001c18:	bf82      	ittt	hi
 8001c1a:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8001c1e:	3401      	addhi	r4, #1
 8001c20:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8001c24:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001c28:	fb03 6300 	mla	r3, r3, r0, r6
 8001c2c:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8001c30:	fa12 f484 	uxtah	r4, r2, r4
 8001c34:	2c7f      	cmp	r4, #127	; 0x7f
 8001c36:	d8f5      	bhi.n	8001c24 <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8001c3a:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8001c3e:	4414      	add	r4, r2
 8001c40:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 8001c44:	440a      	add	r2, r1
  while((len != 0) 
 8001c46:	4291      	cmp	r1, r2
 8001c48:	d01c      	beq.n	8001c84 <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001c4a:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001c4e:	fb03 6300 	mla	r3, r3, r0, r6
 8001c52:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8001c56:	886c      	ldrh	r4, [r5, #2]
 8001c58:	b2a4      	uxth	r4, r4
 8001c5a:	2c7f      	cmp	r4, #127	; 0x7f
 8001c5c:	d812      	bhi.n	8001c84 <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8001c5e:	f8b3 4106 	ldrh.w	r4, [r3, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8001c62:	f811 eb01 	ldrb.w	lr, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8001c66:	b2a4      	uxth	r4, r4
 8001c68:	f503 7780 	add.w	r7, r3, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8001c6c:	4423      	add	r3, r4
    TerminalState[index].outHead = TERMINALINCR(head);
 8001c6e:	3401      	adds	r4, #1
 8001c70:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8001c74:	80fc      	strh	r4, [r7, #6]
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8001c76:	f883 e086 	strb.w	lr, [r3, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
 8001c7a:	886b      	ldrh	r3, [r5, #2]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	806b      	strh	r3, [r5, #2]
 8001c82:	e7e0      	b.n	8001c46 <TerminalOutputBufferWrite+0x56>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8001c84:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001c88:	fb03 6300 	mla	r3, r3, r0, r6
 8001c8c:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8001c90:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8001c92:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8001c96:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8001c98:	1953      	adds	r3, r2, r5
 8001c9a:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8001c9c:	bf88      	it	hi
 8001c9e:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  }
  switch(index) {
 8001ca2:	b990      	cbnz	r0, 8001cca <TerminalOutputBufferWrite+0xda>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8001ca4:	4f0b      	ldr	r7, [pc, #44]	; (8001cd4 <TerminalOutputBufferWrite+0xe4>)
 8001ca6:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d10d      	bne.n	8001cca <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001cae:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8001cb0:	1971      	adds	r1, r6, r5
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001cb2:	4638      	mov	r0, r7
 8001cb4:	3186      	adds	r1, #134	; 0x86
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	f002 fcc3 	bl	8004642 <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	f002 fcc8 	bl	8004652 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8001cc2:	b910      	cbnz	r0, 8001cca <TerminalOutputBufferWrite+0xda>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <TerminalOutputBufferWrite+0xe0>)
 8001cc6:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001cca:	b662      	cpsie	i
 8001ccc:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8001cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cd0:	20000918 	.word	0x20000918
 8001cd4:	20000b9c 	.word	0x20000b9c

08001cd8 <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	461d      	mov	r5, r3
 8001cdc:	4614      	mov	r4, r2
 8001cde:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8001ce0:	42bc      	cmp	r4, r7
 8001ce2:	4626      	mov	r6, r4
 8001ce4:	d00f      	beq.n	8001d06 <_write_r+0x2e>
    if(*ptr == '\n') {
 8001ce6:	7833      	ldrb	r3, [r6, #0]
 8001ce8:	2b0a      	cmp	r3, #10
 8001cea:	f104 0401 	add.w	r4, r4, #1
 8001cee:	d104      	bne.n	8001cfa <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	4906      	ldr	r1, [pc, #24]	; (8001d0c <_write_r+0x34>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f7ff ff7b 	bl	8001bf0 <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8001cfa:	4631      	mov	r1, r6
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff ff76 	bl	8001bf0 <TerminalOutputBufferWrite>
 8001d04:	e7ec      	b.n	8001ce0 <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8001d06:	4628      	mov	r0, r5
 8001d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08009e7a 	.word	0x08009e7a

08001d10 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8001d10:	4801      	ldr	r0, [pc, #4]	; (8001d18 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001d12:	f001 bbbf 	b.w	8003494 <HAL_PCD_IRQHandler>
 8001d16:	bf00      	nop
 8001d18:	20000dc4 	.word	0x20000dc4

08001d1c <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001d1c:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <Uncompress+0x70>)

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001d20:	b08a      	sub	sp, #40	; 0x28
 8001d22:	4605      	mov	r5, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001d24:	466a      	mov	r2, sp
 8001d26:	f103 0620 	add.w	r6, r3, #32
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	4614      	mov	r4, r2
 8001d30:	c403      	stmia	r4!, {r0, r1}
 8001d32:	3308      	adds	r3, #8
 8001d34:	42b3      	cmp	r3, r6
 8001d36:	4622      	mov	r2, r4
 8001d38:	d1f7      	bne.n	8001d2a <Uncompress+0xe>
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	889b      	ldrh	r3, [r3, #4]
 8001d3e:	6020      	str	r0, [r4, #0]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8001d40:	4629      	mov	r1, r5
/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001d42:	80a3      	strh	r3, [r4, #4]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8001d44:	f811 2b02 	ldrb.w	r2, [r1], #2
  data <<= 8;
  data |= (uint8_t)(*str++);
 8001d48:	786b      	ldrb	r3, [r5, #1]
 8001d4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  bits = 0;
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001d4e:	2200      	movs	r2, #0

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
  bits = 0;
 8001d50:	4614      	mov	r4, r2
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001d52:	f413 457c 	ands.w	r5, r3, #64512	; 0xfc00
 8001d56:	480e      	ldr	r0, [pc, #56]	; (8001d90 <Uncompress+0x74>)
 8001d58:	d014      	beq.n	8001d84 <Uncompress+0x68>
    data <<= 6;
 8001d5a:	019b      	lsls	r3, r3, #6
    data &= 0x3fffff;
 8001d5c:	f3c3 0315 	ubfx	r3, r3, #0, #22
    c = decoderRing[(data>>16)-1];
 8001d60:	ad0a      	add	r5, sp, #40	; 0x28
 8001d62:	eb05 4513 	add.w	r5, r5, r3, lsr #16
    buf[i++] = c;
 8001d66:	f815 5c29 	ldrb.w	r5, [r5, #-41]
 8001d6a:	5485      	strb	r5, [r0, r2]
    /* keep track of how many bits we have used */
    bits += 6;
 8001d6c:	1da0      	adds	r0, r4, #6
    //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
    /* Once we have consumed at least 8 bits, fill in the bottom */
    if(bits >= 8) {
 8001d6e:	2807      	cmp	r0, #7
      bits -= 8;
 8001d70:	bf81      	itttt	hi
 8001d72:	1ea0      	subhi	r0, r4, #2
      data |= ((uint32_t)(*str++)) << bits; 
 8001d74:	780c      	ldrbhi	r4, [r1, #0]
 8001d76:	4084      	lslhi	r4, r0
 8001d78:	4323      	orrhi	r3, r4
 8001d7a:	bf88      	it	hi
 8001d7c:	3101      	addhi	r1, #1
 8001d7e:	3201      	adds	r2, #1
 8001d80:	4604      	mov	r4, r0
 8001d82:	e7e6      	b.n	8001d52 <Uncompress+0x36>
    }
  }
  buf[i]='\0';
 8001d84:	5485      	strb	r5, [r0, r2]
  return buf;
}
 8001d86:	b00a      	add	sp, #40	; 0x28
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
 8001d8a:	bf00      	nop
 8001d8c:	0800a1ae 	.word	0x0800a1ae
 8001d90:	20000a3c 	.word	0x20000a3c

08001d94 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001d94:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8001d96:	4604      	mov	r4, r0
 8001d98:	b300      	cbz	r0, 8001ddc <DecodeReadRegister+0x48>
  if(r == NULL) return 0;
 8001d9a:	b301      	cbz	r1, 8001dde <DecodeReadRegister+0x4a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001d9c:	798d      	ldrb	r5, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8001d9e:	888a      	ldrh	r2, [r1, #4]
 8001da0:	6843      	ldr	r3, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8001da2:	2d10      	cmp	r5, #16
 8001da4:	d005      	beq.n	8001db2 <DecodeReadRegister+0x1e>
 8001da6:	2d20      	cmp	r5, #32
 8001da8:	d005      	beq.n	8001db6 <DecodeReadRegister+0x22>
 8001daa:	2d08      	cmp	r5, #8
 8001dac:	d105      	bne.n	8001dba <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8001dae:	5cd0      	ldrb	r0, [r2, r3]
    break;
 8001db0:	bd38      	pop	{r3, r4, r5, pc}
  case 16:
    val = *(uint16_t *)address;
 8001db2:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001db4:	bd38      	pop	{r3, r4, r5, pc}
  case 32:
    val = *(uint32_t *)address;
 8001db6:	58d0      	ldr	r0, [r2, r3]
    break;
 8001db8:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 8001dba:	6808      	ldr	r0, [r1, #0]
 8001dbc:	f7ff ffae 	bl	8001d1c <Uncompress>
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <DecodeReadRegister+0x50>)
 8001dc6:	f002 fdcd 	bl	8004964 <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 8001dca:	6820      	ldr	r0, [r4, #0]
 8001dcc:	f7ff ffa6 	bl	8001d1c <Uncompress>
 8001dd0:	4601      	mov	r1, r0
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <DecodeReadRegister+0x54>)
 8001dd4:	f002 fdc6 	bl	8004964 <printf>
	   Uncompress(p->name));
    return 0;
 8001dd8:	2000      	movs	r0, #0
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 8001dde:	4608      	mov	r0, r1
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001de0:	bd38      	pop	{r3, r4, r5, pc}
 8001de2:	bf00      	nop
 8001de4:	0800a1d4 	.word	0x0800a1d4
 8001de8:	0800a1f6 	.word	0x0800a1f6

08001dec <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8001dec:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8001dee:	4605      	mov	r5, r0
 8001df0:	b1f8      	cbz	r0, 8001e32 <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8001df2:	b1f1      	cbz	r1, 8001e32 <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001df4:	798c      	ldrb	r4, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8001df6:	8888      	ldrh	r0, [r1, #4]
 8001df8:	686b      	ldr	r3, [r5, #4]

  /* read register according to size */
  switch(r->size) {
 8001dfa:	2c10      	cmp	r4, #16
 8001dfc:	d005      	beq.n	8001e0a <DecodeWriteRegister+0x1e>
 8001dfe:	2c20      	cmp	r4, #32
 8001e00:	d005      	beq.n	8001e0e <DecodeWriteRegister+0x22>
 8001e02:	2c08      	cmp	r4, #8
 8001e04:	d106      	bne.n	8001e14 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8001e06:	54c2      	strb	r2, [r0, r3]
 8001e08:	e002      	b.n	8001e10 <DecodeWriteRegister+0x24>
    break;
  case 16:
    *(uint16_t *)address = val;
 8001e0a:	52c2      	strh	r2, [r0, r3]
 8001e0c:	e000      	b.n	8001e10 <DecodeWriteRegister+0x24>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8001e0e:	50c2      	str	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8001e10:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 8001e14:	6808      	ldr	r0, [r1, #0]
 8001e16:	f7ff ff81 	bl	8001d1c <Uncompress>
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <DecodeWriteRegister+0x4c>)
 8001e20:	f002 fda0 	bl	8004964 <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 8001e24:	6828      	ldr	r0, [r5, #0]
 8001e26:	f7ff ff79 	bl	8001d1c <Uncompress>
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <DecodeWriteRegister+0x50>)
 8001e2e:	f002 fd99 	bl	8004964 <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 8001e32:	2001      	movs	r0, #1
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 8001e34:	bd38      	pop	{r3, r4, r5, pc}
 8001e36:	bf00      	nop
 8001e38:	0800a1d4 	.word	0x0800a1d4
 8001e3c:	0800a1f6 	.word	0x0800a1f6

08001e40 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8001e40:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8001e42:	4604      	mov	r4, r0
  return 0;
}

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8001e44:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 8001e46:	b1c8      	cbz	r0, 8001e7c <DecodeField+0x3c>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001e48:	7943      	ldrb	r3, [r0, #5]
 8001e4a:	2501      	movs	r5, #1
 8001e4c:	409d      	lsls	r5, r3
 8001e4e:	7903      	ldrb	r3, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001e50:	6800      	ldr	r0, [r0, #0]
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001e52:	40d9      	lsrs	r1, r3
 8001e54:	3d01      	subs	r5, #1
 8001e56:	400d      	ands	r5, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001e58:	f7ff ff60 	bl	8001d1c <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8001e5c:	7962      	ldrb	r2, [r4, #5]
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <DecodeField+0x40>)
 8001e60:	4601      	mov	r1, r0
 8001e62:	4808      	ldr	r0, [pc, #32]	; (8001e84 <DecodeField+0x44>)
 8001e64:	2a01      	cmp	r2, #1
 8001e66:	bf98      	it	ls
 8001e68:	4603      	movls	r3, r0
 8001e6a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001e6e:	7923      	ldrb	r3, [r4, #4]
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <DecodeField+0x48>)
 8001e74:	462a      	mov	r2, r5
 8001e76:	462b      	mov	r3, r5
 8001e78:	f002 fd74 	bl	8004964 <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8001e7c:	b005      	add	sp, #20
 8001e7e:	bd30      	pop	{r4, r5, pc}
 8001e80:	0800a209 	.word	0x0800a209
 8001e84:	0800a20f 	.word	0x0800a20f
 8001e88:	0800a215 	.word	0x0800a215

08001e8c <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e8e:	460f      	mov	r7, r1
 8001e90:	4616      	mov	r6, r2
 8001e92:	461d      	mov	r5, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001e94:	4604      	mov	r4, r0
 8001e96:	b310      	cbz	r0, 8001ede <DecodeRegister+0x52>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001e98:	6800      	ldr	r0, [r0, #0]
 8001e9a:	f7ff ff3f 	bl	8001d1c <Uncompress>
 8001e9e:	79a3      	ldrb	r3, [r4, #6]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	88a3      	ldrh	r3, [r4, #4]
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001ea4:	443b      	add	r3, r7
  uint32_t i;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	480e      	ldr	r0, [pc, #56]	; (8001ee4 <DecodeRegister+0x58>)
 8001eac:	4632      	mov	r2, r6
 8001eae:	4633      	mov	r3, r6
 8001eb0:	f002 fd58 	bl	8004964 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001eb4:	68a7      	ldr	r7, [r4, #8]
 8001eb6:	b15f      	cbz	r7, 8001ed0 <DecodeRegister+0x44>
 8001eb8:	b18d      	cbz	r5, 8001ede <DecodeRegister+0x52>
 8001eba:	2500      	movs	r5, #0
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8001ebc:	89a3      	ldrh	r3, [r4, #12]
 8001ebe:	429d      	cmp	r5, r3
 8001ec0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8001ec4:	d205      	bcs.n	8001ed2 <DecodeRegister+0x46>
      DecodeField(f,val);
 8001ec6:	4631      	mov	r1, r6
 8001ec8:	f7ff ffba 	bl	8001e40 <DecodeField>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8001ecc:	3501      	adds	r5, #1
 8001ece:	e7f5      	b.n	8001ebc <DecodeRegister+0x30>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
 8001ed0:	b12d      	cbz	r5, 8001ede <DecodeRegister+0x52>
    printf("\n");
 8001ed2:	200a      	movs	r0, #10
  }

}
 8001ed4:	b003      	add	sp, #12
 8001ed6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8001eda:	f002 bd57 	b.w	800498c <putchar>
  }

}
 8001ede:	b003      	add	sp, #12
 8001ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	0800a23e 	.word	0x0800a23e

08001ee8 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eec:	4688      	mov	r8, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8001eee:	4604      	mov	r4, r0
 8001ef0:	b1e8      	cbz	r0, 8001f2e <DecodePeripheral+0x46>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001ef2:	6800      	ldr	r0, [r0, #0]
 8001ef4:	f7ff ff12 	bl	8001d1c <Uncompress>
 8001ef8:	6862      	ldr	r2, [r4, #4]
 8001efa:	4601      	mov	r1, r0
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <DecodePeripheral+0x4c>)
 8001efe:	f002 fd31 	bl	8004964 <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001f02:	68a7      	ldr	r7, [r4, #8]
 8001f04:	b90f      	cbnz	r7, 8001f0a <DecodePeripheral+0x22>
 8001f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f0a:	2500      	movs	r5, #0
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 8001f0c:	89a3      	ldrh	r3, [r4, #12]
 8001f0e:	429d      	cmp	r5, r3
 8001f10:	eb07 1605 	add.w	r6, r7, r5, lsl #4
 8001f14:	d20b      	bcs.n	8001f2e <DecodePeripheral+0x46>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8001f16:	4631      	mov	r1, r6
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff ff3b 	bl	8001d94 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8001f1e:	6861      	ldr	r1, [r4, #4]
  /* Dump out registers */
  if(p->registers != NULL) {
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8001f20:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8001f22:	4643      	mov	r3, r8
 8001f24:	4630      	mov	r0, r6
 8001f26:	f7ff ffb1 	bl	8001e8c <DecodeRegister>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 8001f2a:	3501      	adds	r5, #1
 8001f2c:	e7ee      	b.n	8001f0c <DecodePeripheral+0x24>
 8001f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f32:	bf00      	nop
 8001f34:	0800a279 	.word	0x0800a279

08001f38 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8001f3c:	2009      	movs	r0, #9
 8001f3e:	f002 fd25 	bl	800498c <putchar>

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 8001f42:	2408      	movs	r4, #8
  printf("\t");
  for(; p->name != NULL; p++) {
 8001f44:	6828      	ldr	r0, [r5, #0]
 8001f46:	b1a0      	cbz	r0, 8001f72 <DecodePrintPeripherals+0x3a>
    col += printf("%s",Uncompress(p->name));
 8001f48:	f7ff fee8 	bl	8001d1c <Uncompress>
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <DecodePrintPeripherals+0x3c>)
 8001f50:	f002 fd08 	bl	8004964 <printf>
    if((p+1)->name != NULL) {
 8001f54:	692b      	ldr	r3, [r5, #16]
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8001f56:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8001f58:	b14b      	cbz	r3, 8001f6e <DecodePrintPeripherals+0x36>
      col += printf(", ");
 8001f5a:	4807      	ldr	r0, [pc, #28]	; (8001f78 <DecodePrintPeripherals+0x40>)
 8001f5c:	f002 fd02 	bl	8004964 <printf>
 8001f60:	4404      	add	r4, r0
      if(col > 70) {
 8001f62:	2c46      	cmp	r4, #70	; 0x46
 8001f64:	d903      	bls.n	8001f6e <DecodePrintPeripherals+0x36>
	col = 8;
	printf("\n\t");
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <DecodePrintPeripherals+0x44>)
 8001f68:	f002 fcfc 	bl	8004964 <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8001f6c:	2408      	movs	r4, #8
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
 8001f6e:	3510      	adds	r5, #16
 8001f70:	e7e8      	b.n	8001f44 <DecodePrintPeripherals+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	0800a1f3 	.word	0x0800a1f3
 8001f78:	0800a212 	.word	0x0800a212
 8001f7c:	0800a2a1 	.word	0x0800a2a1

08001f80 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001f84:	2009      	movs	r0, #9
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001f86:	460d      	mov	r5, r1
  uint8_t col;
  col = 8;
  printf("\t");
 8001f88:	f002 fd00 	bl	800498c <putchar>
 8001f8c:	3d01      	subs	r5, #1
 8001f8e:	3610      	adds	r6, #16
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
  uint8_t col;
  col = 8;
 8001f90:	2408      	movs	r4, #8
  printf("\t");
  while(count--) {
 8001f92:	1c6b      	adds	r3, r5, #1
 8001f94:	d018      	beq.n	8001fc8 <DecodePrintRegisters+0x48>
    col += printf("%s",Uncompress(r->name));
 8001f96:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8001f9a:	f7ff febf 	bl	8001d1c <Uncompress>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	480a      	ldr	r0, [pc, #40]	; (8001fcc <DecodePrintRegisters+0x4c>)
 8001fa2:	f002 fcdf 	bl	8004964 <printf>
 8001fa6:	4420      	add	r0, r4
 8001fa8:	b2c4      	uxtb	r4, r0
    if(count) {
 8001faa:	b155      	cbz	r5, 8001fc2 <DecodePrintRegisters+0x42>
      col += printf(", ");
 8001fac:	4808      	ldr	r0, [pc, #32]	; (8001fd0 <DecodePrintRegisters+0x50>)
 8001fae:	f002 fcd9 	bl	8004964 <printf>
 8001fb2:	4420      	add	r0, r4
 8001fb4:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8001fb6:	2c46      	cmp	r4, #70	; 0x46
 8001fb8:	d903      	bls.n	8001fc2 <DecodePrintRegisters+0x42>
	col = 8;
	printf("\n\t");
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <DecodePrintRegisters+0x54>)
 8001fbc:	f002 fcd2 	bl	8004964 <printf>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
    if(count) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8001fc0:	2408      	movs	r4, #8
 8001fc2:	3d01      	subs	r5, #1
 8001fc4:	3610      	adds	r6, #16
 8001fc6:	e7e4      	b.n	8001f92 <DecodePrintRegisters+0x12>
	printf("\n\t");
      }
    }
    r++;
  }
}
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
 8001fca:	bf00      	nop
 8001fcc:	0800a1f3 	.word	0x0800a1f3
 8001fd0:	0800a212 	.word	0x0800a212
 8001fd4:	0800a2a1 	.word	0x0800a2a1

08001fd8 <CmdDecode>:

void CmdDecode(int mode)
{
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8001fda:	2802      	cmp	r0, #2
    r++;
  }
}

void CmdDecode(int mode)
{
 8001fdc:	b085      	sub	sp, #20
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8001fde:	d131      	bne.n	8002044 <CmdDecode+0x6c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8001fe0:	a803      	add	r0, sp, #12
 8001fe2:	f7ff fce5 	bl	80019b0 <fetch_string_arg>
    if(rc) {
 8001fe6:	b138      	cbz	r0, 8001ff8 <CmdDecode+0x20>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8001fe8:	4888      	ldr	r0, [pc, #544]	; (800220c <CmdDecode+0x234>)
 8001fea:	f002 fd0b 	bl	8004a04 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8001fee:	4888      	ldr	r0, [pc, #544]	; (8002210 <CmdDecode+0x238>)
 8001ff0:	f7ff ffa2 	bl	8001f38 <DecodePrintPeripherals>
      printf("\n\n"
 8001ff4:	4887      	ldr	r0, [pc, #540]	; (8002214 <CmdDecode+0x23c>)
 8001ff6:	e022      	b.n	800203e <CmdDecode+0x66>
 8001ff8:	4c85      	ldr	r4, [pc, #532]	; (8002210 <CmdDecode+0x238>)
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8001ffa:	6820      	ldr	r0, [r4, #0]
 8001ffc:	b948      	cbnz	r0, 8002012 <CmdDecode+0x3a>
	p++;
      }

      if(p->name == NULL) {
 8001ffe:	6820      	ldr	r0, [r4, #0]
 8002000:	b990      	cbnz	r0, 8002028 <CmdDecode+0x50>
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8002002:	9903      	ldr	r1, [sp, #12]
 8002004:	4884      	ldr	r0, [pc, #528]	; (8002218 <CmdDecode+0x240>)
 8002006:	f002 fcad 	bl	8004964 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
 800200a:	4881      	ldr	r0, [pc, #516]	; (8002210 <CmdDecode+0x238>)
 800200c:	f7ff ff94 	bl	8001f38 <DecodePrintPeripherals>
	return;
 8002010:	e0f9      	b.n	8002206 <CmdDecode+0x22e>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002012:	9d03      	ldr	r5, [sp, #12]
 8002014:	f7ff fe82 	bl	8001d1c <Uncompress>
 8002018:	4601      	mov	r1, r0
 800201a:	4628      	mov	r0, r5
 800201c:	f002 fcfa 	bl	8004a14 <strcasecmp>
 8002020:	2800      	cmp	r0, #0
 8002022:	d0ec      	beq.n	8001ffe <CmdDecode+0x26>
	p++;
 8002024:	3410      	adds	r4, #16
 8002026:	e7e8      	b.n	8001ffa <CmdDecode+0x22>
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
	return;
      }
      printf("Valid registers for peripheral %s:\n"
 8002028:	f7ff fe78 	bl	8001d1c <Uncompress>
 800202c:	4601      	mov	r1, r0
 800202e:	487b      	ldr	r0, [pc, #492]	; (800221c <CmdDecode+0x244>)
 8002030:	f002 fc98 	bl	8004964 <printf>
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
 8002034:	68a0      	ldr	r0, [r4, #8]
 8002036:	89a1      	ldrh	r1, [r4, #12]
 8002038:	f7ff ffa2 	bl	8001f80 <DecodePrintRegisters>
      printf("\n\n");
 800203c:	4878      	ldr	r0, [pc, #480]	; (8002220 <CmdDecode+0x248>)
 800203e:	f002 fce1 	bl	8004a04 <puts>
 8002042:	e0e0      	b.n	8002206 <CmdDecode+0x22e>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8002044:	4668      	mov	r0, sp
 8002046:	f7ff fcb3 	bl	80019b0 <fetch_string_arg>
  if(rc) {
 800204a:	b118      	cbz	r0, 8002054 <CmdDecode+0x7c>
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 800204c:	4875      	ldr	r0, [pc, #468]	; (8002224 <CmdDecode+0x24c>)
 800204e:	f002 fcd9 	bl	8004a04 <puts>
 8002052:	e014      	b.n	800207e <CmdDecode+0xa6>
 8002054:	4c6e      	ldr	r4, [pc, #440]	; (8002210 <CmdDecode+0x238>)
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002056:	6820      	ldr	r0, [r4, #0]
 8002058:	b930      	cbnz	r0, 8002068 <CmdDecode+0x90>
    p++;
  }

  if(p->name == NULL) {
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	b99b      	cbnz	r3, 8002086 <CmdDecode+0xae>
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 800205e:	9900      	ldr	r1, [sp, #0]
 8002060:	4871      	ldr	r0, [pc, #452]	; (8002228 <CmdDecode+0x250>)
 8002062:	f002 fc7f 	bl	8004964 <printf>
 8002066:	e00a      	b.n	800207e <CmdDecode+0xa6>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002068:	9d00      	ldr	r5, [sp, #0]
 800206a:	f7ff fe57 	bl	8001d1c <Uncompress>
 800206e:	4601      	mov	r1, r0
 8002070:	4628      	mov	r0, r5
 8002072:	f002 fccf 	bl	8004a14 <strcasecmp>
 8002076:	2800      	cmp	r0, #0
 8002078:	d0ef      	beq.n	800205a <CmdDecode+0x82>
    p++;
 800207a:	3410      	adds	r4, #16
 800207c:	e7eb      	b.n	8002056 <CmdDecode+0x7e>

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
	   pname);
    DecodePrintPeripherals(Peripherals);
 800207e:	4864      	ldr	r0, [pc, #400]	; (8002210 <CmdDecode+0x238>)
 8002080:	f7ff ff5a 	bl	8001f38 <DecodePrintPeripherals>
 8002084:	e7da      	b.n	800203c <CmdDecode+0x64>
    printf("\n\n");
    return;
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8002086:	a801      	add	r0, sp, #4
 8002088:	f7ff fc92 	bl	80019b0 <fetch_string_arg>
  if(rc) {
 800208c:	b110      	cbz	r0, 8002094 <CmdDecode+0xbc>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 800208e:	4620      	mov	r0, r4
 8002090:	2100      	movs	r1, #0
 8002092:	e017      	b.n	80020c4 <CmdDecode+0xec>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8002094:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 8002096:	89a7      	ldrh	r7, [r4, #12]
 8002098:	9e01      	ldr	r6, [sp, #4]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 800209a:	b157      	cbz	r7, 80020b2 <CmdDecode+0xda>
 800209c:	6828      	ldr	r0, [r5, #0]
 800209e:	f7ff fe3d 	bl	8001d1c <Uncompress>
 80020a2:	4601      	mov	r1, r0
 80020a4:	4630      	mov	r0, r6
 80020a6:	f002 fcb5 	bl	8004a14 <strcasecmp>
 80020aa:	3f01      	subs	r7, #1
 80020ac:	b168      	cbz	r0, 80020ca <CmdDecode+0xf2>
    r++;
 80020ae:	3510      	adds	r5, #16
 80020b0:	e7f2      	b.n	8002098 <CmdDecode+0xc0>
  }

  if(i == -1) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 80020b2:	4630      	mov	r0, r6
 80020b4:	495d      	ldr	r1, [pc, #372]	; (800222c <CmdDecode+0x254>)
 80020b6:	f002 fcad 	bl	8004a14 <strcasecmp>
 80020ba:	2800      	cmp	r0, #0
 80020bc:	f040 809a 	bne.w	80021f4 <CmdDecode+0x21c>
      DecodePeripheral(p,1);
 80020c0:	4620      	mov	r0, r4
 80020c2:	2101      	movs	r1, #1
 80020c4:	f7ff ff10 	bl	8001ee8 <DecodePeripheral>
      return;
 80020c8:	e09d      	b.n	8002206 <CmdDecode+0x22e>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 80020ca:	a802      	add	r0, sp, #8
 80020cc:	f7ff fc70 	bl	80019b0 <fetch_string_arg>
  if(rc == 0) {
 80020d0:	2800      	cmp	r0, #0
 80020d2:	f040 8083 	bne.w	80021dc <CmdDecode+0x204>
    /* if the user says 'val', decode the value given, as if it came
     * from the named register.
     */
    if(strcasecmp(fname,"val") == 0) {
 80020d6:	9802      	ldr	r0, [sp, #8]
 80020d8:	4955      	ldr	r1, [pc, #340]	; (8002230 <CmdDecode+0x258>)
 80020da:	f002 fc9b 	bl	8004a14 <strcasecmp>
 80020de:	b948      	cbnz	r0, 80020f4 <CmdDecode+0x11c>
      rc = fetch_uint32_arg(&val);
 80020e0:	a803      	add	r0, sp, #12
 80020e2:	f7ff fc51 	bl	8001988 <fetch_uint32_arg>
      if(rc) {
 80020e6:	b108      	cbz	r0, 80020ec <CmdDecode+0x114>
	printf("Missing value to use in decode\n");
 80020e8:	4852      	ldr	r0, [pc, #328]	; (8002234 <CmdDecode+0x25c>)
 80020ea:	e7a8      	b.n	800203e <CmdDecode+0x66>
	return;
      }
      DecodeRegister(r,p->base,val,1);
 80020ec:	4628      	mov	r0, r5
 80020ee:	6861      	ldr	r1, [r4, #4]
 80020f0:	9a03      	ldr	r2, [sp, #12]
 80020f2:	e07b      	b.n	80021ec <CmdDecode+0x214>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
 80020f4:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 80020f6:	6830      	ldr	r0, [r6, #0]
 80020f8:	b910      	cbnz	r0, 8002100 <CmdDecode+0x128>
      f++;
    }
    if(f->name != NULL) {
 80020fa:	6837      	ldr	r7, [r6, #0]
 80020fc:	b95f      	cbnz	r7, 8002116 <CmdDecode+0x13e>
 80020fe:	e046      	b.n	800218e <CmdDecode+0x1b6>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8002100:	9f02      	ldr	r7, [sp, #8]
 8002102:	f7ff fe0b 	bl	8001d1c <Uncompress>
 8002106:	4601      	mov	r1, r0
 8002108:	4638      	mov	r0, r7
 800210a:	f002 fc83 	bl	8004a14 <strcasecmp>
 800210e:	2800      	cmp	r0, #0
 8002110:	d0f3      	beq.n	80020fa <CmdDecode+0x122>
      f++;
 8002112:	3608      	adds	r6, #8
 8002114:	e7ef      	b.n	80020f6 <CmdDecode+0x11e>
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8002116:	a803      	add	r0, sp, #12
 8002118:	f7ff fc36 	bl	8001988 <fetch_uint32_arg>
      if(rc) {
 800211c:	b128      	cbz	r0, 800212a <CmdDecode+0x152>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 800211e:	6828      	ldr	r0, [r5, #0]
 8002120:	f7ff fdfc 	bl	8001d1c <Uncompress>
 8002124:	4601      	mov	r1, r0
 8002126:	4844      	ldr	r0, [pc, #272]	; (8002238 <CmdDecode+0x260>)
 8002128:	e040      	b.n	80021ac <CmdDecode+0x1d4>
	       Uncompress(r->name));
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 800212a:	4629      	mov	r1, r5
 800212c:	4620      	mov	r0, r4
 800212e:	f7ff fe31 	bl	8001d94 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 8002132:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 8002134:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8002138:	9903      	ldr	r1, [sp, #12]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 800213a:	2301      	movs	r3, #1
 800213c:	4093      	lsls	r3, r2

      oval = (t >> f->offset) & m; /* Save old value */
 800213e:	fa20 f70e 	lsr.w	r7, r0, lr
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8002142:	3b01      	subs	r3, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8002144:	fa03 f20e 	lsl.w	r2, r3, lr
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 8002148:	401f      	ands	r7, r3

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 800214a:	400b      	ands	r3, r1
 800214c:	fa03 f30e 	lsl.w	r3, r3, lr
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8002150:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 8002154:	431a      	orrs	r2, r3
 8002156:	4629      	mov	r1, r5
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff fe47 	bl	8001dec <DecodeWriteRegister>
      printf("%s.",
 800215e:	6820      	ldr	r0, [r4, #0]
 8002160:	f7ff fddc 	bl	8001d1c <Uncompress>
 8002164:	4601      	mov	r1, r0
 8002166:	4835      	ldr	r0, [pc, #212]	; (800223c <CmdDecode+0x264>)
 8002168:	f002 fbfc 	bl	8004964 <printf>
	     Uncompress(p->name));
      printf("%s.",
 800216c:	6828      	ldr	r0, [r5, #0]
 800216e:	f7ff fdd5 	bl	8001d1c <Uncompress>
 8002172:	4601      	mov	r1, r0
 8002174:	4831      	ldr	r0, [pc, #196]	; (800223c <CmdDecode+0x264>)
 8002176:	f002 fbf5 	bl	8004964 <printf>
	     Uncompress(r->name));
      printf("%s (%d) -> (%d)\n",
 800217a:	6830      	ldr	r0, [r6, #0]
 800217c:	f7ff fdce 	bl	8001d1c <Uncompress>
 8002180:	463a      	mov	r2, r7
 8002182:	4601      	mov	r1, r0
 8002184:	9b03      	ldr	r3, [sp, #12]
 8002186:	482e      	ldr	r0, [pc, #184]	; (8002240 <CmdDecode+0x268>)
 8002188:	f002 fbec 	bl	8004964 <printf>
	     Uncompress(f->name),
	     (unsigned)oval, (unsigned)val);
      return;
 800218c:	e03b      	b.n	8002206 <CmdDecode+0x22e>

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 800218e:	f002 fb57 	bl	8004840 <__errno>
    val = strtoul(fname,NULL,0);
 8002192:	4639      	mov	r1, r7
      return;

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 8002194:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002196:	463a      	mov	r2, r7
 8002198:	9802      	ldr	r0, [sp, #8]
 800219a:	f002 fdb7 	bl	8004d0c <strtoul>
 800219e:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 80021a0:	f002 fb4e 	bl	8004840 <__errno>
 80021a4:	6803      	ldr	r3, [r0, #0]
 80021a6:	b123      	cbz	r3, 80021b2 <CmdDecode+0x1da>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 80021a8:	4826      	ldr	r0, [pc, #152]	; (8002244 <CmdDecode+0x26c>)
 80021aa:	9902      	ldr	r1, [sp, #8]
 80021ac:	f002 fbda 	bl	8004964 <printf>
	     fname);
      return;
 80021b0:	e029      	b.n	8002206 <CmdDecode+0x22e>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 80021b2:	9a03      	ldr	r2, [sp, #12]
 80021b4:	4629      	mov	r1, r5
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff fe18 	bl	8001dec <DecodeWriteRegister>
    printf("%s.",
 80021bc:	6820      	ldr	r0, [r4, #0]
 80021be:	f7ff fdad 	bl	8001d1c <Uncompress>
 80021c2:	4601      	mov	r1, r0
 80021c4:	481d      	ldr	r0, [pc, #116]	; (800223c <CmdDecode+0x264>)
 80021c6:	f002 fbcd 	bl	8004964 <printf>
	   Uncompress(p->name));
    printf("%s = 0x%08x\n",
 80021ca:	6828      	ldr	r0, [r5, #0]
 80021cc:	f7ff fda6 	bl	8001d1c <Uncompress>
 80021d0:	9a03      	ldr	r2, [sp, #12]
 80021d2:	4601      	mov	r1, r0
 80021d4:	481c      	ldr	r0, [pc, #112]	; (8002248 <CmdDecode+0x270>)
 80021d6:	f002 fbc5 	bl	8004964 <printf>
	   Uncompress(r->name),
	   (unsigned)val);
    return;
 80021da:	e014      	b.n	8002206 <CmdDecode+0x22e>

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 80021dc:	4629      	mov	r1, r5
 80021de:	4620      	mov	r0, r4
 80021e0:	f7ff fdd8 	bl	8001d94 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80021e4:	6861      	ldr	r1, [r4, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 80021e6:	9003      	str	r0, [sp, #12]
 80021e8:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 80021ea:	4628      	mov	r0, r5
 80021ec:	2301      	movs	r3, #1
 80021ee:	f7ff fe4d 	bl	8001e8c <DecodeRegister>

  return;
 80021f2:	e008      	b.n	8002206 <CmdDecode+0x22e>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	f7ff fd91 	bl	8001d1c <Uncompress>
 80021fa:	4631      	mov	r1, r6
 80021fc:	4602      	mov	r2, r0
 80021fe:	4813      	ldr	r0, [pc, #76]	; (800224c <CmdDecode+0x274>)
 8002200:	f002 fbb0 	bl	8004964 <printf>
 8002204:	e716      	b.n	8002034 <CmdDecode+0x5c>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 8002206:	b005      	add	sp, #20
 8002208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220a:	bf00      	nop
 800220c:	0800a2a4 	.word	0x0800a2a4
 8002210:	08013e38 	.word	0x08013e38
 8002214:	0800a4b7 	.word	0x0800a4b7
 8002218:	0800a50c 	.word	0x0800a50c
 800221c:	0800a547 	.word	0x0800a547
 8002220:	0800a5d5 	.word	0x0800a5d5
 8002224:	0800a56c 	.word	0x0800a56c
 8002228:	0800a59b 	.word	0x0800a59b
 800222c:	0800a6a2 	.word	0x0800a6a2
 8002230:	0800a614 	.word	0x0800a614
 8002234:	0800a618 	.word	0x0800a618
 8002238:	0800a637 	.word	0x0800a637
 800223c:	0800a662 	.word	0x0800a662
 8002240:	0800a666 	.word	0x0800a666
 8002244:	0800a677 	.word	0x0800a677
 8002248:	0800a695 	.word	0x0800a695
 800224c:	0800a5d7 	.word	0x0800a5d7

08002250 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002250:	4915      	ldr	r1, [pc, #84]	; (80022a8 <SystemInit+0x58>)
 8002252:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <SystemInit+0x5c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002268:	6858      	ldr	r0, [r3, #4]
 800226a:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <SystemInit+0x60>)
 800226c:	4002      	ands	r2, r0
 800226e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002276:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800227a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002282:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800228a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800228c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228e:	f022 020f 	bic.w	r2, r2, #15
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002294:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <SystemInit+0x64>)
 8002298:	4002      	ands	r2, r0
 800229a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022a4:	608b      	str	r3, [r1, #8]
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00
 80022ac:	40021000 	.word	0x40021000
 80022b0:	f87fc00c 	.word	0xf87fc00c
 80022b4:	ff00fccc 	.word	0xff00fccc

080022b8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ba:	6803      	ldr	r3, [r0, #0]
 80022bc:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022be:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c0:	d404      	bmi.n	80022cc <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	079f      	lsls	r7, r3, #30
 80022c6:	f100 80c6 	bmi.w	8002456 <HAL_RCC_OscConfig+0x19e>
 80022ca:	e157      	b.n	800257c <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80022cc:	4dc1      	ldr	r5, [pc, #772]	; (80025d4 <HAL_RCC_OscConfig+0x31c>)
 80022ce:	686b      	ldr	r3, [r5, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d007      	beq.n	80022e8 <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d8:	686b      	ldr	r3, [r5, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d127      	bne.n	8002332 <HAL_RCC_OscConfig+0x7a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e2:	686b      	ldr	r3, [r5, #4]
 80022e4:	03de      	lsls	r6, r3, #15
 80022e6:	d524      	bpl.n	8002332 <HAL_RCC_OscConfig+0x7a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ec:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80022f4:	f043 0320 	orr.w	r3, r3, #32
 80022f8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_OscConfig+0x4c>
 8002300:	6829      	ldr	r1, [r5, #0]
 8002302:	e004      	b.n	800230e <HAL_RCC_OscConfig+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002308:	fab2 f282 	clz	r2, r2
 800230c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002312:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	2201      	movs	r2, #1
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	420b      	tst	r3, r1
 8002326:	d0cc      	beq.n	80022c2 <HAL_RCC_OscConfig+0xa>
 8002328:	6863      	ldr	r3, [r4, #4]
 800232a:	4293      	cmp	r3, r2
 800232c:	d0c9      	beq.n	80022c2 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
 8002330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8002332:	4ea9      	ldr	r6, [pc, #676]	; (80025d8 <HAL_RCC_OscConfig+0x320>)
 8002334:	2300      	movs	r3, #0
 8002336:	7033      	strb	r3, [r6, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002338:	f000 fc8e 	bl	8002c58 <HAL_GetTick>
 800233c:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002342:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002346:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	f043 0320 	orr.w	r3, r3, #32
 800234e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0xa2>
 8002356:	6829      	ldr	r1, [r5, #0]
 8002358:	e004      	b.n	8002364 <HAL_RCC_OscConfig+0xac>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002368:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	2201      	movs	r2, #1
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	420b      	tst	r3, r1
 800237c:	d008      	beq.n	8002390 <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800237e:	f000 fc6b 	bl	8002c58 <HAL_GetTick>
 8002382:	f241 3388 	movw	r3, #5000	; 0x1388
 8002386:	1bc0      	subs	r0, r0, r7
 8002388:	4298      	cmp	r0, r3
 800238a:	d9d8      	bls.n	800233e <HAL_RCC_OscConfig+0x86>
        {
          return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
 800238e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002390:	7923      	ldrb	r3, [r4, #4]
 8002392:	7033      	strb	r3, [r6, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002394:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002396:	f023 020f 	bic.w	r2, r3, #15
 800239a:	68a3      	ldr	r3, [r4, #8]
 800239c:	4313      	orrs	r3, r2
 800239e:	62eb      	str	r3, [r5, #44]	; 0x2c

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 80023a0:	6863      	ldr	r3, [r4, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d12b      	bne.n	80023fe <HAL_RCC_OscConfig+0x146>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80023a6:	f000 fc57 	bl	8002c58 <HAL_GetTick>
 80023aa:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023b0:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x110>
 80023c4:	6829      	ldr	r1, [r5, #0]
 80023c6:	e004      	b.n	80023d2 <HAL_RCC_OscConfig+0x11a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d6:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	2201      	movs	r2, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	420b      	tst	r3, r1
 80023ea:	f47f af6a 	bne.w	80022c2 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80023ee:	f000 fc33 	bl	8002c58 <HAL_GetTick>
 80023f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80023f6:	1b80      	subs	r0, r0, r6
 80023f8:	4298      	cmp	r0, r3
 80023fa:	d9d7      	bls.n	80023ac <HAL_RCC_OscConfig+0xf4>
 80023fc:	e7c6      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fe:	f000 fc2b 	bl	8002c58 <HAL_GetTick>
 8002402:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002408:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800240c:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002410:	f043 0320 	orr.w	r3, r3, #32
 8002414:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x168>
 800241c:	6829      	ldr	r1, [r5, #0]
 800241e:	e004      	b.n	800242a <HAL_RCC_OscConfig+0x172>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002424:	fab2 f282 	clz	r2, r2
 8002428:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	2201      	movs	r2, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	420b      	tst	r3, r1
 8002442:	f43f af3e 	beq.w	80022c2 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8002446:	f000 fc07 	bl	8002c58 <HAL_GetTick>
 800244a:	f241 3388 	movw	r3, #5000	; 0x1388
 800244e:	1b80      	subs	r0, r0, r6
 8002450:	4298      	cmp	r0, r3
 8002452:	d9d7      	bls.n	8002404 <HAL_RCC_OscConfig+0x14c>
 8002454:	e79a      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002456:	4d5f      	ldr	r5, [pc, #380]	; (80025d4 <HAL_RCC_OscConfig+0x31c>)
 8002458:	686b      	ldr	r3, [r5, #4]
 800245a:	f013 0f0c 	tst.w	r3, #12
 800245e:	d007      	beq.n	8002470 <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002460:	686b      	ldr	r3, [r5, #4]
 8002462:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002466:	2b08      	cmp	r3, #8
 8002468:	d125      	bne.n	80024b6 <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800246a:	686b      	ldr	r3, [r5, #4]
 800246c:	03d8      	lsls	r0, r3, #15
 800246e:	d422      	bmi.n	80024b6 <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	2202      	movs	r2, #2
 8002472:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002476:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_RCC_OscConfig+0x1d2>
 8002486:	6829      	ldr	r1, [r5, #0]
 8002488:	e004      	b.n	8002494 <HAL_RCC_OscConfig+0x1dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800248e:	fab2 f282 	clz	r2, r2
 8002492:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	2302      	movs	r3, #2
 8002496:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	2201      	movs	r2, #1
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	420b      	tst	r3, r1
 80024aa:	d030      	beq.n	800250e <HAL_RCC_OscConfig+0x256>
 80024ac:	6923      	ldr	r3, [r4, #16]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	f47f af3d 	bne.w	800232e <HAL_RCC_OscConfig+0x76>
 80024b4:	e02b      	b.n	800250e <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b6:	6922      	ldr	r2, [r4, #16]
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <HAL_RCC_OscConfig+0x324>)
 80024ba:	b3ba      	cbz	r2, 800252c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c0:	f000 fbca 	bl	8002c58 <HAL_GetTick>
 80024c4:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	2202      	movs	r2, #2
 80024c8:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	f043 0320 	orr.w	r3, r3, #32
 80024d4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_OscConfig+0x228>
 80024dc:	6829      	ldr	r1, [r5, #0]
 80024de:	e004      	b.n	80024ea <HAL_RCC_OscConfig+0x232>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	fab2 f282 	clz	r2, r2
 80024e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	2302      	movs	r3, #2
 80024ec:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	2201      	movs	r2, #1
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	420b      	tst	r3, r1
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8002502:	f000 fba9 	bl	8002c58 <HAL_GetTick>
 8002506:	1b80      	subs	r0, r0, r6
 8002508:	2864      	cmp	r0, #100	; 0x64
 800250a:	d9dc      	bls.n	80024c6 <HAL_RCC_OscConfig+0x20e>
 800250c:	e73e      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250e:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	23f8      	movs	r3, #248	; 0xf8
 8002512:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	6961      	ldr	r1, [r4, #20]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4099      	lsls	r1, r3
 8002520:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002524:	ea41 0302 	orr.w	r3, r1, r2
 8002528:	602b      	str	r3, [r5, #0]
 800252a:	e027      	b.n	800257c <HAL_RCC_OscConfig+0x2c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252e:	f000 fb93 	bl	8002c58 <HAL_GetTick>
 8002532:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	2202      	movs	r2, #2
 8002536:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800253a:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	f043 0320 	orr.w	r3, r3, #32
 8002542:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x296>
 800254a:	6829      	ldr	r1, [r5, #0]
 800254c:	e004      	b.n	8002558 <HAL_RCC_OscConfig+0x2a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	2302      	movs	r3, #2
 800255a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	2201      	movs	r2, #1
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	420b      	tst	r3, r1
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f000 fb72 	bl	8002c58 <HAL_GetTick>
 8002574:	1b80      	subs	r0, r0, r6
 8002576:	2864      	cmp	r0, #100	; 0x64
 8002578:	d9dc      	bls.n	8002534 <HAL_RCC_OscConfig+0x27c>
 800257a:	e707      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	0719      	lsls	r1, r3, #28
 8002580:	d404      	bmi.n	800258c <HAL_RCC_OscConfig+0x2d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	075a      	lsls	r2, r3, #29
 8002586:	f140 80a7 	bpl.w	80026d8 <HAL_RCC_OscConfig+0x420>
 800258a:	e04a      	b.n	8002622 <HAL_RCC_OscConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258c:	69a2      	ldr	r2, [r4, #24]
 800258e:	4d11      	ldr	r5, [pc, #68]	; (80025d4 <HAL_RCC_OscConfig+0x31c>)
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_OscConfig+0x328>)
 8002592:	b33a      	cbz	r2, 80025e4 <HAL_RCC_OscConfig+0x32c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002598:	f000 fb5e 	bl	8002c58 <HAL_GetTick>
 800259c:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	2302      	movs	r3, #2
 80025a0:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	2201      	movs	r2, #1
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	420b      	tst	r3, r1
 80025c6:	d1dc      	bne.n	8002582 <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f000 fb46 	bl	8002c58 <HAL_GetTick>
 80025cc:	1b80      	subs	r0, r0, r6
 80025ce:	2864      	cmp	r0, #100	; 0x64
 80025d0:	d9e5      	bls.n	800259e <HAL_RCC_OscConfig+0x2e6>
 80025d2:	e6db      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40021002 	.word	0x40021002
 80025dc:	42420000 	.word	0x42420000
 80025e0:	42420480 	.word	0x42420480
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e4:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80025e6:	f000 fb37 	bl	8002c58 <HAL_GetTick>
 80025ea:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	2302      	movs	r3, #2
 80025ee:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fe:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	2201      	movs	r2, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	420b      	tst	r3, r1
 8002614:	d0b5      	beq.n	8002582 <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8002616:	f000 fb1f 	bl	8002c58 <HAL_GetTick>
 800261a:	1b80      	subs	r0, r0, r6
 800261c:	2864      	cmp	r0, #100	; 0x64
 800261e:	d9e5      	bls.n	80025ec <HAL_RCC_OscConfig+0x334>
 8002620:	e6b4      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8002622:	4d97      	ldr	r5, [pc, #604]	; (8002880 <HAL_RCC_OscConfig+0x5c8>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002624:	4a97      	ldr	r2, [pc, #604]	; (8002884 <HAL_RCC_OscConfig+0x5cc>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8002626:	69eb      	ldr	r3, [r5, #28]
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	61eb      	str	r3, [r5, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	6813      	ldr	r3, [r2, #0]
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002636:	f000 fb0f 	bl	8002c58 <HAL_GetTick>
 800263a:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800263c:	4b91      	ldr	r3, [pc, #580]	; (8002884 <HAL_RCC_OscConfig+0x5cc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	05db      	lsls	r3, r3, #23
 8002642:	d54d      	bpl.n	80026e0 <HAL_RCC_OscConfig+0x428>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002644:	6a2b      	ldr	r3, [r5, #32]
 8002646:	f023 0305 	bic.w	r3, r3, #5
 800264a:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 800264c:	f000 fb04 	bl	8002c58 <HAL_GetTick>
 8002650:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	2302      	movs	r3, #2
 8002654:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002658:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002660:	fab2 f282 	clz	r2, r2
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002668:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800266c:	429a      	cmp	r2, r3
 800266e:	bf0c      	ite	eq
 8002670:	6a29      	ldreq	r1, [r5, #32]
 8002672:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	2201      	movs	r2, #1
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	420b      	tst	r3, r1
 8002688:	d130      	bne.n	80026ec <HAL_RCC_OscConfig+0x434>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268a:	6a2b      	ldr	r3, [r5, #32]
 800268c:	68e2      	ldr	r2, [r4, #12]
 800268e:	f023 0305 	bic.w	r3, r3, #5
 8002692:	4313      	orrs	r3, r2
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002694:	2a01      	cmp	r2, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002696:	622b      	str	r3, [r5, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002698:	d138      	bne.n	800270c <HAL_RCC_OscConfig+0x454>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800269a:	f000 fadd 	bl	8002c58 <HAL_GetTick>
 800269e:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	2302      	movs	r3, #2
 80026a2:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b6:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80026ba:	429a      	cmp	r2, r3
 80026bc:	bf0c      	ite	eq
 80026be:	6a29      	ldreq	r1, [r5, #32]
 80026c0:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	2201      	movs	r2, #1
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	420b      	tst	r3, r1
 80026d6:	d011      	beq.n	80026fc <HAL_RCC_OscConfig+0x444>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d8:	69e2      	ldr	r2, [r4, #28]
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d13d      	bne.n	800275a <HAL_RCC_OscConfig+0x4a2>
 80026de:	e08b      	b.n	80027f8 <HAL_RCC_OscConfig+0x540>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 80026e0:	f000 faba 	bl	8002c58 <HAL_GetTick>
 80026e4:	1b80      	subs	r0, r0, r6
 80026e6:	2864      	cmp	r0, #100	; 0x64
 80026e8:	d9a8      	bls.n	800263c <HAL_RCC_OscConfig+0x384>
 80026ea:	e64f      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80026ec:	f000 fab4 	bl	8002c58 <HAL_GetTick>
 80026f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80026f4:	1b80      	subs	r0, r0, r6
 80026f6:	4298      	cmp	r0, r3
 80026f8:	d9ab      	bls.n	8002652 <HAL_RCC_OscConfig+0x39a>
 80026fa:	e647      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80026fc:	f000 faac 	bl	8002c58 <HAL_GetTick>
 8002700:	f241 3388 	movw	r3, #5000	; 0x1388
 8002704:	1b80      	subs	r0, r0, r6
 8002706:	4298      	cmp	r0, r3
 8002708:	d9ca      	bls.n	80026a0 <HAL_RCC_OscConfig+0x3e8>
 800270a:	e63f      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800270c:	f000 faa4 	bl	8002c58 <HAL_GetTick>
 8002710:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	2302      	movs	r3, #2
 8002714:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002718:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002720:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002728:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800272c:	429a      	cmp	r2, r3
 800272e:	bf0c      	ite	eq
 8002730:	6a29      	ldreq	r1, [r5, #32]
 8002732:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	2201      	movs	r2, #1
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	420b      	tst	r3, r1
 8002748:	d0c6      	beq.n	80026d8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800274a:	f000 fa85 	bl	8002c58 <HAL_GetTick>
 800274e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002752:	1b80      	subs	r0, r0, r6
 8002754:	4298      	cmp	r0, r3
 8002756:	d9dc      	bls.n	8002712 <HAL_RCC_OscConfig+0x45a>
 8002758:	e618      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800275a:	4d49      	ldr	r5, [pc, #292]	; (8002880 <HAL_RCC_OscConfig+0x5c8>)
 800275c:	686b      	ldr	r3, [r5, #4]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	f43f ade3 	beq.w	800232e <HAL_RCC_OscConfig+0x76>
 8002768:	4e47      	ldr	r6, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x5d0>)
 800276a:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276c:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002770:	d15c      	bne.n	800282c <HAL_RCC_OscConfig+0x574>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002772:	f000 fa71 	bl	8002c58 <HAL_GetTick>
 8002776:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800277c:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002780:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	f043 0320 	orr.w	r3, r3, #32
 8002788:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d135      	bne.n	80027fc <HAL_RCC_OscConfig+0x544>
 8002790:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002796:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	2101      	movs	r1, #1
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	4213      	tst	r3, r2
 80027aa:	d12d      	bne.n	8002808 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ac:	6a20      	ldr	r0, [r4, #32]
 80027ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027b0:	686b      	ldr	r3, [r5, #4]
 80027b2:	4302      	orrs	r2, r0
 80027b4:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80027b8:	4313      	orrs	r3, r2
 80027ba:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027bc:	6031      	str	r1, [r6, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027be:	f000 fa4b 	bl	8002c58 <HAL_GetTick>
 80027c2:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c8:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d0:	f043 0320 	orr.w	r3, r3, #32
 80027d4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d11b      	bne.n	8002814 <HAL_RCC_OscConfig+0x55c>
 80027dc:	6829      	ldr	r1, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	420b      	tst	r3, r1
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0x568>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80027f8:	2000      	movs	r0, #0
 80027fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002800:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002804:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002806:	e7c4      	b.n	8002792 <HAL_RCC_OscConfig+0x4da>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f000 fa26 	bl	8002c58 <HAL_GetTick>
 800280c:	1bc0      	subs	r0, r0, r7
 800280e:	2864      	cmp	r0, #100	; 0x64
 8002810:	d9b2      	bls.n	8002778 <HAL_RCC_OscConfig+0x4c0>
 8002812:	e5bb      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002818:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800281e:	e7de      	b.n	80027de <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f000 fa1a 	bl	8002c58 <HAL_GetTick>
 8002824:	1b00      	subs	r0, r0, r4
 8002826:	2864      	cmp	r0, #100	; 0x64
 8002828:	d9cc      	bls.n	80027c4 <HAL_RCC_OscConfig+0x50c>
 800282a:	e5af      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 800282c:	f000 fa14 	bl	8002c58 <HAL_GetTick>
 8002830:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002836:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800283a:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	f043 0320 	orr.w	r3, r3, #32
 8002842:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x596>
 800284a:	6829      	ldr	r1, [r5, #0]
 800284c:	e004      	b.n	8002858 <HAL_RCC_OscConfig+0x5a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800285c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	2201      	movs	r2, #1
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	420b      	tst	r3, r1
 8002870:	d0c2      	beq.n	80027f8 <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f000 f9f1 	bl	8002c58 <HAL_GetTick>
 8002876:	1b00      	subs	r0, r0, r4
 8002878:	2864      	cmp	r0, #100	; 0x64
 800287a:	d9da      	bls.n	8002832 <HAL_RCC_OscConfig+0x57a>
 800287c:	e586      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	42420060 	.word	0x42420060

0800288c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800288c:	4ab0      	ldr	r2, [pc, #704]	; (8002b50 <HAL_RCC_ClockConfig+0x2c4>)
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	4299      	cmp	r1, r3
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	4604      	mov	r4, r0
 800289a:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800289c:	f240 80a9 	bls.w	80029f2 <HAL_RCC_ClockConfig+0x166>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	f023 0307 	bic.w	r3, r3, #7
 80028a6:	430b      	orrs	r3, r1
 80028a8:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	428b      	cmp	r3, r1
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 80028b4:	2001      	movs	r0, #1
 80028b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	6801      	ldr	r1, [r0, #0]
 80028ba:	078f      	lsls	r7, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	bf41      	itttt	mi
 80028be:	48a5      	ldrmi	r0, [pc, #660]	; (8002b54 <HAL_RCC_ClockConfig+0x2c8>)
 80028c0:	6843      	ldrmi	r3, [r0, #4]
 80028c2:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 80028c6:	68a3      	ldrmi	r3, [r4, #8]
 80028c8:	bf44      	itt	mi
 80028ca:	4313      	orrmi	r3, r2
 80028cc:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	07ce      	lsls	r6, r1, #31
 80028d0:	d40b      	bmi.n	80028ea <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d2:	6821      	ldr	r1, [r4, #0]
 80028d4:	074d      	lsls	r5, r1, #29
 80028d6:	f140 812b 	bpl.w	8002b30 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028da:	489e      	ldr	r0, [pc, #632]	; (8002b54 <HAL_RCC_ClockConfig+0x2c8>)
 80028dc:	6843      	ldr	r3, [r0, #4]
 80028de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e2:	68e3      	ldr	r3, [r4, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	6043      	str	r3, [r0, #4]
 80028e8:	e122      	b.n	8002b30 <HAL_RCC_ClockConfig+0x2a4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	6862      	ldr	r2, [r4, #4]
 80028ec:	4d99      	ldr	r5, [pc, #612]	; (8002b54 <HAL_RCC_ClockConfig+0x2c8>)
 80028ee:	2a01      	cmp	r2, #1
 80028f0:	d115      	bne.n	800291e <HAL_RCC_ClockConfig+0x92>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80028f6:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	f043 0320 	orr.w	r3, r3, #32
 8002902:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0x82>
 800290a:	6828      	ldr	r0, [r5, #0]
 800290c:	e004      	b.n	8002918 <HAL_RCC_ClockConfig+0x8c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002912:	fab1 f181 	clz	r1, r1
 8002916:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291c:	e02a      	b.n	8002974 <HAL_RCC_ClockConfig+0xe8>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291e:	2a02      	cmp	r2, #2
 8002920:	d115      	bne.n	800294e <HAL_RCC_ClockConfig+0xc2>
 8002922:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002926:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800292a:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xb2>
 800293a:	6828      	ldr	r0, [r5, #0]
 800293c:	e004      	b.n	8002948 <HAL_RCC_ClockConfig+0xbc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002942:	fab1 f181 	clz	r1, r1
 8002946:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294c:	e012      	b.n	8002974 <HAL_RCC_ClockConfig+0xe8>
 800294e:	2102      	movs	r1, #2
 8002950:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002954:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	f043 0320 	orr.w	r3, r3, #32
 800295c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0xdc>
 8002964:	6828      	ldr	r0, [r5, #0]
 8002966:	e004      	b.n	8002972 <HAL_RCC_ClockConfig+0xe6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800296c:	fab1 f181 	clz	r1, r1
 8002970:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	2302      	movs	r3, #2
 8002974:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	2101      	movs	r1, #1
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	4203      	tst	r3, r0
 8002988:	d094      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800298a:	686b      	ldr	r3, [r5, #4]
 800298c:	f023 0303 	bic.w	r3, r3, #3
 8002990:	431a      	orrs	r2, r3
 8002992:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002994:	f000 f960 	bl	8002c58 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002998:	6863      	ldr	r3, [r4, #4]
 800299a:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 800299c:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	d10d      	bne.n	80029bc <HAL_RCC_ClockConfig+0x130>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a0:	686b      	ldr	r3, [r5, #4]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d093      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f000 f955 	bl	8002c58 <HAL_GetTick>
 80029ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80029b2:	1b80      	subs	r0, r0, r6
 80029b4:	4298      	cmp	r0, r3
 80029b6:	d9f3      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x114>
          {
            return HAL_TIMEOUT;
 80029b8:	2003      	movs	r0, #3
 80029ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d113      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c0:	686b      	ldr	r3, [r5, #4]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d083      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ca:	f000 f945 	bl	8002c58 <HAL_GetTick>
 80029ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80029d2:	1b80      	subs	r0, r0, r6
 80029d4:	4298      	cmp	r0, r3
 80029d6:	d9f3      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x134>
 80029d8:	e7ee      	b.n	80029b8 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029da:	f000 f93d 	bl	8002c58 <HAL_GetTick>
 80029de:	f241 3388 	movw	r3, #5000	; 0x1388
 80029e2:	1b80      	subs	r0, r0, r6
 80029e4:	4298      	cmp	r0, r3
 80029e6:	d8e7      	bhi.n	80029b8 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e8:	686b      	ldr	r3, [r5, #4]
 80029ea:	f013 0f0c 	tst.w	r3, #12
 80029ee:	d1f4      	bne.n	80029da <HAL_RCC_ClockConfig+0x14e>
 80029f0:	e76f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f2:	6801      	ldr	r1, [r0, #0]
 80029f4:	0788      	lsls	r0, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f6:	bf41      	itttt	mi
 80029f8:	4856      	ldrmi	r0, [pc, #344]	; (8002b54 <HAL_RCC_ClockConfig+0x2c8>)
 80029fa:	6843      	ldrmi	r3, [r0, #4]
 80029fc:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 8002a00:	68a3      	ldrmi	r3, [r4, #8]
 8002a02:	bf44      	itt	mi
 8002a04:	4313      	orrmi	r3, r2
 8002a06:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a08:	07ca      	lsls	r2, r1, #31
 8002a0a:	d40c      	bmi.n	8002a26 <HAL_RCC_ClockConfig+0x19a>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0c:	4a50      	ldr	r2, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x2c4>)
 8002a0e:	6813      	ldr	r3, [r2, #0]
 8002a10:	f023 0307 	bic.w	r3, r3, #7
 8002a14:	4333      	orrs	r3, r6
 8002a16:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a18:	6813      	ldr	r3, [r2, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	42b3      	cmp	r3, r6
 8002a20:	f47f af48 	bne.w	80028b4 <HAL_RCC_ClockConfig+0x28>
 8002a24:	e755      	b.n	80028d2 <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	6862      	ldr	r2, [r4, #4]
 8002a28:	4d4a      	ldr	r5, [pc, #296]	; (8002b54 <HAL_RCC_ClockConfig+0x2c8>)
 8002a2a:	2a01      	cmp	r2, #1
 8002a2c:	d115      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x1ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a32:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	f043 0320 	orr.w	r3, r3, #32
 8002a3e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x1be>
 8002a46:	6828      	ldr	r0, [r5, #0]
 8002a48:	e004      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1c8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	fab1 f181 	clz	r1, r1
 8002a52:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a58:	e02a      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5a:	2a02      	cmp	r2, #2
 8002a5c:	d115      	bne.n	8002a8a <HAL_RCC_ClockConfig+0x1fe>
 8002a5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a62:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	f043 0320 	orr.w	r3, r3, #32
 8002a6e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1ee>
 8002a76:	6828      	ldr	r0, [r5, #0]
 8002a78:	e004      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1f8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	fab1 f181 	clz	r1, r1
 8002a82:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a88:	e012      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x224>
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a94:	f043 0320 	orr.w	r3, r3, #32
 8002a98:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x218>
 8002aa0:	6828      	ldr	r0, [r5, #0]
 8002aa2:	e004      	b.n	8002aae <HAL_RCC_ClockConfig+0x222>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	fab1 f181 	clz	r1, r1
 8002aac:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	2302      	movs	r3, #2
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	2101      	movs	r1, #1
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	4203      	tst	r3, r0
 8002ac4:	f43f aef6 	beq.w	80028b4 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac8:	686b      	ldr	r3, [r5, #4]
 8002aca:	f023 0303 	bic.w	r3, r3, #3
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002ad2:	f000 f8c1 	bl	8002c58 <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad6:	6863      	ldr	r3, [r4, #4]
 8002ad8:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002ada:	4607      	mov	r7, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x26c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ade:	686b      	ldr	r3, [r5, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d091      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f000 f8b6 	bl	8002c58 <HAL_GetTick>
 8002aec:	f241 3388 	movw	r3, #5000	; 0x1388
 8002af0:	1bc0      	subs	r0, r0, r7
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d9f3      	bls.n	8002ade <HAL_RCC_ClockConfig+0x252>
 8002af6:	e75f      	b.n	80029b8 <HAL_RCC_ClockConfig+0x12c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d114      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x29a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002afc:	686b      	ldr	r3, [r5, #4]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d082      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b06:	f000 f8a7 	bl	8002c58 <HAL_GetTick>
 8002b0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b0e:	1bc0      	subs	r0, r0, r7
 8002b10:	4298      	cmp	r0, r3
 8002b12:	d9f3      	bls.n	8002afc <HAL_RCC_ClockConfig+0x270>
 8002b14:	e750      	b.n	80029b8 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b16:	f000 f89f 	bl	8002c58 <HAL_GetTick>
 8002b1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b1e:	1bc0      	subs	r0, r0, r7
 8002b20:	4298      	cmp	r0, r3
 8002b22:	f63f af49 	bhi.w	80029b8 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b26:	686b      	ldr	r3, [r5, #4]
 8002b28:	f013 0f0c 	tst.w	r3, #12
 8002b2c:	d1f3      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x28a>
 8002b2e:	e76d      	b.n	8002a0c <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	070b      	lsls	r3, r1, #28
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b32:	bf41      	itttt	mi
 8002b34:	4a07      	ldrmi	r2, [pc, #28]	; (8002b54 <HAL_RCC_ClockConfig+0x2c8>)
 8002b36:	6921      	ldrmi	r1, [r4, #16]
 8002b38:	6853      	ldrmi	r3, [r2, #4]
 8002b3a:	f423 5360 	bicmi.w	r3, r3, #14336	; 0x3800
 8002b3e:	bf44      	itt	mi
 8002b40:	ea43 03c1 	orrmi.w	r3, r3, r1, lsl #3
 8002b44:	6053      	strmi	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b46:	200f      	movs	r0, #15
 8002b48:	f000 f859 	bl	8002bfe <HAL_InitTick>

  return HAL_OK;
 8002b4c:	2000      	movs	r0, #0
}
 8002b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002b58:	4915      	ldr	r1, [pc, #84]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x58>)
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5a:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002b5c:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b5e:	f004 030c 	and.w	r3, r4, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d121      	bne.n	8002baa <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b72:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b7e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b80:	5cd2      	ldrb	r2, [r2, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	230f      	movs	r3, #15
 8002b84:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b8c:	f001 010f 	and.w	r1, r1, #15
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	fa21 f303 	lsr.w	r3, r1, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x60>)
 8002b98:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b9a:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002b9c:	bf52      	itee	pl
 8002b9e:	4807      	ldrpl	r0, [pc, #28]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x64>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8002ba0:	4b07      	ldrmi	r3, [pc, #28]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x68>)
 8002ba2:	fbb3 f0f0 	udivmi	r0, r3, r0
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002ba6:	4350      	muls	r0, r2
 8002ba8:	bd10      	pop	{r4, pc}

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002baa:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8002bac:	bd10      	pop	{r4, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08018ca4 	.word	0x08018ca4
 8002bb8:	08018c94 	.word	0x08018c94
 8002bbc:	003d0900 	.word	0x003d0900
 8002bc0:	007a1200 	.word	0x007a1200

08002bc4 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002bc6:	f7ff ffc7 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002bcc:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	23f0      	movs	r3, #240	; 0xf0
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002be4:	5cd3      	ldrb	r3, [r2, r3]
 8002be6:	40d8      	lsrs	r0, r3
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002bea:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002bec:	bd08      	pop	{r3, pc}
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08018c84 	.word	0x08018c84
 8002bf8:	2000001c 	.word	0x2000001c

08002bfc <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002bfc:	4770      	bx	lr

08002bfe <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002c02:	f7ff ffdf 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c0e:	f000 f86b 	bl	8002ce8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8002c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c16:	4621      	mov	r1, r4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f000 f835 	bl	8002c88 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002c1e:	2000      	movs	r0, #0
 8002c20:	bd10      	pop	{r4, pc}
	...

08002c24 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c24:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <HAL_Init+0x20>)
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c26:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	f043 0310 	orr.w	r3, r3, #16
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c30:	2003      	movs	r0, #3
 8002c32:	f000 f817 	bl	8002c64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c36:	200f      	movs	r0, #15
 8002c38:	f7ff ffe1 	bl	8002bfe <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c3c:	f7ff ffde 	bl	8002bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002c40:	2000      	movs	r0, #0
 8002c42:	bd08      	pop	{r3, pc}
 8002c44:	40022000 	.word	0x40022000

08002c48 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002c48:	4a02      	ldr	r2, [pc, #8]	; (8002c54 <HAL_IncTick+0xc>)
 8002c4a:	6813      	ldr	r3, [r2, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000a50 	.word	0x20000a50

08002c58 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002c58:	4b01      	ldr	r3, [pc, #4]	; (8002c60 <HAL_GetTick+0x8>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000a50 	.word	0x20000a50

08002c64 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c66:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002c68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002c78:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8002c7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002c80:	60d3      	str	r3, [r2, #12]
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_NVIC_SetPriority+0x58>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c90:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002c92:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002c96:	1d1c      	adds	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002c98:	2d04      	cmp	r5, #4
 8002c9a:	bf28      	it	cs
 8002c9c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002c9e:	2c06      	cmp	r4, #6
 8002ca0:	bf8c      	ite	hi
 8002ca2:	3b03      	subhi	r3, #3
 8002ca4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002ca6:	2401      	movs	r4, #1
 8002ca8:	fa04 f603 	lsl.w	r6, r4, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002cac:	40ac      	lsls	r4, r5
 8002cae:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002cb0:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002cb2:	4021      	ands	r1, r4
 8002cb4:	4099      	lsls	r1, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002cb6:	4032      	ands	r2, r6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8002cb8:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002cba:	ea42 0201 	orr.w	r2, r2, r1
 8002cbe:	ea4f 1202 	mov.w	r2, r2, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002cc2:	bfaf      	iteee	ge
 8002cc4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002cc8:	f000 000f 	andlt.w	r0, r0, #15
 8002ccc:	4b05      	ldrlt	r3, [pc, #20]	; (8002ce4 <HAL_NVIC_SetPriority+0x5c>)
 8002cce:	b2d2      	uxtblt	r2, r2
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002cd0:	bfa5      	ittet	ge
 8002cd2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002cd6:	b2d2      	uxtbge	r2, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002cd8:	541a      	strblt	r2, [r3, r0]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002cda:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	e000ed00 	.word	0xe000ed00
 8002ce4:	e000ed14 	.word	0xe000ed14

08002ce8 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002ce8:	3801      	subs	r0, #1
 8002cea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002cee:	bf3f      	itttt	cc
 8002cf0:	4b06      	ldrcc	r3, [pc, #24]	; (8002d0c <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002cf2:	4a07      	ldrcc	r2, [pc, #28]	; (8002d10 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002cf4:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002cf6:	21f0      	movcc	r1, #240	; 0xf0
 8002cf8:	bf3f      	itttt	cc
 8002cfa:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002cfe:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d00:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002d02:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d04:	bf34      	ite	cc
 8002d06:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002d08:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e010 	.word	0xe000e010
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d18:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d1a:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d20:	ea02 0507 	and.w	r5, r2, r7
 
    if (iocurrent == ioposition)
 8002d24:	4295      	cmp	r5, r2
 8002d26:	f040 80ac 	bne.w	8002e82 <HAL_GPIO_Init+0x16e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002d2a:	684c      	ldr	r4, [r1, #4]
 8002d2c:	f024 0c10 	bic.w	ip, r4, #16
 8002d30:	f1bc 0f02 	cmp.w	ip, #2
 8002d34:	d114      	bne.n	8002d60 <HAL_GPIO_Init+0x4c>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002d36:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002d3a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d3e:	f003 0607 	and.w	r6, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002d42:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d46:	00b6      	lsls	r6, r6, #2
 8002d48:	f04f 080f 	mov.w	r8, #15
 8002d4c:	fa08 f806 	lsl.w	r8, r8, r6
 8002d50:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d54:	690a      	ldr	r2, [r1, #16]
 8002d56:	40b2      	lsls	r2, r6
 8002d58:	ea48 0202 	orr.w	r2, r8, r2
        GPIOx->AFR[position >> 3] = temp;
 8002d5c:	f8ce 2020 	str.w	r2, [lr, #32]
 8002d60:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d64:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d66:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d68:	fa02 f20e 	lsl.w	r2, r2, lr
 8002d6c:	43d2      	mvns	r2, r2
 8002d6e:	ea02 0806 	and.w	r8, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d72:	f004 0603 	and.w	r6, r4, #3
 8002d76:	fa06 f60e 	lsl.w	r6, r6, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d7a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d7e:	ea48 0606 	orr.w	r6, r8, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d82:	f1bc 0f01 	cmp.w	ip, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8002d86:	6006      	str	r6, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d88:	d811      	bhi.n	8002dae <HAL_GPIO_Init+0x9a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d8c:	ea02 0c06 	and.w	ip, r2, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d90:	68ce      	ldr	r6, [r1, #12]
 8002d92:	fa06 f60e 	lsl.w	r6, r6, lr
 8002d96:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OSPEEDR = temp;
 8002d9a:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9e:	ea26 0c05 	bic.w	ip, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002da2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8002da6:	409e      	lsls	r6, r3
 8002da8:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OTYPER = temp;
 8002dac:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dae:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002db0:	ea02 0c06 	and.w	ip, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002db4:	688a      	ldr	r2, [r1, #8]
 8002db6:	fa02 f60e 	lsl.w	r6, r2, lr
 8002dba:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 8002dbe:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002dc0:	00e2      	lsls	r2, r4, #3
 8002dc2:	d55e      	bpl.n	8002e82 <HAL_GPIO_Init+0x16e>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8002dc4:	4e32      	ldr	r6, [pc, #200]	; (8002e90 <HAL_GPIO_Init+0x17c>)
 8002dc6:	69b2      	ldr	r2, [r6, #24]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	61b2      	str	r2, [r6, #24]
 8002dce:	f023 0603 	bic.w	r6, r3, #3
 8002dd2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002dd6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002dda:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002dde:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002de2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f20c 	lsl.w	r2, r2, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8002dec:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002df0:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8002df4:	d015      	beq.n	8002e22 <HAL_GPIO_Init+0x10e>
 8002df6:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <HAL_GPIO_Init+0x180>)
 8002df8:	4290      	cmp	r0, r2
 8002dfa:	d014      	beq.n	8002e26 <HAL_GPIO_Init+0x112>
 8002dfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e00:	4290      	cmp	r0, r2
 8002e02:	d012      	beq.n	8002e2a <HAL_GPIO_Init+0x116>
 8002e04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e08:	4290      	cmp	r0, r2
 8002e0a:	d010      	beq.n	8002e2e <HAL_GPIO_Init+0x11a>
 8002e0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e10:	4290      	cmp	r0, r2
 8002e12:	d00e      	beq.n	8002e32 <HAL_GPIO_Init+0x11e>
 8002e14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e18:	4290      	cmp	r0, r2
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2205      	moveq	r2, #5
 8002e1e:	2206      	movne	r2, #6
 8002e20:	e008      	b.n	8002e34 <HAL_GPIO_Init+0x120>
 8002e22:	2200      	movs	r2, #0
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x120>
 8002e26:	2201      	movs	r2, #1
 8002e28:	e004      	b.n	8002e34 <HAL_GPIO_Init+0x120>
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_Init+0x120>
 8002e2e:	2203      	movs	r2, #3
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x120>
 8002e32:	2204      	movs	r2, #4
 8002e34:	fa02 f20c 	lsl.w	r2, r2, ip
 8002e38:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e3c:	60b2      	str	r2, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <HAL_GPIO_Init+0x184>)
 8002e40:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	ea6f 0e05 	mvn.w	lr, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e46:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 8002e4a:	bf14      	ite	ne
 8002e4c:	432e      	orrne	r6, r5
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002e52:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8002e54:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e56:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        { 
          temp |= iocurrent;
 8002e5a:	bf14      	ite	ne
 8002e5c:	432e      	orrne	r6, r5
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002e62:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e64:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e66:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8002e6a:	bf14      	ite	ne
 8002e6c:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002e72:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8002e74:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e76:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8002e78:	bf54      	ite	pl
 8002e7a:	ea0e 0506 	andpl.w	r5, lr, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8002e7e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002e80:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e82:	3301      	adds	r3, #1
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	f47f af49 	bne.w	8002d1c <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 8002e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	48000400 	.word	0x48000400
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e9c:	6903      	ldr	r3, [r0, #16]
 8002e9e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8002ea0:	bf14      	ite	ne
 8002ea2:	2001      	movne	r0, #1
 8002ea4:	2000      	moveq	r0, #0
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea8:	b10a      	cbz	r2, 8002eae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8002eaa:	8301      	strh	r1, [r0, #24]
 8002eac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8002eae:	8341      	strh	r1, [r0, #26]
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002eb2:	6943      	ldr	r3, [r0, #20]
 8002eb4:	4059      	eors	r1, r3
 8002eb6:	6141      	str	r1, [r0, #20]
 8002eb8:	4770      	bx	lr

08002eba <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002eba:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d00f      	beq.n	8002ee2 <HAL_PCD_SetAddress+0x28>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8002ec8:	b921      	cbnz	r1, 8002ed4 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8002eca:	6803      	ldr	r3, [r0, #0]
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8002ed2:	e001      	b.n	8002ed8 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8002ed4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8002ede:	4618      	mov	r0, r3
 8002ee0:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002ee2:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002ee8:	b2cc      	uxtb	r4, r1
 8002eea:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002eee:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8002ef2:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002ef6:	bf15      	itete	ne
 8002ef8:	fb05 0106 	mlane	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002efc:	fb05 0101 	mlaeq	r1, r5, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002f00:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002f02:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002f04:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8002f06:	700e      	strb	r6, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002f08:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8002f0a:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8002f0c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8002f10:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	f000 8181 	beq.w	800321a <HAL_PCD_EP_Open+0x334>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8002f1e:	78cc      	ldrb	r4, [r1, #3]
 8002f20:	780a      	ldrb	r2, [r1, #0]
 8002f22:	6803      	ldr	r3, [r0, #0]
 8002f24:	2c03      	cmp	r4, #3
 8002f26:	d82f      	bhi.n	8002f88 <HAL_PCD_EP_Open+0xa2>
 8002f28:	e8df f004 	tbb	[pc, r4]
 8002f2c:	170d2202 	.word	0x170d2202
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8002f30:	b212      	sxth	r2, r2
 8002f32:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002f36:	b2a4      	uxth	r4, r4
 8002f38:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002f3c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002f40:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8002f44:	e01e      	b.n	8002f84 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8002f46:	b212      	sxth	r2, r2
 8002f48:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002f4c:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002f50:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002f54:	0424      	lsls	r4, r4, #16
 8002f56:	0c24      	lsrs	r4, r4, #16
 8002f58:	e014      	b.n	8002f84 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8002f5a:	b212      	sxth	r2, r2
 8002f5c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002f60:	b2a4      	uxth	r4, r4
 8002f62:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002f66:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002f6a:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8002f6e:	e009      	b.n	8002f84 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8002f70:	b212      	sxth	r2, r2
 8002f72:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002f76:	b2a4      	uxth	r4, r4
 8002f78:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002f7c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002f80:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002f84:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8002f88:	780a      	ldrb	r2, [r1, #0]
 8002f8a:	b216      	sxth	r6, r2
 8002f8c:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8002f90:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8002f94:	f024 02f0 	bic.w	r2, r4, #240	; 0xf0
 8002f98:	0512      	lsls	r2, r2, #20
 8002f9a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002f9e:	0d12      	lsrs	r2, r2, #20
 8002fa0:	432a      	orrs	r2, r5
 8002fa2:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002fa6:	7a8c      	ldrb	r4, [r1, #10]
 8002fa8:	780a      	ldrb	r2, [r1, #0]
 8002faa:	2c00      	cmp	r4, #0
 8002fac:	d175      	bne.n	800309a <HAL_PCD_EP_Open+0x1b4>
  {
    if (ep->is_in)
 8002fae:	784d      	ldrb	r5, [r1, #1]
 8002fb0:	888c      	ldrh	r4, [r1, #4]
 8002fb2:	2608      	movs	r6, #8
 8002fb4:	b33d      	cbz	r5, 8003006 <HAL_PCD_EP_Open+0x120>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002fb6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002fba:	b2ad      	uxth	r5, r5
 8002fbc:	fb16 5202 	smlabb	r2, r6, r2, r5
 8002fc0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002fc4:	0864      	lsrs	r4, r4, #1
 8002fc6:	0064      	lsls	r4, r4, #1
 8002fc8:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002fcc:	780c      	ldrb	r4, [r1, #0]
 8002fce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fd2:	0652      	lsls	r2, r2, #25
 8002fd4:	d50b      	bpl.n	8002fee <HAL_PCD_EP_Open+0x108>
 8002fd6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fde:	0512      	lsls	r2, r2, #20
 8002fe0:	0d12      	lsrs	r2, r2, #20
 8002fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002fea:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8002fee:	7809      	ldrb	r1, [r1, #0]
 8002ff0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002ff4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffc:	0412      	lsls	r2, r2, #16
 8002ffe:	0c12      	lsrs	r2, r2, #16
 8003000:	f082 0220 	eor.w	r2, r2, #32
 8003004:	e0fe      	b.n	8003204 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003006:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800300a:	b2bf      	uxth	r7, r7
 800300c:	fb16 7202 	smlabb	r2, r6, r2, r7
 8003010:	3204      	adds	r2, #4
 8003012:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8003016:	0864      	lsrs	r4, r4, #1
 8003018:	0064      	lsls	r4, r4, #1
 800301a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 800301e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003022:	780c      	ldrb	r4, [r1, #0]
 8003024:	b292      	uxth	r2, r2
 8003026:	fb16 2204 	smlabb	r2, r6, r4, r2
 800302a:	68ce      	ldr	r6, [r1, #12]
 800302c:	2e3e      	cmp	r6, #62	; 0x3e
 800302e:	f102 0206 	add.w	r2, r2, #6
 8003032:	d90b      	bls.n	800304c <HAL_PCD_EP_Open+0x166>
 8003034:	f3c6 144f 	ubfx	r4, r6, #5, #16
 8003038:	06f7      	lsls	r7, r6, #27
 800303a:	bf04      	itt	eq
 800303c:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8003040:	b2a4      	uxtheq	r4, r4
 8003042:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003046:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800304a:	e006      	b.n	800305a <HAL_PCD_EP_Open+0x174>
 800304c:	f3c6 044f 	ubfx	r4, r6, #1, #16
 8003050:	07f6      	lsls	r6, r6, #31
 8003052:	bf44      	itt	mi
 8003054:	3401      	addmi	r4, #1
 8003056:	b2a4      	uxthmi	r4, r4
 8003058:	02a4      	lsls	r4, r4, #10
 800305a:	b2a4      	uxth	r4, r4
 800305c:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003060:	780c      	ldrb	r4, [r1, #0]
 8003062:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003066:	0452      	lsls	r2, r2, #17
 8003068:	d50b      	bpl.n	8003082 <HAL_PCD_EP_Open+0x19c>
 800306a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800306e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003072:	0512      	lsls	r2, r2, #20
 8003074:	0d12      	lsrs	r2, r2, #20
 8003076:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800307a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800307e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003082:	7809      	ldrb	r1, [r1, #0]
 8003084:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003088:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800308c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003090:	0412      	lsls	r2, r2, #16
 8003092:	0c12      	lsrs	r2, r2, #16
 8003094:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003098:	e0b4      	b.n	8003204 <HAL_PCD_EP_Open+0x31e>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 800309a:	b212      	sxth	r2, r2
 800309c:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 80030a0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80030a4:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 80030a8:	0524      	lsls	r4, r4, #20
 80030aa:	0d24      	lsrs	r4, r4, #20
 80030ac:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80030b0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80030b4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80030b8:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80030bc:	780c      	ldrb	r4, [r1, #0]
 80030be:	2208      	movs	r2, #8
 80030c0:	b2b6      	uxth	r6, r6
 80030c2:	fb12 6604 	smlabb	r6, r2, r4, r6
 80030c6:	88cc      	ldrh	r4, [r1, #6]
 80030c8:	0864      	lsrs	r4, r4, #1
 80030ca:	0064      	lsls	r4, r4, #1
 80030cc:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 80030d0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80030d4:	780e      	ldrb	r6, [r1, #0]
 80030d6:	b2a4      	uxth	r4, r4
 80030d8:	fb12 4206 	smlabb	r2, r2, r6, r4
 80030dc:	890c      	ldrh	r4, [r1, #8]
 80030de:	3204      	adds	r2, #4
 80030e0:	0864      	lsrs	r4, r4, #1
 80030e2:	0064      	lsls	r4, r4, #1
 80030e4:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 80030e8:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 80030ea:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80030ec:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 80030ee:	2a00      	cmp	r2, #0
 80030f0:	d146      	bne.n	8003180 <HAL_PCD_EP_Open+0x29a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80030f2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030f6:	0457      	lsls	r7, r2, #17
 80030f8:	d50b      	bpl.n	8003112 <HAL_PCD_EP_Open+0x22c>
 80030fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003102:	0512      	lsls	r2, r2, #20
 8003104:	0d12      	lsrs	r2, r2, #20
 8003106:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800310a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800310e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003112:	780c      	ldrb	r4, [r1, #0]
 8003114:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003118:	0656      	lsls	r6, r2, #25
 800311a:	d50b      	bpl.n	8003134 <HAL_PCD_EP_Open+0x24e>
 800311c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003120:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003124:	0512      	lsls	r2, r2, #20
 8003126:	0d12      	lsrs	r2, r2, #20
 8003128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800312c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003130:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003134:	780c      	ldrb	r4, [r1, #0]
 8003136:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800313a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800313e:	0512      	lsls	r2, r2, #20
 8003140:	0d12      	lsrs	r2, r2, #20
 8003142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003146:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800314a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800314e:	780c      	ldrb	r4, [r1, #0]
 8003150:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003154:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003158:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800315c:	0412      	lsls	r2, r2, #16
 800315e:	0c12      	lsrs	r2, r2, #16
 8003160:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800316c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003170:	7809      	ldrb	r1, [r1, #0]
 8003172:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003176:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800317a:	0512      	lsls	r2, r2, #20
 800317c:	0d12      	lsrs	r2, r2, #20
 800317e:	e041      	b.n	8003204 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003180:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003184:	0455      	lsls	r5, r2, #17
 8003186:	d50b      	bpl.n	80031a0 <HAL_PCD_EP_Open+0x2ba>
 8003188:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800318c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003190:	0512      	lsls	r2, r2, #20
 8003192:	0d12      	lsrs	r2, r2, #20
 8003194:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800319c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80031a0:	780c      	ldrb	r4, [r1, #0]
 80031a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031a6:	0652      	lsls	r2, r2, #25
 80031a8:	d50b      	bpl.n	80031c2 <HAL_PCD_EP_Open+0x2dc>
 80031aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031b2:	0512      	lsls	r2, r2, #20
 80031b4:	0d12      	lsrs	r2, r2, #20
 80031b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80031be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80031c2:	780c      	ldrb	r4, [r1, #0]
 80031c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031cc:	0512      	lsls	r2, r2, #20
 80031ce:	0d12      	lsrs	r2, r2, #20
 80031d0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80031d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80031dc:	780c      	ldrb	r4, [r1, #0]
 80031de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80031e6:	0512      	lsls	r2, r2, #20
 80031e8:	0d12      	lsrs	r2, r2, #20
 80031ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031f2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80031f6:	7809      	ldrb	r1, [r1, #0]
 80031f8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80031fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003200:	0492      	lsls	r2, r2, #18
 8003202:	0c92      	lsrs	r2, r2, #18
 8003204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003208:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800320c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003210:	2300      	movs	r3, #0
 8003212:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8003216:	4618      	mov	r0, r3
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 800321a:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 800321c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800321e <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800321e:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003220:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003224:	241c      	movs	r4, #28
 8003226:	fb04 0401 	mla	r4, r4, r1, r0
 800322a:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
 800322e:	606a      	str	r2, [r5, #4]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8003230:	2200      	movs	r2, #0
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8003232:	60ab      	str	r3, [r5, #8]
  ep->xfer_count = 0;
 8003234:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8003238:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 800323c:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 8003240:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003244:	2b01      	cmp	r3, #1
 8003246:	d062      	beq.n	800330e <HAL_PCD_EP_Receive+0xf0>
 8003248:	2301      	movs	r3, #1
 800324a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800324e:	68ab      	ldr	r3, [r5, #8]
 8003250:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 8003254:	42a3      	cmp	r3, r4
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8003256:	bf98      	it	ls
 8003258:	60aa      	strls	r2, [r5, #8]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800325a:	f04f 021c 	mov.w	r2, #28
 800325e:	fb02 0201 	mla	r2, r2, r1, r0
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003262:	bf84      	itt	hi
 8003264:	1b1b      	subhi	r3, r3, r4
 8003266:	60ab      	strhi	r3, [r5, #8]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003268:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 800326c:	bf88      	it	hi
 800326e:	4623      	movhi	r3, r4
 8003270:	32b0      	adds	r2, #176	; 0xb0
 8003272:	6804      	ldr	r4, [r0, #0]
 8003274:	b10d      	cbz	r5, 800327a <HAL_PCD_EP_Receive+0x5c>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003276:	7955      	ldrb	r5, [r2, #5]
 8003278:	bb15      	cbnz	r5, 80032c0 <HAL_PCD_EP_Receive+0xa2>
 800327a:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 800327e:	7912      	ldrb	r2, [r2, #4]
 8003280:	b2ad      	uxth	r5, r5
 8003282:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8003286:	2b3e      	cmp	r3, #62	; 0x3e
 8003288:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800328c:	f105 0506 	add.w	r5, r5, #6
 8003290:	d90b      	bls.n	80032aa <HAL_PCD_EP_Receive+0x8c>
 8003292:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8003296:	06db      	lsls	r3, r3, #27
 8003298:	bf04      	itt	eq
 800329a:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800329e:	b292      	uxtheq	r2, r2
 80032a0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80032a4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80032a8:	e006      	b.n	80032b8 <HAL_PCD_EP_Receive+0x9a>
 80032aa:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80032ae:	07db      	lsls	r3, r3, #31
 80032b0:	bf44      	itt	mi
 80032b2:	3201      	addmi	r2, #1
 80032b4:	b292      	uxthmi	r2, r2
 80032b6:	0292      	lsls	r2, r2, #10
 80032b8:	b292      	uxth	r2, r2
 80032ba:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 80032be:	e00c      	b.n	80032da <HAL_PCD_EP_Receive+0xbc>
 80032c0:	2d01      	cmp	r5, #1
 80032c2:	bf01      	itttt	eq
 80032c4:	f8b4 5050 	ldrheq.w	r5, [r4, #80]	; 0x50
 80032c8:	7912      	ldrbeq	r2, [r2, #4]
 80032ca:	b2ad      	uxtheq	r5, r5
 80032cc:	eb05 02c2 	addeq.w	r2, r5, r2, lsl #3
 80032d0:	bf04      	itt	eq
 80032d2:	eb04 0242 	addeq.w	r2, r4, r2, lsl #1
 80032d6:	f8c2 340c 	streq.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80032da:	231c      	movs	r3, #28
 80032dc:	fb03 0101 	mla	r1, r3, r1, r0
 80032e0:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 80032e4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80032e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	0c1b      	lsrs	r3, r3, #16
 80032f4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80032f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 8003304:	2300      	movs	r3, #0
 8003306:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800330a:	4618      	mov	r0, r3
 800330c:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 800330e:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8003310:	bd70      	pop	{r4, r5, r6, pc}

08003312 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003314:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003318:	211c      	movs	r1, #28
 800331a:	fb01 0106 	mla	r1, r1, r6, r0
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800331e:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003320:	f101 0038 	add.w	r0, r1, #56	; 0x38
 8003324:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8003326:	6043      	str	r3, [r0, #4]
  ep->xfer_count = 0;
 8003328:	2200      	movs	r2, #0
  ep->is_in = 1;
 800332a:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 800332c:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 800332e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8003332:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 8003336:	f894 5140 	ldrb.w	r5, [r4, #320]	; 0x140
 800333a:	429d      	cmp	r5, r3
 800333c:	f000 80a8 	beq.w	8003490 <HAL_PCD_EP_Transmit+0x17e>
 8003340:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003344:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003346:	6845      	ldr	r5, [r0, #4]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003348:	271c      	movs	r7, #28
 800334a:	fb07 4706 	mla	r7, r7, r6, r4
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800334e:	429d      	cmp	r5, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003350:	bf88      	it	hi
 8003352:	1aed      	subhi	r5, r5, r3
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003354:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003358:	bf86      	itte	hi
 800335a:	6045      	strhi	r5, [r0, #4]
 800335c:	461d      	movhi	r5, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 800335e:	6042      	strls	r2, [r0, #4]
 8003360:	b2ab      	uxth	r3, r5
 8003362:	f107 0228 	add.w	r2, r7, #40	; 0x28
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003366:	b989      	cbnz	r1, 800338c <HAL_PCD_EP_Transmit+0x7a>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8003368:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800336a:	8892      	ldrh	r2, [r2, #4]
 800336c:	6820      	ldr	r0, [r4, #0]
 800336e:	f000 fb99 	bl	8003aa4 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8003372:	6821      	ldr	r1, [r4, #0]
 8003374:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003378:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800337c:	b292      	uxth	r2, r2
 800337e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003382:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003386:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 800338a:	e067      	b.n	800345c <HAL_PCD_EP_Transmit+0x14a>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800338c:	7852      	ldrb	r2, [r2, #1]
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	bb1a      	cbnz	r2, 80033da <HAL_PCD_EP_Transmit+0xc8>
 8003392:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003396:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800339a:	b289      	uxth	r1, r1
 800339c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80033a0:	2d3e      	cmp	r5, #62	; 0x3e
 80033a2:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 80033a6:	f101 0106 	add.w	r1, r1, #6
 80033aa:	d90b      	bls.n	80033c4 <HAL_PCD_EP_Transmit+0xb2>
 80033ac:	f3c5 124f 	ubfx	r2, r5, #5, #16
 80033b0:	06ed      	lsls	r5, r5, #27
 80033b2:	bf04      	itt	eq
 80033b4:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80033b8:	b292      	uxtheq	r2, r2
 80033ba:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80033be:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80033c2:	e006      	b.n	80033d2 <HAL_PCD_EP_Transmit+0xc0>
 80033c4:	f3c5 024f 	ubfx	r2, r5, #1, #16
 80033c8:	07ed      	lsls	r5, r5, #31
 80033ca:	bf44      	itt	mi
 80033cc:	3201      	addmi	r2, #1
 80033ce:	b292      	uxthmi	r2, r2
 80033d0:	0292      	lsls	r2, r2, #10
 80033d2:	b292      	uxth	r2, r2
 80033d4:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 80033d8:	e00d      	b.n	80033f6 <HAL_PCD_EP_Transmit+0xe4>
 80033da:	2a01      	cmp	r2, #1
 80033dc:	bf01      	itttt	eq
 80033de:	f8b0 2050 	ldrheq.w	r2, [r0, #80]	; 0x50
 80033e2:	f897 1028 	ldrbeq.w	r1, [r7, #40]	; 0x28
 80033e6:	b292      	uxtheq	r2, r2
 80033e8:	eb02 02c1 	addeq.w	r2, r2, r1, lsl #3
 80033ec:	bf04      	itt	eq
 80033ee:	eb00 0242 	addeq.w	r2, r0, r2, lsl #1
 80033f2:	f8c2 540c 	streq.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 80033f6:	251c      	movs	r5, #28
 80033f8:	fb05 4206 	mla	r2, r5, r6, r4
 80033fc:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8003400:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8003404:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8003408:	fb05 4506 	mla	r5, r5, r6, r4
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800340c:	067f      	lsls	r7, r7, #25
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 800340e:	bf54      	ite	pl
 8003410:	88ca      	ldrhpl	r2, [r1, #6]
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
    {
      pmabuffer = ep->pmaaddr1;
 8003412:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8003414:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003416:	f000 fb45 	bl	8003aa4 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 800341a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	b963      	cbnz	r3, 800343c <HAL_PCD_EP_Transmit+0x12a>
 8003422:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003426:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800342a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800342e:	051b      	lsls	r3, r3, #20
 8003430:	0d1b      	lsrs	r3, r3, #20
 8003432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800343a:	e00d      	b.n	8003458 <HAL_PCD_EP_Transmit+0x146>
 800343c:	2b01      	cmp	r3, #1
 800343e:	d10d      	bne.n	800345c <HAL_PCD_EP_Transmit+0x14a>
 8003440:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003444:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344c:	051b      	lsls	r3, r3, #20
 800344e:	0d1b      	lsrs	r3, r3, #20
 8003450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800345c:	231c      	movs	r3, #28
 800345e:	fb03 4606 	mla	r6, r3, r6, r4
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8003468:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800346c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	0c1b      	lsrs	r3, r3, #16
 8003478:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800347c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8003484:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003486:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 800348a:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 800348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 8003490:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 8003492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003494 <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003494:	6803      	ldr	r3, [r0, #0]
 8003496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800349a:	b21b      	sxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800349e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034a0:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80034a2:	db11      	blt.n	80034c8 <HAL_PCD_IRQHandler+0x34>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80034aa:	0552      	lsls	r2, r2, #21
 80034ac:	f140 81e7 	bpl.w	800387e <HAL_PCD_IRQHandler+0x3ea>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034b0:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 80034b4:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80034ba:	f001 f8fd 	bl	80046b8 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80034be:	4620      	mov	r0, r4
 80034c0:	2100      	movs	r1, #0
 80034c2:	f7ff fcfa 	bl	8002eba <HAL_PCD_SetAddress>
 80034c6:	e1da      	b.n	800387e <HAL_PCD_IRQHandler+0x3ea>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	0419      	lsls	r1, r3, #16
 80034d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80034dc:	d5e2      	bpl.n	80034a4 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80034de:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (EPindex == 0)
 80034e2:	f015 050f 	ands.w	r5, r5, #15
 80034e6:	f040 80b7 	bne.w	8003658 <HAL_PCD_IRQHandler+0x1c4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80034ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034ee:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80034f0:	f001 0110 	and.w	r1, r1, #16
 80034f4:	b289      	uxth	r1, r1
 80034f6:	bb59      	cbnz	r1, 8003550 <HAL_PCD_IRQHandler+0xbc>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003506:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800350a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800350e:	b29b      	uxth	r3, r3
 8003510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003514:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8003518:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800351a:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 800351e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003522:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8003524:	4413      	add	r3, r2
 8003526:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8003528:	4620      	mov	r0, r4
 800352a:	f001 f8b9 	bl	80046a0 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800352e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0cb      	beq.n	80034ce <HAL_PCD_IRQHandler+0x3a>
 8003536:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003538:	2a00      	cmp	r2, #0
 800353a:	d1c8      	bne.n	80034ce <HAL_PCD_IRQHandler+0x3a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800353c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003540:	6821      	ldr	r1, [r4, #0]
 8003542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003546:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800354a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800354e:	e7be      	b.n	80034ce <HAL_PCD_IRQHandler+0x3a>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003550:	b29b      	uxth	r3, r3
 8003552:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8003556:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800355a:	051f      	lsls	r7, r3, #20
 800355c:	d51f      	bpl.n	800359e <HAL_PCD_IRQHandler+0x10a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800355e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003562:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8003566:	b29b      	uxth	r3, r3
 8003568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800356c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003570:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003574:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003580:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8003584:	f000 faa5 	bl	8003ad2 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	8813      	ldrh	r3, [r2, #0]
 800358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003590:	051b      	lsls	r3, r3, #20
 8003592:	0d1b      	lsrs	r3, r3, #20
 8003594:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8003596:	4620      	mov	r0, r4
 8003598:	f001 f872 	bl	8004680 <HAL_PCD_SetupStageCallback>
 800359c:	e797      	b.n	80034ce <HAL_PCD_IRQHandler+0x3a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800359e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80035a2:	b21b      	sxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da92      	bge.n	80034ce <HAL_PCD_IRQHandler+0x3a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035a8:	8803      	ldrh	r3, [r0, #0]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	051b      	lsls	r3, r3, #20
 80035b0:	0d1b      	lsrs	r3, r3, #20
 80035b2:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80035b8:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 80035bc:	b29b      	uxth	r3, r3
 80035be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80035c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80035ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ce:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 80035d2:	b163      	cbz	r3, 80035ee <HAL_PCD_IRQHandler+0x15a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80035d4:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 80035d8:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80035dc:	f000 fa79 	bl	8003ad2 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80035e0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80035e4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80035e8:	4413      	add	r3, r2
 80035ea:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80035ee:	4620      	mov	r0, r4
 80035f0:	2100      	movs	r1, #0
 80035f2:	f001 f84c 	bl	800468e <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 80035fc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8003600:	2d3e      	cmp	r5, #62	; 0x3e
 8003602:	b289      	uxth	r1, r1
 8003604:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8003608:	f101 0106 	add.w	r1, r1, #6
 800360c:	d90b      	bls.n	8003626 <HAL_PCD_IRQHandler+0x192>
 800360e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8003612:	06ee      	lsls	r6, r5, #27
 8003614:	bf04      	itt	eq
 8003616:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800361a:	b29b      	uxtheq	r3, r3
 800361c:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8003620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003624:	e006      	b.n	8003634 <HAL_PCD_IRQHandler+0x1a0>
 8003626:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800362a:	07ed      	lsls	r5, r5, #31
 800362c:	bf44      	itt	mi
 800362e:	3301      	addmi	r3, #1
 8003630:	b29b      	uxthmi	r3, r3
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	b29b      	uxth	r3, r3
 8003636:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800363a:	8813      	ldrh	r3, [r2, #0]
 800363c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800364c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	8013      	strh	r3, [r2, #0]
 8003656:	e73a      	b.n	80034ce <HAL_PCD_IRQHandler+0x3a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8003658:	b22f      	sxth	r7, r5
 800365a:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 800365e:	b29b      	uxth	r3, r3
 8003660:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8003664:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003668:	b21b      	sxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	f280 8084 	bge.w	8003778 <HAL_PCD_IRQHandler+0x2e4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003670:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003678:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800367a:	221c      	movs	r2, #28
 800367c:	fb02 4205 	mla	r2, r2, r5, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003680:	0d1b      	lsrs	r3, r3, #20
 8003682:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8003686:	f102 0cb8 	add.w	ip, r2, #184	; 0xb8
 800368a:	f89c 3006 	ldrb.w	r3, [ip, #6]
 800368e:	f102 0eb0 	add.w	lr, r2, #176	; 0xb0
 8003692:	b9b3      	cbnz	r3, 80036c2 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003694:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003698:	f89e 1004 	ldrb.w	r1, [lr, #4]
 800369c:	b29b      	uxth	r3, r3
 800369e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80036a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80036a6:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80036aa:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	d040      	beq.n	8003734 <HAL_PCD_IRQHandler+0x2a0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036b2:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 80036b6:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80036ba:	4633      	mov	r3, r6
 80036bc:	f000 fa09 	bl	8003ad2 <PCD_ReadPMA>
 80036c0:	e038      	b.n	8003734 <HAL_PCD_IRQHandler+0x2a0>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80036c2:	f89e 6004 	ldrb.w	r6, [lr, #4]
 80036c6:	b233      	sxth	r3, r6
 80036c8:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036cc:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80036d0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036d4:	b289      	uxth	r1, r1
 80036d6:	f04f 0308 	mov.w	r3, #8
 80036da:	fb13 1306 	smlabb	r3, r3, r6, r1
 80036de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80036e2:	d009      	beq.n	80036f8 <HAL_PCD_IRQHandler+0x264>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036e4:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 80036e8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80036ec:	b186      	cbz	r6, 8003710 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036ee:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 80036f2:	f8be 200a 	ldrh.w	r2, [lr, #10]
 80036f6:	e008      	b.n	800370a <HAL_PCD_IRQHandler+0x276>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036f8:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80036fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8003700:	b136      	cbz	r6, 8003710 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003702:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8003706:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800370a:	4633      	mov	r3, r6
 800370c:	f000 f9e1 	bl	8003ad2 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8003710:	231c      	movs	r3, #28
 8003712:	fb03 4305 	mla	r3, r3, r5, r4
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800371c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003724:	051b      	lsls	r3, r3, #20
 8003726:	0d1b      	lsrs	r3, r3, #20
 8003728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003730:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003734:	211c      	movs	r1, #28
 8003736:	fb01 4105 	mla	r1, r1, r5, r4
 800373a:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 800373e:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003742:	4433      	add	r3, r6
 8003744:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003748:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 800374c:	4432      	add	r2, r6
 800374e:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003752:	b11b      	cbz	r3, 800375c <HAL_PCD_IRQHandler+0x2c8>
 8003754:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8003758:	4286      	cmp	r6, r0
 800375a:	d208      	bcs.n	800376e <HAL_PCD_IRQHandler+0x2da>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800375c:	231c      	movs	r3, #28
 800375e:	fb03 4305 	mla	r3, r3, r5, r4
 8003762:	4620      	mov	r0, r4
 8003764:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8003768:	f000 ff91 	bl	800468e <HAL_PCD_DataOutStageCallback>
 800376c:	e004      	b.n	8003778 <HAL_PCD_IRQHandler+0x2e4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800376e:	4620      	mov	r0, r4
 8003770:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8003774:	f7ff fd53 	bl	800321e <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8003778:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800377c:	0618      	lsls	r0, r3, #24
 800377e:	f57f aea6 	bpl.w	80034ce <HAL_PCD_IRQHandler+0x3a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003788:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800378c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	0c1b      	lsrs	r3, r3, #16
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8003794:	221c      	movs	r2, #28
 8003796:	fb02 4205 	mla	r2, r2, r5, r4
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800379a:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 800379e:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 80037a2:	f102 0628 	add.w	r6, r2, #40	; 0x28
 80037a6:	b9a3      	cbnz	r3, 80037d2 <HAL_PCD_IRQHandler+0x33e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037a8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80037ac:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80037b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80037ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80037be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c2:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03a      	beq.n	800383e <HAL_PCD_IRQHandler+0x3aa>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80037c8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80037ca:	88b2      	ldrh	r2, [r6, #4]
 80037cc:	f000 f96a 	bl	8003aa4 <PCD_WritePMA>
 80037d0:	e035      	b.n	800383e <HAL_PCD_IRQHandler+0x3aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80037d2:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 80037d6:	b23b      	sxth	r3, r7
 80037d8:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037dc:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80037e0:	f013 0f40 	tst.w	r3, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037e4:	b289      	uxth	r1, r1
 80037e6:	f04f 0308 	mov.w	r3, #8
 80037ea:	fb13 1307 	smlabb	r3, r3, r7, r1
 80037ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80037f2:	d008      	beq.n	8003806 <HAL_PCD_IRQHandler+0x372>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80037f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 80037fe:	b163      	cbz	r3, 800381a <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003800:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003802:	88f2      	ldrh	r2, [r6, #6]
 8003804:	e007      	b.n	8003816 <HAL_PCD_IRQHandler+0x382>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003806:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800380a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380e:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8003810:	b11b      	cbz	r3, 800381a <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003812:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003814:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003816:	f000 f945 	bl	8003aa4 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800381a:	231c      	movs	r3, #28
 800381c:	fb03 4305 	mla	r3, r3, r5, r4
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003826:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800382a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800382e:	051b      	lsls	r3, r3, #20
 8003830:	0d1b      	lsrs	r3, r3, #20
 8003832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	231c      	movs	r3, #28
 8003842:	fb03 4505 	mla	r5, r3, r5, r4
 8003846:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800384a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800384e:	b292      	uxth	r2, r2
 8003850:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003854:	eb01 0343 	add.w	r3, r1, r3, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003858:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800385a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 800385e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003860:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003864:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003868:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800386a:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800386c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 800386e:	63aa      	str	r2, [r5, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8003870:	b913      	cbnz	r3, 8003878 <HAL_PCD_IRQHandler+0x3e4>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003872:	f000 ff15 	bl	80046a0 <HAL_PCD_DataInStageCallback>
 8003876:	e62a      	b.n	80034ce <HAL_PCD_IRQHandler+0x3a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003878:	f7ff fd4b 	bl	8003312 <HAL_PCD_EP_Transmit>
 800387c:	e627      	b.n	80034ce <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003884:	0452      	lsls	r2, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8003886:	bf44      	itt	mi
 8003888:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 800388c:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8003890:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003894:	0497      	lsls	r7, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8003896:	bf44      	itt	mi
 8003898:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800389c:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80038a0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80038a4:	04d6      	lsls	r6, r2, #19
 80038a6:	d513      	bpl.n	80038d0 <HAL_PCD_IRQHandler+0x43c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80038a8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80038ac:	f022 0204 	bic.w	r2, r2, #4
 80038b0:	0412      	lsls	r2, r2, #16
 80038b2:	0c12      	lsrs	r2, r2, #16
 80038b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80038b8:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 80038bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 ff07 	bl	80046d4 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80038cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80038d6:	0515      	lsls	r5, r2, #20
 80038d8:	d518      	bpl.n	800390c <HAL_PCD_IRQHandler+0x478>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80038da:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 80038de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80038e2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80038e6:	b292      	uxth	r2, r2
 80038e8:	f042 0208 	orr.w	r2, r2, #8
 80038ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80038f0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80038f4:	b292      	uxth	r2, r2
 80038f6:	f042 0204 	orr.w	r2, r2, #4
 80038fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80038fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003902:	04d8      	lsls	r0, r3, #19
 8003904:	d402      	bmi.n	800390c <HAL_PCD_IRQHandler+0x478>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8003906:	4620      	mov	r0, r4
 8003908:	f000 fee3 	bl	80046d2 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003912:	0591      	lsls	r1, r2, #22
 8003914:	d506      	bpl.n	8003924 <HAL_PCD_IRQHandler+0x490>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8003916:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800391a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800391e:	4620      	mov	r0, r4
 8003920:	f000 fec6 	bl	80046b0 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800392a:	05d2      	lsls	r2, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800392c:	bf44      	itt	mi
 800392e:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8003932:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8003936:	b003      	add	sp, #12
 8003938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800393a <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800393a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800393e:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003940:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003942:	d049      	beq.n	80039d8 <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8003944:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003946:	2301      	movs	r3, #1
 8003948:	221c      	movs	r2, #28
 800394a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  if ((0x80 & ep_addr) == 0x80)
 800394e:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003952:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003956:	bf15      	itete	ne
 8003958:	fb02 0203 	mlane	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800395c:	fb02 0201 	mlaeq	r2, r2, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003960:	3228      	addne	r2, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003962:	32b4      	addeq	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8003964:	2101      	movs	r1, #1
 8003966:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8003968:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800396a:	09e3      	lsrs	r3, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 800396c:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800396e:	7053      	strb	r3, [r2, #1]
 8003970:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8003972:	b979      	cbnz	r1, 8003994 <HAL_PCD_EP_SetStall+0x5a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003974:	8813      	ldrh	r3, [r2, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800397c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003980:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003984:	f083 0310 	eor.w	r3, r3, #16
 8003988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003990:	8013      	strh	r3, [r2, #0]
 8003992:	e01c      	b.n	80039ce <HAL_PCD_EP_SetStall+0x94>
 8003994:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 8003996:	b153      	cbz	r3, 80039ae <HAL_PCD_EP_SetStall+0x74>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8003998:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800399c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	f083 0310 	eor.w	r3, r3, #16
 80039ac:	e009      	b.n	80039c2 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 80039ae:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80039b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ca:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 80039ce:	2300      	movs	r3, #0
 80039d0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 80039d8:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80039da:	bd10      	pop	{r4, pc}

080039dc <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80039dc:	b2cb      	uxtb	r3, r1
 80039de:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e2:	b510      	push	{r4, lr}
 80039e4:	f04f 021c 	mov.w	r2, #28
 80039e8:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80039ec:	bf15      	itete	ne
 80039ee:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039f2:	fb02 0101 	mlaeq	r1, r2, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80039f6:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039f8:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80039fa:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 80039fc:	2200      	movs	r2, #0
 80039fe:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8003a00:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003a02:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8003a04:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d049      	beq.n	8003aa0 <HAL_PCD_EP_ClrStall+0xc4>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003a12:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8003a14:	784b      	ldrb	r3, [r1, #1]
 8003a16:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003a18:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 8003a1a:	b1db      	cbz	r3, 8003a54 <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003a1c:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003a20:	065b      	lsls	r3, r3, #25
 8003a22:	d50b      	bpl.n	8003a3c <HAL_PCD_EP_ClrStall+0x60>
 8003a24:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a2c:	051b      	lsls	r3, r3, #20
 8003a2e:	0d1b      	lsrs	r3, r3, #20
 8003a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a38:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a3c:	7809      	ldrb	r1, [r1, #0]
 8003a3e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4a:	041b      	lsls	r3, r3, #16
 8003a4c:	0c1b      	lsrs	r3, r3, #16
 8003a4e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003a52:	e01a      	b.n	8003a8a <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003a54:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003a58:	045b      	lsls	r3, r3, #17
 8003a5a:	d50b      	bpl.n	8003a74 <HAL_PCD_EP_ClrStall+0x98>
 8003a5c:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a64:	051b      	lsls	r3, r3, #20
 8003a66:	0d1b      	lsrs	r3, r3, #20
 8003a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a70:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003a74:	7809      	ldrb	r1, [r1, #0]
 8003a76:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a92:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8003a96:	2300      	movs	r3, #0
 8003a98:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8003aa0:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8003aa2:	bd10      	pop	{r4, pc}

08003aa4 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003aaa:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003aac:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003aae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003ab2:	2400      	movs	r4, #0
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	f101 0102 	add.w	r1, r1, #2
 8003aba:	d009      	beq.n	8003ad0 <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003abc:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003ac0:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003ac4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 8003ac8:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8003acc:	3401      	adds	r4, #1
 8003ace:	e7f1      	b.n	8003ab4 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8003ad0:	bd30      	pop	{r4, r5, pc}

08003ad2 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003ad8:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003ada:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003adc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003ae0:	2400      	movs	r4, #0
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	d005      	beq.n	8003af2 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003ae6:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003aea:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8003aee:	3401      	adds	r4, #1
 8003af0:	e7f7      	b.n	8003ae2 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
   
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003af4:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af6:	b570      	push	{r4, r5, r6, lr}
 8003af8:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
   
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003afa:	03d8      	lsls	r0, r3, #15
 8003afc:	d559      	bpl.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Enable Power Clock*/
    __PWR_CLK_ENABLE();
 8003afe:	4d6f      	ldr	r5, [pc, #444]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b00:	4a6f      	ldr	r2, [pc, #444]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
   
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* Enable Power Clock*/
    __PWR_CLK_ENABLE();
 8003b02:	69eb      	ldr	r3, [r5, #28]
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	61eb      	str	r3, [r5, #28]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b12:	f7ff f8a1 	bl	8002c58 <HAL_GetTick>
 8003b16:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b18:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	05d9      	lsls	r1, r3, #23
 8003b1e:	d406      	bmi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8003b20:	f7ff f89a 	bl	8002c58 <HAL_GetTick>
 8003b24:	1b80      	subs	r0, r0, r6
 8003b26:	2864      	cmp	r0, #100	; 0x64
 8003b28:	d9f6      	bls.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x24>
      {
        return HAL_TIMEOUT;
 8003b2a:	2003      	movs	r0, #3
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}
      }      
    }
    
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b2e:	6a29      	ldr	r1, [r5, #32]
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	4a62      	ldr	r2, [pc, #392]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b34:	404b      	eors	r3, r1
 8003b36:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3c:	6a13      	ldr	r3, [r2, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b3e:	4961      	ldr	r1, [pc, #388]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b40:	2001      	movs	r0, #1
 8003b42:	6008      	str	r0, [r1, #0]
    
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b48:	2000      	movs	r0, #0
 8003b4a:	6008      	str	r0, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg;
 8003b4c:	6213      	str	r3, [r2, #32]
    }
    
    /* If LSE is selected as RTC clock source, wait for LSE reactivation */
    if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b4e:	6863      	ldr	r3, [r4, #4]
 8003b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b54:	d006      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x70>
        {
          return HAL_TIMEOUT;
        }      
      }  
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b56:	6a2b      	ldr	r3, [r5, #32]
 8003b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5c:	6863      	ldr	r3, [r4, #4]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	622b      	str	r3, [r5, #32]
 8003b62:	e026      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* If LSE is selected as RTC clock source, wait for LSE reactivation */
    if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003b64:	f7ff f878 	bl	8002c58 <HAL_GetTick>
 8003b68:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b80:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8003b84:	429a      	cmp	r2, r3
 8003b86:	bf0c      	ite	eq
 8003b88:	6a29      	ldreq	r1, [r5, #32]
 8003b8a:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	fab3 f383 	clz	r3, r3
 8003b94:	2201      	movs	r2, #1
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	420b      	tst	r3, r1
 8003ba0:	d1d9      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8003ba2:	f7ff f859 	bl	8002c58 <HAL_GetTick>
 8003ba6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003baa:	1b80      	subs	r0, r0, r6
 8003bac:	4298      	cmp	r0, r3
 8003bae:	d9dc      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bb0:	e7bb      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb2:	6820      	ldr	r0, [r4, #0]
 8003bb4:	07c2      	lsls	r2, r0, #31
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb6:	bf41      	itttt	mi
 8003bb8:	4940      	ldrmi	r1, [pc, #256]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bba:	6b0b      	ldrmi	r3, [r1, #48]	; 0x30
 8003bbc:	f023 0203 	bicmi.w	r2, r3, #3
 8003bc0:	68a3      	ldrmi	r3, [r4, #8]
 8003bc2:	bf44      	itt	mi
 8003bc4:	4313      	orrmi	r3, r2
 8003bc6:	630b      	strmi	r3, [r1, #48]	; 0x30
  }
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc8:	0783      	lsls	r3, r0, #30
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bca:	bf41      	itttt	mi
 8003bcc:	493b      	ldrmi	r1, [pc, #236]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bce:	6b0b      	ldrmi	r3, [r1, #48]	; 0x30
 8003bd0:	f423 3240 	bicmi.w	r2, r3, #196608	; 0x30000
 8003bd4:	68e3      	ldrmi	r3, [r4, #12]
 8003bd6:	bf44      	itt	mi
 8003bd8:	4313      	orrmi	r3, r2
 8003bda:	630b      	strmi	r3, [r1, #48]	; 0x30
  }
  
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bdc:	0746      	lsls	r6, r0, #29
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bde:	bf41      	itttt	mi
 8003be0:	4936      	ldrmi	r1, [pc, #216]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003be2:	6b0b      	ldrmi	r3, [r1, #48]	; 0x30
 8003be4:	f423 2240 	bicmi.w	r2, r3, #786432	; 0xc0000
 8003be8:	6923      	ldrmi	r3, [r4, #16]
 8003bea:	bf44      	itt	mi
 8003bec:	4313      	orrmi	r3, r2
 8003bee:	630b      	strmi	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf0:	0685      	lsls	r5, r0, #26
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf2:	bf41      	itttt	mi
 8003bf4:	4931      	ldrmi	r1, [pc, #196]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bf6:	6b0b      	ldrmi	r3, [r1, #48]	; 0x30
 8003bf8:	f023 0210 	bicmi.w	r2, r3, #16
 8003bfc:	69e3      	ldrmi	r3, [r4, #28]
 8003bfe:	bf44      	itt	mi
 8003c00:	4313      	orrmi	r3, r2
 8003c02:	630b      	strmi	r3, [r1, #48]	; 0x30

#if defined(STM32F302x8) || defined(STM32F302xC) || \
    defined(STM32F303xC) || defined(STM32F373xC)

  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c04:	0381      	lsls	r1, r0, #14
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c06:	bf41      	itttt	mi
 8003c08:	492c      	ldrmi	r1, [pc, #176]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c0a:	684b      	ldrmi	r3, [r1, #4]
 8003c0c:	f423 0280 	bicmi.w	r2, r3, #4194304	; 0x400000
 8003c10:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003c12:	bf44      	itt	mi
 8003c14:	4313      	orrmi	r3, r2
 8003c16:	604b      	strmi	r3, [r1, #4]
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx) || \
    defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c18:	0642      	lsls	r2, r0, #25
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c1a:	bf41      	itttt	mi
 8003c1c:	4927      	ldrmi	r1, [pc, #156]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c1e:	6b0b      	ldrmi	r3, [r1, #48]	; 0x30
 8003c20:	f023 0220 	bicmi.w	r2, r3, #32
 8003c24:	6a23      	ldrmi	r3, [r4, #32]
 8003c26:	bf44      	itt	mi
 8003c28:	4313      	orrmi	r3, r2
 8003c2a:	630b      	strmi	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */
  
#if defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c2c:	0703      	lsls	r3, r0, #28
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c2e:	bf41      	itttt	mi
 8003c30:	4922      	ldrmi	r1, [pc, #136]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c32:	6b0b      	ldrmi	r3, [r1, #48]	; 0x30
 8003c34:	f423 1240 	bicmi.w	r2, r3, #3145728	; 0x300000
 8003c38:	6963      	ldrmi	r3, [r4, #20]
 8003c3a:	bf44      	itt	mi
 8003c3c:	4313      	orrmi	r3, r2
 8003c3e:	630b      	strmi	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c40:	06c6      	lsls	r6, r0, #27
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c42:	bf41      	itttt	mi
 8003c44:	491d      	ldrmi	r1, [pc, #116]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c46:	6b0b      	ldrmi	r3, [r1, #48]	; 0x30
 8003c48:	f423 0240 	bicmi.w	r2, r3, #12582912	; 0xc00000
 8003c4c:	69a3      	ldrmi	r3, [r4, #24]
 8003c4e:	bf44      	itt	mi
 8003c50:	4313      	orrmi	r3, r2
 8003c52:	630b      	strmi	r3, [r1, #48]	; 0x30

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx) || \
    defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c54:	0585      	lsls	r5, r0, #22
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c56:	bf41      	itttt	mi
 8003c58:	4918      	ldrmi	r1, [pc, #96]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c5a:	684b      	ldrmi	r3, [r1, #4]
 8003c5c:	f423 0200 	bicmi.w	r2, r3, #8388608	; 0x800000
 8003c60:	6ae3      	ldrmi	r3, [r4, #44]	; 0x2c
 8003c62:	bf44      	itt	mi
 8003c64:	4313      	orrmi	r3, r2
 8003c66:	604b      	strmi	r3, [r1, #4]
  
#if defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c68:	0601      	lsls	r1, r0, #24
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c6a:	bf41      	itttt	mi
 8003c6c:	4913      	ldrmi	r1, [pc, #76]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c6e:	6acb      	ldrmi	r3, [r1, #44]	; 0x2c
 8003c70:	f423 72f8 	bicmi.w	r2, r3, #496	; 0x1f0
 8003c74:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
 8003c76:	bf44      	itt	mi
 8003c78:	4313      	orrmi	r3, r2
 8003c7a:	62cb      	strmi	r3, [r1, #44]	; 0x2c
       /* STM32F303x8 || STM32F334x8 || STM32F328xx */    
  
#if defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c7c:	05c2      	lsls	r2, r0, #23
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c7e:	bf41      	itttt	mi
 8003c80:	490e      	ldrmi	r1, [pc, #56]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c82:	6acb      	ldrmi	r3, [r1, #44]	; 0x2c
 8003c84:	f423 5278 	bicmi.w	r2, r3, #15872	; 0x3e00
 8003c88:	6aa3      	ldrmi	r3, [r4, #40]	; 0x28
 8003c8a:	bf44      	itt	mi
 8003c8c:	4313      	orrmi	r3, r2
 8003c8e:	62cb      	strmi	r3, [r1, #44]	; 0x2c
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx) || \
    defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx) || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c90:	04c3      	lsls	r3, r0, #19
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c92:	bf41      	itttt	mi
 8003c94:	4909      	ldrmi	r1, [pc, #36]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c96:	6b0b      	ldrmi	r3, [r1, #48]	; 0x30
 8003c98:	f423 7280 	bicmi.w	r2, r3, #256	; 0x100
 8003c9c:	6b23      	ldrmi	r3, [r4, #48]	; 0x30
 8003c9e:	bf44      	itt	mi
 8003ca0:	4313      	orrmi	r3, r2
 8003ca2:	630b      	strmi	r3, [r1, #48]	; 0x30
       /* STM32F303x8 || STM32F334x8 || STM32F328xx    */

#if defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ca4:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8003ca8:	d007      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003caa:	4904      	ldr	r1, [pc, #16]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003cae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
  }

#endif /* STM32F373xC || STM32F378xx */
  
  return HAL_OK;
 8003cb8:	2000      	movs	r0, #0
}
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	42420440 	.word	0x42420440

08003cc8 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003cc8:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003cca:	6804      	ldr	r4, [r0, #0]
 8003ccc:	9d03      	ldr	r5, [sp, #12]
 8003cce:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003cd0:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8003cd4:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8003cd8:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8003cdc:	f020 0003 	bic.w	r0, r0, #3
 8003ce0:	4328      	orrs	r0, r5
 8003ce2:	4303      	orrs	r3, r0
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003ce4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8003cee:	6062      	str	r2, [r4, #4]
 8003cf0:	bd30      	pop	{r4, r5, pc}
	...

08003cf4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003cfa:	f7fe ffad 	bl	8002c58 <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cfe:	6823      	ldr	r3, [r4, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003d00:	4606      	mov	r6, r0

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d02:	6998      	ldr	r0, [r3, #24]
 8003d04:	f010 0010 	ands.w	r0, r0, #16
 8003d08:	d039      	beq.n	8003d7e <I2C_IsAcknowledgeFailed+0x8a>
  {
    /* Generate stop if necessary only in case of I2C peripheral in MASTER mode */
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8003d0a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003d0e:	2a12      	cmp	r2, #18
 8003d10:	d007      	beq.n	8003d22 <I2C_IsAcknowledgeFailed+0x2e>
 8003d12:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003d16:	2a52      	cmp	r2, #82	; 0x52
 8003d18:	d003      	beq.n	8003d22 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8003d1a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003d1e:	2a62      	cmp	r2, #98	; 0x62
 8003d20:	d112      	bne.n	8003d48 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* No need to generate the STOP condition if AUTOEND mode is enabled */
      /* Generate the STOP condition only in case of SOFTEND mode is enabled */
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	0190      	lsls	r0, r2, #6
 8003d26:	d40f      	bmi.n	8003d48 <I2C_IsAcknowledgeFailed+0x54>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	e00a      	b.n	8003d48 <I2C_IsAcknowledgeFailed+0x54>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	0692      	lsls	r2, r2, #26
 8003d36:	d411      	bmi.n	8003d5c <I2C_IsAcknowledgeFailed+0x68>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d38:	1c69      	adds	r1, r5, #1
 8003d3a:	d0fa      	beq.n	8003d32 <I2C_IsAcknowledgeFailed+0x3e>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d3c:	b135      	cbz	r5, 8003d4c <I2C_IsAcknowledgeFailed+0x58>
 8003d3e:	f7fe ff8b 	bl	8002c58 <HAL_GetTick>
 8003d42:	1b80      	subs	r0, r0, r6
 8003d44:	42a8      	cmp	r0, r5
 8003d46:	d801      	bhi.n	8003d4c <I2C_IsAcknowledgeFailed+0x58>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	e7f2      	b.n	8003d32 <I2C_IsAcknowledgeFailed+0x3e>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003d58:	2003      	movs	r0, #3
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d60:	2220      	movs	r2, #32
 8003d62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8003d64:	6859      	ldr	r1, [r3, #4]
 8003d66:	4a06      	ldr	r2, [pc, #24]	; (8003d80 <I2C_IsAcknowledgeFailed+0x8c>)
 8003d68:	400a      	ands	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 8003d72:	2001      	movs	r0, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 8003d76:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
 8003d80:	fe00e800 	.word	0xfe00e800

08003d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 8003d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d88:	4604      	mov	r4, r0
 8003d8a:	460e      	mov	r6, r1
 8003d8c:	4690      	mov	r8, r2
 8003d8e:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003d90:	f7fe ff62 	bl	8002c58 <HAL_GetTick>
 8003d94:	4607      	mov	r7, r0
     
  /* Wait until flag is set */
  if(Status == RESET)
 8003d96:	f1b8 0f00 	cmp.w	r8, #0
 8003d9a:	d125      	bne.n	8003de8 <I2C_WaitOnFlagUntilTimeout+0x64>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	6993      	ldr	r3, [r2, #24]
 8003da0:	4033      	ands	r3, r6
 8003da2:	42b3      	cmp	r3, r6
 8003da4:	d00e      	beq.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003da6:	1c69      	adds	r1, r5, #1
 8003da8:	d0f9      	beq.n	8003d9e <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003daa:	b17d      	cbz	r5, 8003dcc <I2C_WaitOnFlagUntilTimeout+0x48>
 8003dac:	f7fe ff54 	bl	8002c58 <HAL_GetTick>
 8003db0:	1bc0      	subs	r0, r0, r7
 8003db2:	42a8      	cmp	r0, r5
 8003db4:	d9f2      	bls.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0x18>
 8003db6:	e009      	b.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003db8:	1c6b      	adds	r3, r5, #1
 8003dba:	d106      	bne.n	8003dca <I2C_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8003dbc:	6993      	ldr	r3, [r2, #24]
 8003dbe:	4033      	ands	r3, r6
 8003dc0:	42b3      	cmp	r3, r6
 8003dc2:	d0f9      	beq.n	8003db8 <I2C_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003dca:	b945      	cbnz	r5, 8003dde <I2C_WaitOnFlagUntilTimeout+0x5a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003dd8:	2003      	movs	r0, #3
 8003dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003dde:	f7fe ff3b 	bl	8002c58 <HAL_GetTick>
 8003de2:	1bc0      	subs	r0, r0, r7
 8003de4:	42a8      	cmp	r0, r5
 8003de6:	d8f1      	bhi.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8003de8:	6822      	ldr	r2, [r4, #0]
 8003dea:	e7e7      	b.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0x38>

08003dec <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4604      	mov	r4, r0
 8003df0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8003df2:	f7fe ff31 	bl	8002c58 <HAL_GetTick>
 8003df6:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	079b      	lsls	r3, r3, #30
 8003dfe:	d41b      	bmi.n	8003e38 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7ff ff76 	bl	8003cf4 <I2C_IsAcknowledgeFailed>
 8003e08:	b9c0      	cbnz	r0, 8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003e0a:	1c6a      	adds	r2, r5, #1
 8003e0c:	d0f4      	beq.n	8003df8 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e0e:	b96d      	cbnz	r5, 8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e10:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003e14:	f043 0320 	orr.w	r3, r3, #32
 8003e18:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003e28:	2003      	movs	r0, #3
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e2c:	f7fe ff14 	bl	8002c58 <HAL_GetTick>
 8003e30:	1b80      	subs	r0, r0, r6
 8003e32:	42a8      	cmp	r0, r5
 8003e34:	d9e0      	bls.n	8003df8 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 8003e36:	e7eb      	b.n	8003e10 <I2C_WaitOnTXISFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8003e38:	2000      	movs	r0, #0
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8003e3c:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}

08003e40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4604      	mov	r4, r0
 8003e44:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003e46:	f7fe ff07 	bl	8002c58 <HAL_GetTick>
 8003e4a:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	069b      	lsls	r3, r3, #26
 8003e52:	d419      	bmi.n	8003e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003e54:	4620      	mov	r0, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	f7ff ff4c 	bl	8003cf4 <I2C_IsAcknowledgeFailed>
 8003e5c:	b9b0      	cbnz	r0, 8003e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e5e:	b96d      	cbnz	r5, 8003e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003e64:	f043 0320 	orr.w	r3, r3, #32
 8003e68:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e72:	2300      	movs	r3, #0
 8003e74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003e78:	2003      	movs	r0, #3
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e7c:	f7fe feec 	bl	8002c58 <HAL_GetTick>
 8003e80:	1b80      	subs	r0, r0, r6
 8003e82:	42a8      	cmp	r0, r5
 8003e84:	d9e2      	bls.n	8003e4c <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8003e86:	e7eb      	b.n	8003e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003e88:	2000      	movs	r0, #0
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8003e8c:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}

08003e90 <HAL_I2C_MspInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003e90:	4770      	bx	lr

08003e92 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8003e92:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003e94:	4604      	mov	r4, r0
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d041      	beq.n	8003f1e <HAL_I2C_Init+0x8c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003e9a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003e9e:	b90b      	cbnz	r3, 8003ea4 <HAL_I2C_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ea0:	f7ff fff6 	bl	8003e90 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	68e1      	ldr	r1, [r4, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eb6:	6862      	ldr	r2, [r4, #4]
 8003eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ebc:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec4:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8003ec6:	68a2      	ldr	r2, [r4, #8]
 8003ec8:	b142      	cbz	r2, 8003edc <HAL_I2C_Init+0x4a>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eca:	2901      	cmp	r1, #1
 8003ecc:	d103      	bne.n	8003ed6 <HAL_I2C_Init+0x44>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	e007      	b.n	8003ee6 <HAL_I2C_Init+0x54>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ed6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003eda:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003edc:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ede:	bf04      	itt	eq
 8003ee0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003ee4:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ee6:	685a      	ldr	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ee8:	6961      	ldr	r1, [r4, #20]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eea:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ef2:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ef4:	6922      	ldr	r2, [r4, #16]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	69a1      	ldr	r1, [r4, #24]
 8003efa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003efe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f00:	6a21      	ldr	r1, [r4, #32]
 8003f02:	69e2      	ldr	r2, [r4, #28]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f14:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 8003f1c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003f1e:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 8003f20:	bd10      	pop	{r4, pc}
	...

08003f24 <HAL_I2C_Master_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003f28:	4617      	mov	r7, r2
  uint32_t sizetmp = 0;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003f2a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	2a01      	cmp	r2, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f32:	4604      	mov	r4, r0
 8003f34:	4688      	mov	r8, r1
 8003f36:	461d      	mov	r5, r3
  uint32_t sizetmp = 0;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003f38:	d159      	bne.n	8003fee <HAL_I2C_Master_Transmit+0xca>
  {    
    if((pData == NULL ) || (Size == 0)) 
 8003f3a:	b90f      	cbnz	r7, 8003f40 <HAL_I2C_Master_Transmit+0x1c>
    {
      return  HAL_ERROR;                                    
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	e059      	b.n	8003ff4 <HAL_I2C_Master_Transmit+0xd0>
{
  uint32_t sizetmp = 0;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL ) || (Size == 0)) 
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0fb      	beq.n	8003f3c <HAL_I2C_Master_Transmit+0x18>
    {
      return  HAL_ERROR;                                    
    }
    
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f44:	6803      	ldr	r3, [r0, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8003f4c:	d14f      	bne.n	8003fee <HAL_I2C_Master_Transmit+0xca>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4e:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8003f52:	2e01      	cmp	r6, #1
 8003f54:	d04b      	beq.n	8003fee <HAL_I2C_Master_Transmit+0xca>
 8003f56:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_TX;
 8003f5a:	2212      	movs	r2, #18
 8003f5c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f60:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8003f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 8003f68:	2dff      	cmp	r5, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f6a:	9300      	str	r3, [sp, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8003f6c:	d81f      	bhi.n	8003fae <HAL_I2C_Master_Transmit+0x8a>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
      sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003f6e:	b2ea      	uxtb	r2, r5
 8003f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f74:	f7ff fea8 	bl	8003cc8 <I2C_TransferConfig>
      sizetmp = Size;
 8003f78:	462e      	mov	r6, r5
    }
      
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	9908      	ldr	r1, [sp, #32]
 8003f7e:	f7ff ff35 	bl	8003dec <I2C_WaitOnTXISFlagUntilTimeout>
 8003f82:	bb10      	cbnz	r0, 8003fca <HAL_I2C_Master_Transmit+0xa6>
        {
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*pData++);
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	f817 2b01 	ldrb.w	r2, [r7], #1
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
      sizetmp--;
      Size--;
 8003f8c:	3d01      	subs	r5, #1

      if((sizetmp == 0)&&(Size!=0))
 8003f8e:	3e01      	subs	r6, #1
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*pData++);
      sizetmp--;
      Size--;
 8003f90:	b2ad      	uxth	r5, r5

      if((sizetmp == 0)&&(Size!=0))
 8003f92:	d113      	bne.n	8003fbc <HAL_I2C_Master_Transmit+0x98>
 8003f94:	b1a5      	cbz	r5, 8003fc0 <HAL_I2C_Master_Transmit+0x9c>
      {
        /* Wait until TXE flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8003f96:	4620      	mov	r0, r4
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	4632      	mov	r2, r6
 8003f9c:	9b08      	ldr	r3, [sp, #32]
 8003f9e:	f7ff fef1 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	bb30      	cbnz	r0, 8003ff2 <HAL_I2C_Master_Transmit+0xce>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fa4:	9600      	str	r6, [sp, #0]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8003faa:	2dff      	cmp	r5, #255	; 0xff
 8003fac:	e7de      	b.n	8003f6c <HAL_I2C_Master_Transmit+0x48>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fb4:	f7ff fe88 	bl	8003cc8 <I2C_TransferConfig>
          sizetmp = 255;
 8003fb8:	26ff      	movs	r6, #255	; 0xff
 8003fba:	e7de      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x56>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          sizetmp = Size;
        }
      }

    }while(Size > 0);
 8003fbc:	2d00      	cmp	r5, #0
 8003fbe:	d1dc      	bne.n	8003f7a <HAL_I2C_Master_Transmit+0x56>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	9908      	ldr	r1, [sp, #32]
 8003fc4:	f7ff ff3c 	bl	8003e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fc8:	b120      	cbz	r0, 8003fd4 <HAL_I2C_Master_Transmit+0xb0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fca:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_I2C_Master_Transmit+0xce>
 8003fd2:	e7b3      	b.n	8003f3c <HAL_I2C_Master_Transmit+0x18>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <HAL_I2C_Master_Transmit+0xd8>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY; 	  
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

    return HAL_OK;
 8003fec:	e002      	b.n	8003ff4 <HAL_I2C_Master_Transmit+0xd0>
  }
  else
  {
    return HAL_BUSY; 
 8003fee:	2002      	movs	r0, #2
 8003ff0:	e000      	b.n	8003ff4 <HAL_I2C_Master_Transmit+0xd0>
      if((sizetmp == 0)&&(Size!=0))
      {
        /* Wait until TXE flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
 8003ff2:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY; 
  }
}
 8003ff4:	b002      	add	sp, #8
 8003ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffa:	bf00      	nop
 8003ffc:	fe00e800 	.word	0xfe00e800

08004000 <HAL_I2C_Master_Receive>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004004:	4617      	mov	r7, r2
  uint32_t sizetmp = 0;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004006:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	2a01      	cmp	r2, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400e:	4604      	mov	r4, r0
 8004010:	4688      	mov	r8, r1
 8004012:	461d      	mov	r5, r3
  uint32_t sizetmp = 0;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004014:	d15c      	bne.n	80040d0 <HAL_I2C_Master_Receive+0xd0>
  {    
    if((pData == NULL ) || (Size == 0)) 
 8004016:	b90f      	cbnz	r7, 800401c <HAL_I2C_Master_Receive+0x1c>
    {
      return  HAL_ERROR;                                    
 8004018:	2001      	movs	r0, #1
 800401a:	e05a      	b.n	80040d2 <HAL_I2C_Master_Receive+0xd2>
{
  uint32_t sizetmp = 0;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL ) || (Size == 0)) 
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0fb      	beq.n	8004018 <HAL_I2C_Master_Receive+0x18>
    {
      return  HAL_ERROR;                                    
    }
    
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004020:	6803      	ldr	r3, [r0, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8004028:	d152      	bne.n	80040d0 <HAL_I2C_Master_Receive+0xd0>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402a:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 800402e:	2e01      	cmp	r6, #1
 8004030:	d04e      	beq.n	80040d0 <HAL_I2C_Master_Receive+0xd0>
 8004032:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_RX;
 8004036:	2222      	movs	r2, #34	; 0x22
 8004038:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800403c:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8004040:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 8004044:	2dff      	cmp	r5, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004046:	9300      	str	r3, [sp, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 8004048:	d821      	bhi.n	800408e <HAL_I2C_Master_Receive+0x8e>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800404a:	b2ea      	uxtb	r2, r5
 800404c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004050:	f7ff fe3a 	bl	8003cc8 <I2C_TransferConfig>
      sizetmp = Size;
 8004054:	462e      	mov	r6, r5
    }
    
    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8004056:	4620      	mov	r0, r4
 8004058:	2104      	movs	r1, #4
 800405a:	2200      	movs	r2, #0
 800405c:	9b08      	ldr	r3, [sp, #32]
 800405e:	f7ff fe91 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8004062:	bb30      	cbnz	r0, 80040b2 <HAL_I2C_Master_Receive+0xb2>
      {
        return HAL_TIMEOUT;
      }
     
      /* Write data to RXDR */
      (*pData++) =hi2c->Instance->RXDR;
 8004064:	6823      	ldr	r3, [r4, #0]
      sizetmp--;
      Size--;
 8004066:	3d01      	subs	r5, #1
      {
        return HAL_TIMEOUT;
      }
     
      /* Write data to RXDR */
      (*pData++) =hi2c->Instance->RXDR;
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f807 3b01 	strb.w	r3, [r7], #1
      sizetmp--;
      Size--;

      if((sizetmp == 0)&&(Size!=0))
 800406e:	3e01      	subs	r6, #1
      }
     
      /* Write data to RXDR */
      (*pData++) =hi2c->Instance->RXDR;
      sizetmp--;
      Size--;
 8004070:	b2ad      	uxth	r5, r5

      if((sizetmp == 0)&&(Size!=0))
 8004072:	d113      	bne.n	800409c <HAL_I2C_Master_Receive+0x9c>
 8004074:	b1a5      	cbz	r5, 80040a0 <HAL_I2C_Master_Receive+0xa0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004076:	4620      	mov	r0, r4
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	4632      	mov	r2, r6
 800407c:	9b08      	ldr	r3, [sp, #32]
 800407e:	f7ff fe81 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8004082:	b9b0      	cbnz	r0, 80040b2 <HAL_I2C_Master_Receive+0xb2>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004084:	9600      	str	r6, [sp, #0]
 8004086:	4620      	mov	r0, r4
 8004088:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 800408a:	2dff      	cmp	r5, #255	; 0xff
 800408c:	e7dc      	b.n	8004048 <HAL_I2C_Master_Receive+0x48>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800408e:	22ff      	movs	r2, #255	; 0xff
 8004090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004094:	f7ff fe18 	bl	8003cc8 <I2C_TransferConfig>
          sizetmp = 255;
 8004098:	26ff      	movs	r6, #255	; 0xff
 800409a:	e7dc      	b.n	8004056 <HAL_I2C_Master_Receive+0x56>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          sizetmp = Size;
        }
      }

    }while(Size > 0);
 800409c:	2d00      	cmp	r5, #0
 800409e:	d1da      	bne.n	8004056 <HAL_I2C_Master_Receive+0x56>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 80040a0:	4620      	mov	r0, r4
 80040a2:	2119      	movs	r1, #25
 80040a4:	f7ff fecc 	bl	8003e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040a8:	b128      	cbz	r0, 80040b6 <HAL_I2C_Master_Receive+0xb6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040aa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d0b2      	beq.n	8004018 <HAL_I2C_Master_Receive+0x18>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 80040b2:	2003      	movs	r0, #3
 80040b4:	e00d      	b.n	80040d2 <HAL_I2C_Master_Receive+0xd2>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	2220      	movs	r2, #32
 80040ba:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	4a06      	ldr	r2, [pc, #24]	; (80040d8 <HAL_I2C_Master_Receive+0xd8>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY; 	  
 80040c4:	2301      	movs	r3, #1
 80040c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ca:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 80040ce:	e000      	b.n	80040d2 <HAL_I2C_Master_Receive+0xd2>
  }
  else
  {
    return HAL_BUSY; 
 80040d0:	2002      	movs	r0, #2
  }
}
 80040d2:	b002      	add	sp, #8
 80040d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d8:	fe00e800 	.word	0xfe00e800

080040dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80040dc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80040de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80040e2:	b90b      	cbnz	r3, 80040e8 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80040e4:	2002      	movs	r0, #2
 80040e6:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4798      	blx	r3
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d1f9      	bne.n	80040e4 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80040f0:	bd08      	pop	{r3, pc}

080040f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80040f2:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80040f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4798      	blx	r3
  return USBD_OK;
}
 80040fc:	2000      	movs	r0, #0
 80040fe:	bd08      	pop	{r3, pc}

08004100 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004104:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8004108:	4628      	mov	r0, r5
 800410a:	f000 f8c8 	bl	800429e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800410e:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004110:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004114:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004118:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800411c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004120:	f001 031f 	and.w	r3, r1, #31
 8004124:	2b01      	cmp	r3, #1
 8004126:	d00c      	beq.n	8004142 <USBD_LL_SetupStage+0x42>
 8004128:	d306      	bcc.n	8004138 <USBD_LL_SetupStage+0x38>
 800412a:	2b02      	cmp	r3, #2
 800412c:	d10e      	bne.n	800414c <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800412e:	4620      	mov	r0, r4
 8004130:	4629      	mov	r1, r5
 8004132:	f000 f9f7 	bl	8004524 <USBD_StdEPReq>
    break;
 8004136:	e00e      	b.n	8004156 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004138:	4620      	mov	r0, r4
 800413a:	4629      	mov	r1, r5
 800413c:	f000 f8ce 	bl	80042dc <USBD_StdDevReq>
    break;
 8004140:	e009      	b.n	8004156 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f000 f9d5 	bl	80044f4 <USBD_StdItfReq>
    break;
 800414a:	e004      	b.n	8004156 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800414c:	4620      	mov	r0, r4
 800414e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004152:	f000 faca 	bl	80046ea <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8004156:	2000      	movs	r0, #0
 8004158:	bd38      	pop	{r3, r4, r5, pc}

0800415a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800415a:	b510      	push	{r4, lr}
 800415c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800415e:	bb09      	cbnz	r1, 80041a4 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004160:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8004164:	2b03      	cmp	r3, #3
 8004166:	d126      	bne.n	80041b6 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 8004168:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800416c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8004170:	4299      	cmp	r1, r3
 8004172:	d90a      	bls.n	800418a <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8004174:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004176:	428b      	cmp	r3, r1
 8004178:	bf28      	it	cs
 800417a:	460b      	movcs	r3, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 800417c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8004180:	4611      	mov	r1, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	f000 fa3e 	bl	8004604 <USBD_CtlContinueRx>
 8004188:	e015      	b.n	80041b6 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800418a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	b123      	cbz	r3, 800419c <USBD_LL_DataOutStage+0x42>
 8004192:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004196:	2a03      	cmp	r2, #3
 8004198:	d100      	bne.n	800419c <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800419a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800419c:	4620      	mov	r0, r4
 800419e:	f000 fa3a 	bl	8004616 <USBD_CtlSendStatus>
 80041a2:	e008      	b.n	80041b6 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80041a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	b123      	cbz	r3, 80041b6 <USBD_LL_DataOutStage+0x5c>
 80041ac:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80041b0:	2a03      	cmp	r2, #3
 80041b2:	d100      	bne.n	80041b6 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80041b4:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80041b6:	2000      	movs	r0, #0
 80041b8:	bd10      	pop	{r4, pc}

080041ba <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80041ba:	b538      	push	{r3, r4, r5, lr}
 80041bc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80041be:	bba9      	cbnz	r1, 800422c <USBD_LL_DataInStage+0x72>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80041c0:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d129      	bne.n	800421c <USBD_LL_DataInStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 80041c8:	69c5      	ldr	r5, [r0, #28]
 80041ca:	6a03      	ldr	r3, [r0, #32]
 80041cc:	429d      	cmp	r5, r3
 80041ce:	d906      	bls.n	80041de <USBD_LL_DataInStage+0x24>
      {
        pep->rem_length -=  pep->maxpacket;
 80041d0:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 80041d2:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 80041d4:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	f000 fa0b 	bl	80045f2 <USBD_CtlContinueSendData>
 80041dc:	e01e      	b.n	800421c <USBD_LL_DataInStage+0x62>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80041de:	6982      	ldr	r2, [r0, #24]
 80041e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80041e4:	fb03 2515 	mls	r5, r3, r5, r2
 80041e8:	b95d      	cbnz	r5, 8004202 <USBD_LL_DataInStage+0x48>
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d309      	bcc.n	8004202 <USBD_LL_DataInStage+0x48>
           (pep->total_length >= pep->maxpacket) &&
 80041ee:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d205      	bcs.n	8004202 <USBD_LL_DataInStage+0x48>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80041f6:	462a      	mov	r2, r5
 80041f8:	f000 f9fb 	bl	80045f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80041fc:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 8004200:	e00c      	b.n	800421c <USBD_LL_DataInStage+0x62>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004202:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	b12b      	cbz	r3, 8004216 <USBD_LL_DataInStage+0x5c>
 800420a:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800420e:	2a03      	cmp	r2, #3
 8004210:	d101      	bne.n	8004216 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004212:	4620      	mov	r0, r4
 8004214:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004216:	4620      	mov	r0, r4
 8004218:	f000 fa08 	bl	800462c <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800421c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004220:	2b01      	cmp	r3, #1
 8004222:	d10c      	bne.n	800423e <USBD_LL_DataInStage+0x84>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 800422a:	e008      	b.n	800423e <USBD_LL_DataInStage+0x84>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800422c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	b123      	cbz	r3, 800423e <USBD_LL_DataInStage+0x84>
 8004234:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004238:	2a03      	cmp	r2, #3
 800423a:	d100      	bne.n	800423e <USBD_LL_DataInStage+0x84>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800423c:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800423e:	2000      	movs	r0, #0
 8004240:	bd38      	pop	{r3, r4, r5, pc}

08004242 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004242:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004244:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004246:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004248:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800424a:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800424c:	2340      	movs	r3, #64	; 0x40
 800424e:	f000 fa42 	bl	80046d6 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004252:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004254:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004258:	4620      	mov	r0, r4
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	2200      	movs	r2, #0
 800425e:	f000 fa3a 	bl	80046d6 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004262:	2301      	movs	r3, #1
 8004264:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004268:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800426c:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 800426e:	b12b      	cbz	r3, 800427c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004270:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004274:	7921      	ldrb	r1, [r4, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4620      	mov	r0, r4
 800427a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800427c:	2000      	movs	r0, #0
 800427e:	bd38      	pop	{r3, r4, r5, pc}

08004280 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004280:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004282:	2000      	movs	r0, #0
 8004284:	4770      	bx	lr

08004286 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004286:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004288:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800428c:	2a03      	cmp	r2, #3
 800428e:	d104      	bne.n	800429a <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004290:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	b103      	cbz	r3, 800429a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004298:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800429a:	2000      	movs	r0, #0
 800429c:	bd08      	pop	{r3, pc}

0800429e <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 800429e:	780b      	ldrb	r3, [r1, #0]
 80042a0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80042a2:	784b      	ldrb	r3, [r1, #1]
 80042a4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80042a6:	78ca      	ldrb	r2, [r1, #3]
 80042a8:	788b      	ldrb	r3, [r1, #2]
 80042aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80042ae:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80042b0:	794a      	ldrb	r2, [r1, #5]
 80042b2:	790b      	ldrb	r3, [r1, #4]
 80042b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80042b8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80042ba:	79ca      	ldrb	r2, [r1, #7]
 80042bc:	798b      	ldrb	r3, [r1, #6]
 80042be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80042c2:	80c3      	strh	r3, [r0, #6]
 80042c4:	4770      	bx	lr

080042c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80042c6:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 80042c8:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80042ca:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80042cc:	f000 fa0d 	bl	80046ea <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80042d0:	4620      	mov	r0, r4
 80042d2:	2100      	movs	r1, #0
}
 80042d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 80042d8:	f000 ba07 	b.w	80046ea <USBD_LL_StallEP>

080042dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80042dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80042de:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80042e0:	4604      	mov	r4, r0
 80042e2:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	f200 80fc 	bhi.w	80044e2 <USBD_StdDevReq+0x206>
 80042ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80042ee:	00ce      	.short	0x00ce
 80042f0:	00fa00e5 	.word	0x00fa00e5
 80042f4:	00fa00e1 	.word	0x00fa00e1
 80042f8:	000a0077 	.word	0x000a0077
 80042fc:	00bd00fa 	.word	0x00bd00fa
 8004300:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004302:	884b      	ldrh	r3, [r1, #2]
 8004304:	0a1a      	lsrs	r2, r3, #8
 8004306:	3a01      	subs	r2, #1
 8004308:	2a06      	cmp	r2, #6
 800430a:	f200 80ea 	bhi.w	80044e2 <USBD_StdDevReq+0x206>
 800430e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004312:	0007      	.short	0x0007
 8004314:	0018000b 	.word	0x0018000b
 8004318:	00e800e8 	.word	0x00e800e8
 800431c:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004320:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	e02c      	b.n	8004382 <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004328:	7c02      	ldrb	r2, [r0, #16]
 800432a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800432e:	b90a      	cbnz	r2, 8004334 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	e000      	b.n	8004336 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	f10d 0006 	add.w	r0, sp, #6
 800433a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800433c:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800433e:	4601      	mov	r1, r0
 8004340:	e03c      	b.n	80043bc <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b05      	cmp	r3, #5
 8004346:	f200 80cc 	bhi.w	80044e2 <USBD_StdDevReq+0x206>
 800434a:	e8df f003 	tbb	[pc, r3]
 800434e:	0703      	.short	0x0703
 8004350:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004354:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	e012      	b.n	8004382 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800435c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	e00e      	b.n	8004382 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004364:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	e00a      	b.n	8004382 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800436c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	e006      	b.n	8004382 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004374:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	e002      	b.n	8004382 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800437c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	7c20      	ldrb	r0, [r4, #16]
 8004384:	f10d 0106 	add.w	r1, sp, #6
 8004388:	4798      	blx	r3
 800438a:	e009      	b.n	80043a0 <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800438c:	7c03      	ldrb	r3, [r0, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f040 80a7 	bne.w	80044e2 <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004394:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004398:	f10d 0006 	add.w	r0, sp, #6
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	4798      	blx	r3
 80043a0:	4601      	mov	r1, r0
 80043a2:	e00c      	b.n	80043be <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80043a4:	7c03      	ldrb	r3, [r0, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 809b 	bne.w	80044e2 <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80043ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80043b0:	f10d 0006 	add.w	r0, sp, #6
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80043b8:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80043ba:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80043bc:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80043be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8091 	beq.w	80044ea <USBD_StdDevReq+0x20e>
 80043c8:	88ea      	ldrh	r2, [r5, #6]
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	f000 808d 	beq.w	80044ea <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 80043d0:	429a      	cmp	r2, r3
 80043d2:	bf28      	it	cs
 80043d4:	461a      	movcs	r2, r3
 80043d6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80043da:	e054      	b.n	8004486 <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80043dc:	888b      	ldrh	r3, [r1, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d17f      	bne.n	80044e2 <USBD_StdDevReq+0x206>
 80043e2:	88cb      	ldrh	r3, [r1, #6]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d17c      	bne.n	80044e2 <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80043e8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80043ec:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80043ee:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80043f0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80043f4:	d075      	beq.n	80044e2 <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80043f6:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80043fa:	4631      	mov	r1, r6
 80043fc:	f000 f996 	bl	800472c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004400:	4620      	mov	r0, r4
 8004402:	f000 f908 	bl	8004616 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004406:	b10e      	cbz	r6, 800440c <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004408:	2302      	movs	r3, #2
 800440a:	e000      	b.n	800440e <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800440c:	2301      	movs	r3, #1
 800440e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8004412:	e06a      	b.n	80044ea <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004414:	7889      	ldrb	r1, [r1, #2]
 8004416:	4e36      	ldr	r6, [pc, #216]	; (80044f0 <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004418:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800441a:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800441c:	d861      	bhi.n	80044e2 <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 800441e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004422:	2b02      	cmp	r3, #2
 8004424:	d002      	beq.n	800442c <USBD_StdDevReq+0x150>
 8004426:	2b03      	cmp	r3, #3
 8004428:	d008      	beq.n	800443c <USBD_StdDevReq+0x160>
 800442a:	e05a      	b.n	80044e2 <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800442c:	2900      	cmp	r1, #0
 800442e:	d054      	beq.n	80044da <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004430:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004432:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004434:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004436:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 800443a:	e00f      	b.n	800445c <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800443c:	b931      	cbnz	r1, 800444c <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800443e:	2302      	movs	r3, #2
 8004440:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004444:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004446:	f7ff fe54 	bl	80040f2 <USBD_ClrClassConfig>
 800444a:	e046      	b.n	80044da <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 800444c:	6841      	ldr	r1, [r0, #4]
 800444e:	2901      	cmp	r1, #1
 8004450:	d043      	beq.n	80044da <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004452:	b2c9      	uxtb	r1, r1
 8004454:	f7ff fe4d 	bl	80040f2 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8004458:	7831      	ldrb	r1, [r6, #0]
 800445a:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800445c:	4620      	mov	r0, r4
 800445e:	f7ff fe3d 	bl	80040dc <USBD_SetClassConfig>
 8004462:	2802      	cmp	r0, #2
 8004464:	d139      	bne.n	80044da <USBD_StdDevReq+0x1fe>
 8004466:	e03c      	b.n	80044e2 <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8004468:	88ca      	ldrh	r2, [r1, #6]
 800446a:	2a01      	cmp	r2, #1
 800446c:	d139      	bne.n	80044e2 <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 800446e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004472:	2b02      	cmp	r3, #2
 8004474:	d003      	beq.n	800447e <USBD_StdDevReq+0x1a2>
 8004476:	2b03      	cmp	r3, #3
 8004478:	d133      	bne.n	80044e2 <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 800447a:	1d01      	adds	r1, r0, #4
 800447c:	e015      	b.n	80044aa <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 800447e:	4601      	mov	r1, r0
 8004480:	2300      	movs	r3, #0
 8004482:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8004486:	4620      	mov	r0, r4
 8004488:	e00f      	b.n	80044aa <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 800448a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800448e:	3b02      	subs	r3, #2
 8004490:	2b01      	cmp	r3, #1
 8004492:	d826      	bhi.n	80044e2 <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004494:	2301      	movs	r3, #1
 8004496:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004498:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800449c:	b10b      	cbz	r3, 80044a2 <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800449e:	2303      	movs	r3, #3
 80044a0:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 80044a2:	4620      	mov	r0, r4
 80044a4:	f104 010c 	add.w	r1, r4, #12
 80044a8:	2202      	movs	r2, #2
 80044aa:	f000 f894 	bl	80045d6 <USBD_CtlSendData>
 80044ae:	e01c      	b.n	80044ea <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80044b0:	884b      	ldrh	r3, [r1, #2]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d119      	bne.n	80044ea <USBD_StdDevReq+0x20e>
 80044b6:	e008      	b.n	80044ca <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 80044b8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80044bc:	3b02      	subs	r3, #2
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d80f      	bhi.n	80044e2 <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80044c2:	884b      	ldrh	r3, [r1, #2]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d110      	bne.n	80044ea <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80044ce:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80044d2:	4620      	mov	r0, r4
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4629      	mov	r1, r5
 80044d8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80044da:	4620      	mov	r0, r4
 80044dc:	f000 f89b 	bl	8004616 <USBD_CtlSendStatus>
 80044e0:	e003      	b.n	80044ea <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7ff feee 	bl	80042c6 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80044ea:	2000      	movs	r0, #0
 80044ec:	b002      	add	sp, #8
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	20000a54 	.word	0x20000a54

080044f4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80044f4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80044f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80044fa:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80044fc:	4604      	mov	r4, r0
 80044fe:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8004500:	d10c      	bne.n	800451c <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004502:	790b      	ldrb	r3, [r1, #4]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d809      	bhi.n	800451c <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8004508:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004510:	88eb      	ldrh	r3, [r5, #6]
 8004512:	b92b      	cbnz	r3, 8004520 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8004514:	4620      	mov	r0, r4
 8004516:	f000 f87e 	bl	8004616 <USBD_CtlSendStatus>
 800451a:	e001      	b.n	8004520 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 800451c:	f7ff fed3 	bl	80042c6 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8004520:	2000      	movs	r0, #0
 8004522:	bd38      	pop	{r3, r4, r5, pc}

08004524 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004524:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 8004526:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004528:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 800452a:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800452c:	4604      	mov	r4, r0
 800452e:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004530:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 8004532:	d010      	beq.n	8004556 <USBD_StdEPReq+0x32>
 8004534:	d326      	bcc.n	8004584 <USBD_StdEPReq+0x60>
 8004536:	2e03      	cmp	r6, #3
 8004538:	d14b      	bne.n	80045d2 <USBD_StdEPReq+0xae>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 800453a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800453e:	2a02      	cmp	r2, #2
 8004540:	d027      	beq.n	8004592 <USBD_StdEPReq+0x6e>
 8004542:	2a03      	cmp	r2, #3
 8004544:	d143      	bne.n	80045ce <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004546:	884a      	ldrh	r2, [r1, #2]
 8004548:	b992      	cbnz	r2, 8004570 <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800454a:	065e      	lsls	r6, r3, #25
 800454c:	d010      	beq.n	8004570 <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 800454e:	4619      	mov	r1, r3
 8004550:	f000 f8cb 	bl	80046ea <USBD_LL_StallEP>
 8004554:	e00c      	b.n	8004570 <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8004556:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800455a:	2a02      	cmp	r2, #2
 800455c:	d019      	beq.n	8004592 <USBD_StdEPReq+0x6e>
 800455e:	2a03      	cmp	r2, #3
 8004560:	d135      	bne.n	80045ce <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004562:	884a      	ldrh	r2, [r1, #2]
 8004564:	bbaa      	cbnz	r2, 80045d2 <USBD_StdEPReq+0xae>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8004566:	0659      	lsls	r1, r3, #25
 8004568:	d008      	beq.n	800457c <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800456a:	4619      	mov	r1, r3
 800456c:	f000 f8c4 	bl	80046f8 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004570:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004574:	4620      	mov	r0, r4
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4629      	mov	r1, r5
 800457a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800457c:	4620      	mov	r0, r4
 800457e:	f000 f84a 	bl	8004616 <USBD_CtlSendStatus>
 8004582:	e026      	b.n	80045d2 <USBD_StdEPReq+0xae>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8004584:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 8004588:	2d02      	cmp	r5, #2
 800458a:	d002      	beq.n	8004592 <USBD_StdEPReq+0x6e>
 800458c:	2d03      	cmp	r5, #3
 800458e:	d006      	beq.n	800459e <USBD_StdEPReq+0x7a>
 8004590:	e01d      	b.n	80045ce <USBD_StdEPReq+0xaa>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8004592:	065a      	lsls	r2, r3, #25
 8004594:	d01d      	beq.n	80045d2 <USBD_StdEPReq+0xae>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004596:	4619      	mov	r1, r3
 8004598:	f000 f8a7 	bl	80046ea <USBD_LL_StallEP>
 800459c:	e019      	b.n	80045d2 <USBD_StdEPReq+0xae>
 800459e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80045a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045a6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80045aa:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80045ac:	bf14      	ite	ne
 80045ae:	3514      	addne	r5, #20
 80045b0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80045b4:	f000 f8a7 	bl	8004706 <USBD_LL_IsStallEP>
 80045b8:	b110      	cbz	r0, 80045c0 <USBD_StdEPReq+0x9c>
      {
        pep->status = 0x0001;     
 80045ba:	2301      	movs	r3, #1
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	e000      	b.n	80045c2 <USBD_StdEPReq+0x9e>
      }
      else
      {
        pep->status = 0x0000;  
 80045c0:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 80045c2:	4620      	mov	r0, r4
 80045c4:	4629      	mov	r1, r5
 80045c6:	2202      	movs	r2, #2
 80045c8:	f000 f805 	bl	80045d6 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 80045cc:	e001      	b.n	80045d2 <USBD_StdEPReq+0xae>
      
    default:                         
      USBD_CtlError(pdev , req);
 80045ce:	f7ff fe7a 	bl	80042c6 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 80045d2:	2000      	movs	r0, #0
 80045d4:	bd70      	pop	{r4, r5, r6, pc}

080045d6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80045d6:	b538      	push	{r3, r4, r5, lr}
 80045d8:	4613      	mov	r3, r2
 80045da:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80045dc:	2202      	movs	r2, #2
 80045de:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80045e2:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 80045e4:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80045e6:	2100      	movs	r1, #0
 80045e8:	462a      	mov	r2, r5
 80045ea:	f000 f8a6 	bl	800473a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80045ee:	2000      	movs	r0, #0
 80045f0:	bd38      	pop	{r3, r4, r5, pc}

080045f2 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80045f2:	b510      	push	{r4, lr}
 80045f4:	460c      	mov	r4, r1
 80045f6:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80045f8:	2100      	movs	r1, #0
 80045fa:	4622      	mov	r2, r4
 80045fc:	f000 f89d 	bl	800473a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004600:	2000      	movs	r0, #0
 8004602:	bd10      	pop	{r4, pc}

08004604 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004604:	b510      	push	{r4, lr}
 8004606:	460c      	mov	r4, r1
 8004608:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 800460a:	2100      	movs	r1, #0
 800460c:	4622      	mov	r2, r4
 800460e:	f000 f89b 	bl	8004748 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004612:	2000      	movs	r0, #0
 8004614:	bd10      	pop	{r4, pc}

08004616 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004616:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004618:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800461a:	2304      	movs	r3, #4
 800461c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004620:	460a      	mov	r2, r1
 8004622:	460b      	mov	r3, r1
 8004624:	f000 f889 	bl	800473a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004628:	2000      	movs	r0, #0
 800462a:	bd08      	pop	{r3, pc}

0800462c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800462c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800462e:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004630:	2305      	movs	r3, #5
 8004632:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004636:	460a      	mov	r2, r1
 8004638:	460b      	mov	r3, r1
 800463a:	f000 f885 	bl	8004748 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800463e:	2000      	movs	r0, #0
 8004640:	bd08      	pop	{r3, pc}

08004642 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004642:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8004646:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8004648:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800464c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8004650:	4770      	bx	lr

08004652 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004652:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004654:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004658:	b175      	cbz	r5, 8004678 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800465a:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800465e:	b96c      	cbnz	r4, 800467c <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004660:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 8004664:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8004668:	2181      	movs	r1, #129	; 0x81
 800466a:	f000 f866 	bl	800473a <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 8004674:	4620      	mov	r0, r4
 8004676:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004678:	2002      	movs	r0, #2
 800467a:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800467c:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800467e:	bd38      	pop	{r3, r4, r5, pc}

08004680 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004680:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8004682:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 8004686:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800468a:	f7ff bd39 	b.w	8004100 <USBD_LL_SetupStage>

0800468e <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800468e:	231c      	movs	r3, #28
 8004690:	fb03 0301 	mla	r3, r3, r1, r0
 8004694:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004698:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800469c:	f7ff bd5d 	b.w	800415a <USBD_LL_DataOutStage>

080046a0 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80046a0:	231c      	movs	r3, #28
 80046a2:	fb03 0301 	mla	r3, r3, r1, r0
 80046a6:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80046aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ac:	f7ff bd85 	b.w	80041ba <USBD_LL_DataInStage>

080046b0 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80046b0:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80046b4:	f7ff bde7 	b.w	8004286 <USBD_LL_SOF>

080046b8 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80046bc:	2101      	movs	r1, #1
 80046be:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80046c2:	f7ff fddd 	bl	8004280 <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80046c6:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 80046ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80046ce:	f7ff bdb8 	b.w	8004242 <USBD_LL_Reset>

080046d2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80046d2:	4770      	bx	lr

080046d4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80046d4:	4770      	bx	lr

080046d6 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80046d6:	b510      	push	{r4, lr}
 80046d8:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 80046da:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046de:	461a      	mov	r2, r3
 80046e0:	4623      	mov	r3, r4
 80046e2:	f7fe fc00 	bl	8002ee6 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80046e6:	2000      	movs	r0, #0
 80046e8:	bd10      	pop	{r4, pc}

080046ea <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80046ea:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80046ec:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046f0:	f7ff f923 	bl	800393a <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80046f4:	2000      	movs	r0, #0
 80046f6:	bd08      	pop	{r3, pc}

080046f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80046f8:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80046fa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046fe:	f7ff f96d 	bl	80039dc <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8004702:	2000      	movs	r0, #0
 8004704:	bd08      	pop	{r3, pc}

08004706 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004706:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800470a:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800470e:	bf18      	it	ne
 8004710:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8004714:	f04f 001c 	mov.w	r0, #28
 8004718:	bf15      	itete	ne
 800471a:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800471e:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004722:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004726:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
  }
}
 800472a:	4770      	bx	lr

0800472c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800472c:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800472e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004732:	f7fe fbc2 	bl	8002eba <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8004736:	2000      	movs	r0, #0
 8004738:	bd08      	pop	{r3, pc}

0800473a <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800473a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800473c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004740:	f7fe fde7 	bl	8003312 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8004744:	2000      	movs	r0, #0
 8004746:	bd08      	pop	{r3, pc}

08004748 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8004748:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800474a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800474e:	f7fe fd66 	bl	800321e <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8004752:	2000      	movs	r0, #0
 8004754:	bd08      	pop	{r3, pc}
	...

08004758 <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800475a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800475c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004760:	4a03      	ldr	r2, [pc, #12]	; (8004770 <BSP_LED_On+0x18>)
 8004762:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004766:	2201      	movs	r2, #1
 8004768:	f7fe bb9e 	b.w	8002ea8 <HAL_GPIO_WritePin>
 800476c:	20000024 	.word	0x20000024
 8004770:	08018cb4 	.word	0x08018cb4

08004774 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004774:	4a04      	ldr	r2, [pc, #16]	; (8004788 <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004776:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004778:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800477c:	4a03      	ldr	r2, [pc, #12]	; (800478c <BSP_LED_Off+0x18>)
 800477e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004782:	2200      	movs	r2, #0
 8004784:	f7fe bb90 	b.w	8002ea8 <HAL_GPIO_WritePin>
 8004788:	20000024 	.word	0x20000024
 800478c:	08018cb4 	.word	0x08018cb4

08004790 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004790:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004792:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004794:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004798:	4a03      	ldr	r2, [pc, #12]	; (80047a8 <BSP_LED_Toggle+0x18>)
 800479a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800479e:	f7fe bb88 	b.w	8002eb2 <HAL_GPIO_TogglePin>
 80047a2:	bf00      	nop
 80047a4:	20000024 	.word	0x20000024
 80047a8:	08018cb4 	.word	0x08018cb4

080047ac <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80047ac:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80047ae:	4b03      	ldr	r3, [pc, #12]	; (80047bc <BSP_PB_GetState+0x10>)
 80047b0:	2101      	movs	r1, #1
 80047b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80047b6:	f7fe fb71 	bl	8002e9c <HAL_GPIO_ReadPin>
}
 80047ba:	bd08      	pop	{r3, pc}
 80047bc:	20000020 	.word	0x20000020

080047c0 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 80047c0:	4b02      	ldr	r3, [pc, #8]	; (80047cc <BSP_ACCELERO_GetXYZ+0xc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	b103      	cbz	r3, 80047ca <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80047c8:	4718      	bx	r3
 80047ca:	4770      	bx	lr
 80047cc:	20000a58 	.word	0x20000a58

080047d0 <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 80047d0:	4b02      	ldr	r3, [pc, #8]	; (80047dc <BSP_GYRO_GetXYZ+0xc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	b103      	cbz	r3, 80047da <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 80047d8:	4718      	bx	r3
 80047da:	4770      	bx	lr
 80047dc:	20000a5c 	.word	0x20000a5c

080047e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80047e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004818 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80047e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80047e6:	e003      	b.n	80047f0 <LoopCopyDataInit>

080047e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80047ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80047ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80047ee:	3104      	adds	r1, #4

080047f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80047f0:	480b      	ldr	r0, [pc, #44]	; (8004820 <LoopForever+0xa>)
	ldr	r3, =_edata
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <LoopForever+0xe>)
	adds	r2, r0, r1
 80047f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80047f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80047f8:	d3f6      	bcc.n	80047e8 <CopyDataInit>
	ldr	r2, =_sbss
 80047fa:	4a0b      	ldr	r2, [pc, #44]	; (8004828 <LoopForever+0x12>)
	b	LoopFillZerobss
 80047fc:	e002      	b.n	8004804 <LoopFillZerobss>

080047fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80047fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004800:	f842 3b04 	str.w	r3, [r2], #4

08004804 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <LoopForever+0x16>)
	cmp	r2, r3
 8004806:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004808:	d3f9      	bcc.n	80047fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800480a:	f7fd fd21 	bl	8002250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800480e:	f000 f833 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004812:	f7fc fdc5 	bl	80013a0 <main>

08004816 <LoopForever>:

LoopForever:
    b LoopForever
 8004816:	e7fe      	b.n	8004816 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004818:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800481c:	08018fac 	.word	0x08018fac
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004820:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004824:	200008e4 	.word	0x200008e4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004828:	200008e8 	.word	0x200008e8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 800482c:	20000f3c 	.word	0x20000f3c

08004830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004830:	e7fe      	b.n	8004830 <ADC1_2_IRQHandler>
	...

08004834 <atexit>:
 8004834:	4601      	mov	r1, r0
 8004836:	2000      	movs	r0, #0
 8004838:	4602      	mov	r2, r0
 800483a:	4603      	mov	r3, r0
 800483c:	f001 bd26 	b.w	800628c <__register_exitproc>

08004840 <__errno>:
 8004840:	4b01      	ldr	r3, [pc, #4]	; (8004848 <__errno+0x8>)
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000470 	.word	0x20000470

0800484c <__libc_fini_array>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <__libc_fini_array+0x24>)
 8004850:	4d08      	ldr	r5, [pc, #32]	; (8004874 <__libc_fini_array+0x28>)
 8004852:	1aed      	subs	r5, r5, r3
 8004854:	10ac      	asrs	r4, r5, #2
 8004856:	bf18      	it	ne
 8004858:	18ed      	addne	r5, r5, r3
 800485a:	d005      	beq.n	8004868 <__libc_fini_array+0x1c>
 800485c:	3c01      	subs	r4, #1
 800485e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004862:	4798      	blx	r3
 8004864:	2c00      	cmp	r4, #0
 8004866:	d1f9      	bne.n	800485c <__libc_fini_array+0x10>
 8004868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800486c:	f004 bf52 	b.w	8009714 <_fini>
 8004870:	08018fa8 	.word	0x08018fa8
 8004874:	08018fac 	.word	0x08018fac

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	4e0f      	ldr	r6, [pc, #60]	; (80048b8 <__libc_init_array+0x40>)
 800487c:	4d0f      	ldr	r5, [pc, #60]	; (80048bc <__libc_init_array+0x44>)
 800487e:	1b76      	subs	r6, r6, r5
 8004880:	10b6      	asrs	r6, r6, #2
 8004882:	bf18      	it	ne
 8004884:	2400      	movne	r4, #0
 8004886:	d005      	beq.n	8004894 <__libc_init_array+0x1c>
 8004888:	3401      	adds	r4, #1
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	42a6      	cmp	r6, r4
 8004892:	d1f9      	bne.n	8004888 <__libc_init_array+0x10>
 8004894:	4e0a      	ldr	r6, [pc, #40]	; (80048c0 <__libc_init_array+0x48>)
 8004896:	4d0b      	ldr	r5, [pc, #44]	; (80048c4 <__libc_init_array+0x4c>)
 8004898:	1b76      	subs	r6, r6, r5
 800489a:	f004 ff35 	bl	8009708 <_init>
 800489e:	10b6      	asrs	r6, r6, #2
 80048a0:	bf18      	it	ne
 80048a2:	2400      	movne	r4, #0
 80048a4:	d006      	beq.n	80048b4 <__libc_init_array+0x3c>
 80048a6:	3401      	adds	r4, #1
 80048a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ac:	4798      	blx	r3
 80048ae:	42a6      	cmp	r6, r4
 80048b0:	d1f9      	bne.n	80048a6 <__libc_init_array+0x2e>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	bf00      	nop
 80048b8:	08018fa0 	.word	0x08018fa0
 80048bc:	08018fa0 	.word	0x08018fa0
 80048c0:	08018fa8 	.word	0x08018fa8
 80048c4:	08018fa0 	.word	0x08018fa0

080048c8 <memset>:
 80048c8:	b470      	push	{r4, r5, r6}
 80048ca:	0784      	lsls	r4, r0, #30
 80048cc:	d046      	beq.n	800495c <memset+0x94>
 80048ce:	1e54      	subs	r4, r2, #1
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	d041      	beq.n	8004958 <memset+0x90>
 80048d4:	b2cd      	uxtb	r5, r1
 80048d6:	4603      	mov	r3, r0
 80048d8:	e002      	b.n	80048e0 <memset+0x18>
 80048da:	1e62      	subs	r2, r4, #1
 80048dc:	b3e4      	cbz	r4, 8004958 <memset+0x90>
 80048de:	4614      	mov	r4, r2
 80048e0:	f803 5b01 	strb.w	r5, [r3], #1
 80048e4:	079a      	lsls	r2, r3, #30
 80048e6:	d1f8      	bne.n	80048da <memset+0x12>
 80048e8:	2c03      	cmp	r4, #3
 80048ea:	d92e      	bls.n	800494a <memset+0x82>
 80048ec:	b2cd      	uxtb	r5, r1
 80048ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80048f2:	2c0f      	cmp	r4, #15
 80048f4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80048f8:	d919      	bls.n	800492e <memset+0x66>
 80048fa:	f103 0210 	add.w	r2, r3, #16
 80048fe:	4626      	mov	r6, r4
 8004900:	3e10      	subs	r6, #16
 8004902:	2e0f      	cmp	r6, #15
 8004904:	f842 5c10 	str.w	r5, [r2, #-16]
 8004908:	f842 5c0c 	str.w	r5, [r2, #-12]
 800490c:	f842 5c08 	str.w	r5, [r2, #-8]
 8004910:	f842 5c04 	str.w	r5, [r2, #-4]
 8004914:	f102 0210 	add.w	r2, r2, #16
 8004918:	d8f2      	bhi.n	8004900 <memset+0x38>
 800491a:	f1a4 0210 	sub.w	r2, r4, #16
 800491e:	f022 020f 	bic.w	r2, r2, #15
 8004922:	f004 040f 	and.w	r4, r4, #15
 8004926:	3210      	adds	r2, #16
 8004928:	2c03      	cmp	r4, #3
 800492a:	4413      	add	r3, r2
 800492c:	d90d      	bls.n	800494a <memset+0x82>
 800492e:	461e      	mov	r6, r3
 8004930:	4622      	mov	r2, r4
 8004932:	3a04      	subs	r2, #4
 8004934:	2a03      	cmp	r2, #3
 8004936:	f846 5b04 	str.w	r5, [r6], #4
 800493a:	d8fa      	bhi.n	8004932 <memset+0x6a>
 800493c:	1f22      	subs	r2, r4, #4
 800493e:	f022 0203 	bic.w	r2, r2, #3
 8004942:	3204      	adds	r2, #4
 8004944:	4413      	add	r3, r2
 8004946:	f004 0403 	and.w	r4, r4, #3
 800494a:	b12c      	cbz	r4, 8004958 <memset+0x90>
 800494c:	b2c9      	uxtb	r1, r1
 800494e:	441c      	add	r4, r3
 8004950:	f803 1b01 	strb.w	r1, [r3], #1
 8004954:	42a3      	cmp	r3, r4
 8004956:	d1fb      	bne.n	8004950 <memset+0x88>
 8004958:	bc70      	pop	{r4, r5, r6}
 800495a:	4770      	bx	lr
 800495c:	4614      	mov	r4, r2
 800495e:	4603      	mov	r3, r0
 8004960:	e7c2      	b.n	80048e8 <memset+0x20>
 8004962:	bf00      	nop

08004964 <printf>:
 8004964:	b40f      	push	{r0, r1, r2, r3}
 8004966:	b500      	push	{lr}
 8004968:	4907      	ldr	r1, [pc, #28]	; (8004988 <printf+0x24>)
 800496a:	b083      	sub	sp, #12
 800496c:	ab04      	add	r3, sp, #16
 800496e:	6808      	ldr	r0, [r1, #0]
 8004970:	f853 2b04 	ldr.w	r2, [r3], #4
 8004974:	6881      	ldr	r1, [r0, #8]
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	f000 f9d6 	bl	8004d28 <_vfprintf_r>
 800497c:	b003      	add	sp, #12
 800497e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004982:	b004      	add	sp, #16
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000470 	.word	0x20000470

0800498c <putchar>:
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <putchar+0x10>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4601      	mov	r1, r0
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	4618      	mov	r0, r3
 8004996:	f003 bfa3 	b.w	80088e0 <_putc_r>
 800499a:	bf00      	nop
 800499c:	20000470 	.word	0x20000470

080049a0 <_puts_r>:
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	4605      	mov	r5, r0
 80049a4:	b089      	sub	sp, #36	; 0x24
 80049a6:	4608      	mov	r0, r1
 80049a8:	460c      	mov	r4, r1
 80049aa:	f000 f8b3 	bl	8004b14 <strlen>
 80049ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80049b0:	4f13      	ldr	r7, [pc, #76]	; (8004a00 <_puts_r+0x60>)
 80049b2:	9404      	str	r4, [sp, #16]
 80049b4:	2601      	movs	r6, #1
 80049b6:	1c44      	adds	r4, r0, #1
 80049b8:	a904      	add	r1, sp, #16
 80049ba:	2202      	movs	r2, #2
 80049bc:	9403      	str	r4, [sp, #12]
 80049be:	9005      	str	r0, [sp, #20]
 80049c0:	68ac      	ldr	r4, [r5, #8]
 80049c2:	9706      	str	r7, [sp, #24]
 80049c4:	9607      	str	r6, [sp, #28]
 80049c6:	9101      	str	r1, [sp, #4]
 80049c8:	9202      	str	r2, [sp, #8]
 80049ca:	b1ab      	cbz	r3, 80049f8 <_puts_r+0x58>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	049a      	lsls	r2, r3, #18
 80049d0:	d406      	bmi.n	80049e0 <_puts_r+0x40>
 80049d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	6662      	str	r2, [r4, #100]	; 0x64
 80049e0:	4628      	mov	r0, r5
 80049e2:	4621      	mov	r1, r4
 80049e4:	aa01      	add	r2, sp, #4
 80049e6:	f002 ff05 	bl	80077f4 <__sfvwrite_r>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	bf14      	ite	ne
 80049ee:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80049f2:	200a      	moveq	r0, #10
 80049f4:	b009      	add	sp, #36	; 0x24
 80049f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f8:	4628      	mov	r0, r5
 80049fa:	f002 fdcb 	bl	8007594 <__sinit>
 80049fe:	e7e5      	b.n	80049cc <_puts_r+0x2c>
 8004a00:	08018dd0 	.word	0x08018dd0

08004a04 <puts>:
 8004a04:	4b02      	ldr	r3, [pc, #8]	; (8004a10 <puts+0xc>)
 8004a06:	4601      	mov	r1, r0
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	f7ff bfc9 	b.w	80049a0 <_puts_r>
 8004a0e:	bf00      	nop
 8004a10:	20000470 	.word	0x20000470

08004a14 <strcasecmp>:
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <strcasecmp+0x40>)
 8004a16:	b430      	push	{r4, r5}
 8004a18:	681d      	ldr	r5, [r3, #0]
 8004a1a:	e002      	b.n	8004a22 <strcasecmp+0xe>
 8004a1c:	1ad2      	subs	r2, r2, r3
 8004a1e:	d116      	bne.n	8004a4e <strcasecmp+0x3a>
 8004a20:	b1ab      	cbz	r3, 8004a4e <strcasecmp+0x3a>
 8004a22:	f810 4b01 	ldrb.w	r4, [r0], #1
 8004a26:	192b      	adds	r3, r5, r4
 8004a28:	4622      	mov	r2, r4
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a36:	bf08      	it	eq
 8004a38:	f104 0220 	addeq.w	r2, r4, #32
 8004a3c:	18ec      	adds	r4, r5, r3
 8004a3e:	7864      	ldrb	r4, [r4, #1]
 8004a40:	f004 0403 	and.w	r4, r4, #3
 8004a44:	2c01      	cmp	r4, #1
 8004a46:	d1e9      	bne.n	8004a1c <strcasecmp+0x8>
 8004a48:	3320      	adds	r3, #32
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	d0e9      	beq.n	8004a22 <strcasecmp+0xe>
 8004a4e:	4610      	mov	r0, r2
 8004a50:	bc30      	pop	{r4, r5}
 8004a52:	4770      	bx	lr
 8004a54:	20000044 	.word	0x20000044

08004a58 <strcpy>:
 8004a58:	ea80 0201 	eor.w	r2, r0, r1
 8004a5c:	4684      	mov	ip, r0
 8004a5e:	f012 0f03 	tst.w	r2, #3
 8004a62:	d14f      	bne.n	8004b04 <strcpy+0xac>
 8004a64:	f011 0f03 	tst.w	r1, #3
 8004a68:	d132      	bne.n	8004ad0 <strcpy+0x78>
 8004a6a:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8004a6e:	f011 0f04 	tst.w	r1, #4
 8004a72:	f851 3b04 	ldr.w	r3, [r1], #4
 8004a76:	d00b      	beq.n	8004a90 <strcpy+0x38>
 8004a78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8004a7c:	439a      	bics	r2, r3
 8004a7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8004a82:	bf04      	itt	eq
 8004a84:	f84c 3b04 	streq.w	r3, [ip], #4
 8004a88:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004a8c:	d116      	bne.n	8004abc <strcpy+0x64>
 8004a8e:	bf00      	nop
 8004a90:	f851 4b04 	ldr.w	r4, [r1], #4
 8004a94:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8004a98:	439a      	bics	r2, r3
 8004a9a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8004a9e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8004aa2:	d10b      	bne.n	8004abc <strcpy+0x64>
 8004aa4:	f84c 3b04 	str.w	r3, [ip], #4
 8004aa8:	43a2      	bics	r2, r4
 8004aaa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8004aae:	bf04      	itt	eq
 8004ab0:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004ab4:	f84c 4b04 	streq.w	r4, [ip], #4
 8004ab8:	d0ea      	beq.n	8004a90 <strcpy+0x38>
 8004aba:	4623      	mov	r3, r4
 8004abc:	f80c 3b01 	strb.w	r3, [ip], #1
 8004ac0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004ac4:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004ac8:	d1f8      	bne.n	8004abc <strcpy+0x64>
 8004aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	f011 0f01 	tst.w	r1, #1
 8004ad4:	d006      	beq.n	8004ae4 <strcpy+0x8c>
 8004ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ada:	f80c 2b01 	strb.w	r2, [ip], #1
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	bf08      	it	eq
 8004ae2:	4770      	bxeq	lr
 8004ae4:	f011 0f02 	tst.w	r1, #2
 8004ae8:	d0bf      	beq.n	8004a6a <strcpy+0x12>
 8004aea:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004aee:	f012 0fff 	tst.w	r2, #255	; 0xff
 8004af2:	bf16      	itet	ne
 8004af4:	f82c 2b02 	strhne.w	r2, [ip], #2
 8004af8:	f88c 2000 	strbeq.w	r2, [ip]
 8004afc:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8004b00:	d1b3      	bne.n	8004a6a <strcpy+0x12>
 8004b02:	4770      	bx	lr
 8004b04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b08:	f80c 2b01 	strb.w	r2, [ip], #1
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	d1f9      	bne.n	8004b04 <strcpy+0xac>
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop

08004b14 <strlen>:
 8004b14:	f020 0103 	bic.w	r1, r0, #3
 8004b18:	f010 0003 	ands.w	r0, r0, #3
 8004b1c:	f1c0 0000 	rsb	r0, r0, #0
 8004b20:	f851 3b04 	ldr.w	r3, [r1], #4
 8004b24:	f100 0c04 	add.w	ip, r0, #4
 8004b28:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004b2c:	f06f 0200 	mvn.w	r2, #0
 8004b30:	bf1c      	itt	ne
 8004b32:	fa22 f20c 	lsrne.w	r2, r2, ip
 8004b36:	4313      	orrne	r3, r2
 8004b38:	f04f 0c01 	mov.w	ip, #1
 8004b3c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8004b40:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8004b44:	eba3 020c 	sub.w	r2, r3, ip
 8004b48:	ea22 0203 	bic.w	r2, r2, r3
 8004b4c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8004b50:	bf04      	itt	eq
 8004b52:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004b56:	3004      	addeq	r0, #4
 8004b58:	d0f4      	beq.n	8004b44 <strlen+0x30>
 8004b5a:	f1c2 0100 	rsb	r1, r2, #0
 8004b5e:	ea02 0201 	and.w	r2, r2, r1
 8004b62:	fab2 f282 	clz	r2, r2
 8004b66:	f1c2 021f 	rsb	r2, r2, #31
 8004b6a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8004b6e:	4770      	bx	lr

08004b70 <strtok>:
 8004b70:	4b02      	ldr	r3, [pc, #8]	; (8004b7c <strtok+0xc>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	2301      	movs	r3, #1
 8004b76:	325c      	adds	r2, #92	; 0x5c
 8004b78:	f000 b802 	b.w	8004b80 <__strtok_r>
 8004b7c:	20000470 	.word	0x20000470

08004b80 <__strtok_r>:
 8004b80:	b4f0      	push	{r4, r5, r6, r7}
 8004b82:	b320      	cbz	r0, 8004bce <__strtok_r+0x4e>
 8004b84:	4607      	mov	r7, r0
 8004b86:	460d      	mov	r5, r1
 8004b88:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b8c:	e001      	b.n	8004b92 <__strtok_r+0x12>
 8004b8e:	42a6      	cmp	r6, r4
 8004b90:	d016      	beq.n	8004bc0 <__strtok_r+0x40>
 8004b92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b96:	2c00      	cmp	r4, #0
 8004b98:	d1f9      	bne.n	8004b8e <__strtok_r+0xe>
 8004b9a:	b1ee      	cbz	r6, 8004bd8 <__strtok_r+0x58>
 8004b9c:	463e      	mov	r6, r7
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004ba4:	e000      	b.n	8004ba8 <__strtok_r+0x28>
 8004ba6:	b173      	cbz	r3, 8004bc6 <__strtok_r+0x46>
 8004ba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004bac:	42ab      	cmp	r3, r5
 8004bae:	d1fa      	bne.n	8004ba6 <__strtok_r+0x26>
 8004bb0:	b15d      	cbz	r5, 8004bca <__strtok_r+0x4a>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	703b      	strb	r3, [r7, #0]
 8004bb6:	6016      	str	r6, [r2, #0]
 8004bb8:	4606      	mov	r6, r0
 8004bba:	4630      	mov	r0, r6
 8004bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8004bbe:	4770      	bx	lr
 8004bc0:	b163      	cbz	r3, 8004bdc <__strtok_r+0x5c>
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	e7de      	b.n	8004b84 <__strtok_r+0x4>
 8004bc6:	4637      	mov	r7, r6
 8004bc8:	e7e8      	b.n	8004b9c <__strtok_r+0x1c>
 8004bca:	462e      	mov	r6, r5
 8004bcc:	e7f3      	b.n	8004bb6 <__strtok_r+0x36>
 8004bce:	6810      	ldr	r0, [r2, #0]
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d1d7      	bne.n	8004b84 <__strtok_r+0x4>
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	e7f0      	b.n	8004bba <__strtok_r+0x3a>
 8004bd8:	6016      	str	r6, [r2, #0]
 8004bda:	e7ee      	b.n	8004bba <__strtok_r+0x3a>
 8004bdc:	6017      	str	r7, [r2, #0]
 8004bde:	4606      	mov	r6, r0
 8004be0:	7003      	strb	r3, [r0, #0]
 8004be2:	e7ea      	b.n	8004bba <__strtok_r+0x3a>

08004be4 <_strtoul_r>:
 8004be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be8:	4c46      	ldr	r4, [pc, #280]	; (8004d04 <_strtoul_r+0x120>)
 8004bea:	460f      	mov	r7, r1
 8004bec:	f8d4 e000 	ldr.w	lr, [r4]
 8004bf0:	e000      	b.n	8004bf4 <_strtoul_r+0x10>
 8004bf2:	4627      	mov	r7, r4
 8004bf4:	463c      	mov	r4, r7
 8004bf6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004bfa:	eb0e 0605 	add.w	r6, lr, r5
 8004bfe:	7876      	ldrb	r6, [r6, #1]
 8004c00:	f006 0608 	and.w	r6, r6, #8
 8004c04:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 8004c08:	2e00      	cmp	r6, #0
 8004c0a:	d1f2      	bne.n	8004bf2 <_strtoul_r+0xe>
 8004c0c:	2d2d      	cmp	r5, #45	; 0x2d
 8004c0e:	d051      	beq.n	8004cb4 <_strtoul_r+0xd0>
 8004c10:	2d2b      	cmp	r5, #43	; 0x2b
 8004c12:	bf04      	itt	eq
 8004c14:	787d      	ldrbeq	r5, [r7, #1]
 8004c16:	1cbc      	addeq	r4, r7, #2
 8004c18:	b15b      	cbz	r3, 8004c32 <_strtoul_r+0x4e>
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d05b      	beq.n	8004cd6 <_strtoul_r+0xf2>
 8004c1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004c22:	fbb9 f9f3 	udiv	r9, r9, r3
 8004c26:	fb03 fb09 	mul.w	fp, r3, r9
 8004c2a:	ea6f 0b0b 	mvn.w	fp, fp
 8004c2e:	469a      	mov	sl, r3
 8004c30:	e007      	b.n	8004c42 <_strtoul_r+0x5e>
 8004c32:	2d30      	cmp	r5, #48	; 0x30
 8004c34:	d043      	beq.n	8004cbe <_strtoul_r+0xda>
 8004c36:	230a      	movs	r3, #10
 8004c38:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004d08 <_strtoul_r+0x124>
 8004c3c:	469a      	mov	sl, r3
 8004c3e:	f04f 0b05 	mov.w	fp, #5
 8004c42:	2700      	movs	r7, #0
 8004c44:	46bc      	mov	ip, r7
 8004c46:	e00c      	b.n	8004c62 <_strtoul_r+0x7e>
 8004c48:	3d30      	subs	r5, #48	; 0x30
 8004c4a:	42ab      	cmp	r3, r5
 8004c4c:	dd19      	ble.n	8004c82 <_strtoul_r+0x9e>
 8004c4e:	1c7e      	adds	r6, r7, #1
 8004c50:	d005      	beq.n	8004c5e <_strtoul_r+0x7a>
 8004c52:	45cc      	cmp	ip, r9
 8004c54:	d824      	bhi.n	8004ca0 <_strtoul_r+0xbc>
 8004c56:	d021      	beq.n	8004c9c <_strtoul_r+0xb8>
 8004c58:	fb0a 5c0c 	mla	ip, sl, ip, r5
 8004c5c:	2701      	movs	r7, #1
 8004c5e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004c62:	eb0e 0605 	add.w	r6, lr, r5
 8004c66:	7876      	ldrb	r6, [r6, #1]
 8004c68:	f016 0f04 	tst.w	r6, #4
 8004c6c:	d1ec      	bne.n	8004c48 <_strtoul_r+0x64>
 8004c6e:	f016 0603 	ands.w	r6, r6, #3
 8004c72:	d006      	beq.n	8004c82 <_strtoul_r+0x9e>
 8004c74:	2e01      	cmp	r6, #1
 8004c76:	bf0c      	ite	eq
 8004c78:	2637      	moveq	r6, #55	; 0x37
 8004c7a:	2657      	movne	r6, #87	; 0x57
 8004c7c:	1bad      	subs	r5, r5, r6
 8004c7e:	42ab      	cmp	r3, r5
 8004c80:	dce5      	bgt.n	8004c4e <_strtoul_r+0x6a>
 8004c82:	2f00      	cmp	r7, #0
 8004c84:	db11      	blt.n	8004caa <_strtoul_r+0xc6>
 8004c86:	f1c8 0000 	rsb	r0, r8, #0
 8004c8a:	ea8c 0000 	eor.w	r0, ip, r0
 8004c8e:	4440      	add	r0, r8
 8004c90:	b14a      	cbz	r2, 8004ca6 <_strtoul_r+0xc2>
 8004c92:	b107      	cbz	r7, 8004c96 <_strtoul_r+0xb2>
 8004c94:	1e61      	subs	r1, r4, #1
 8004c96:	6011      	str	r1, [r2, #0]
 8004c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9c:	455d      	cmp	r5, fp
 8004c9e:	dddb      	ble.n	8004c58 <_strtoul_r+0x74>
 8004ca0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ca4:	e7db      	b.n	8004c5e <_strtoul_r+0x7a>
 8004ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004caa:	2322      	movs	r3, #34	; 0x22
 8004cac:	6003      	str	r3, [r0, #0]
 8004cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb2:	e7ed      	b.n	8004c90 <_strtoul_r+0xac>
 8004cb4:	1cbc      	adds	r4, r7, #2
 8004cb6:	787d      	ldrb	r5, [r7, #1]
 8004cb8:	f04f 0801 	mov.w	r8, #1
 8004cbc:	e7ac      	b.n	8004c18 <_strtoul_r+0x34>
 8004cbe:	7823      	ldrb	r3, [r4, #0]
 8004cc0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004cc4:	2b58      	cmp	r3, #88	; 0x58
 8004cc6:	d013      	beq.n	8004cf0 <_strtoul_r+0x10c>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	469a      	mov	sl, r3
 8004ccc:	f04f 0b07 	mov.w	fp, #7
 8004cd0:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8004cd4:	e7b5      	b.n	8004c42 <_strtoul_r+0x5e>
 8004cd6:	2d30      	cmp	r5, #48	; 0x30
 8004cd8:	d005      	beq.n	8004ce6 <_strtoul_r+0x102>
 8004cda:	f04f 0b0f 	mov.w	fp, #15
 8004cde:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8004ce2:	469a      	mov	sl, r3
 8004ce4:	e7ad      	b.n	8004c42 <_strtoul_r+0x5e>
 8004ce6:	7826      	ldrb	r6, [r4, #0]
 8004ce8:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 8004cec:	2e58      	cmp	r6, #88	; 0x58
 8004cee:	d1f4      	bne.n	8004cda <_strtoul_r+0xf6>
 8004cf0:	f04f 0a10 	mov.w	sl, #16
 8004cf4:	7865      	ldrb	r5, [r4, #1]
 8004cf6:	4653      	mov	r3, sl
 8004cf8:	f04f 0b0f 	mov.w	fp, #15
 8004cfc:	3402      	adds	r4, #2
 8004cfe:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8004d02:	e79e      	b.n	8004c42 <_strtoul_r+0x5e>
 8004d04:	20000044 	.word	0x20000044
 8004d08:	19999999 	.word	0x19999999

08004d0c <strtoul>:
 8004d0c:	b430      	push	{r4, r5}
 8004d0e:	4c04      	ldr	r4, [pc, #16]	; (8004d20 <strtoul+0x14>)
 8004d10:	460d      	mov	r5, r1
 8004d12:	4613      	mov	r3, r2
 8004d14:	4601      	mov	r1, r0
 8004d16:	462a      	mov	r2, r5
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	bc30      	pop	{r4, r5}
 8004d1c:	f7ff bf62 	b.w	8004be4 <_strtoul_r>
 8004d20:	20000470 	.word	0x20000470
 8004d24:	00000000 	.word	0x00000000

08004d28 <_vfprintf_r>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	b0bd      	sub	sp, #244	; 0xf4
 8004d2e:	461c      	mov	r4, r3
 8004d30:	4689      	mov	r9, r1
 8004d32:	9204      	str	r2, [sp, #16]
 8004d34:	4607      	mov	r7, r0
 8004d36:	f002 ff1d 	bl	8007b74 <_localeconv_r>
 8004d3a:	6803      	ldr	r3, [r0, #0]
 8004d3c:	9311      	str	r3, [sp, #68]	; 0x44
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fee8 	bl	8004b14 <strlen>
 8004d44:	9408      	str	r4, [sp, #32]
 8004d46:	9012      	str	r0, [sp, #72]	; 0x48
 8004d48:	b11f      	cbz	r7, 8004d52 <_vfprintf_r+0x2a>
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80f3 	beq.w	8004f38 <_vfprintf_r+0x210>
 8004d52:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8004d56:	b293      	uxth	r3, r2
 8004d58:	049e      	lsls	r6, r3, #18
 8004d5a:	d40a      	bmi.n	8004d72 <_vfprintf_r+0x4a>
 8004d5c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8004d60:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8004d64:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004d68:	f8a9 300c 	strh.w	r3, [r9, #12]
 8004d6c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	071d      	lsls	r5, r3, #28
 8004d74:	f140 80aa 	bpl.w	8004ecc <_vfprintf_r+0x1a4>
 8004d78:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8004d7c:	2a00      	cmp	r2, #0
 8004d7e:	f000 80a5 	beq.w	8004ecc <_vfprintf_r+0x1a4>
 8004d82:	f003 031a 	and.w	r3, r3, #26
 8004d86:	2b0a      	cmp	r3, #10
 8004d88:	f000 80ac 	beq.w	8004ee4 <_vfprintf_r+0x1bc>
 8004d8c:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 8004f48 <_vfprintf_r+0x220>
 8004d90:	2300      	movs	r3, #0
 8004d92:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004d96:	930d      	str	r3, [sp, #52]	; 0x34
 8004d98:	9321      	str	r3, [sp, #132]	; 0x84
 8004d9a:	9320      	str	r3, [sp, #128]	; 0x80
 8004d9c:	9310      	str	r3, [sp, #64]	; 0x40
 8004d9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	ab2c      	add	r3, sp, #176	; 0xb0
 8004da4:	931f      	str	r3, [sp, #124]	; 0x7c
 8004da6:	461c      	mov	r4, r3
 8004da8:	46b8      	mov	r8, r7
 8004daa:	9d04      	ldr	r5, [sp, #16]
 8004dac:	782b      	ldrb	r3, [r5, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80c6 	beq.w	8004f40 <_vfprintf_r+0x218>
 8004db4:	2b25      	cmp	r3, #37	; 0x25
 8004db6:	d102      	bne.n	8004dbe <_vfprintf_r+0x96>
 8004db8:	e0c2      	b.n	8004f40 <_vfprintf_r+0x218>
 8004dba:	2b25      	cmp	r3, #37	; 0x25
 8004dbc:	d003      	beq.n	8004dc6 <_vfprintf_r+0x9e>
 8004dbe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f9      	bne.n	8004dba <_vfprintf_r+0x92>
 8004dc6:	9b04      	ldr	r3, [sp, #16]
 8004dc8:	1aee      	subs	r6, r5, r3
 8004dca:	b17e      	cbz	r6, 8004dec <_vfprintf_r+0xc4>
 8004dcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004dce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dd0:	9904      	ldr	r1, [sp, #16]
 8004dd2:	6021      	str	r1, [r4, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4432      	add	r2, r6
 8004dd8:	2b07      	cmp	r3, #7
 8004dda:	6066      	str	r6, [r4, #4]
 8004ddc:	9221      	str	r2, [sp, #132]	; 0x84
 8004dde:	9320      	str	r3, [sp, #128]	; 0x80
 8004de0:	f300 8093 	bgt.w	8004f0a <_vfprintf_r+0x1e2>
 8004de4:	3408      	adds	r4, #8
 8004de6:	9b05      	ldr	r3, [sp, #20]
 8004de8:	4433      	add	r3, r6
 8004dea:	9305      	str	r3, [sp, #20]
 8004dec:	782b      	ldrb	r3, [r5, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8093 	beq.w	8004f1a <_vfprintf_r+0x1f2>
 8004df4:	2300      	movs	r3, #0
 8004df6:	1c69      	adds	r1, r5, #1
 8004df8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004dfc:	786d      	ldrb	r5, [r5, #1]
 8004dfe:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004e02:	461a      	mov	r2, r3
 8004e04:	9306      	str	r3, [sp, #24]
 8004e06:	9302      	str	r3, [sp, #8]
 8004e08:	4656      	mov	r6, sl
 8004e0a:	1c4b      	adds	r3, r1, #1
 8004e0c:	f1a5 0120 	sub.w	r1, r5, #32
 8004e10:	2958      	cmp	r1, #88	; 0x58
 8004e12:	f200 83cd 	bhi.w	80055b0 <_vfprintf_r+0x888>
 8004e16:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004e1a:	025c      	.short	0x025c
 8004e1c:	03cb03cb 	.word	0x03cb03cb
 8004e20:	03cb0302 	.word	0x03cb0302
 8004e24:	03cb03cb 	.word	0x03cb03cb
 8004e28:	03cb03cb 	.word	0x03cb03cb
 8004e2c:	030903cb 	.word	0x030903cb
 8004e30:	03cb02d2 	.word	0x03cb02d2
 8004e34:	035301f8 	.word	0x035301f8
 8004e38:	02d603cb 	.word	0x02d603cb
 8004e3c:	02dd02dd 	.word	0x02dd02dd
 8004e40:	02dd02dd 	.word	0x02dd02dd
 8004e44:	02dd02dd 	.word	0x02dd02dd
 8004e48:	02dd02dd 	.word	0x02dd02dd
 8004e4c:	03cb02dd 	.word	0x03cb02dd
 8004e50:	03cb03cb 	.word	0x03cb03cb
 8004e54:	03cb03cb 	.word	0x03cb03cb
 8004e58:	03cb03cb 	.word	0x03cb03cb
 8004e5c:	03cb03cb 	.word	0x03cb03cb
 8004e60:	027103cb 	.word	0x027103cb
 8004e64:	03cb0293 	.word	0x03cb0293
 8004e68:	03cb0293 	.word	0x03cb0293
 8004e6c:	03cb03cb 	.word	0x03cb03cb
 8004e70:	02cb03cb 	.word	0x02cb03cb
 8004e74:	03cb03cb 	.word	0x03cb03cb
 8004e78:	03cb036e 	.word	0x03cb036e
 8004e7c:	03cb03cb 	.word	0x03cb03cb
 8004e80:	03cb03cb 	.word	0x03cb03cb
 8004e84:	03cb03b5 	.word	0x03cb03b5
 8004e88:	038b03cb 	.word	0x038b03cb
 8004e8c:	03cb03cb 	.word	0x03cb03cb
 8004e90:	03cb03cb 	.word	0x03cb03cb
 8004e94:	03cb03cb 	.word	0x03cb03cb
 8004e98:	03cb03cb 	.word	0x03cb03cb
 8004e9c:	03cb03cb 	.word	0x03cb03cb
 8004ea0:	031703a0 	.word	0x031703a0
 8004ea4:	02930293 	.word	0x02930293
 8004ea8:	03300293 	.word	0x03300293
 8004eac:	03cb0317 	.word	0x03cb0317
 8004eb0:	033703cb 	.word	0x033703cb
 8004eb4:	034103cb 	.word	0x034103cb
 8004eb8:	02ec01ff 	.word	0x02ec01ff
 8004ebc:	03cb0263 	.word	0x03cb0263
 8004ec0:	03cb0211 	.word	0x03cb0211
 8004ec4:	03cb009b 	.word	0x03cb009b
 8004ec8:	023603cb 	.word	0x023603cb
 8004ecc:	4638      	mov	r0, r7
 8004ece:	4649      	mov	r1, r9
 8004ed0:	f001 f97a 	bl	80061c8 <__swsetup_r>
 8004ed4:	b9a0      	cbnz	r0, 8004f00 <_vfprintf_r+0x1d8>
 8004ed6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004eda:	f003 031a 	and.w	r3, r3, #26
 8004ede:	2b0a      	cmp	r3, #10
 8004ee0:	f47f af54 	bne.w	8004d8c <_vfprintf_r+0x64>
 8004ee4:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f6ff af4f 	blt.w	8004d8c <_vfprintf_r+0x64>
 8004eee:	4638      	mov	r0, r7
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	9a04      	ldr	r2, [sp, #16]
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	f001 f92b 	bl	8006150 <__sbprintf>
 8004efa:	b03d      	add	sp, #244	; 0xf4
 8004efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f04:	b03d      	add	sp, #244	; 0xf4
 8004f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f10:	f003 ffb4 	bl	8008e7c <__sprint_r>
 8004f14:	b940      	cbnz	r0, 8004f28 <_vfprintf_r+0x200>
 8004f16:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f18:	e765      	b.n	8004de6 <_vfprintf_r+0xbe>
 8004f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f1c:	b123      	cbz	r3, 8004f28 <_vfprintf_r+0x200>
 8004f1e:	4640      	mov	r0, r8
 8004f20:	4649      	mov	r1, r9
 8004f22:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f24:	f003 ffaa 	bl	8008e7c <__sprint_r>
 8004f28:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004f2c:	065a      	lsls	r2, r3, #25
 8004f2e:	d4e7      	bmi.n	8004f00 <_vfprintf_r+0x1d8>
 8004f30:	9805      	ldr	r0, [sp, #20]
 8004f32:	b03d      	add	sp, #244	; 0xf4
 8004f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f002 fb2b 	bl	8007594 <__sinit>
 8004f3e:	e708      	b.n	8004d52 <_vfprintf_r+0x2a>
 8004f40:	9d04      	ldr	r5, [sp, #16]
 8004f42:	e753      	b.n	8004dec <_vfprintf_r+0xc4>
 8004f44:	f3af 8000 	nop.w
	...
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	9b02      	ldr	r3, [sp, #8]
 8004f54:	46b2      	mov	sl, r6
 8004f56:	069e      	lsls	r6, r3, #26
 8004f58:	f140 831e 	bpl.w	8005598 <_vfprintf_r+0x870>
 8004f5c:	9f08      	ldr	r7, [sp, #32]
 8004f5e:	3707      	adds	r7, #7
 8004f60:	f027 0307 	bic.w	r3, r7, #7
 8004f64:	f103 0208 	add.w	r2, r3, #8
 8004f68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004f6c:	9208      	str	r2, [sp, #32]
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f04f 0c00 	mov.w	ip, #0
 8004f74:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8004f78:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004f7c:	f1ba 0f00 	cmp.w	sl, #0
 8004f80:	db03      	blt.n	8004f8a <_vfprintf_r+0x262>
 8004f82:	9a02      	ldr	r2, [sp, #8]
 8004f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f88:	9202      	str	r2, [sp, #8]
 8004f8a:	ea56 0207 	orrs.w	r2, r6, r7
 8004f8e:	f040 831f 	bne.w	80055d0 <_vfprintf_r+0x8a8>
 8004f92:	f1ba 0f00 	cmp.w	sl, #0
 8004f96:	f000 841c 	beq.w	80057d2 <_vfprintf_r+0xaaa>
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	f000 8320 	beq.w	80055e0 <_vfprintf_r+0x8b8>
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	f000 8452 	beq.w	800584a <_vfprintf_r+0xb22>
 8004fa6:	a92c      	add	r1, sp, #176	; 0xb0
 8004fa8:	08f2      	lsrs	r2, r6, #3
 8004faa:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8004fae:	08f8      	lsrs	r0, r7, #3
 8004fb0:	f006 0307 	and.w	r3, r6, #7
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	4616      	mov	r6, r2
 8004fb8:	3330      	adds	r3, #48	; 0x30
 8004fba:	ea56 0207 	orrs.w	r2, r6, r7
 8004fbe:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8004fc2:	d1f1      	bne.n	8004fa8 <_vfprintf_r+0x280>
 8004fc4:	9a02      	ldr	r2, [sp, #8]
 8004fc6:	910a      	str	r1, [sp, #40]	; 0x28
 8004fc8:	07d0      	lsls	r0, r2, #31
 8004fca:	f100 84f9 	bmi.w	80059c0 <_vfprintf_r+0xc98>
 8004fce:	ab2c      	add	r3, sp, #176	; 0xb0
 8004fd0:	1a5b      	subs	r3, r3, r1
 8004fd2:	9307      	str	r3, [sp, #28]
 8004fd4:	9a07      	ldr	r2, [sp, #28]
 8004fd6:	4592      	cmp	sl, r2
 8004fd8:	4653      	mov	r3, sl
 8004fda:	bfb8      	it	lt
 8004fdc:	4613      	movlt	r3, r2
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8004fe4:	f1bc 0f00 	cmp.w	ip, #0
 8004fe8:	d002      	beq.n	8004ff0 <_vfprintf_r+0x2c8>
 8004fea:	9b03      	ldr	r3, [sp, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	9303      	str	r3, [sp, #12]
 8004ff0:	9b02      	ldr	r3, [sp, #8]
 8004ff2:	f013 0302 	ands.w	r3, r3, #2
 8004ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff8:	d002      	beq.n	8005000 <_vfprintf_r+0x2d8>
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	9303      	str	r3, [sp, #12]
 8005000:	9b02      	ldr	r3, [sp, #8]
 8005002:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8005006:	f040 82e0 	bne.w	80055ca <_vfprintf_r+0x8a2>
 800500a:	9b06      	ldr	r3, [sp, #24]
 800500c:	9a03      	ldr	r2, [sp, #12]
 800500e:	ebc2 0a03 	rsb	sl, r2, r3
 8005012:	f1ba 0f00 	cmp.w	sl, #0
 8005016:	f340 82d8 	ble.w	80055ca <_vfprintf_r+0x8a2>
 800501a:	f1ba 0f10 	cmp.w	sl, #16
 800501e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8005020:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005022:	4fb3      	ldr	r7, [pc, #716]	; (80052f0 <_vfprintf_r+0x5c8>)
 8005024:	bfc8      	it	gt
 8005026:	f04f 0b10 	movgt.w	fp, #16
 800502a:	dc07      	bgt.n	800503c <_vfprintf_r+0x314>
 800502c:	e01e      	b.n	800506c <_vfprintf_r+0x344>
 800502e:	f1aa 0a10 	sub.w	sl, sl, #16
 8005032:	f1ba 0f10 	cmp.w	sl, #16
 8005036:	f104 0408 	add.w	r4, r4, #8
 800503a:	dd17      	ble.n	800506c <_vfprintf_r+0x344>
 800503c:	3201      	adds	r2, #1
 800503e:	3110      	adds	r1, #16
 8005040:	2a07      	cmp	r2, #7
 8005042:	9121      	str	r1, [sp, #132]	; 0x84
 8005044:	9220      	str	r2, [sp, #128]	; 0x80
 8005046:	e884 0880 	stmia.w	r4, {r7, fp}
 800504a:	ddf0      	ble.n	800502e <_vfprintf_r+0x306>
 800504c:	4640      	mov	r0, r8
 800504e:	4649      	mov	r1, r9
 8005050:	aa1f      	add	r2, sp, #124	; 0x7c
 8005052:	f003 ff13 	bl	8008e7c <__sprint_r>
 8005056:	2800      	cmp	r0, #0
 8005058:	f47f af66 	bne.w	8004f28 <_vfprintf_r+0x200>
 800505c:	f1aa 0a10 	sub.w	sl, sl, #16
 8005060:	f1ba 0f10 	cmp.w	sl, #16
 8005064:	9921      	ldr	r1, [sp, #132]	; 0x84
 8005066:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005068:	ac2c      	add	r4, sp, #176	; 0xb0
 800506a:	dce7      	bgt.n	800503c <_vfprintf_r+0x314>
 800506c:	3201      	adds	r2, #1
 800506e:	eb0a 0b01 	add.w	fp, sl, r1
 8005072:	2a07      	cmp	r2, #7
 8005074:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005078:	9220      	str	r2, [sp, #128]	; 0x80
 800507a:	e884 0480 	stmia.w	r4, {r7, sl}
 800507e:	f300 844a 	bgt.w	8005916 <_vfprintf_r+0xbee>
 8005082:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005086:	3408      	adds	r4, #8
 8005088:	f1bc 0f00 	cmp.w	ip, #0
 800508c:	d00f      	beq.n	80050ae <_vfprintf_r+0x386>
 800508e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005090:	3301      	adds	r3, #1
 8005092:	f10b 0b01 	add.w	fp, fp, #1
 8005096:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 800509a:	2201      	movs	r2, #1
 800509c:	2b07      	cmp	r3, #7
 800509e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80050a2:	9320      	str	r3, [sp, #128]	; 0x80
 80050a4:	e884 0006 	stmia.w	r4, {r1, r2}
 80050a8:	f300 83b1 	bgt.w	800580e <_vfprintf_r+0xae6>
 80050ac:	3408      	adds	r4, #8
 80050ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b0:	b173      	cbz	r3, 80050d0 <_vfprintf_r+0x3a8>
 80050b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050b4:	3301      	adds	r3, #1
 80050b6:	f10b 0b02 	add.w	fp, fp, #2
 80050ba:	a918      	add	r1, sp, #96	; 0x60
 80050bc:	2202      	movs	r2, #2
 80050be:	2b07      	cmp	r3, #7
 80050c0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80050c4:	9320      	str	r3, [sp, #128]	; 0x80
 80050c6:	e884 0006 	stmia.w	r4, {r1, r2}
 80050ca:	f300 83ac 	bgt.w	8005826 <_vfprintf_r+0xafe>
 80050ce:	3408      	adds	r4, #8
 80050d0:	2e80      	cmp	r6, #128	; 0x80
 80050d2:	f000 82f0 	beq.w	80056b6 <_vfprintf_r+0x98e>
 80050d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d8:	9a07      	ldr	r2, [sp, #28]
 80050da:	ebc2 0a03 	rsb	sl, r2, r3
 80050de:	f1ba 0f00 	cmp.w	sl, #0
 80050e2:	dd32      	ble.n	800514a <_vfprintf_r+0x422>
 80050e4:	f1ba 0f10 	cmp.w	sl, #16
 80050e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80050ea:	4f82      	ldr	r7, [pc, #520]	; (80052f4 <_vfprintf_r+0x5cc>)
 80050ec:	dd22      	ble.n	8005134 <_vfprintf_r+0x40c>
 80050ee:	2610      	movs	r6, #16
 80050f0:	465b      	mov	r3, fp
 80050f2:	e006      	b.n	8005102 <_vfprintf_r+0x3da>
 80050f4:	f1aa 0a10 	sub.w	sl, sl, #16
 80050f8:	f1ba 0f10 	cmp.w	sl, #16
 80050fc:	f104 0408 	add.w	r4, r4, #8
 8005100:	dd17      	ble.n	8005132 <_vfprintf_r+0x40a>
 8005102:	3201      	adds	r2, #1
 8005104:	3310      	adds	r3, #16
 8005106:	2a07      	cmp	r2, #7
 8005108:	9321      	str	r3, [sp, #132]	; 0x84
 800510a:	9220      	str	r2, [sp, #128]	; 0x80
 800510c:	6027      	str	r7, [r4, #0]
 800510e:	6066      	str	r6, [r4, #4]
 8005110:	ddf0      	ble.n	80050f4 <_vfprintf_r+0x3cc>
 8005112:	4640      	mov	r0, r8
 8005114:	4649      	mov	r1, r9
 8005116:	aa1f      	add	r2, sp, #124	; 0x7c
 8005118:	f003 feb0 	bl	8008e7c <__sprint_r>
 800511c:	2800      	cmp	r0, #0
 800511e:	f47f af03 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005122:	f1aa 0a10 	sub.w	sl, sl, #16
 8005126:	f1ba 0f10 	cmp.w	sl, #16
 800512a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800512c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800512e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005130:	dce7      	bgt.n	8005102 <_vfprintf_r+0x3da>
 8005132:	469b      	mov	fp, r3
 8005134:	3201      	adds	r2, #1
 8005136:	44d3      	add	fp, sl
 8005138:	2a07      	cmp	r2, #7
 800513a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800513e:	9220      	str	r2, [sp, #128]	; 0x80
 8005140:	e884 0480 	stmia.w	r4, {r7, sl}
 8005144:	f300 8357 	bgt.w	80057f6 <_vfprintf_r+0xace>
 8005148:	3408      	adds	r4, #8
 800514a:	9b02      	ldr	r3, [sp, #8]
 800514c:	05db      	lsls	r3, r3, #23
 800514e:	f100 825b 	bmi.w	8005608 <_vfprintf_r+0x8e0>
 8005152:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005154:	9907      	ldr	r1, [sp, #28]
 8005156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005158:	6022      	str	r2, [r4, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	448b      	add	fp, r1
 800515e:	2b07      	cmp	r3, #7
 8005160:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005164:	6061      	str	r1, [r4, #4]
 8005166:	9320      	str	r3, [sp, #128]	; 0x80
 8005168:	f300 831d 	bgt.w	80057a6 <_vfprintf_r+0xa7e>
 800516c:	3408      	adds	r4, #8
 800516e:	9b02      	ldr	r3, [sp, #8]
 8005170:	0759      	lsls	r1, r3, #29
 8005172:	d53a      	bpl.n	80051ea <_vfprintf_r+0x4c2>
 8005174:	9b06      	ldr	r3, [sp, #24]
 8005176:	9a03      	ldr	r2, [sp, #12]
 8005178:	1a9d      	subs	r5, r3, r2
 800517a:	2d00      	cmp	r5, #0
 800517c:	dd35      	ble.n	80051ea <_vfprintf_r+0x4c2>
 800517e:	2d10      	cmp	r5, #16
 8005180:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005182:	4f5b      	ldr	r7, [pc, #364]	; (80052f0 <_vfprintf_r+0x5c8>)
 8005184:	dd1e      	ble.n	80051c4 <_vfprintf_r+0x49c>
 8005186:	2610      	movs	r6, #16
 8005188:	465a      	mov	r2, fp
 800518a:	e004      	b.n	8005196 <_vfprintf_r+0x46e>
 800518c:	3d10      	subs	r5, #16
 800518e:	2d10      	cmp	r5, #16
 8005190:	f104 0408 	add.w	r4, r4, #8
 8005194:	dd15      	ble.n	80051c2 <_vfprintf_r+0x49a>
 8005196:	3301      	adds	r3, #1
 8005198:	3210      	adds	r2, #16
 800519a:	2b07      	cmp	r3, #7
 800519c:	9221      	str	r2, [sp, #132]	; 0x84
 800519e:	9320      	str	r3, [sp, #128]	; 0x80
 80051a0:	6027      	str	r7, [r4, #0]
 80051a2:	6066      	str	r6, [r4, #4]
 80051a4:	ddf2      	ble.n	800518c <_vfprintf_r+0x464>
 80051a6:	4640      	mov	r0, r8
 80051a8:	4649      	mov	r1, r9
 80051aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80051ac:	f003 fe66 	bl	8008e7c <__sprint_r>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f47f aeb9 	bne.w	8004f28 <_vfprintf_r+0x200>
 80051b6:	3d10      	subs	r5, #16
 80051b8:	2d10      	cmp	r5, #16
 80051ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80051be:	ac2c      	add	r4, sp, #176	; 0xb0
 80051c0:	dce9      	bgt.n	8005196 <_vfprintf_r+0x46e>
 80051c2:	4693      	mov	fp, r2
 80051c4:	3301      	adds	r3, #1
 80051c6:	44ab      	add	fp, r5
 80051c8:	2b07      	cmp	r3, #7
 80051ca:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80051ce:	9320      	str	r3, [sp, #128]	; 0x80
 80051d0:	6027      	str	r7, [r4, #0]
 80051d2:	6065      	str	r5, [r4, #4]
 80051d4:	dd09      	ble.n	80051ea <_vfprintf_r+0x4c2>
 80051d6:	4640      	mov	r0, r8
 80051d8:	4649      	mov	r1, r9
 80051da:	aa1f      	add	r2, sp, #124	; 0x7c
 80051dc:	f003 fe4e 	bl	8008e7c <__sprint_r>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	f47f aea1 	bne.w	8004f28 <_vfprintf_r+0x200>
 80051e6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80051ea:	9b05      	ldr	r3, [sp, #20]
 80051ec:	9a03      	ldr	r2, [sp, #12]
 80051ee:	9906      	ldr	r1, [sp, #24]
 80051f0:	428a      	cmp	r2, r1
 80051f2:	bfac      	ite	ge
 80051f4:	189b      	addge	r3, r3, r2
 80051f6:	185b      	addlt	r3, r3, r1
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	f1bb 0f00 	cmp.w	fp, #0
 80051fe:	f040 82de 	bne.w	80057be <_vfprintf_r+0xa96>
 8005202:	2300      	movs	r3, #0
 8005204:	9320      	str	r3, [sp, #128]	; 0x80
 8005206:	ac2c      	add	r4, sp, #176	; 0xb0
 8005208:	e5cf      	b.n	8004daa <_vfprintf_r+0x82>
 800520a:	4619      	mov	r1, r3
 800520c:	9802      	ldr	r0, [sp, #8]
 800520e:	781d      	ldrb	r5, [r3, #0]
 8005210:	f040 0004 	orr.w	r0, r0, #4
 8005214:	9002      	str	r0, [sp, #8]
 8005216:	e5f8      	b.n	8004e0a <_vfprintf_r+0xe2>
 8005218:	9304      	str	r3, [sp, #16]
 800521a:	9b02      	ldr	r3, [sp, #8]
 800521c:	f013 0320 	ands.w	r3, r3, #32
 8005220:	46b2      	mov	sl, r6
 8005222:	f000 8173 	beq.w	800550c <_vfprintf_r+0x7e4>
 8005226:	9f08      	ldr	r7, [sp, #32]
 8005228:	3707      	adds	r7, #7
 800522a:	f027 0307 	bic.w	r3, r7, #7
 800522e:	f103 0208 	add.w	r2, r3, #8
 8005232:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005236:	9208      	str	r2, [sp, #32]
 8005238:	2300      	movs	r3, #0
 800523a:	e699      	b.n	8004f70 <_vfprintf_r+0x248>
 800523c:	9a08      	ldr	r2, [sp, #32]
 800523e:	9304      	str	r3, [sp, #16]
 8005240:	6813      	ldr	r3, [r2, #0]
 8005242:	930a      	str	r3, [sp, #40]	; 0x28
 8005244:	f04f 0b00 	mov.w	fp, #0
 8005248:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 800524c:	1d17      	adds	r7, r2, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 865e 	beq.w	8005f10 <_vfprintf_r+0x11e8>
 8005254:	2e00      	cmp	r6, #0
 8005256:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005258:	f2c0 8612 	blt.w	8005e80 <_vfprintf_r+0x1158>
 800525c:	4659      	mov	r1, fp
 800525e:	4632      	mov	r2, r6
 8005260:	f002 ff96 	bl	8008190 <memchr>
 8005264:	2800      	cmp	r0, #0
 8005266:	f000 868f 	beq.w	8005f88 <_vfprintf_r+0x1260>
 800526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005270:	1ac3      	subs	r3, r0, r3
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	9708      	str	r7, [sp, #32]
 8005276:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800527a:	9303      	str	r3, [sp, #12]
 800527c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005280:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005284:	e6ae      	b.n	8004fe4 <_vfprintf_r+0x2bc>
 8005286:	9304      	str	r3, [sp, #16]
 8005288:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <_vfprintf_r+0x5d0>)
 800528a:	9310      	str	r3, [sp, #64]	; 0x40
 800528c:	9b02      	ldr	r3, [sp, #8]
 800528e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005292:	0699      	lsls	r1, r3, #26
 8005294:	46b2      	mov	sl, r6
 8005296:	f140 8155 	bpl.w	8005544 <_vfprintf_r+0x81c>
 800529a:	9f08      	ldr	r7, [sp, #32]
 800529c:	3707      	adds	r7, #7
 800529e:	f027 0307 	bic.w	r3, r7, #7
 80052a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80052a6:	f103 0208 	add.w	r2, r3, #8
 80052aa:	9208      	str	r2, [sp, #32]
 80052ac:	9b02      	ldr	r3, [sp, #8]
 80052ae:	07db      	lsls	r3, r3, #31
 80052b0:	f140 82e4 	bpl.w	800587c <_vfprintf_r+0xb54>
 80052b4:	ea56 0307 	orrs.w	r3, r6, r7
 80052b8:	f000 82e0 	beq.w	800587c <_vfprintf_r+0xb54>
 80052bc:	9a02      	ldr	r2, [sp, #8]
 80052be:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 80052c2:	2330      	movs	r3, #48	; 0x30
 80052c4:	f042 0202 	orr.w	r2, r2, #2
 80052c8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80052cc:	9202      	str	r2, [sp, #8]
 80052ce:	2302      	movs	r3, #2
 80052d0:	e64e      	b.n	8004f70 <_vfprintf_r+0x248>
 80052d2:	781d      	ldrb	r5, [r3, #0]
 80052d4:	4619      	mov	r1, r3
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	f47f ad97 	bne.w	8004e0a <_vfprintf_r+0xe2>
 80052dc:	2220      	movs	r2, #32
 80052de:	e594      	b.n	8004e0a <_vfprintf_r+0xe2>
 80052e0:	9902      	ldr	r1, [sp, #8]
 80052e2:	f041 0120 	orr.w	r1, r1, #32
 80052e6:	9102      	str	r1, [sp, #8]
 80052e8:	781d      	ldrb	r5, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	e58d      	b.n	8004e0a <_vfprintf_r+0xe2>
 80052ee:	bf00      	nop
 80052f0:	08018e28 	.word	0x08018e28
 80052f4:	08018dd4 	.word	0x08018dd4
 80052f8:	08018e08 	.word	0x08018e08
 80052fc:	9304      	str	r3, [sp, #16]
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005304:	f043 0310 	orr.w	r3, r3, #16
 8005308:	9302      	str	r3, [sp, #8]
 800530a:	9b02      	ldr	r3, [sp, #8]
 800530c:	0698      	lsls	r0, r3, #26
 800530e:	46b2      	mov	sl, r6
 8005310:	f140 80a2 	bpl.w	8005458 <_vfprintf_r+0x730>
 8005314:	9f08      	ldr	r7, [sp, #32]
 8005316:	3707      	adds	r7, #7
 8005318:	f027 0707 	bic.w	r7, r7, #7
 800531c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005320:	f107 0108 	add.w	r1, r7, #8
 8005324:	9108      	str	r1, [sp, #32]
 8005326:	4616      	mov	r6, r2
 8005328:	461f      	mov	r7, r3
 800532a:	2a00      	cmp	r2, #0
 800532c:	f173 0300 	sbcs.w	r3, r3, #0
 8005330:	f2c0 841c 	blt.w	8005b6c <_vfprintf_r+0xe44>
 8005334:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005338:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800533c:	2301      	movs	r3, #1
 800533e:	e61d      	b.n	8004f7c <_vfprintf_r+0x254>
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	9b02      	ldr	r3, [sp, #8]
 8005344:	9f08      	ldr	r7, [sp, #32]
 8005346:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800534a:	071b      	lsls	r3, r3, #28
 800534c:	46b2      	mov	sl, r6
 800534e:	46b3      	mov	fp, r6
 8005350:	f107 0707 	add.w	r7, r7, #7
 8005354:	f140 849b 	bpl.w	8005c8e <_vfprintf_r+0xf66>
 8005358:	f027 0307 	bic.w	r3, r7, #7
 800535c:	ed93 7b00 	vldr	d7, [r3]
 8005360:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005364:	f103 0208 	add.w	r2, r3, #8
 8005368:	9208      	str	r2, [sp, #32]
 800536a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800536e:	f003 fcd9 	bl	8008d24 <__fpclassifyd>
 8005372:	2801      	cmp	r0, #1
 8005374:	f040 8408 	bne.w	8005b88 <_vfprintf_r+0xe60>
 8005378:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800537c:	2200      	movs	r2, #0
 800537e:	2300      	movs	r3, #0
 8005380:	f7fb fbd4 	bl	8000b2c <__aeabi_dcmplt>
 8005384:	2800      	cmp	r0, #0
 8005386:	f040 85ec 	bne.w	8005f62 <_vfprintf_r+0x123a>
 800538a:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 800538e:	9e02      	ldr	r6, [sp, #8]
 8005390:	4a99      	ldr	r2, [pc, #612]	; (80055f8 <_vfprintf_r+0x8d0>)
 8005392:	4b9a      	ldr	r3, [pc, #616]	; (80055fc <_vfprintf_r+0x8d4>)
 8005394:	2103      	movs	r1, #3
 8005396:	2000      	movs	r0, #0
 8005398:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800539c:	2d47      	cmp	r5, #71	; 0x47
 800539e:	bfd8      	it	le
 80053a0:	461a      	movle	r2, r3
 80053a2:	9103      	str	r1, [sp, #12]
 80053a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80053a6:	9602      	str	r6, [sp, #8]
 80053a8:	920a      	str	r2, [sp, #40]	; 0x28
 80053aa:	9107      	str	r1, [sp, #28]
 80053ac:	900c      	str	r0, [sp, #48]	; 0x30
 80053ae:	e619      	b.n	8004fe4 <_vfprintf_r+0x2bc>
 80053b0:	9902      	ldr	r1, [sp, #8]
 80053b2:	f041 0108 	orr.w	r1, r1, #8
 80053b6:	9102      	str	r1, [sp, #8]
 80053b8:	781d      	ldrb	r5, [r3, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	e525      	b.n	8004e0a <_vfprintf_r+0xe2>
 80053be:	781d      	ldrb	r5, [r3, #0]
 80053c0:	4619      	mov	r1, r3
 80053c2:	222b      	movs	r2, #43	; 0x2b
 80053c4:	e521      	b.n	8004e0a <_vfprintf_r+0xe2>
 80053c6:	9902      	ldr	r1, [sp, #8]
 80053c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80053cc:	9102      	str	r1, [sp, #8]
 80053ce:	781d      	ldrb	r5, [r3, #0]
 80053d0:	4619      	mov	r1, r3
 80053d2:	e51a      	b.n	8004e0a <_vfprintf_r+0xe2>
 80053d4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80053d8:	2100      	movs	r1, #0
 80053da:	f813 5b01 	ldrb.w	r5, [r3], #1
 80053de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80053e2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80053e6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80053ea:	2809      	cmp	r0, #9
 80053ec:	d9f5      	bls.n	80053da <_vfprintf_r+0x6b2>
 80053ee:	9106      	str	r1, [sp, #24]
 80053f0:	e50c      	b.n	8004e0c <_vfprintf_r+0xe4>
 80053f2:	9908      	ldr	r1, [sp, #32]
 80053f4:	9304      	str	r3, [sp, #16]
 80053f6:	2330      	movs	r3, #48	; 0x30
 80053f8:	9a02      	ldr	r2, [sp, #8]
 80053fa:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80053fe:	460b      	mov	r3, r1
 8005400:	3304      	adds	r3, #4
 8005402:	2578      	movs	r5, #120	; 0x78
 8005404:	f042 0202 	orr.w	r2, r2, #2
 8005408:	9308      	str	r3, [sp, #32]
 800540a:	4b7d      	ldr	r3, [pc, #500]	; (8005600 <_vfprintf_r+0x8d8>)
 800540c:	9310      	str	r3, [sp, #64]	; 0x40
 800540e:	46b2      	mov	sl, r6
 8005410:	9202      	str	r2, [sp, #8]
 8005412:	680e      	ldr	r6, [r1, #0]
 8005414:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8005418:	2700      	movs	r7, #0
 800541a:	2302      	movs	r3, #2
 800541c:	e5a8      	b.n	8004f70 <_vfprintf_r+0x248>
 800541e:	9902      	ldr	r1, [sp, #8]
 8005420:	f041 0101 	orr.w	r1, r1, #1
 8005424:	9102      	str	r1, [sp, #8]
 8005426:	781d      	ldrb	r5, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	e4ee      	b.n	8004e0a <_vfprintf_r+0xe2>
 800542c:	9d08      	ldr	r5, [sp, #32]
 800542e:	6829      	ldr	r1, [r5, #0]
 8005430:	9106      	str	r1, [sp, #24]
 8005432:	4608      	mov	r0, r1
 8005434:	2800      	cmp	r0, #0
 8005436:	4629      	mov	r1, r5
 8005438:	f101 0104 	add.w	r1, r1, #4
 800543c:	f2c0 84ee 	blt.w	8005e1c <_vfprintf_r+0x10f4>
 8005440:	9108      	str	r1, [sp, #32]
 8005442:	781d      	ldrb	r5, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	e4e0      	b.n	8004e0a <_vfprintf_r+0xe2>
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	9b02      	ldr	r3, [sp, #8]
 800544c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005450:	0698      	lsls	r0, r3, #26
 8005452:	46b2      	mov	sl, r6
 8005454:	f53f af5e 	bmi.w	8005314 <_vfprintf_r+0x5ec>
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	06d9      	lsls	r1, r3, #27
 800545c:	f100 829b 	bmi.w	8005996 <_vfprintf_r+0xc6e>
 8005460:	9b02      	ldr	r3, [sp, #8]
 8005462:	065a      	lsls	r2, r3, #25
 8005464:	f140 8297 	bpl.w	8005996 <_vfprintf_r+0xc6e>
 8005468:	9908      	ldr	r1, [sp, #32]
 800546a:	f9b1 6000 	ldrsh.w	r6, [r1]
 800546e:	3104      	adds	r1, #4
 8005470:	17f7      	asrs	r7, r6, #31
 8005472:	4632      	mov	r2, r6
 8005474:	463b      	mov	r3, r7
 8005476:	9108      	str	r1, [sp, #32]
 8005478:	e757      	b.n	800532a <_vfprintf_r+0x602>
 800547a:	9902      	ldr	r1, [sp, #8]
 800547c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005480:	9102      	str	r1, [sp, #8]
 8005482:	781d      	ldrb	r5, [r3, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	e4c0      	b.n	8004e0a <_vfprintf_r+0xe2>
 8005488:	781d      	ldrb	r5, [r3, #0]
 800548a:	9902      	ldr	r1, [sp, #8]
 800548c:	2d6c      	cmp	r5, #108	; 0x6c
 800548e:	f000 84be 	beq.w	8005e0e <_vfprintf_r+0x10e6>
 8005492:	f041 0110 	orr.w	r1, r1, #16
 8005496:	9102      	str	r1, [sp, #8]
 8005498:	4619      	mov	r1, r3
 800549a:	e4b6      	b.n	8004e0a <_vfprintf_r+0xe2>
 800549c:	9304      	str	r3, [sp, #16]
 800549e:	9b02      	ldr	r3, [sp, #8]
 80054a0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80054a4:	069a      	lsls	r2, r3, #26
 80054a6:	f140 83fd 	bpl.w	8005ca4 <_vfprintf_r+0xf7c>
 80054aa:	9a08      	ldr	r2, [sp, #32]
 80054ac:	9905      	ldr	r1, [sp, #20]
 80054ae:	6813      	ldr	r3, [r2, #0]
 80054b0:	17cf      	asrs	r7, r1, #31
 80054b2:	4608      	mov	r0, r1
 80054b4:	3204      	adds	r2, #4
 80054b6:	4639      	mov	r1, r7
 80054b8:	9208      	str	r2, [sp, #32]
 80054ba:	e9c3 0100 	strd	r0, r1, [r3]
 80054be:	e474      	b.n	8004daa <_vfprintf_r+0x82>
 80054c0:	781d      	ldrb	r5, [r3, #0]
 80054c2:	2d2a      	cmp	r5, #42	; 0x2a
 80054c4:	f103 0101 	add.w	r1, r3, #1
 80054c8:	f000 862a 	beq.w	8006120 <_vfprintf_r+0x13f8>
 80054cc:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80054d0:	2809      	cmp	r0, #9
 80054d2:	460b      	mov	r3, r1
 80054d4:	f04f 0600 	mov.w	r6, #0
 80054d8:	f63f ac98 	bhi.w	8004e0c <_vfprintf_r+0xe4>
 80054dc:	f813 5b01 	ldrb.w	r5, [r3], #1
 80054e0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80054e4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80054e8:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80054ec:	2809      	cmp	r0, #9
 80054ee:	d9f5      	bls.n	80054dc <_vfprintf_r+0x7b4>
 80054f0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80054f4:	e48a      	b.n	8004e0c <_vfprintf_r+0xe4>
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	9b02      	ldr	r3, [sp, #8]
 80054fa:	f043 0310 	orr.w	r3, r3, #16
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	f013 0320 	ands.w	r3, r3, #32
 8005506:	46b2      	mov	sl, r6
 8005508:	f47f ae8d 	bne.w	8005226 <_vfprintf_r+0x4fe>
 800550c:	9a02      	ldr	r2, [sp, #8]
 800550e:	f012 0210 	ands.w	r2, r2, #16
 8005512:	f040 8238 	bne.w	8005986 <_vfprintf_r+0xc5e>
 8005516:	9b02      	ldr	r3, [sp, #8]
 8005518:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800551c:	f000 8233 	beq.w	8005986 <_vfprintf_r+0xc5e>
 8005520:	9908      	ldr	r1, [sp, #32]
 8005522:	4613      	mov	r3, r2
 8005524:	460a      	mov	r2, r1
 8005526:	3204      	adds	r2, #4
 8005528:	880e      	ldrh	r6, [r1, #0]
 800552a:	9208      	str	r2, [sp, #32]
 800552c:	2700      	movs	r7, #0
 800552e:	e51f      	b.n	8004f70 <_vfprintf_r+0x248>
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	4b34      	ldr	r3, [pc, #208]	; (8005604 <_vfprintf_r+0x8dc>)
 8005534:	9310      	str	r3, [sp, #64]	; 0x40
 8005536:	9b02      	ldr	r3, [sp, #8]
 8005538:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800553c:	0699      	lsls	r1, r3, #26
 800553e:	46b2      	mov	sl, r6
 8005540:	f53f aeab 	bmi.w	800529a <_vfprintf_r+0x572>
 8005544:	9b02      	ldr	r3, [sp, #8]
 8005546:	06da      	lsls	r2, r3, #27
 8005548:	f140 83d1 	bpl.w	8005cee <_vfprintf_r+0xfc6>
 800554c:	9a08      	ldr	r2, [sp, #32]
 800554e:	4613      	mov	r3, r2
 8005550:	3304      	adds	r3, #4
 8005552:	6816      	ldr	r6, [r2, #0]
 8005554:	9308      	str	r3, [sp, #32]
 8005556:	2700      	movs	r7, #0
 8005558:	e6a8      	b.n	80052ac <_vfprintf_r+0x584>
 800555a:	9908      	ldr	r1, [sp, #32]
 800555c:	9304      	str	r3, [sp, #16]
 800555e:	680a      	ldr	r2, [r1, #0]
 8005560:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8005564:	2300      	movs	r3, #0
 8005566:	2201      	movs	r2, #1
 8005568:	3104      	adds	r1, #4
 800556a:	469c      	mov	ip, r3
 800556c:	9203      	str	r2, [sp, #12]
 800556e:	9108      	str	r1, [sp, #32]
 8005570:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005574:	ab22      	add	r3, sp, #136	; 0x88
 8005576:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800557a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800557e:	9207      	str	r2, [sp, #28]
 8005580:	930a      	str	r3, [sp, #40]	; 0x28
 8005582:	e535      	b.n	8004ff0 <_vfprintf_r+0x2c8>
 8005584:	9304      	str	r3, [sp, #16]
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	f043 0310 	orr.w	r3, r3, #16
 800558c:	9302      	str	r3, [sp, #8]
 800558e:	9b02      	ldr	r3, [sp, #8]
 8005590:	46b2      	mov	sl, r6
 8005592:	069e      	lsls	r6, r3, #26
 8005594:	f53f ace2 	bmi.w	8004f5c <_vfprintf_r+0x234>
 8005598:	9b02      	ldr	r3, [sp, #8]
 800559a:	06d8      	lsls	r0, r3, #27
 800559c:	f140 8399 	bpl.w	8005cd2 <_vfprintf_r+0xfaa>
 80055a0:	9a08      	ldr	r2, [sp, #32]
 80055a2:	4613      	mov	r3, r2
 80055a4:	3204      	adds	r2, #4
 80055a6:	681e      	ldr	r6, [r3, #0]
 80055a8:	9208      	str	r2, [sp, #32]
 80055aa:	2301      	movs	r3, #1
 80055ac:	2700      	movs	r7, #0
 80055ae:	e4df      	b.n	8004f70 <_vfprintf_r+0x248>
 80055b0:	9304      	str	r3, [sp, #16]
 80055b2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80055b6:	2d00      	cmp	r5, #0
 80055b8:	f43f acaf 	beq.w	8004f1a <_vfprintf_r+0x1f2>
 80055bc:	2300      	movs	r3, #0
 80055be:	2201      	movs	r2, #1
 80055c0:	469c      	mov	ip, r3
 80055c2:	9203      	str	r2, [sp, #12]
 80055c4:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 80055c8:	e7d2      	b.n	8005570 <_vfprintf_r+0x848>
 80055ca:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80055ce:	e55b      	b.n	8005088 <_vfprintf_r+0x360>
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f47f ace5 	bne.w	8004fa0 <_vfprintf_r+0x278>
 80055d6:	2f00      	cmp	r7, #0
 80055d8:	bf08      	it	eq
 80055da:	2e0a      	cmpeq	r6, #10
 80055dc:	f080 81ff 	bcs.w	80059de <_vfprintf_r+0xcb6>
 80055e0:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 80055e4:	3630      	adds	r6, #48	; 0x30
 80055e6:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 80055ea:	ab2c      	add	r3, sp, #176	; 0xb0
 80055ec:	ebcb 0303 	rsb	r3, fp, r3
 80055f0:	9307      	str	r3, [sp, #28]
 80055f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80055f6:	e4ed      	b.n	8004fd4 <_vfprintf_r+0x2ac>
 80055f8:	08018de8 	.word	0x08018de8
 80055fc:	08018de4 	.word	0x08018de4
 8005600:	08018e08 	.word	0x08018e08
 8005604:	08018df4 	.word	0x08018df4
 8005608:	2d65      	cmp	r5, #101	; 0x65
 800560a:	f340 808a 	ble.w	8005722 <_vfprintf_r+0x9fa>
 800560e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005612:	2200      	movs	r2, #0
 8005614:	2300      	movs	r3, #0
 8005616:	f7fb fa7f 	bl	8000b18 <__aeabi_dcmpeq>
 800561a:	2800      	cmp	r0, #0
 800561c:	f000 8131 	beq.w	8005882 <_vfprintf_r+0xb5a>
 8005620:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005622:	4aae      	ldr	r2, [pc, #696]	; (80058dc <_vfprintf_r+0xbb4>)
 8005624:	6022      	str	r2, [r4, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	f10b 0b01 	add.w	fp, fp, #1
 800562c:	2201      	movs	r2, #1
 800562e:	2b07      	cmp	r3, #7
 8005630:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005634:	9320      	str	r3, [sp, #128]	; 0x80
 8005636:	6062      	str	r2, [r4, #4]
 8005638:	f300 8372 	bgt.w	8005d20 <_vfprintf_r+0xff8>
 800563c:	3408      	adds	r4, #8
 800563e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005642:	4293      	cmp	r3, r2
 8005644:	db03      	blt.n	800564e <_vfprintf_r+0x926>
 8005646:	9b02      	ldr	r3, [sp, #8]
 8005648:	07df      	lsls	r7, r3, #31
 800564a:	f57f ad90 	bpl.w	800516e <_vfprintf_r+0x446>
 800564e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005650:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005652:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	448b      	add	fp, r1
 800565a:	2b07      	cmp	r3, #7
 800565c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005660:	6061      	str	r1, [r4, #4]
 8005662:	9320      	str	r3, [sp, #128]	; 0x80
 8005664:	f300 83e1 	bgt.w	8005e2a <_vfprintf_r+0x1102>
 8005668:	3408      	adds	r4, #8
 800566a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800566c:	1e5d      	subs	r5, r3, #1
 800566e:	2d00      	cmp	r5, #0
 8005670:	f77f ad7d 	ble.w	800516e <_vfprintf_r+0x446>
 8005674:	2d10      	cmp	r5, #16
 8005676:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005678:	4f99      	ldr	r7, [pc, #612]	; (80058e0 <_vfprintf_r+0xbb8>)
 800567a:	f340 8196 	ble.w	80059aa <_vfprintf_r+0xc82>
 800567e:	2610      	movs	r6, #16
 8005680:	465a      	mov	r2, fp
 8005682:	e004      	b.n	800568e <_vfprintf_r+0x966>
 8005684:	3408      	adds	r4, #8
 8005686:	3d10      	subs	r5, #16
 8005688:	2d10      	cmp	r5, #16
 800568a:	f340 818d 	ble.w	80059a8 <_vfprintf_r+0xc80>
 800568e:	3301      	adds	r3, #1
 8005690:	3210      	adds	r2, #16
 8005692:	2b07      	cmp	r3, #7
 8005694:	9221      	str	r2, [sp, #132]	; 0x84
 8005696:	9320      	str	r3, [sp, #128]	; 0x80
 8005698:	6027      	str	r7, [r4, #0]
 800569a:	6066      	str	r6, [r4, #4]
 800569c:	ddf2      	ble.n	8005684 <_vfprintf_r+0x95c>
 800569e:	4640      	mov	r0, r8
 80056a0:	4649      	mov	r1, r9
 80056a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80056a4:	f003 fbea 	bl	8008e7c <__sprint_r>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	f47f ac3d 	bne.w	8004f28 <_vfprintf_r+0x200>
 80056ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80056b4:	e7e7      	b.n	8005686 <_vfprintf_r+0x95e>
 80056b6:	9b06      	ldr	r3, [sp, #24]
 80056b8:	9a03      	ldr	r2, [sp, #12]
 80056ba:	1a9e      	subs	r6, r3, r2
 80056bc:	2e00      	cmp	r6, #0
 80056be:	f77f ad0a 	ble.w	80050d6 <_vfprintf_r+0x3ae>
 80056c2:	2e10      	cmp	r6, #16
 80056c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056c6:	4f86      	ldr	r7, [pc, #536]	; (80058e0 <_vfprintf_r+0xbb8>)
 80056c8:	dd1f      	ble.n	800570a <_vfprintf_r+0x9e2>
 80056ca:	f04f 0a10 	mov.w	sl, #16
 80056ce:	465b      	mov	r3, fp
 80056d0:	e004      	b.n	80056dc <_vfprintf_r+0x9b4>
 80056d2:	3e10      	subs	r6, #16
 80056d4:	2e10      	cmp	r6, #16
 80056d6:	f104 0408 	add.w	r4, r4, #8
 80056da:	dd15      	ble.n	8005708 <_vfprintf_r+0x9e0>
 80056dc:	3201      	adds	r2, #1
 80056de:	3310      	adds	r3, #16
 80056e0:	2a07      	cmp	r2, #7
 80056e2:	9321      	str	r3, [sp, #132]	; 0x84
 80056e4:	9220      	str	r2, [sp, #128]	; 0x80
 80056e6:	e884 0480 	stmia.w	r4, {r7, sl}
 80056ea:	ddf2      	ble.n	80056d2 <_vfprintf_r+0x9aa>
 80056ec:	4640      	mov	r0, r8
 80056ee:	4649      	mov	r1, r9
 80056f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80056f2:	f003 fbc3 	bl	8008e7c <__sprint_r>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f47f ac16 	bne.w	8004f28 <_vfprintf_r+0x200>
 80056fc:	3e10      	subs	r6, #16
 80056fe:	2e10      	cmp	r6, #16
 8005700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005702:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005704:	ac2c      	add	r4, sp, #176	; 0xb0
 8005706:	dce9      	bgt.n	80056dc <_vfprintf_r+0x9b4>
 8005708:	469b      	mov	fp, r3
 800570a:	3201      	adds	r2, #1
 800570c:	44b3      	add	fp, r6
 800570e:	2a07      	cmp	r2, #7
 8005710:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005714:	9220      	str	r2, [sp, #128]	; 0x80
 8005716:	6027      	str	r7, [r4, #0]
 8005718:	6066      	str	r6, [r4, #4]
 800571a:	f300 821a 	bgt.w	8005b52 <_vfprintf_r+0xe2a>
 800571e:	3408      	adds	r4, #8
 8005720:	e4d9      	b.n	80050d6 <_vfprintf_r+0x3ae>
 8005722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005724:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005726:	2b01      	cmp	r3, #1
 8005728:	f340 81d5 	ble.w	8005ad6 <_vfprintf_r+0xdae>
 800572c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	3501      	adds	r5, #1
 8005732:	f10b 0601 	add.w	r6, fp, #1
 8005736:	2301      	movs	r3, #1
 8005738:	2d07      	cmp	r5, #7
 800573a:	9621      	str	r6, [sp, #132]	; 0x84
 800573c:	9520      	str	r5, [sp, #128]	; 0x80
 800573e:	6063      	str	r3, [r4, #4]
 8005740:	f300 81e5 	bgt.w	8005b0e <_vfprintf_r+0xde6>
 8005744:	3408      	adds	r4, #8
 8005746:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	3501      	adds	r5, #1
 800574e:	4416      	add	r6, r2
 8005750:	2d07      	cmp	r5, #7
 8005752:	9621      	str	r6, [sp, #132]	; 0x84
 8005754:	9520      	str	r5, [sp, #128]	; 0x80
 8005756:	6062      	str	r2, [r4, #4]
 8005758:	f300 81ef 	bgt.w	8005b3a <_vfprintf_r+0xe12>
 800575c:	3408      	adds	r4, #8
 800575e:	2300      	movs	r3, #0
 8005760:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005764:	2200      	movs	r2, #0
 8005766:	f7fb f9d7 	bl	8000b18 <__aeabi_dcmpeq>
 800576a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800576c:	2800      	cmp	r0, #0
 800576e:	f040 80e1 	bne.w	8005934 <_vfprintf_r+0xc0c>
 8005772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005774:	3b01      	subs	r3, #1
 8005776:	3501      	adds	r5, #1
 8005778:	3201      	adds	r2, #1
 800577a:	441e      	add	r6, r3
 800577c:	2d07      	cmp	r5, #7
 800577e:	9520      	str	r5, [sp, #128]	; 0x80
 8005780:	9621      	str	r6, [sp, #132]	; 0x84
 8005782:	6022      	str	r2, [r4, #0]
 8005784:	6063      	str	r3, [r4, #4]
 8005786:	f300 81b6 	bgt.w	8005af6 <_vfprintf_r+0xdce>
 800578a:	3408      	adds	r4, #8
 800578c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800578e:	6062      	str	r2, [r4, #4]
 8005790:	3501      	adds	r5, #1
 8005792:	eb06 0b02 	add.w	fp, r6, r2
 8005796:	ab1b      	add	r3, sp, #108	; 0x6c
 8005798:	2d07      	cmp	r5, #7
 800579a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800579e:	9520      	str	r5, [sp, #128]	; 0x80
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	f77f ace3 	ble.w	800516c <_vfprintf_r+0x444>
 80057a6:	4640      	mov	r0, r8
 80057a8:	4649      	mov	r1, r9
 80057aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80057ac:	f003 fb66 	bl	8008e7c <__sprint_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f47f abb9 	bne.w	8004f28 <_vfprintf_r+0x200>
 80057b6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80057ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80057bc:	e4d7      	b.n	800516e <_vfprintf_r+0x446>
 80057be:	4640      	mov	r0, r8
 80057c0:	4649      	mov	r1, r9
 80057c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80057c4:	f003 fb5a 	bl	8008e7c <__sprint_r>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f43f ad1a 	beq.w	8005202 <_vfprintf_r+0x4da>
 80057ce:	f7ff bbab 	b.w	8004f28 <_vfprintf_r+0x200>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d133      	bne.n	800583e <_vfprintf_r+0xb16>
 80057d6:	9b02      	ldr	r3, [sp, #8]
 80057d8:	07da      	lsls	r2, r3, #31
 80057da:	d530      	bpl.n	800583e <_vfprintf_r+0xb16>
 80057dc:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 80057e0:	2330      	movs	r3, #48	; 0x30
 80057e2:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80057e6:	ab2c      	add	r3, sp, #176	; 0xb0
 80057e8:	ebcb 0303 	rsb	r3, fp, r3
 80057ec:	9307      	str	r3, [sp, #28]
 80057ee:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80057f2:	f7ff bbef 	b.w	8004fd4 <_vfprintf_r+0x2ac>
 80057f6:	4640      	mov	r0, r8
 80057f8:	4649      	mov	r1, r9
 80057fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80057fc:	f003 fb3e 	bl	8008e7c <__sprint_r>
 8005800:	2800      	cmp	r0, #0
 8005802:	f47f ab91 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005806:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800580a:	ac2c      	add	r4, sp, #176	; 0xb0
 800580c:	e49d      	b.n	800514a <_vfprintf_r+0x422>
 800580e:	4640      	mov	r0, r8
 8005810:	4649      	mov	r1, r9
 8005812:	aa1f      	add	r2, sp, #124	; 0x7c
 8005814:	f003 fb32 	bl	8008e7c <__sprint_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	f47f ab85 	bne.w	8004f28 <_vfprintf_r+0x200>
 800581e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005822:	ac2c      	add	r4, sp, #176	; 0xb0
 8005824:	e443      	b.n	80050ae <_vfprintf_r+0x386>
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	aa1f      	add	r2, sp, #124	; 0x7c
 800582c:	f003 fb26 	bl	8008e7c <__sprint_r>
 8005830:	2800      	cmp	r0, #0
 8005832:	f47f ab79 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005836:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800583a:	ac2c      	add	r4, sp, #176	; 0xb0
 800583c:	e448      	b.n	80050d0 <_vfprintf_r+0x3a8>
 800583e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005840:	f8cd a01c 	str.w	sl, [sp, #28]
 8005844:	930a      	str	r3, [sp, #40]	; 0x28
 8005846:	f7ff bbc5 	b.w	8004fd4 <_vfprintf_r+0x2ac>
 800584a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800584c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8005850:	0933      	lsrs	r3, r6, #4
 8005852:	f006 010f 	and.w	r1, r6, #15
 8005856:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800585a:	093a      	lsrs	r2, r7, #4
 800585c:	461e      	mov	r6, r3
 800585e:	4617      	mov	r7, r2
 8005860:	5c43      	ldrb	r3, [r0, r1]
 8005862:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8005866:	ea56 0307 	orrs.w	r3, r6, r7
 800586a:	d1f1      	bne.n	8005850 <_vfprintf_r+0xb28>
 800586c:	465a      	mov	r2, fp
 800586e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005876:	9307      	str	r3, [sp, #28]
 8005878:	f7ff bbac 	b.w	8004fd4 <_vfprintf_r+0x2ac>
 800587c:	2302      	movs	r3, #2
 800587e:	f7ff bb77 	b.w	8004f70 <_vfprintf_r+0x248>
 8005882:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005884:	2d00      	cmp	r5, #0
 8005886:	f340 8257 	ble.w	8005d38 <_vfprintf_r+0x1010>
 800588a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800588c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800588e:	428a      	cmp	r2, r1
 8005890:	4613      	mov	r3, r2
 8005892:	bfa8      	it	ge
 8005894:	460b      	movge	r3, r1
 8005896:	461d      	mov	r5, r3
 8005898:	990a      	ldr	r1, [sp, #40]	; 0x28
 800589a:	2d00      	cmp	r5, #0
 800589c:	eb01 0a02 	add.w	sl, r1, r2
 80058a0:	dd0b      	ble.n	80058ba <_vfprintf_r+0xb92>
 80058a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058a4:	6021      	str	r1, [r4, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	44ab      	add	fp, r5
 80058aa:	2b07      	cmp	r3, #7
 80058ac:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80058b0:	6065      	str	r5, [r4, #4]
 80058b2:	9320      	str	r3, [sp, #128]	; 0x80
 80058b4:	f300 8309 	bgt.w	8005eca <_vfprintf_r+0x11a2>
 80058b8:	3408      	adds	r4, #8
 80058ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058bc:	2d00      	cmp	r5, #0
 80058be:	bfa8      	it	ge
 80058c0:	1b5b      	subge	r3, r3, r5
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	461d      	mov	r5, r3
 80058c6:	f340 80b0 	ble.w	8005a2a <_vfprintf_r+0xd02>
 80058ca:	2d10      	cmp	r5, #16
 80058cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058ce:	4f04      	ldr	r7, [pc, #16]	; (80058e0 <_vfprintf_r+0xbb8>)
 80058d0:	f340 821a 	ble.w	8005d08 <_vfprintf_r+0xfe0>
 80058d4:	2610      	movs	r6, #16
 80058d6:	465a      	mov	r2, fp
 80058d8:	e009      	b.n	80058ee <_vfprintf_r+0xbc6>
 80058da:	bf00      	nop
 80058dc:	08018e24 	.word	0x08018e24
 80058e0:	08018dd4 	.word	0x08018dd4
 80058e4:	3408      	adds	r4, #8
 80058e6:	3d10      	subs	r5, #16
 80058e8:	2d10      	cmp	r5, #16
 80058ea:	f340 820c 	ble.w	8005d06 <_vfprintf_r+0xfde>
 80058ee:	3301      	adds	r3, #1
 80058f0:	3210      	adds	r2, #16
 80058f2:	2b07      	cmp	r3, #7
 80058f4:	9221      	str	r2, [sp, #132]	; 0x84
 80058f6:	9320      	str	r3, [sp, #128]	; 0x80
 80058f8:	6027      	str	r7, [r4, #0]
 80058fa:	6066      	str	r6, [r4, #4]
 80058fc:	ddf2      	ble.n	80058e4 <_vfprintf_r+0xbbc>
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	aa1f      	add	r2, sp, #124	; 0x7c
 8005904:	f003 faba 	bl	8008e7c <__sprint_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	f47f ab0d 	bne.w	8004f28 <_vfprintf_r+0x200>
 800590e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005910:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005912:	ac2c      	add	r4, sp, #176	; 0xb0
 8005914:	e7e7      	b.n	80058e6 <_vfprintf_r+0xbbe>
 8005916:	4640      	mov	r0, r8
 8005918:	4649      	mov	r1, r9
 800591a:	aa1f      	add	r2, sp, #124	; 0x7c
 800591c:	f003 faae 	bl	8008e7c <__sprint_r>
 8005920:	2800      	cmp	r0, #0
 8005922:	f47f ab01 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005926:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 800592a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800592e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005930:	f7ff bbaa 	b.w	8005088 <_vfprintf_r+0x360>
 8005934:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005938:	f1ba 0f00 	cmp.w	sl, #0
 800593c:	f77f af26 	ble.w	800578c <_vfprintf_r+0xa64>
 8005940:	f1ba 0f10 	cmp.w	sl, #16
 8005944:	4f8f      	ldr	r7, [pc, #572]	; (8005b84 <_vfprintf_r+0xe5c>)
 8005946:	bfc8      	it	gt
 8005948:	f04f 0b10 	movgt.w	fp, #16
 800594c:	dc07      	bgt.n	800595e <_vfprintf_r+0xc36>
 800594e:	e0ea      	b.n	8005b26 <_vfprintf_r+0xdfe>
 8005950:	3408      	adds	r4, #8
 8005952:	f1aa 0a10 	sub.w	sl, sl, #16
 8005956:	f1ba 0f10 	cmp.w	sl, #16
 800595a:	f340 80e4 	ble.w	8005b26 <_vfprintf_r+0xdfe>
 800595e:	3501      	adds	r5, #1
 8005960:	3610      	adds	r6, #16
 8005962:	2d07      	cmp	r5, #7
 8005964:	9621      	str	r6, [sp, #132]	; 0x84
 8005966:	9520      	str	r5, [sp, #128]	; 0x80
 8005968:	e884 0880 	stmia.w	r4, {r7, fp}
 800596c:	ddf0      	ble.n	8005950 <_vfprintf_r+0xc28>
 800596e:	4640      	mov	r0, r8
 8005970:	4649      	mov	r1, r9
 8005972:	aa1f      	add	r2, sp, #124	; 0x7c
 8005974:	f003 fa82 	bl	8008e7c <__sprint_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	f47f aad5 	bne.w	8004f28 <_vfprintf_r+0x200>
 800597e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005980:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005982:	ac2c      	add	r4, sp, #176	; 0xb0
 8005984:	e7e5      	b.n	8005952 <_vfprintf_r+0xc2a>
 8005986:	9908      	ldr	r1, [sp, #32]
 8005988:	460a      	mov	r2, r1
 800598a:	3204      	adds	r2, #4
 800598c:	680e      	ldr	r6, [r1, #0]
 800598e:	9208      	str	r2, [sp, #32]
 8005990:	2700      	movs	r7, #0
 8005992:	f7ff baed 	b.w	8004f70 <_vfprintf_r+0x248>
 8005996:	9a08      	ldr	r2, [sp, #32]
 8005998:	6816      	ldr	r6, [r2, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	3304      	adds	r3, #4
 800599e:	17f7      	asrs	r7, r6, #31
 80059a0:	9308      	str	r3, [sp, #32]
 80059a2:	4632      	mov	r2, r6
 80059a4:	463b      	mov	r3, r7
 80059a6:	e4c0      	b.n	800532a <_vfprintf_r+0x602>
 80059a8:	4693      	mov	fp, r2
 80059aa:	3301      	adds	r3, #1
 80059ac:	44ab      	add	fp, r5
 80059ae:	2b07      	cmp	r3, #7
 80059b0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80059b4:	9320      	str	r3, [sp, #128]	; 0x80
 80059b6:	6027      	str	r7, [r4, #0]
 80059b8:	6065      	str	r5, [r4, #4]
 80059ba:	f77f abd7 	ble.w	800516c <_vfprintf_r+0x444>
 80059be:	e6f2      	b.n	80057a6 <_vfprintf_r+0xa7e>
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	f000 823e 	beq.w	8005e42 <_vfprintf_r+0x111a>
 80059c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	461a      	mov	r2, r3
 80059cc:	a82c      	add	r0, sp, #176	; 0xb0
 80059ce:	930a      	str	r3, [sp, #40]	; 0x28
 80059d0:	1a82      	subs	r2, r0, r2
 80059d2:	2330      	movs	r3, #48	; 0x30
 80059d4:	9207      	str	r2, [sp, #28]
 80059d6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80059da:	f7ff bafb 	b.w	8004fd4 <_vfprintf_r+0x2ac>
 80059de:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 80059e2:	f8cd c00c 	str.w	ip, [sp, #12]
 80059e6:	4630      	mov	r0, r6
 80059e8:	4639      	mov	r1, r7
 80059ea:	220a      	movs	r2, #10
 80059ec:	2300      	movs	r3, #0
 80059ee:	f7fb f987 	bl	8000d00 <__aeabi_uldivmod>
 80059f2:	3230      	adds	r2, #48	; 0x30
 80059f4:	4630      	mov	r0, r6
 80059f6:	4639      	mov	r1, r7
 80059f8:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 80059fc:	2300      	movs	r3, #0
 80059fe:	220a      	movs	r2, #10
 8005a00:	f7fb f97e 	bl	8000d00 <__aeabi_uldivmod>
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	ea56 0307 	orrs.w	r3, r6, r7
 8005a0c:	d1eb      	bne.n	80059e6 <_vfprintf_r+0xcbe>
 8005a0e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005a12:	e72b      	b.n	800586c <_vfprintf_r+0xb44>
 8005a14:	4640      	mov	r0, r8
 8005a16:	4649      	mov	r1, r9
 8005a18:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a1a:	f003 fa2f 	bl	8008e7c <__sprint_r>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f47f aa82 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005a24:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005a28:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a30:	440a      	add	r2, r1
 8005a32:	4616      	mov	r6, r2
 8005a34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a36:	4293      	cmp	r3, r2
 8005a38:	db3e      	blt.n	8005ab8 <_vfprintf_r+0xd90>
 8005a3a:	9a02      	ldr	r2, [sp, #8]
 8005a3c:	07d5      	lsls	r5, r2, #31
 8005a3e:	d43b      	bmi.n	8005ab8 <_vfprintf_r+0xd90>
 8005a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a42:	ebc6 050a 	rsb	r5, r6, sl
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	429d      	cmp	r5, r3
 8005a4a:	bfa8      	it	ge
 8005a4c:	461d      	movge	r5, r3
 8005a4e:	2d00      	cmp	r5, #0
 8005a50:	462f      	mov	r7, r5
 8005a52:	dd0b      	ble.n	8005a6c <_vfprintf_r+0xd44>
 8005a54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a56:	6026      	str	r6, [r4, #0]
 8005a58:	3201      	adds	r2, #1
 8005a5a:	44ab      	add	fp, r5
 8005a5c:	2a07      	cmp	r2, #7
 8005a5e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005a62:	6065      	str	r5, [r4, #4]
 8005a64:	9220      	str	r2, [sp, #128]	; 0x80
 8005a66:	f300 8266 	bgt.w	8005f36 <_vfprintf_r+0x120e>
 8005a6a:	3408      	adds	r4, #8
 8005a6c:	2f00      	cmp	r7, #0
 8005a6e:	bfac      	ite	ge
 8005a70:	1bdd      	subge	r5, r3, r7
 8005a72:	461d      	movlt	r5, r3
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	f77f ab7a 	ble.w	800516e <_vfprintf_r+0x446>
 8005a7a:	2d10      	cmp	r5, #16
 8005a7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a7e:	4f41      	ldr	r7, [pc, #260]	; (8005b84 <_vfprintf_r+0xe5c>)
 8005a80:	dd93      	ble.n	80059aa <_vfprintf_r+0xc82>
 8005a82:	2610      	movs	r6, #16
 8005a84:	465a      	mov	r2, fp
 8005a86:	e003      	b.n	8005a90 <_vfprintf_r+0xd68>
 8005a88:	3408      	adds	r4, #8
 8005a8a:	3d10      	subs	r5, #16
 8005a8c:	2d10      	cmp	r5, #16
 8005a8e:	dd8b      	ble.n	80059a8 <_vfprintf_r+0xc80>
 8005a90:	3301      	adds	r3, #1
 8005a92:	3210      	adds	r2, #16
 8005a94:	2b07      	cmp	r3, #7
 8005a96:	9221      	str	r2, [sp, #132]	; 0x84
 8005a98:	9320      	str	r3, [sp, #128]	; 0x80
 8005a9a:	6027      	str	r7, [r4, #0]
 8005a9c:	6066      	str	r6, [r4, #4]
 8005a9e:	ddf3      	ble.n	8005a88 <_vfprintf_r+0xd60>
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	aa1f      	add	r2, sp, #124	; 0x7c
 8005aa6:	f003 f9e9 	bl	8008e7c <__sprint_r>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	f47f aa3c 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005ab0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ab2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ab4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ab6:	e7e8      	b.n	8005a8a <_vfprintf_r+0xd62>
 8005ab8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005aba:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005abc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005abe:	6021      	str	r1, [r4, #0]
 8005ac0:	3201      	adds	r2, #1
 8005ac2:	4483      	add	fp, r0
 8005ac4:	2a07      	cmp	r2, #7
 8005ac6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005aca:	6060      	str	r0, [r4, #4]
 8005acc:	9220      	str	r2, [sp, #128]	; 0x80
 8005ace:	f300 8208 	bgt.w	8005ee2 <_vfprintf_r+0x11ba>
 8005ad2:	3408      	adds	r4, #8
 8005ad4:	e7b4      	b.n	8005a40 <_vfprintf_r+0xd18>
 8005ad6:	9b02      	ldr	r3, [sp, #8]
 8005ad8:	07d8      	lsls	r0, r3, #31
 8005ada:	f53f ae27 	bmi.w	800572c <_vfprintf_r+0xa04>
 8005ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	3501      	adds	r5, #1
 8005ae4:	f10b 0601 	add.w	r6, fp, #1
 8005ae8:	2301      	movs	r3, #1
 8005aea:	2d07      	cmp	r5, #7
 8005aec:	9621      	str	r6, [sp, #132]	; 0x84
 8005aee:	9520      	str	r5, [sp, #128]	; 0x80
 8005af0:	6063      	str	r3, [r4, #4]
 8005af2:	f77f ae4a 	ble.w	800578a <_vfprintf_r+0xa62>
 8005af6:	4640      	mov	r0, r8
 8005af8:	4649      	mov	r1, r9
 8005afa:	aa1f      	add	r2, sp, #124	; 0x7c
 8005afc:	f003 f9be 	bl	8008e7c <__sprint_r>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	f47f aa11 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005b06:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005b08:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005b0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b0c:	e63e      	b.n	800578c <_vfprintf_r+0xa64>
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4649      	mov	r1, r9
 8005b12:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b14:	f003 f9b2 	bl	8008e7c <__sprint_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f47f aa05 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005b1e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005b20:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005b22:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b24:	e60f      	b.n	8005746 <_vfprintf_r+0xa1e>
 8005b26:	3501      	adds	r5, #1
 8005b28:	4456      	add	r6, sl
 8005b2a:	2d07      	cmp	r5, #7
 8005b2c:	9621      	str	r6, [sp, #132]	; 0x84
 8005b2e:	9520      	str	r5, [sp, #128]	; 0x80
 8005b30:	e884 0480 	stmia.w	r4, {r7, sl}
 8005b34:	f77f ae29 	ble.w	800578a <_vfprintf_r+0xa62>
 8005b38:	e7dd      	b.n	8005af6 <_vfprintf_r+0xdce>
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b40:	f003 f99c 	bl	8008e7c <__sprint_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f47f a9ef 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005b4a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005b4c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005b4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b50:	e605      	b.n	800575e <_vfprintf_r+0xa36>
 8005b52:	4640      	mov	r0, r8
 8005b54:	4649      	mov	r1, r9
 8005b56:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b58:	f003 f990 	bl	8008e7c <__sprint_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f47f a9e3 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005b62:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005b66:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b68:	f7ff bab5 	b.w	80050d6 <_vfprintf_r+0x3ae>
 8005b6c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8005b70:	4276      	negs	r6, r6
 8005b72:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005b76:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8005b7a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f7ff b9fc 	b.w	8004f7c <_vfprintf_r+0x254>
 8005b84:	08018dd4 	.word	0x08018dd4
 8005b88:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8005b8c:	f003 f8ca 	bl	8008d24 <__fpclassifyd>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	f000 8116 	beq.w	8005dc2 <_vfprintf_r+0x109a>
 8005b96:	f025 0320 	bic.w	r3, r5, #32
 8005b9a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005b9e:	9303      	str	r3, [sp, #12]
 8005ba0:	f000 8260 	beq.w	8006064 <_vfprintf_r+0x133c>
 8005ba4:	2b47      	cmp	r3, #71	; 0x47
 8005ba6:	d105      	bne.n	8005bb4 <_vfprintf_r+0xe8c>
 8005ba8:	f1ba 0f00 	cmp.w	sl, #0
 8005bac:	bf14      	ite	ne
 8005bae:	46d3      	movne	fp, sl
 8005bb0:	f04f 0b01 	moveq.w	fp, #1
 8005bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bb6:	9a02      	ldr	r2, [sp, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc0:	f2c0 8260 	blt.w	8006084 <_vfprintf_r+0x135c>
 8005bc4:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8005bc8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005bcc:	f04f 0a00 	mov.w	sl, #0
 8005bd0:	2d66      	cmp	r5, #102	; 0x66
 8005bd2:	f000 815e 	beq.w	8005e92 <_vfprintf_r+0x116a>
 8005bd6:	2d46      	cmp	r5, #70	; 0x46
 8005bd8:	f000 815b 	beq.w	8005e92 <_vfprintf_r+0x116a>
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	2b45      	cmp	r3, #69	; 0x45
 8005be0:	bf0c      	ite	eq
 8005be2:	f10b 0701 	addeq.w	r7, fp, #1
 8005be6:	465f      	movne	r7, fp
 8005be8:	aa1a      	add	r2, sp, #104	; 0x68
 8005bea:	ab1d      	add	r3, sp, #116	; 0x74
 8005bec:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	463a      	mov	r2, r7
 8005bfa:	ab19      	add	r3, sp, #100	; 0x64
 8005bfc:	f000 fc38 	bl	8006470 <_dtoa_r>
 8005c00:	2d67      	cmp	r5, #103	; 0x67
 8005c02:	900a      	str	r0, [sp, #40]	; 0x28
 8005c04:	d002      	beq.n	8005c0c <_vfprintf_r+0xee4>
 8005c06:	2d47      	cmp	r5, #71	; 0x47
 8005c08:	f040 8151 	bne.w	8005eae <_vfprintf_r+0x1186>
 8005c0c:	9b02      	ldr	r3, [sp, #8]
 8005c0e:	07db      	lsls	r3, r3, #31
 8005c10:	f140 8241 	bpl.w	8006096 <_vfprintf_r+0x136e>
 8005c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c16:	19de      	adds	r6, r3, r7
 8005c18:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f7fa ff7a 	bl	8000b18 <__aeabi_dcmpeq>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	f040 81ad 	bne.w	8005f84 <_vfprintf_r+0x125c>
 8005c2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c2c:	429e      	cmp	r6, r3
 8005c2e:	d906      	bls.n	8005c3e <_vfprintf_r+0xf16>
 8005c30:	2130      	movs	r1, #48	; 0x30
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	921d      	str	r2, [sp, #116]	; 0x74
 8005c36:	7019      	strb	r1, [r3, #0]
 8005c38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c3a:	429e      	cmp	r6, r3
 8005c3c:	d8f9      	bhi.n	8005c32 <_vfprintf_r+0xf0a>
 8005c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c40:	1a9b      	subs	r3, r3, r2
 8005c42:	930d      	str	r3, [sp, #52]	; 0x34
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	2b47      	cmp	r3, #71	; 0x47
 8005c48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c4a:	f000 8183 	beq.w	8005f54 <_vfprintf_r+0x122c>
 8005c4e:	2d65      	cmp	r5, #101	; 0x65
 8005c50:	f340 81a6 	ble.w	8005fa0 <_vfprintf_r+0x1278>
 8005c54:	2d66      	cmp	r5, #102	; 0x66
 8005c56:	930c      	str	r3, [sp, #48]	; 0x30
 8005c58:	f000 821f 	beq.w	800609a <_vfprintf_r+0x1372>
 8005c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c60:	4293      	cmp	r3, r2
 8005c62:	f300 8202 	bgt.w	800606a <_vfprintf_r+0x1342>
 8005c66:	9b02      	ldr	r3, [sp, #8]
 8005c68:	07d9      	lsls	r1, r3, #31
 8005c6a:	f100 8239 	bmi.w	80060e0 <_vfprintf_r+0x13b8>
 8005c6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005c72:	9207      	str	r2, [sp, #28]
 8005c74:	f1ba 0f00 	cmp.w	sl, #0
 8005c78:	f040 8179 	bne.w	8005f6e <_vfprintf_r+0x1246>
 8005c7c:	9303      	str	r3, [sp, #12]
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c80:	9302      	str	r3, [sp, #8]
 8005c82:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005c86:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005c8a:	f7ff b9ab 	b.w	8004fe4 <_vfprintf_r+0x2bc>
 8005c8e:	f027 0707 	bic.w	r7, r7, #7
 8005c92:	ed97 7b00 	vldr	d7, [r7]
 8005c96:	f107 0308 	add.w	r3, r7, #8
 8005c9a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005c9e:	9308      	str	r3, [sp, #32]
 8005ca0:	f7ff bb63 	b.w	800536a <_vfprintf_r+0x642>
 8005ca4:	9b02      	ldr	r3, [sp, #8]
 8005ca6:	06db      	lsls	r3, r3, #27
 8005ca8:	d40b      	bmi.n	8005cc2 <_vfprintf_r+0xf9a>
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	065f      	lsls	r7, r3, #25
 8005cae:	d508      	bpl.n	8005cc2 <_vfprintf_r+0xf9a>
 8005cb0:	9a08      	ldr	r2, [sp, #32]
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	3204      	adds	r2, #4
 8005cb6:	9208      	str	r2, [sp, #32]
 8005cb8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	f7ff b874 	b.w	8004daa <_vfprintf_r+0x82>
 8005cc2:	9a08      	ldr	r2, [sp, #32]
 8005cc4:	6813      	ldr	r3, [r2, #0]
 8005cc6:	3204      	adds	r2, #4
 8005cc8:	9208      	str	r2, [sp, #32]
 8005cca:	9a05      	ldr	r2, [sp, #20]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	f7ff b86c 	b.w	8004daa <_vfprintf_r+0x82>
 8005cd2:	9b02      	ldr	r3, [sp, #8]
 8005cd4:	9a08      	ldr	r2, [sp, #32]
 8005cd6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cda:	4613      	mov	r3, r2
 8005cdc:	f43f ac62 	beq.w	80055a4 <_vfprintf_r+0x87c>
 8005ce0:	8816      	ldrh	r6, [r2, #0]
 8005ce2:	3204      	adds	r2, #4
 8005ce4:	2700      	movs	r7, #0
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	9208      	str	r2, [sp, #32]
 8005cea:	f7ff b941 	b.w	8004f70 <_vfprintf_r+0x248>
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	9a08      	ldr	r2, [sp, #32]
 8005cf2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	d076      	beq.n	8005de8 <_vfprintf_r+0x10c0>
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	8816      	ldrh	r6, [r2, #0]
 8005cfe:	9308      	str	r3, [sp, #32]
 8005d00:	2700      	movs	r7, #0
 8005d02:	f7ff bad3 	b.w	80052ac <_vfprintf_r+0x584>
 8005d06:	4693      	mov	fp, r2
 8005d08:	3301      	adds	r3, #1
 8005d0a:	44ab      	add	fp, r5
 8005d0c:	2b07      	cmp	r3, #7
 8005d0e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005d12:	9320      	str	r3, [sp, #128]	; 0x80
 8005d14:	6027      	str	r7, [r4, #0]
 8005d16:	6065      	str	r5, [r4, #4]
 8005d18:	f73f ae7c 	bgt.w	8005a14 <_vfprintf_r+0xcec>
 8005d1c:	3408      	adds	r4, #8
 8005d1e:	e684      	b.n	8005a2a <_vfprintf_r+0xd02>
 8005d20:	4640      	mov	r0, r8
 8005d22:	4649      	mov	r1, r9
 8005d24:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d26:	f003 f8a9 	bl	8008e7c <__sprint_r>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	f47f a8fc 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005d30:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005d34:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d36:	e482      	b.n	800563e <_vfprintf_r+0x916>
 8005d38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d3a:	4ab0      	ldr	r2, [pc, #704]	; (8005ffc <_vfprintf_r+0x12d4>)
 8005d3c:	6022      	str	r2, [r4, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f10b 0b01 	add.w	fp, fp, #1
 8005d44:	2201      	movs	r2, #1
 8005d46:	2b07      	cmp	r3, #7
 8005d48:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005d4c:	9320      	str	r3, [sp, #128]	; 0x80
 8005d4e:	6062      	str	r2, [r4, #4]
 8005d50:	dc50      	bgt.n	8005df4 <_vfprintf_r+0x10cc>
 8005d52:	3408      	adds	r4, #8
 8005d54:	b92d      	cbnz	r5, 8005d62 <_vfprintf_r+0x103a>
 8005d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d58:	b91b      	cbnz	r3, 8005d62 <_vfprintf_r+0x103a>
 8005d5a:	9b02      	ldr	r3, [sp, #8]
 8005d5c:	07de      	lsls	r6, r3, #31
 8005d5e:	f57f aa06 	bpl.w	800516e <_vfprintf_r+0x446>
 8005d62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005d66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d68:	6022      	str	r2, [r4, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	eb0b 0201 	add.w	r2, fp, r1
 8005d70:	2b07      	cmp	r3, #7
 8005d72:	9221      	str	r2, [sp, #132]	; 0x84
 8005d74:	6061      	str	r1, [r4, #4]
 8005d76:	9320      	str	r3, [sp, #128]	; 0x80
 8005d78:	f300 8167 	bgt.w	800604a <_vfprintf_r+0x1322>
 8005d7c:	3408      	adds	r4, #8
 8005d7e:	426d      	negs	r5, r5
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	dd6f      	ble.n	8005e64 <_vfprintf_r+0x113c>
 8005d84:	2d10      	cmp	r5, #16
 8005d86:	4f9e      	ldr	r7, [pc, #632]	; (8006000 <_vfprintf_r+0x12d8>)
 8005d88:	bfc8      	it	gt
 8005d8a:	2610      	movgt	r6, #16
 8005d8c:	dc05      	bgt.n	8005d9a <_vfprintf_r+0x1072>
 8005d8e:	e0b5      	b.n	8005efc <_vfprintf_r+0x11d4>
 8005d90:	3408      	adds	r4, #8
 8005d92:	3d10      	subs	r5, #16
 8005d94:	2d10      	cmp	r5, #16
 8005d96:	f340 80b1 	ble.w	8005efc <_vfprintf_r+0x11d4>
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	3210      	adds	r2, #16
 8005d9e:	2b07      	cmp	r3, #7
 8005da0:	9221      	str	r2, [sp, #132]	; 0x84
 8005da2:	9320      	str	r3, [sp, #128]	; 0x80
 8005da4:	6027      	str	r7, [r4, #0]
 8005da6:	6066      	str	r6, [r4, #4]
 8005da8:	ddf2      	ble.n	8005d90 <_vfprintf_r+0x1068>
 8005daa:	4640      	mov	r0, r8
 8005dac:	4649      	mov	r1, r9
 8005dae:	aa1f      	add	r2, sp, #124	; 0x7c
 8005db0:	f003 f864 	bl	8008e7c <__sprint_r>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f47f a8b7 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005dba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005dbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005dbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8005dc0:	e7e7      	b.n	8005d92 <_vfprintf_r+0x106a>
 8005dc2:	9e02      	ldr	r6, [sp, #8]
 8005dc4:	4a8f      	ldr	r2, [pc, #572]	; (8006004 <_vfprintf_r+0x12dc>)
 8005dc6:	4b90      	ldr	r3, [pc, #576]	; (8006008 <_vfprintf_r+0x12e0>)
 8005dc8:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005dcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8005dce:	2103      	movs	r1, #3
 8005dd0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005dd4:	2d47      	cmp	r5, #71	; 0x47
 8005dd6:	bfd8      	it	le
 8005dd8:	461a      	movle	r2, r3
 8005dda:	9103      	str	r1, [sp, #12]
 8005ddc:	9602      	str	r6, [sp, #8]
 8005dde:	900c      	str	r0, [sp, #48]	; 0x30
 8005de0:	920a      	str	r2, [sp, #40]	; 0x28
 8005de2:	9107      	str	r1, [sp, #28]
 8005de4:	f7ff b8fe 	b.w	8004fe4 <_vfprintf_r+0x2bc>
 8005de8:	3304      	adds	r3, #4
 8005dea:	6816      	ldr	r6, [r2, #0]
 8005dec:	9308      	str	r3, [sp, #32]
 8005dee:	2700      	movs	r7, #0
 8005df0:	f7ff ba5c 	b.w	80052ac <_vfprintf_r+0x584>
 8005df4:	4640      	mov	r0, r8
 8005df6:	4649      	mov	r1, r9
 8005df8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005dfa:	f003 f83f 	bl	8008e7c <__sprint_r>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	f47f a892 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005e04:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005e06:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005e0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e0c:	e7a2      	b.n	8005d54 <_vfprintf_r+0x102c>
 8005e0e:	f041 0120 	orr.w	r1, r1, #32
 8005e12:	9102      	str	r1, [sp, #8]
 8005e14:	785d      	ldrb	r5, [r3, #1]
 8005e16:	1c59      	adds	r1, r3, #1
 8005e18:	f7fe bff7 	b.w	8004e0a <_vfprintf_r+0xe2>
 8005e1c:	9806      	ldr	r0, [sp, #24]
 8005e1e:	9108      	str	r1, [sp, #32]
 8005e20:	4240      	negs	r0, r0
 8005e22:	9006      	str	r0, [sp, #24]
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7ff b9f1 	b.w	800520c <_vfprintf_r+0x4e4>
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e30:	f003 f824 	bl	8008e7c <__sprint_r>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	f47f a877 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005e3a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005e3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e40:	e413      	b.n	800566a <_vfprintf_r+0x942>
 8005e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e44:	ab2c      	add	r3, sp, #176	; 0xb0
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	9307      	str	r3, [sp, #28]
 8005e4a:	f7ff b8c3 	b.w	8004fd4 <_vfprintf_r+0x2ac>
 8005e4e:	4640      	mov	r0, r8
 8005e50:	4649      	mov	r1, r9
 8005e52:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e54:	f003 f812 	bl	8008e7c <__sprint_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	f47f a865 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005e5e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e62:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e64:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e66:	6060      	str	r0, [r4, #4]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	eb02 0b00 	add.w	fp, r2, r0
 8005e6e:	2b07      	cmp	r3, #7
 8005e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e72:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005e76:	9320      	str	r3, [sp, #128]	; 0x80
 8005e78:	6022      	str	r2, [r4, #0]
 8005e7a:	f77f a977 	ble.w	800516c <_vfprintf_r+0x444>
 8005e7e:	e492      	b.n	80057a6 <_vfprintf_r+0xa7e>
 8005e80:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005e84:	f7fe fe46 	bl	8004b14 <strlen>
 8005e88:	9708      	str	r7, [sp, #32]
 8005e8a:	9007      	str	r0, [sp, #28]
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f7ff b9f2 	b.w	8005276 <_vfprintf_r+0x54e>
 8005e92:	aa1a      	add	r2, sp, #104	; 0x68
 8005e94:	ab1d      	add	r3, sp, #116	; 0x74
 8005e96:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8005ea0:	2103      	movs	r1, #3
 8005ea2:	465a      	mov	r2, fp
 8005ea4:	ab19      	add	r3, sp, #100	; 0x64
 8005ea6:	f000 fae3 	bl	8006470 <_dtoa_r>
 8005eaa:	465f      	mov	r7, fp
 8005eac:	900a      	str	r0, [sp, #40]	; 0x28
 8005eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb0:	19de      	adds	r6, r3, r7
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	2b46      	cmp	r3, #70	; 0x46
 8005eb6:	f47f aeaf 	bne.w	8005c18 <_vfprintf_r+0xef0>
 8005eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b30      	cmp	r3, #48	; 0x30
 8005ec0:	f000 8100 	beq.w	80060c4 <_vfprintf_r+0x139c>
 8005ec4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005ec6:	443e      	add	r6, r7
 8005ec8:	e6a6      	b.n	8005c18 <_vfprintf_r+0xef0>
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4649      	mov	r1, r9
 8005ece:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ed0:	f002 ffd4 	bl	8008e7c <__sprint_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f47f a827 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005eda:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005ede:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ee0:	e4eb      	b.n	80058ba <_vfprintf_r+0xb92>
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ee8:	f002 ffc8 	bl	8008e7c <__sprint_r>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	f47f a81b 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005ef2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ef4:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005ef8:	ac2c      	add	r4, sp, #176	; 0xb0
 8005efa:	e5a1      	b.n	8005a40 <_vfprintf_r+0xd18>
 8005efc:	3301      	adds	r3, #1
 8005efe:	442a      	add	r2, r5
 8005f00:	2b07      	cmp	r3, #7
 8005f02:	9221      	str	r2, [sp, #132]	; 0x84
 8005f04:	9320      	str	r3, [sp, #128]	; 0x80
 8005f06:	6027      	str	r7, [r4, #0]
 8005f08:	6065      	str	r5, [r4, #4]
 8005f0a:	dca0      	bgt.n	8005e4e <_vfprintf_r+0x1126>
 8005f0c:	3408      	adds	r4, #8
 8005f0e:	e7a9      	b.n	8005e64 <_vfprintf_r+0x113c>
 8005f10:	2e06      	cmp	r6, #6
 8005f12:	4633      	mov	r3, r6
 8005f14:	bf28      	it	cs
 8005f16:	2306      	movcs	r3, #6
 8005f18:	9307      	str	r3, [sp, #28]
 8005f1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f1e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	4b39      	ldr	r3, [pc, #228]	; (800600c <_vfprintf_r+0x12e4>)
 8005f26:	9708      	str	r7, [sp, #32]
 8005f28:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8005f2c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8005f30:	930a      	str	r3, [sp, #40]	; 0x28
 8005f32:	f7ff b857 	b.w	8004fe4 <_vfprintf_r+0x2bc>
 8005f36:	4640      	mov	r0, r8
 8005f38:	4649      	mov	r1, r9
 8005f3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f3c:	f002 ff9e 	bl	8008e7c <__sprint_r>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f47e aff1 	bne.w	8004f28 <_vfprintf_r+0x200>
 8005f46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f4a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f52:	e58b      	b.n	8005a6c <_vfprintf_r+0xd44>
 8005f54:	1cdf      	adds	r7, r3, #3
 8005f56:	db22      	blt.n	8005f9e <_vfprintf_r+0x1276>
 8005f58:	459b      	cmp	fp, r3
 8005f5a:	db20      	blt.n	8005f9e <_vfprintf_r+0x1276>
 8005f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8005f5e:	2567      	movs	r5, #103	; 0x67
 8005f60:	e67c      	b.n	8005c5c <_vfprintf_r+0xf34>
 8005f62:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8005f66:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8005f6a:	f7ff ba10 	b.w	800538e <_vfprintf_r+0x666>
 8005f6e:	9303      	str	r3, [sp, #12]
 8005f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f72:	9302      	str	r3, [sp, #8]
 8005f74:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8005f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f80:	f7ff b833 	b.w	8004fea <_vfprintf_r+0x2c2>
 8005f84:	4633      	mov	r3, r6
 8005f86:	e65a      	b.n	8005c3e <_vfprintf_r+0xf16>
 8005f88:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8005f8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f8e:	9708      	str	r7, [sp, #32]
 8005f90:	900c      	str	r0, [sp, #48]	; 0x30
 8005f92:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005f96:	9303      	str	r3, [sp, #12]
 8005f98:	9607      	str	r6, [sp, #28]
 8005f9a:	f7ff b823 	b.w	8004fe4 <_vfprintf_r+0x2bc>
 8005f9e:	3d02      	subs	r5, #2
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	9319      	str	r3, [sp, #100]	; 0x64
 8005fa6:	bfba      	itte	lt
 8005fa8:	425b      	neglt	r3, r3
 8005faa:	222d      	movlt	r2, #45	; 0x2d
 8005fac:	222b      	movge	r2, #43	; 0x2b
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 8005fb4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005fb8:	f340 8098 	ble.w	80060ec <_vfprintf_r+0x13c4>
 8005fbc:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4a13      	ldr	r2, [pc, #76]	; (8006010 <_vfprintf_r+0x12e8>)
 8005fc4:	fb82 2103 	smull	r2, r1, r2, r3
 8005fc8:	17da      	asrs	r2, r3, #31
 8005fca:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005fce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005fd2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005fd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fda:	2a09      	cmp	r2, #9
 8005fdc:	4613      	mov	r3, r2
 8005fde:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8005fe2:	dcee      	bgt.n	8005fc2 <_vfprintf_r+0x129a>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	3330      	adds	r3, #48	; 0x30
 8005fe8:	b2d9      	uxtb	r1, r3
 8005fea:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005fee:	4296      	cmp	r6, r2
 8005ff0:	f240 80a9 	bls.w	8006146 <_vfprintf_r+0x141e>
 8005ff4:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	e00d      	b.n	8006018 <_vfprintf_r+0x12f0>
 8005ffc:	08018e24 	.word	0x08018e24
 8006000:	08018dd4 	.word	0x08018dd4
 8006004:	08018df0 	.word	0x08018df0
 8006008:	08018dec 	.word	0x08018dec
 800600c:	08018e1c 	.word	0x08018e1c
 8006010:	66666667 	.word	0x66666667
 8006014:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006018:	f802 1b01 	strb.w	r1, [r2], #1
 800601c:	42b3      	cmp	r3, r6
 800601e:	d1f9      	bne.n	8006014 <_vfprintf_r+0x12ec>
 8006020:	ab1f      	add	r3, sp, #124	; 0x7c
 8006022:	1a1b      	subs	r3, r3, r0
 8006024:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8006028:	4413      	add	r3, r2
 800602a:	aa1b      	add	r2, sp, #108	; 0x6c
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006030:	9313      	str	r3, [sp, #76]	; 0x4c
 8006032:	2a01      	cmp	r2, #1
 8006034:	4413      	add	r3, r2
 8006036:	9307      	str	r3, [sp, #28]
 8006038:	dd69      	ble.n	800610e <_vfprintf_r+0x13e6>
 800603a:	9b07      	ldr	r3, [sp, #28]
 800603c:	2200      	movs	r2, #0
 800603e:	3301      	adds	r3, #1
 8006040:	9307      	str	r3, [sp, #28]
 8006042:	920c      	str	r2, [sp, #48]	; 0x30
 8006044:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006048:	e614      	b.n	8005c74 <_vfprintf_r+0xf4c>
 800604a:	4640      	mov	r0, r8
 800604c:	4649      	mov	r1, r9
 800604e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006050:	f002 ff14 	bl	8008e7c <__sprint_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	f47e af67 	bne.w	8004f28 <_vfprintf_r+0x200>
 800605a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800605c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800605e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006060:	ac2c      	add	r4, sp, #176	; 0xb0
 8006062:	e68c      	b.n	8005d7e <_vfprintf_r+0x1056>
 8006064:	f04f 0b06 	mov.w	fp, #6
 8006068:	e5a4      	b.n	8005bb4 <_vfprintf_r+0xe8c>
 800606a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800606c:	2b00      	cmp	r3, #0
 800606e:	bfd8      	it	le
 8006070:	f1c3 0602 	rsble	r6, r3, #2
 8006074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006076:	bfc8      	it	gt
 8006078:	2601      	movgt	r6, #1
 800607a:	18f3      	adds	r3, r6, r3
 800607c:	9307      	str	r3, [sp, #28]
 800607e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006082:	e5f7      	b.n	8005c74 <_vfprintf_r+0xf4c>
 8006084:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006088:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800608c:	9014      	str	r0, [sp, #80]	; 0x50
 800608e:	9315      	str	r3, [sp, #84]	; 0x54
 8006090:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8006094:	e59c      	b.n	8005bd0 <_vfprintf_r+0xea8>
 8006096:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006098:	e5d1      	b.n	8005c3e <_vfprintf_r+0xf16>
 800609a:	2b00      	cmp	r3, #0
 800609c:	dd2e      	ble.n	80060fc <_vfprintf_r+0x13d4>
 800609e:	f1bb 0f00 	cmp.w	fp, #0
 80060a2:	d107      	bne.n	80060b4 <_vfprintf_r+0x138c>
 80060a4:	9b02      	ldr	r3, [sp, #8]
 80060a6:	07de      	lsls	r6, r3, #31
 80060a8:	d404      	bmi.n	80060b4 <_vfprintf_r+0x138c>
 80060aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060ac:	9207      	str	r2, [sp, #28]
 80060ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80060b2:	e5df      	b.n	8005c74 <_vfprintf_r+0xf4c>
 80060b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060b6:	f10b 0601 	add.w	r6, fp, #1
 80060ba:	4433      	add	r3, r6
 80060bc:	9307      	str	r3, [sp, #28]
 80060be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80060c2:	e5d7      	b.n	8005c74 <_vfprintf_r+0xf4c>
 80060c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80060c8:	2200      	movs	r2, #0
 80060ca:	2300      	movs	r3, #0
 80060cc:	f7fa fd24 	bl	8000b18 <__aeabi_dcmpeq>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f47f aef7 	bne.w	8005ec4 <_vfprintf_r+0x119c>
 80060d6:	f1c7 0701 	rsb	r7, r7, #1
 80060da:	9719      	str	r7, [sp, #100]	; 0x64
 80060dc:	443e      	add	r6, r7
 80060de:	e59b      	b.n	8005c18 <_vfprintf_r+0xef0>
 80060e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060e2:	3301      	adds	r3, #1
 80060e4:	9307      	str	r3, [sp, #28]
 80060e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80060ea:	e5c3      	b.n	8005c74 <_vfprintf_r+0xf4c>
 80060ec:	3330      	adds	r3, #48	; 0x30
 80060ee:	2230      	movs	r2, #48	; 0x30
 80060f0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80060f4:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80060f8:	ab1c      	add	r3, sp, #112	; 0x70
 80060fa:	e796      	b.n	800602a <_vfprintf_r+0x1302>
 80060fc:	f1bb 0f00 	cmp.w	fp, #0
 8006100:	d11b      	bne.n	800613a <_vfprintf_r+0x1412>
 8006102:	9b02      	ldr	r3, [sp, #8]
 8006104:	07d8      	lsls	r0, r3, #31
 8006106:	d418      	bmi.n	800613a <_vfprintf_r+0x1412>
 8006108:	2301      	movs	r3, #1
 800610a:	9307      	str	r3, [sp, #28]
 800610c:	e5b2      	b.n	8005c74 <_vfprintf_r+0xf4c>
 800610e:	9b02      	ldr	r3, [sp, #8]
 8006110:	f013 0301 	ands.w	r3, r3, #1
 8006114:	d191      	bne.n	800603a <_vfprintf_r+0x1312>
 8006116:	930c      	str	r3, [sp, #48]	; 0x30
 8006118:	9b07      	ldr	r3, [sp, #28]
 800611a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800611e:	e5a9      	b.n	8005c74 <_vfprintf_r+0xf4c>
 8006120:	9d08      	ldr	r5, [sp, #32]
 8006122:	682e      	ldr	r6, [r5, #0]
 8006124:	4628      	mov	r0, r5
 8006126:	3004      	adds	r0, #4
 8006128:	2e00      	cmp	r6, #0
 800612a:	785d      	ldrb	r5, [r3, #1]
 800612c:	9008      	str	r0, [sp, #32]
 800612e:	f6be ae6c 	bge.w	8004e0a <_vfprintf_r+0xe2>
 8006132:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006136:	f7fe be68 	b.w	8004e0a <_vfprintf_r+0xe2>
 800613a:	f10b 0302 	add.w	r3, fp, #2
 800613e:	9307      	str	r3, [sp, #28]
 8006140:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006144:	e596      	b.n	8005c74 <_vfprintf_r+0xf4c>
 8006146:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800614a:	e76e      	b.n	800602a <_vfprintf_r+0x1302>
 800614c:	f3af 8000 	nop.w

08006150 <__sbprintf>:
 8006150:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8006154:	460c      	mov	r4, r1
 8006156:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800615a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 800615e:	69e7      	ldr	r7, [r4, #28]
 8006160:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8006162:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8006166:	9119      	str	r1, [sp, #100]	; 0x64
 8006168:	ad1a      	add	r5, sp, #104	; 0x68
 800616a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800616e:	f02e 0e02 	bic.w	lr, lr, #2
 8006172:	f04f 0c00 	mov.w	ip, #0
 8006176:	9707      	str	r7, [sp, #28]
 8006178:	4669      	mov	r1, sp
 800617a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800617c:	9500      	str	r5, [sp, #0]
 800617e:	9504      	str	r5, [sp, #16]
 8006180:	9602      	str	r6, [sp, #8]
 8006182:	9605      	str	r6, [sp, #20]
 8006184:	f8ad e00c 	strh.w	lr, [sp, #12]
 8006188:	f8ad 900e 	strh.w	r9, [sp, #14]
 800618c:	9709      	str	r7, [sp, #36]	; 0x24
 800618e:	f8cd c018 	str.w	ip, [sp, #24]
 8006192:	4606      	mov	r6, r0
 8006194:	f7fe fdc8 	bl	8004d28 <_vfprintf_r>
 8006198:	1e05      	subs	r5, r0, #0
 800619a:	db07      	blt.n	80061ac <__sbprintf+0x5c>
 800619c:	4630      	mov	r0, r6
 800619e:	4669      	mov	r1, sp
 80061a0:	f001 f964 	bl	800746c <_fflush_r>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	bf18      	it	ne
 80061a8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80061ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80061b0:	065b      	lsls	r3, r3, #25
 80061b2:	d503      	bpl.n	80061bc <__sbprintf+0x6c>
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	4628      	mov	r0, r5
 80061be:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80061c2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 80061c6:	bf00      	nop

080061c8 <__swsetup_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4b2f      	ldr	r3, [pc, #188]	; (8006288 <__swsetup_r+0xc0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4605      	mov	r5, r0
 80061d0:	460c      	mov	r4, r1
 80061d2:	b113      	cbz	r3, 80061da <__swsetup_r+0x12>
 80061d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d6:	2a00      	cmp	r2, #0
 80061d8:	d036      	beq.n	8006248 <__swsetup_r+0x80>
 80061da:	89a2      	ldrh	r2, [r4, #12]
 80061dc:	b293      	uxth	r3, r2
 80061de:	0718      	lsls	r0, r3, #28
 80061e0:	d50c      	bpl.n	80061fc <__swsetup_r+0x34>
 80061e2:	6920      	ldr	r0, [r4, #16]
 80061e4:	b1a8      	cbz	r0, 8006212 <__swsetup_r+0x4a>
 80061e6:	f013 0201 	ands.w	r2, r3, #1
 80061ea:	d01e      	beq.n	800622a <__swsetup_r+0x62>
 80061ec:	6963      	ldr	r3, [r4, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	425b      	negs	r3, r3
 80061f2:	61a3      	str	r3, [r4, #24]
 80061f4:	60a2      	str	r2, [r4, #8]
 80061f6:	b1f0      	cbz	r0, 8006236 <__swsetup_r+0x6e>
 80061f8:	2000      	movs	r0, #0
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	06d9      	lsls	r1, r3, #27
 80061fe:	d53b      	bpl.n	8006278 <__swsetup_r+0xb0>
 8006200:	0758      	lsls	r0, r3, #29
 8006202:	d425      	bmi.n	8006250 <__swsetup_r+0x88>
 8006204:	6920      	ldr	r0, [r4, #16]
 8006206:	f042 0308 	orr.w	r3, r2, #8
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	b29b      	uxth	r3, r3
 800620e:	2800      	cmp	r0, #0
 8006210:	d1e9      	bne.n	80061e6 <__swsetup_r+0x1e>
 8006212:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8006216:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800621a:	d0e4      	beq.n	80061e6 <__swsetup_r+0x1e>
 800621c:	4628      	mov	r0, r5
 800621e:	4621      	mov	r1, r4
 8006220:	f001 fcac 	bl	8007b7c <__smakebuf_r>
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	6920      	ldr	r0, [r4, #16]
 8006228:	e7dd      	b.n	80061e6 <__swsetup_r+0x1e>
 800622a:	0799      	lsls	r1, r3, #30
 800622c:	bf58      	it	pl
 800622e:	6962      	ldrpl	r2, [r4, #20]
 8006230:	60a2      	str	r2, [r4, #8]
 8006232:	2800      	cmp	r0, #0
 8006234:	d1e0      	bne.n	80061f8 <__swsetup_r+0x30>
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	061a      	lsls	r2, r3, #24
 800623a:	d5de      	bpl.n	80061fa <__swsetup_r+0x32>
 800623c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f9a3 	bl	8007594 <__sinit>
 800624e:	e7c4      	b.n	80061da <__swsetup_r+0x12>
 8006250:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006252:	b149      	cbz	r1, 8006268 <__swsetup_r+0xa0>
 8006254:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006258:	4299      	cmp	r1, r3
 800625a:	d003      	beq.n	8006264 <__swsetup_r+0x9c>
 800625c:	4628      	mov	r0, r5
 800625e:	f001 f9f1 	bl	8007644 <_free_r>
 8006262:	89a2      	ldrh	r2, [r4, #12]
 8006264:	2300      	movs	r3, #0
 8006266:	6323      	str	r3, [r4, #48]	; 0x30
 8006268:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800626c:	2300      	movs	r3, #0
 800626e:	6920      	ldr	r0, [r4, #16]
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	b292      	uxth	r2, r2
 8006274:	6020      	str	r0, [r4, #0]
 8006276:	e7c6      	b.n	8006206 <__swsetup_r+0x3e>
 8006278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800627c:	2309      	movs	r3, #9
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006284:	81a2      	strh	r2, [r4, #12]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20000470 	.word	0x20000470

0800628c <__register_exitproc>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4c25      	ldr	r4, [pc, #148]	; (8006328 <__register_exitproc+0x9c>)
 8006292:	6825      	ldr	r5, [r4, #0]
 8006294:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8006298:	4606      	mov	r6, r0
 800629a:	4688      	mov	r8, r1
 800629c:	4692      	mov	sl, r2
 800629e:	4699      	mov	r9, r3
 80062a0:	b3cc      	cbz	r4, 8006316 <__register_exitproc+0x8a>
 80062a2:	6860      	ldr	r0, [r4, #4]
 80062a4:	281f      	cmp	r0, #31
 80062a6:	dc18      	bgt.n	80062da <__register_exitproc+0x4e>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	b17e      	cbz	r6, 80062cc <__register_exitproc+0x40>
 80062ac:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80062b0:	2101      	movs	r1, #1
 80062b2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80062b6:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 80062ba:	fa01 f200 	lsl.w	r2, r1, r0
 80062be:	4317      	orrs	r7, r2
 80062c0:	2e02      	cmp	r6, #2
 80062c2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80062c6:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80062ca:	d01e      	beq.n	800630a <__register_exitproc+0x7e>
 80062cc:	3002      	adds	r0, #2
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	4b14      	ldr	r3, [pc, #80]	; (800632c <__register_exitproc+0xa0>)
 80062dc:	b303      	cbz	r3, 8006320 <__register_exitproc+0x94>
 80062de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80062e2:	f001 fcbb 	bl	8007c5c <malloc>
 80062e6:	4604      	mov	r4, r0
 80062e8:	b1d0      	cbz	r0, 8006320 <__register_exitproc+0x94>
 80062ea:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80062ee:	2700      	movs	r7, #0
 80062f0:	e880 0088 	stmia.w	r0, {r3, r7}
 80062f4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80062f8:	4638      	mov	r0, r7
 80062fa:	2301      	movs	r3, #1
 80062fc:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8006300:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8006304:	2e00      	cmp	r6, #0
 8006306:	d0e1      	beq.n	80062cc <__register_exitproc+0x40>
 8006308:	e7d0      	b.n	80062ac <__register_exitproc+0x20>
 800630a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800630e:	430a      	orrs	r2, r1
 8006310:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8006314:	e7da      	b.n	80062cc <__register_exitproc+0x40>
 8006316:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800631a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800631e:	e7c0      	b.n	80062a2 <__register_exitproc+0x16>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006328:	08018dcc 	.word	0x08018dcc
 800632c:	08007c5d 	.word	0x08007c5d

08006330 <register_fini>:
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <register_fini+0xc>)
 8006332:	b113      	cbz	r3, 800633a <register_fini+0xa>
 8006334:	4802      	ldr	r0, [pc, #8]	; (8006340 <register_fini+0x10>)
 8006336:	f7fe ba7d 	b.w	8004834 <atexit>
 800633a:	4770      	bx	lr
 800633c:	00000000 	.word	0x00000000
 8006340:	0800484d 	.word	0x0800484d

08006344 <quorem>:
 8006344:	6902      	ldr	r2, [r0, #16]
 8006346:	690b      	ldr	r3, [r1, #16]
 8006348:	4293      	cmp	r3, r2
 800634a:	f300 808f 	bgt.w	800646c <quorem+0x128>
 800634e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8006356:	f101 0714 	add.w	r7, r1, #20
 800635a:	f100 0b14 	add.w	fp, r0, #20
 800635e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8006362:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8006366:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800636a:	b083      	sub	sp, #12
 800636c:	3201      	adds	r2, #1
 800636e:	fbb3 f9f2 	udiv	r9, r3, r2
 8006372:	eb0b 0304 	add.w	r3, fp, r4
 8006376:	9400      	str	r4, [sp, #0]
 8006378:	eb07 0a04 	add.w	sl, r7, r4
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	f1b9 0f00 	cmp.w	r9, #0
 8006382:	d03b      	beq.n	80063fc <quorem+0xb8>
 8006384:	2600      	movs	r6, #0
 8006386:	4632      	mov	r2, r6
 8006388:	46bc      	mov	ip, r7
 800638a:	46de      	mov	lr, fp
 800638c:	4634      	mov	r4, r6
 800638e:	f85c 6b04 	ldr.w	r6, [ip], #4
 8006392:	f8de 5000 	ldr.w	r5, [lr]
 8006396:	b2b3      	uxth	r3, r6
 8006398:	0c36      	lsrs	r6, r6, #16
 800639a:	fb03 4409 	mla	r4, r3, r9, r4
 800639e:	fb06 f609 	mul.w	r6, r6, r9
 80063a2:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 80063a6:	b2a3      	uxth	r3, r4
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	b2b4      	uxth	r4, r6
 80063ac:	fa13 f385 	uxtah	r3, r3, r5
 80063b0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 80063b4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80063be:	45e2      	cmp	sl, ip
 80063c0:	ea4f 4224 	mov.w	r2, r4, asr #16
 80063c4:	f84e 3b04 	str.w	r3, [lr], #4
 80063c8:	ea4f 4416 	mov.w	r4, r6, lsr #16
 80063cc:	d2df      	bcs.n	800638e <quorem+0x4a>
 80063ce:	9b00      	ldr	r3, [sp, #0]
 80063d0:	f85b 3003 	ldr.w	r3, [fp, r3]
 80063d4:	b993      	cbnz	r3, 80063fc <quorem+0xb8>
 80063d6:	9c01      	ldr	r4, [sp, #4]
 80063d8:	1f23      	subs	r3, r4, #4
 80063da:	459b      	cmp	fp, r3
 80063dc:	d20c      	bcs.n	80063f8 <quorem+0xb4>
 80063de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80063e2:	b94b      	cbnz	r3, 80063f8 <quorem+0xb4>
 80063e4:	f1a4 0308 	sub.w	r3, r4, #8
 80063e8:	e002      	b.n	80063f0 <quorem+0xac>
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	3b04      	subs	r3, #4
 80063ee:	b91a      	cbnz	r2, 80063f8 <quorem+0xb4>
 80063f0:	459b      	cmp	fp, r3
 80063f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80063f6:	d3f8      	bcc.n	80063ea <quorem+0xa6>
 80063f8:	f8c0 8010 	str.w	r8, [r0, #16]
 80063fc:	4604      	mov	r4, r0
 80063fe:	f002 f983 	bl	8008708 <__mcmp>
 8006402:	2800      	cmp	r0, #0
 8006404:	db2e      	blt.n	8006464 <quorem+0x120>
 8006406:	f109 0901 	add.w	r9, r9, #1
 800640a:	465d      	mov	r5, fp
 800640c:	2300      	movs	r3, #0
 800640e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006412:	6828      	ldr	r0, [r5, #0]
 8006414:	b28a      	uxth	r2, r1
 8006416:	1a9a      	subs	r2, r3, r2
 8006418:	0c09      	lsrs	r1, r1, #16
 800641a:	fa12 f280 	uxtah	r2, r2, r0
 800641e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8006422:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8006426:	b291      	uxth	r1, r2
 8006428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800642c:	45ba      	cmp	sl, r7
 800642e:	f845 1b04 	str.w	r1, [r5], #4
 8006432:	ea4f 4323 	mov.w	r3, r3, asr #16
 8006436:	d2ea      	bcs.n	800640e <quorem+0xca>
 8006438:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800643c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8006440:	b982      	cbnz	r2, 8006464 <quorem+0x120>
 8006442:	1f1a      	subs	r2, r3, #4
 8006444:	4593      	cmp	fp, r2
 8006446:	d20b      	bcs.n	8006460 <quorem+0x11c>
 8006448:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800644c:	b942      	cbnz	r2, 8006460 <quorem+0x11c>
 800644e:	3b08      	subs	r3, #8
 8006450:	e002      	b.n	8006458 <quorem+0x114>
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	3b04      	subs	r3, #4
 8006456:	b91a      	cbnz	r2, 8006460 <quorem+0x11c>
 8006458:	459b      	cmp	fp, r3
 800645a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800645e:	d3f8      	bcc.n	8006452 <quorem+0x10e>
 8006460:	f8c4 8010 	str.w	r8, [r4, #16]
 8006464:	4648      	mov	r0, r9
 8006466:	b003      	add	sp, #12
 8006468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646c:	2000      	movs	r0, #0
 800646e:	4770      	bx	lr

08006470 <_dtoa_r>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	b099      	sub	sp, #100	; 0x64
 8006476:	4604      	mov	r4, r0
 8006478:	9103      	str	r1, [sp, #12]
 800647a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800647c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	4692      	mov	sl, r2
 8006482:	ed8d 0b00 	vstr	d0, [sp]
 8006486:	b141      	cbz	r1, 800649a <_dtoa_r+0x2a>
 8006488:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800648a:	604a      	str	r2, [r1, #4]
 800648c:	2301      	movs	r3, #1
 800648e:	4093      	lsls	r3, r2
 8006490:	608b      	str	r3, [r1, #8]
 8006492:	f001 ff55 	bl	8008340 <_Bfree>
 8006496:	2300      	movs	r3, #0
 8006498:	6423      	str	r3, [r4, #64]	; 0x40
 800649a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	4699      	mov	r9, r3
 80064a2:	db36      	blt.n	8006512 <_dtoa_r+0xa2>
 80064a4:	2300      	movs	r3, #0
 80064a6:	602b      	str	r3, [r5, #0]
 80064a8:	4ba5      	ldr	r3, [pc, #660]	; (8006740 <_dtoa_r+0x2d0>)
 80064aa:	461a      	mov	r2, r3
 80064ac:	ea09 0303 	and.w	r3, r9, r3
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d017      	beq.n	80064e4 <_dtoa_r+0x74>
 80064b4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2300      	movs	r3, #0
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f7fa fb2a 	bl	8000b18 <__aeabi_dcmpeq>
 80064c4:	4680      	mov	r8, r0
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d02b      	beq.n	8006522 <_dtoa_r+0xb2>
 80064ca:	9a04      	ldr	r2, [sp, #16]
 80064cc:	2301      	movs	r3, #1
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80cc 	beq.w	8006670 <_dtoa_r+0x200>
 80064d8:	489a      	ldr	r0, [pc, #616]	; (8006744 <_dtoa_r+0x2d4>)
 80064da:	6018      	str	r0, [r3, #0]
 80064dc:	3801      	subs	r0, #1
 80064de:	b019      	add	sp, #100	; 0x64
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	9a04      	ldr	r2, [sp, #16]
 80064e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	9b00      	ldr	r3, [sp, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80a7 	beq.w	8006642 <_dtoa_r+0x1d2>
 80064f4:	4894      	ldr	r0, [pc, #592]	; (8006748 <_dtoa_r+0x2d8>)
 80064f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0f0      	beq.n	80064de <_dtoa_r+0x6e>
 80064fc:	78c3      	ldrb	r3, [r0, #3]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80b8 	beq.w	8006674 <_dtoa_r+0x204>
 8006504:	f100 0308 	add.w	r3, r0, #8
 8006508:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	b019      	add	sp, #100	; 0x64
 800650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006512:	9a01      	ldr	r2, [sp, #4]
 8006514:	2301      	movs	r3, #1
 8006516:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006520:	e7c2      	b.n	80064a8 <_dtoa_r+0x38>
 8006522:	4620      	mov	r0, r4
 8006524:	ec47 6b10 	vmov	d0, r6, r7
 8006528:	a917      	add	r1, sp, #92	; 0x5c
 800652a:	aa16      	add	r2, sp, #88	; 0x58
 800652c:	f002 f97a 	bl	8008824 <__d2b>
 8006530:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8006534:	4683      	mov	fp, r0
 8006536:	f040 808d 	bne.w	8006654 <_dtoa_r+0x1e4>
 800653a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800653e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8006540:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8006544:	4445      	add	r5, r8
 8006546:	429d      	cmp	r5, r3
 8006548:	f2c0 829e 	blt.w	8006a88 <_dtoa_r+0x618>
 800654c:	4a7f      	ldr	r2, [pc, #508]	; (800674c <_dtoa_r+0x2dc>)
 800654e:	1b52      	subs	r2, r2, r5
 8006550:	fa09 f902 	lsl.w	r9, r9, r2
 8006554:	9a00      	ldr	r2, [sp, #0]
 8006556:	f205 4312 	addw	r3, r5, #1042	; 0x412
 800655a:	fa22 f003 	lsr.w	r0, r2, r3
 800655e:	ea49 0000 	orr.w	r0, r9, r0
 8006562:	f7f9 fffb 	bl	800055c <__aeabi_ui2d>
 8006566:	2301      	movs	r3, #1
 8006568:	3d01      	subs	r5, #1
 800656a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800656e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006570:	2200      	movs	r2, #0
 8006572:	4b77      	ldr	r3, [pc, #476]	; (8006750 <_dtoa_r+0x2e0>)
 8006574:	f7f9 feb4 	bl	80002e0 <__aeabi_dsub>
 8006578:	a36b      	add	r3, pc, #428	; (adr r3, 8006728 <_dtoa_r+0x2b8>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7fa f863 	bl	8000648 <__aeabi_dmul>
 8006582:	a36b      	add	r3, pc, #428	; (adr r3, 8006730 <_dtoa_r+0x2c0>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 feac 	bl	80002e4 <__adddf3>
 800658c:	4606      	mov	r6, r0
 800658e:	4628      	mov	r0, r5
 8006590:	460f      	mov	r7, r1
 8006592:	f7f9 fff3 	bl	800057c <__aeabi_i2d>
 8006596:	a368      	add	r3, pc, #416	; (adr r3, 8006738 <_dtoa_r+0x2c8>)
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f7fa f854 	bl	8000648 <__aeabi_dmul>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4630      	mov	r0, r6
 80065a6:	4639      	mov	r1, r7
 80065a8:	f7f9 fe9c 	bl	80002e4 <__adddf3>
 80065ac:	4606      	mov	r6, r0
 80065ae:	460f      	mov	r7, r1
 80065b0:	f7fa fb7e 	bl	8000cb0 <__aeabi_d2iz>
 80065b4:	4639      	mov	r1, r7
 80065b6:	9005      	str	r0, [sp, #20]
 80065b8:	2200      	movs	r2, #0
 80065ba:	4630      	mov	r0, r6
 80065bc:	2300      	movs	r3, #0
 80065be:	f7fa fab5 	bl	8000b2c <__aeabi_dcmplt>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f040 81ab 	bne.w	800691e <_dtoa_r+0x4ae>
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	2b16      	cmp	r3, #22
 80065cc:	f200 81a4 	bhi.w	8006918 <_dtoa_r+0x4a8>
 80065d0:	9a05      	ldr	r2, [sp, #20]
 80065d2:	4b60      	ldr	r3, [pc, #384]	; (8006754 <_dtoa_r+0x2e4>)
 80065d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065e0:	f7fa fac2 	bl	8000b68 <__aeabi_dcmpgt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f000 8255 	beq.w	8006a94 <_dtoa_r+0x624>
 80065ea:	9b05      	ldr	r3, [sp, #20]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	9305      	str	r3, [sp, #20]
 80065f0:	2300      	movs	r3, #0
 80065f2:	930d      	str	r3, [sp, #52]	; 0x34
 80065f4:	ebc5 0508 	rsb	r5, r5, r8
 80065f8:	1e6b      	subs	r3, r5, #1
 80065fa:	9306      	str	r3, [sp, #24]
 80065fc:	f100 81a6 	bmi.w	800694c <_dtoa_r+0x4dc>
 8006600:	2300      	movs	r3, #0
 8006602:	9307      	str	r3, [sp, #28]
 8006604:	9b05      	ldr	r3, [sp, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f2c0 8197 	blt.w	800693a <_dtoa_r+0x4ca>
 800660c:	9a06      	ldr	r2, [sp, #24]
 800660e:	930c      	str	r3, [sp, #48]	; 0x30
 8006610:	4611      	mov	r1, r2
 8006612:	4419      	add	r1, r3
 8006614:	2300      	movs	r3, #0
 8006616:	9106      	str	r1, [sp, #24]
 8006618:	930a      	str	r3, [sp, #40]	; 0x28
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	2b09      	cmp	r3, #9
 800661e:	d82b      	bhi.n	8006678 <_dtoa_r+0x208>
 8006620:	2b05      	cmp	r3, #5
 8006622:	f340 8673 	ble.w	800730c <_dtoa_r+0xe9c>
 8006626:	3b04      	subs	r3, #4
 8006628:	9303      	str	r3, [sp, #12]
 800662a:	2700      	movs	r7, #0
 800662c:	9b03      	ldr	r3, [sp, #12]
 800662e:	3b02      	subs	r3, #2
 8006630:	2b03      	cmp	r3, #3
 8006632:	f200 8651 	bhi.w	80072d8 <_dtoa_r+0xe68>
 8006636:	e8df f013 	tbh	[pc, r3, lsl #1]
 800663a:	03d1      	.short	0x03d1
 800663c:	02b603c4 	.word	0x02b603c4
 8006640:	0666      	.short	0x0666
 8006642:	4b41      	ldr	r3, [pc, #260]	; (8006748 <_dtoa_r+0x2d8>)
 8006644:	4a44      	ldr	r2, [pc, #272]	; (8006758 <_dtoa_r+0x2e8>)
 8006646:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800664a:	2800      	cmp	r0, #0
 800664c:	bf14      	ite	ne
 800664e:	4618      	movne	r0, r3
 8006650:	4610      	moveq	r0, r2
 8006652:	e750      	b.n	80064f6 <_dtoa_r+0x86>
 8006654:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006658:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800665c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8006660:	4630      	mov	r0, r6
 8006662:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006666:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800666a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800666e:	e77f      	b.n	8006570 <_dtoa_r+0x100>
 8006670:	483a      	ldr	r0, [pc, #232]	; (800675c <_dtoa_r+0x2ec>)
 8006672:	e734      	b.n	80064de <_dtoa_r+0x6e>
 8006674:	1cc3      	adds	r3, r0, #3
 8006676:	e747      	b.n	8006508 <_dtoa_r+0x98>
 8006678:	2100      	movs	r1, #0
 800667a:	6461      	str	r1, [r4, #68]	; 0x44
 800667c:	4620      	mov	r0, r4
 800667e:	468a      	mov	sl, r1
 8006680:	9103      	str	r1, [sp, #12]
 8006682:	f001 fe37 	bl	80082f4 <_Balloc>
 8006686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800668a:	9308      	str	r3, [sp, #32]
 800668c:	930e      	str	r3, [sp, #56]	; 0x38
 800668e:	2301      	movs	r3, #1
 8006690:	9009      	str	r0, [sp, #36]	; 0x24
 8006692:	6420      	str	r0, [r4, #64]	; 0x40
 8006694:	930b      	str	r3, [sp, #44]	; 0x2c
 8006696:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006698:	2b00      	cmp	r3, #0
 800669a:	f2c0 80d3 	blt.w	8006844 <_dtoa_r+0x3d4>
 800669e:	9a05      	ldr	r2, [sp, #20]
 80066a0:	2a0e      	cmp	r2, #14
 80066a2:	f300 80cf 	bgt.w	8006844 <_dtoa_r+0x3d4>
 80066a6:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <_dtoa_r+0x2e4>)
 80066a8:	f1ba 0f00 	cmp.w	sl, #0
 80066ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066b4:	f2c0 8395 	blt.w	8006de2 <_dtoa_r+0x972>
 80066b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066bc:	4642      	mov	r2, r8
 80066be:	464b      	mov	r3, r9
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	f7fa f8ea 	bl	800089c <__aeabi_ddiv>
 80066c8:	f7fa faf2 	bl	8000cb0 <__aeabi_d2iz>
 80066cc:	4682      	mov	sl, r0
 80066ce:	f7f9 ff55 	bl	800057c <__aeabi_i2d>
 80066d2:	4642      	mov	r2, r8
 80066d4:	464b      	mov	r3, r9
 80066d6:	f7f9 ffb7 	bl	8000648 <__aeabi_dmul>
 80066da:	460b      	mov	r3, r1
 80066dc:	4602      	mov	r2, r0
 80066de:	4639      	mov	r1, r7
 80066e0:	4630      	mov	r0, r6
 80066e2:	f7f9 fdfd 	bl	80002e0 <__aeabi_dsub>
 80066e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066e8:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 80066ec:	702b      	strb	r3, [r5, #0]
 80066ee:	9b08      	ldr	r3, [sp, #32]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	4606      	mov	r6, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	f105 0501 	add.w	r5, r5, #1
 80066fa:	d063      	beq.n	80067c4 <_dtoa_r+0x354>
 80066fc:	2200      	movs	r2, #0
 80066fe:	4b18      	ldr	r3, [pc, #96]	; (8006760 <_dtoa_r+0x2f0>)
 8006700:	f7f9 ffa2 	bl	8000648 <__aeabi_dmul>
 8006704:	2200      	movs	r2, #0
 8006706:	2300      	movs	r3, #0
 8006708:	4606      	mov	r6, r0
 800670a:	460f      	mov	r7, r1
 800670c:	f7fa fa04 	bl	8000b18 <__aeabi_dcmpeq>
 8006710:	2800      	cmp	r0, #0
 8006712:	f040 8084 	bne.w	800681e <_dtoa_r+0x3ae>
 8006716:	f8cd b000 	str.w	fp, [sp]
 800671a:	9403      	str	r4, [sp, #12]
 800671c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006720:	9c08      	ldr	r4, [sp, #32]
 8006722:	e02a      	b.n	800677a <_dtoa_r+0x30a>
 8006724:	f3af 8000 	nop.w
 8006728:	636f4361 	.word	0x636f4361
 800672c:	3fd287a7 	.word	0x3fd287a7
 8006730:	8b60c8b3 	.word	0x8b60c8b3
 8006734:	3fc68a28 	.word	0x3fc68a28
 8006738:	509f79fb 	.word	0x509f79fb
 800673c:	3fd34413 	.word	0x3fd34413
 8006740:	7ff00000 	.word	0x7ff00000
 8006744:	08018e25 	.word	0x08018e25
 8006748:	08018e44 	.word	0x08018e44
 800674c:	fffffc0e 	.word	0xfffffc0e
 8006750:	3ff80000 	.word	0x3ff80000
 8006754:	08018e58 	.word	0x08018e58
 8006758:	08018e38 	.word	0x08018e38
 800675c:	08018e24 	.word	0x08018e24
 8006760:	40240000 	.word	0x40240000
 8006764:	f7f9 ff70 	bl	8000648 <__aeabi_dmul>
 8006768:	2200      	movs	r2, #0
 800676a:	2300      	movs	r3, #0
 800676c:	4606      	mov	r6, r0
 800676e:	460f      	mov	r7, r1
 8006770:	f7fa f9d2 	bl	8000b18 <__aeabi_dcmpeq>
 8006774:	2800      	cmp	r0, #0
 8006776:	f040 83e4 	bne.w	8006f42 <_dtoa_r+0xad2>
 800677a:	4642      	mov	r2, r8
 800677c:	464b      	mov	r3, r9
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	f7fa f88b 	bl	800089c <__aeabi_ddiv>
 8006786:	f7fa fa93 	bl	8000cb0 <__aeabi_d2iz>
 800678a:	4682      	mov	sl, r0
 800678c:	f7f9 fef6 	bl	800057c <__aeabi_i2d>
 8006790:	4642      	mov	r2, r8
 8006792:	464b      	mov	r3, r9
 8006794:	f7f9 ff58 	bl	8000648 <__aeabi_dmul>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f7f9 fd9e 	bl	80002e0 <__aeabi_dsub>
 80067a4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 80067a8:	f805 eb01 	strb.w	lr, [r5], #1
 80067ac:	ebcb 0e05 	rsb	lr, fp, r5
 80067b0:	4574      	cmp	r4, lr
 80067b2:	4606      	mov	r6, r0
 80067b4:	460f      	mov	r7, r1
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	4bb7      	ldr	r3, [pc, #732]	; (8006a98 <_dtoa_r+0x628>)
 80067bc:	d1d2      	bne.n	8006764 <_dtoa_r+0x2f4>
 80067be:	f8dd b000 	ldr.w	fp, [sp]
 80067c2:	9c03      	ldr	r4, [sp, #12]
 80067c4:	4632      	mov	r2, r6
 80067c6:	463b      	mov	r3, r7
 80067c8:	4630      	mov	r0, r6
 80067ca:	4639      	mov	r1, r7
 80067cc:	f7f9 fd8a 	bl	80002e4 <__adddf3>
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	4640      	mov	r0, r8
 80067d6:	4649      	mov	r1, r9
 80067d8:	4632      	mov	r2, r6
 80067da:	463b      	mov	r3, r7
 80067dc:	f7fa f9a6 	bl	8000b2c <__aeabi_dcmplt>
 80067e0:	b948      	cbnz	r0, 80067f6 <_dtoa_r+0x386>
 80067e2:	4640      	mov	r0, r8
 80067e4:	4649      	mov	r1, r9
 80067e6:	4632      	mov	r2, r6
 80067e8:	463b      	mov	r3, r7
 80067ea:	f7fa f995 	bl	8000b18 <__aeabi_dcmpeq>
 80067ee:	b1b0      	cbz	r0, 800681e <_dtoa_r+0x3ae>
 80067f0:	f01a 0f01 	tst.w	sl, #1
 80067f4:	d013      	beq.n	800681e <_dtoa_r+0x3ae>
 80067f6:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80067fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067fc:	1e6b      	subs	r3, r5, #1
 80067fe:	e004      	b.n	800680a <_dtoa_r+0x39a>
 8006800:	428b      	cmp	r3, r1
 8006802:	f000 8448 	beq.w	8007096 <_dtoa_r+0xc26>
 8006806:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 800680a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800680e:	f103 0501 	add.w	r5, r3, #1
 8006812:	461a      	mov	r2, r3
 8006814:	d0f4      	beq.n	8006800 <_dtoa_r+0x390>
 8006816:	f108 0301 	add.w	r3, r8, #1
 800681a:	b2db      	uxtb	r3, r3
 800681c:	7013      	strb	r3, [r2, #0]
 800681e:	4620      	mov	r0, r4
 8006820:	4659      	mov	r1, fp
 8006822:	f001 fd8d 	bl	8008340 <_Bfree>
 8006826:	2200      	movs	r2, #0
 8006828:	9b05      	ldr	r3, [sp, #20]
 800682a:	702a      	strb	r2, [r5, #0]
 800682c:	9a04      	ldr	r2, [sp, #16]
 800682e:	3301      	adds	r3, #1
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 834b 	beq.w	8006ed0 <_dtoa_r+0xa60>
 800683a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800683c:	601d      	str	r5, [r3, #0]
 800683e:	b019      	add	sp, #100	; 0x64
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006846:	2a00      	cmp	r2, #0
 8006848:	f000 8085 	beq.w	8006956 <_dtoa_r+0x4e6>
 800684c:	9a03      	ldr	r2, [sp, #12]
 800684e:	2a01      	cmp	r2, #1
 8006850:	f340 830a 	ble.w	8006e68 <_dtoa_r+0x9f8>
 8006854:	9b08      	ldr	r3, [sp, #32]
 8006856:	1e5f      	subs	r7, r3, #1
 8006858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685a:	42bb      	cmp	r3, r7
 800685c:	f2c0 83a6 	blt.w	8006fac <_dtoa_r+0xb3c>
 8006860:	1bdf      	subs	r7, r3, r7
 8006862:	9b08      	ldr	r3, [sp, #32]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f2c0 84a4 	blt.w	80071b2 <_dtoa_r+0xd42>
 800686a:	9d07      	ldr	r5, [sp, #28]
 800686c:	9b08      	ldr	r3, [sp, #32]
 800686e:	9a07      	ldr	r2, [sp, #28]
 8006870:	441a      	add	r2, r3
 8006872:	9207      	str	r2, [sp, #28]
 8006874:	9a06      	ldr	r2, [sp, #24]
 8006876:	4620      	mov	r0, r4
 8006878:	441a      	add	r2, r3
 800687a:	2101      	movs	r1, #1
 800687c:	9206      	str	r2, [sp, #24]
 800687e:	f001 fdf9 	bl	8008474 <__i2b>
 8006882:	4606      	mov	r6, r0
 8006884:	b165      	cbz	r5, 80068a0 <_dtoa_r+0x430>
 8006886:	9906      	ldr	r1, [sp, #24]
 8006888:	2900      	cmp	r1, #0
 800688a:	460b      	mov	r3, r1
 800688c:	dd08      	ble.n	80068a0 <_dtoa_r+0x430>
 800688e:	42a9      	cmp	r1, r5
 8006890:	9a07      	ldr	r2, [sp, #28]
 8006892:	bfa8      	it	ge
 8006894:	462b      	movge	r3, r5
 8006896:	1ad2      	subs	r2, r2, r3
 8006898:	1aed      	subs	r5, r5, r3
 800689a:	1acb      	subs	r3, r1, r3
 800689c:	9207      	str	r2, [sp, #28]
 800689e:	9306      	str	r3, [sp, #24]
 80068a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dd1a      	ble.n	80068dc <_dtoa_r+0x46c>
 80068a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8378 	beq.w	8006f9e <_dtoa_r+0xb2e>
 80068ae:	2f00      	cmp	r7, #0
 80068b0:	dd10      	ble.n	80068d4 <_dtoa_r+0x464>
 80068b2:	4631      	mov	r1, r6
 80068b4:	463a      	mov	r2, r7
 80068b6:	4620      	mov	r0, r4
 80068b8:	f001 fe80 	bl	80085bc <__pow5mult>
 80068bc:	4606      	mov	r6, r0
 80068be:	465a      	mov	r2, fp
 80068c0:	4631      	mov	r1, r6
 80068c2:	4620      	mov	r0, r4
 80068c4:	f001 fde0 	bl	8008488 <__multiply>
 80068c8:	4659      	mov	r1, fp
 80068ca:	4680      	mov	r8, r0
 80068cc:	4620      	mov	r0, r4
 80068ce:	f001 fd37 	bl	8008340 <_Bfree>
 80068d2:	46c3      	mov	fp, r8
 80068d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d6:	1bda      	subs	r2, r3, r7
 80068d8:	f040 82a5 	bne.w	8006e26 <_dtoa_r+0x9b6>
 80068dc:	4620      	mov	r0, r4
 80068de:	2101      	movs	r1, #1
 80068e0:	f001 fdc8 	bl	8008474 <__i2b>
 80068e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	4680      	mov	r8, r0
 80068ea:	dd38      	ble.n	800695e <_dtoa_r+0x4ee>
 80068ec:	4601      	mov	r1, r0
 80068ee:	461a      	mov	r2, r3
 80068f0:	4620      	mov	r0, r4
 80068f2:	f001 fe63 	bl	80085bc <__pow5mult>
 80068f6:	9b03      	ldr	r3, [sp, #12]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	4680      	mov	r8, r0
 80068fc:	f340 8299 	ble.w	8006e32 <_dtoa_r+0x9c2>
 8006900:	f04f 0900 	mov.w	r9, #0
 8006904:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006908:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800690c:	6918      	ldr	r0, [r3, #16]
 800690e:	f001 fd63 	bl	80083d8 <__hi0bits>
 8006912:	f1c0 0020 	rsb	r0, r0, #32
 8006916:	e02c      	b.n	8006972 <_dtoa_r+0x502>
 8006918:	2301      	movs	r3, #1
 800691a:	930d      	str	r3, [sp, #52]	; 0x34
 800691c:	e66a      	b.n	80065f4 <_dtoa_r+0x184>
 800691e:	9805      	ldr	r0, [sp, #20]
 8006920:	f7f9 fe2c 	bl	800057c <__aeabi_i2d>
 8006924:	4632      	mov	r2, r6
 8006926:	463b      	mov	r3, r7
 8006928:	f7fa f8f6 	bl	8000b18 <__aeabi_dcmpeq>
 800692c:	2800      	cmp	r0, #0
 800692e:	f47f ae4b 	bne.w	80065c8 <_dtoa_r+0x158>
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	3b01      	subs	r3, #1
 8006936:	9305      	str	r3, [sp, #20]
 8006938:	e646      	b.n	80065c8 <_dtoa_r+0x158>
 800693a:	9a07      	ldr	r2, [sp, #28]
 800693c:	9b05      	ldr	r3, [sp, #20]
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	425b      	negs	r3, r3
 8006942:	930a      	str	r3, [sp, #40]	; 0x28
 8006944:	2300      	movs	r3, #0
 8006946:	9207      	str	r2, [sp, #28]
 8006948:	930c      	str	r3, [sp, #48]	; 0x30
 800694a:	e666      	b.n	800661a <_dtoa_r+0x1aa>
 800694c:	425b      	negs	r3, r3
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	2300      	movs	r3, #0
 8006952:	9306      	str	r3, [sp, #24]
 8006954:	e656      	b.n	8006604 <_dtoa_r+0x194>
 8006956:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006958:	9d07      	ldr	r5, [sp, #28]
 800695a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800695c:	e792      	b.n	8006884 <_dtoa_r+0x414>
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	2b01      	cmp	r3, #1
 8006962:	f340 82b8 	ble.w	8006ed6 <_dtoa_r+0xa66>
 8006966:	f04f 0900 	mov.w	r9, #0
 800696a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1c9      	bne.n	8006904 <_dtoa_r+0x494>
 8006970:	2001      	movs	r0, #1
 8006972:	9b06      	ldr	r3, [sp, #24]
 8006974:	4418      	add	r0, r3
 8006976:	f010 001f 	ands.w	r0, r0, #31
 800697a:	f000 8083 	beq.w	8006a84 <_dtoa_r+0x614>
 800697e:	f1c0 0320 	rsb	r3, r0, #32
 8006982:	2b04      	cmp	r3, #4
 8006984:	f340 84b9 	ble.w	80072fa <_dtoa_r+0xe8a>
 8006988:	f1c0 001c 	rsb	r0, r0, #28
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	4403      	add	r3, r0
 8006990:	9307      	str	r3, [sp, #28]
 8006992:	9b06      	ldr	r3, [sp, #24]
 8006994:	4403      	add	r3, r0
 8006996:	4405      	add	r5, r0
 8006998:	9306      	str	r3, [sp, #24]
 800699a:	9b07      	ldr	r3, [sp, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	dd05      	ble.n	80069ac <_dtoa_r+0x53c>
 80069a0:	4659      	mov	r1, fp
 80069a2:	461a      	mov	r2, r3
 80069a4:	4620      	mov	r0, r4
 80069a6:	f001 fe59 	bl	800865c <__lshift>
 80069aa:	4683      	mov	fp, r0
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dd05      	ble.n	80069be <_dtoa_r+0x54e>
 80069b2:	4641      	mov	r1, r8
 80069b4:	461a      	mov	r2, r3
 80069b6:	4620      	mov	r0, r4
 80069b8:	f001 fe50 	bl	800865c <__lshift>
 80069bc:	4680      	mov	r8, r0
 80069be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f040 826a 	bne.w	8006e9a <_dtoa_r+0xa2a>
 80069c6:	9b08      	ldr	r3, [sp, #32]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f340 8297 	ble.w	8006efc <_dtoa_r+0xa8c>
 80069ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d171      	bne.n	8006ab8 <_dtoa_r+0x648>
 80069d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80069d8:	9f08      	ldr	r7, [sp, #32]
 80069da:	464d      	mov	r5, r9
 80069dc:	e002      	b.n	80069e4 <_dtoa_r+0x574>
 80069de:	f001 fcb9 	bl	8008354 <__multadd>
 80069e2:	4683      	mov	fp, r0
 80069e4:	4641      	mov	r1, r8
 80069e6:	4658      	mov	r0, fp
 80069e8:	f7ff fcac 	bl	8006344 <quorem>
 80069ec:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80069f0:	f805 cb01 	strb.w	ip, [r5], #1
 80069f4:	ebc9 0305 	rsb	r3, r9, r5
 80069f8:	42bb      	cmp	r3, r7
 80069fa:	4620      	mov	r0, r4
 80069fc:	4659      	mov	r1, fp
 80069fe:	f04f 020a 	mov.w	r2, #10
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	dbea      	blt.n	80069de <_dtoa_r+0x56e>
 8006a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0a:	9a08      	ldr	r2, [sp, #32]
 8006a0c:	2a01      	cmp	r2, #1
 8006a0e:	bfac      	ite	ge
 8006a10:	189b      	addge	r3, r3, r2
 8006a12:	3301      	addlt	r3, #1
 8006a14:	461d      	mov	r5, r3
 8006a16:	f04f 0a00 	mov.w	sl, #0
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f8cd c000 	str.w	ip, [sp]
 8006a24:	f001 fe1a 	bl	800865c <__lshift>
 8006a28:	4641      	mov	r1, r8
 8006a2a:	4683      	mov	fp, r0
 8006a2c:	f001 fe6c 	bl	8008708 <__mcmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f8dd c000 	ldr.w	ip, [sp]
 8006a36:	f340 82ef 	ble.w	8007018 <_dtoa_r+0xba8>
 8006a3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a40:	1e6b      	subs	r3, r5, #1
 8006a42:	e004      	b.n	8006a4e <_dtoa_r+0x5de>
 8006a44:	428b      	cmp	r3, r1
 8006a46:	f000 8275 	beq.w	8006f34 <_dtoa_r+0xac4>
 8006a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a4e:	2a39      	cmp	r2, #57	; 0x39
 8006a50:	f103 0501 	add.w	r5, r3, #1
 8006a54:	d0f6      	beq.n	8006a44 <_dtoa_r+0x5d4>
 8006a56:	3201      	adds	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	4641      	mov	r1, r8
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f001 fc6f 	bl	8008340 <_Bfree>
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	f43f aedb 	beq.w	800681e <_dtoa_r+0x3ae>
 8006a68:	f1ba 0f00 	cmp.w	sl, #0
 8006a6c:	d005      	beq.n	8006a7a <_dtoa_r+0x60a>
 8006a6e:	45b2      	cmp	sl, r6
 8006a70:	d003      	beq.n	8006a7a <_dtoa_r+0x60a>
 8006a72:	4651      	mov	r1, sl
 8006a74:	4620      	mov	r0, r4
 8006a76:	f001 fc63 	bl	8008340 <_Bfree>
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f001 fc5f 	bl	8008340 <_Bfree>
 8006a82:	e6cc      	b.n	800681e <_dtoa_r+0x3ae>
 8006a84:	201c      	movs	r0, #28
 8006a86:	e781      	b.n	800698c <_dtoa_r+0x51c>
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <_dtoa_r+0x62c>)
 8006a8a:	9a00      	ldr	r2, [sp, #0]
 8006a8c:	1b5b      	subs	r3, r3, r5
 8006a8e:	fa02 f003 	lsl.w	r0, r2, r3
 8006a92:	e566      	b.n	8006562 <_dtoa_r+0xf2>
 8006a94:	900d      	str	r0, [sp, #52]	; 0x34
 8006a96:	e5ad      	b.n	80065f4 <_dtoa_r+0x184>
 8006a98:	40240000 	.word	0x40240000
 8006a9c:	fffffbee 	.word	0xfffffbee
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	220a      	movs	r2, #10
 8006aa8:	f001 fc54 	bl	8008354 <__multadd>
 8006aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	f340 840b 	ble.w	80072cc <_dtoa_r+0xe5c>
 8006ab6:	9308      	str	r3, [sp, #32]
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	dd05      	ble.n	8006ac8 <_dtoa_r+0x658>
 8006abc:	4631      	mov	r1, r6
 8006abe:	462a      	mov	r2, r5
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f001 fdcb 	bl	800865c <__lshift>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	f1b9 0f00 	cmp.w	r9, #0
 8006acc:	f040 82ed 	bne.w	80070aa <_dtoa_r+0xc3a>
 8006ad0:	46b1      	mov	r9, r6
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	18d3      	adds	r3, r2, r3
 8006ada:	9308      	str	r3, [sp, #32]
 8006adc:	9b00      	ldr	r3, [sp, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae4:	4617      	mov	r7, r2
 8006ae6:	4641      	mov	r1, r8
 8006ae8:	4658      	mov	r0, fp
 8006aea:	f7ff fc2b 	bl	8006344 <quorem>
 8006aee:	4631      	mov	r1, r6
 8006af0:	4605      	mov	r5, r0
 8006af2:	4658      	mov	r0, fp
 8006af4:	f001 fe08 	bl	8008708 <__mcmp>
 8006af8:	464a      	mov	r2, r9
 8006afa:	4682      	mov	sl, r0
 8006afc:	4641      	mov	r1, r8
 8006afe:	4620      	mov	r0, r4
 8006b00:	f001 fe26 	bl	8008750 <__mdiff>
 8006b04:	68c2      	ldr	r2, [r0, #12]
 8006b06:	4603      	mov	r3, r0
 8006b08:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8006b0c:	2a00      	cmp	r2, #0
 8006b0e:	f040 81ba 	bne.w	8006e86 <_dtoa_r+0xa16>
 8006b12:	4619      	mov	r1, r3
 8006b14:	4658      	mov	r0, fp
 8006b16:	f8cd c01c 	str.w	ip, [sp, #28]
 8006b1a:	9306      	str	r3, [sp, #24]
 8006b1c:	f001 fdf4 	bl	8008708 <__mcmp>
 8006b20:	9b06      	ldr	r3, [sp, #24]
 8006b22:	9000      	str	r0, [sp, #0]
 8006b24:	4619      	mov	r1, r3
 8006b26:	4620      	mov	r0, r4
 8006b28:	f001 fc0a 	bl	8008340 <_Bfree>
 8006b2c:	9a00      	ldr	r2, [sp, #0]
 8006b2e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006b32:	b92a      	cbnz	r2, 8006b40 <_dtoa_r+0x6d0>
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	b91b      	cbnz	r3, 8006b40 <_dtoa_r+0x6d0>
 8006b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 83aa 	beq.w	8007294 <_dtoa_r+0xe24>
 8006b40:	f1ba 0f00 	cmp.w	sl, #0
 8006b44:	f2c0 824a 	blt.w	8006fdc <_dtoa_r+0xb6c>
 8006b48:	d105      	bne.n	8006b56 <_dtoa_r+0x6e6>
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	b91b      	cbnz	r3, 8006b56 <_dtoa_r+0x6e6>
 8006b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8243 	beq.w	8006fdc <_dtoa_r+0xb6c>
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	f300 82bb 	bgt.w	80070d2 <_dtoa_r+0xc62>
 8006b5c:	9b08      	ldr	r3, [sp, #32]
 8006b5e:	f887 c000 	strb.w	ip, [r7]
 8006b62:	f107 0a01 	add.w	sl, r7, #1
 8006b66:	429f      	cmp	r7, r3
 8006b68:	4655      	mov	r5, sl
 8006b6a:	f000 82be 	beq.w	80070ea <_dtoa_r+0xc7a>
 8006b6e:	4659      	mov	r1, fp
 8006b70:	220a      	movs	r2, #10
 8006b72:	2300      	movs	r3, #0
 8006b74:	4620      	mov	r0, r4
 8006b76:	f001 fbed 	bl	8008354 <__multadd>
 8006b7a:	454e      	cmp	r6, r9
 8006b7c:	4683      	mov	fp, r0
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4620      	mov	r0, r4
 8006b82:	f04f 020a 	mov.w	r2, #10
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	f000 8176 	beq.w	8006e7a <_dtoa_r+0xa0a>
 8006b8e:	f001 fbe1 	bl	8008354 <__multadd>
 8006b92:	4649      	mov	r1, r9
 8006b94:	4606      	mov	r6, r0
 8006b96:	220a      	movs	r2, #10
 8006b98:	4620      	mov	r0, r4
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f001 fbda 	bl	8008354 <__multadd>
 8006ba0:	4657      	mov	r7, sl
 8006ba2:	4681      	mov	r9, r0
 8006ba4:	e79f      	b.n	8006ae6 <_dtoa_r+0x676>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006baa:	f1ba 0f00 	cmp.w	sl, #0
 8006bae:	f340 820c 	ble.w	8006fca <_dtoa_r+0xb5a>
 8006bb2:	4656      	mov	r6, sl
 8006bb4:	4655      	mov	r5, sl
 8006bb6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006bba:	f8cd a020 	str.w	sl, [sp, #32]
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	2e17      	cmp	r6, #23
 8006bc2:	6461      	str	r1, [r4, #68]	; 0x44
 8006bc4:	d90a      	bls.n	8006bdc <_dtoa_r+0x76c>
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	2304      	movs	r3, #4
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	f103 0014 	add.w	r0, r3, #20
 8006bd0:	4286      	cmp	r6, r0
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	f102 0201 	add.w	r2, r2, #1
 8006bd8:	d2f7      	bcs.n	8006bca <_dtoa_r+0x75a>
 8006bda:	6461      	str	r1, [r4, #68]	; 0x44
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f001 fb89 	bl	80082f4 <_Balloc>
 8006be2:	2d0e      	cmp	r5, #14
 8006be4:	9009      	str	r0, [sp, #36]	; 0x24
 8006be6:	6420      	str	r0, [r4, #64]	; 0x40
 8006be8:	f63f ad55 	bhi.w	8006696 <_dtoa_r+0x226>
 8006bec:	2f00      	cmp	r7, #0
 8006bee:	f43f ad52 	beq.w	8006696 <_dtoa_r+0x226>
 8006bf2:	ed9d 7b00 	vldr	d7, [sp]
 8006bf6:	9905      	ldr	r1, [sp, #20]
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006bfe:	f340 8223 	ble.w	8007048 <_dtoa_r+0xbd8>
 8006c02:	4bb7      	ldr	r3, [pc, #732]	; (8006ee0 <_dtoa_r+0xa70>)
 8006c04:	f001 020f 	and.w	r2, r1, #15
 8006c08:	110d      	asrs	r5, r1, #4
 8006c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c0e:	06e9      	lsls	r1, r5, #27
 8006c10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006c14:	f140 81d2 	bpl.w	8006fbc <_dtoa_r+0xb4c>
 8006c18:	4bb2      	ldr	r3, [pc, #712]	; (8006ee4 <_dtoa_r+0xa74>)
 8006c1a:	ec51 0b17 	vmov	r0, r1, d7
 8006c1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c22:	f7f9 fe3b 	bl	800089c <__aeabi_ddiv>
 8006c26:	e9cd 0100 	strd	r0, r1, [sp]
 8006c2a:	f005 050f 	and.w	r5, r5, #15
 8006c2e:	f04f 0803 	mov.w	r8, #3
 8006c32:	b18d      	cbz	r5, 8006c58 <_dtoa_r+0x7e8>
 8006c34:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8006ee4 <_dtoa_r+0xa74>
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	07ea      	lsls	r2, r5, #31
 8006c3e:	d505      	bpl.n	8006c4c <_dtoa_r+0x7dc>
 8006c40:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006c44:	f7f9 fd00 	bl	8000648 <__aeabi_dmul>
 8006c48:	f108 0801 	add.w	r8, r8, #1
 8006c4c:	106d      	asrs	r5, r5, #1
 8006c4e:	f109 0908 	add.w	r9, r9, #8
 8006c52:	d1f3      	bne.n	8006c3c <_dtoa_r+0x7cc>
 8006c54:	4606      	mov	r6, r0
 8006c56:	460f      	mov	r7, r1
 8006c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	463b      	mov	r3, r7
 8006c60:	f7f9 fe1c 	bl	800089c <__aeabi_ddiv>
 8006c64:	e9cd 0100 	strd	r0, r1, [sp]
 8006c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c6a:	b143      	cbz	r3, 8006c7e <_dtoa_r+0x80e>
 8006c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c70:	2200      	movs	r2, #0
 8006c72:	4b9d      	ldr	r3, [pc, #628]	; (8006ee8 <_dtoa_r+0xa78>)
 8006c74:	f7f9 ff5a 	bl	8000b2c <__aeabi_dcmplt>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	f040 82ae 	bne.w	80071da <_dtoa_r+0xd6a>
 8006c7e:	4640      	mov	r0, r8
 8006c80:	f7f9 fc7c 	bl	800057c <__aeabi_i2d>
 8006c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c88:	f7f9 fcde 	bl	8000648 <__aeabi_dmul>
 8006c8c:	4b97      	ldr	r3, [pc, #604]	; (8006eec <_dtoa_r+0xa7c>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f7f9 fb28 	bl	80002e4 <__adddf3>
 8006c94:	9b08      	ldr	r3, [sp, #32]
 8006c96:	4606      	mov	r6, r0
 8006c98:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8162 	beq.w	8006f66 <_dtoa_r+0xaf6>
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ca8:	9314      	str	r3, [sp, #80]	; 0x50
 8006caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8223 	beq.w	80070f8 <_dtoa_r+0xc88>
 8006cb2:	4b8b      	ldr	r3, [pc, #556]	; (8006ee0 <_dtoa_r+0xa70>)
 8006cb4:	498e      	ldr	r1, [pc, #568]	; (8006ef0 <_dtoa_r+0xa80>)
 8006cb6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006cba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f7f9 fdec 	bl	800089c <__aeabi_ddiv>
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	f7f9 fb0a 	bl	80002e0 <__aeabi_dsub>
 8006ccc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006cd0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8006cd4:	4639      	mov	r1, r7
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f7f9 ffea 	bl	8000cb0 <__aeabi_d2iz>
 8006cdc:	4605      	mov	r5, r0
 8006cde:	f7f9 fc4d 	bl	800057c <__aeabi_i2d>
 8006ce2:	3530      	adds	r5, #48	; 0x30
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 faf8 	bl	80002e0 <__aeabi_dsub>
 8006cf0:	fa5f f885 	uxtb.w	r8, r5
 8006cf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006cf6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006cfa:	f885 8000 	strb.w	r8, [r5]
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	3501      	adds	r5, #1
 8006d04:	f7f9 ff12 	bl	8000b2c <__aeabi_dcmplt>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f040 82a7 	bne.w	800725c <_dtoa_r+0xdec>
 8006d0e:	4632      	mov	r2, r6
 8006d10:	463b      	mov	r3, r7
 8006d12:	2000      	movs	r0, #0
 8006d14:	4974      	ldr	r1, [pc, #464]	; (8006ee8 <_dtoa_r+0xa78>)
 8006d16:	f7f9 fae3 	bl	80002e0 <__aeabi_dsub>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006d22:	f7f9 ff21 	bl	8000b68 <__aeabi_dcmpgt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f040 82ad 	bne.w	8007286 <_dtoa_r+0xe16>
 8006d2c:	f1b9 0f01 	cmp.w	r9, #1
 8006d30:	f340 8184 	ble.w	800703c <_dtoa_r+0xbcc>
 8006d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d36:	f8cd b000 	str.w	fp, [sp]
 8006d3a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8006d3e:	4499      	add	r9, r3
 8006d40:	46a0      	mov	r8, r4
 8006d42:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8006d46:	e00d      	b.n	8006d64 <_dtoa_r+0x8f4>
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4967      	ldr	r1, [pc, #412]	; (8006ee8 <_dtoa_r+0xa78>)
 8006d4c:	f7f9 fac8 	bl	80002e0 <__aeabi_dsub>
 8006d50:	4652      	mov	r2, sl
 8006d52:	465b      	mov	r3, fp
 8006d54:	f7f9 feea 	bl	8000b2c <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f040 828f 	bne.w	800727c <_dtoa_r+0xe0c>
 8006d5e:	454d      	cmp	r5, r9
 8006d60:	f000 8167 	beq.w	8007032 <_dtoa_r+0xbc2>
 8006d64:	4650      	mov	r0, sl
 8006d66:	4659      	mov	r1, fp
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4b62      	ldr	r3, [pc, #392]	; (8006ef4 <_dtoa_r+0xa84>)
 8006d6c:	f7f9 fc6c 	bl	8000648 <__aeabi_dmul>
 8006d70:	2200      	movs	r2, #0
 8006d72:	4b60      	ldr	r3, [pc, #384]	; (8006ef4 <_dtoa_r+0xa84>)
 8006d74:	4682      	mov	sl, r0
 8006d76:	468b      	mov	fp, r1
 8006d78:	4630      	mov	r0, r6
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	f7f9 fc64 	bl	8000648 <__aeabi_dmul>
 8006d80:	460f      	mov	r7, r1
 8006d82:	4606      	mov	r6, r0
 8006d84:	f7f9 ff94 	bl	8000cb0 <__aeabi_d2iz>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	f7f9 fbf7 	bl	800057c <__aeabi_i2d>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4630      	mov	r0, r6
 8006d94:	4639      	mov	r1, r7
 8006d96:	f7f9 faa3 	bl	80002e0 <__aeabi_dsub>
 8006d9a:	3430      	adds	r4, #48	; 0x30
 8006d9c:	b2e4      	uxtb	r4, r4
 8006d9e:	4652      	mov	r2, sl
 8006da0:	465b      	mov	r3, fp
 8006da2:	f805 4b01 	strb.w	r4, [r5], #1
 8006da6:	4606      	mov	r6, r0
 8006da8:	460f      	mov	r7, r1
 8006daa:	f7f9 febf 	bl	8000b2c <__aeabi_dcmplt>
 8006dae:	4632      	mov	r2, r6
 8006db0:	463b      	mov	r3, r7
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0c8      	beq.n	8006d48 <_dtoa_r+0x8d8>
 8006db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006db8:	f8dd b000 	ldr.w	fp, [sp]
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	4644      	mov	r4, r8
 8006dc0:	e52d      	b.n	800681e <_dtoa_r+0x3ae>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dc6:	9b05      	ldr	r3, [sp, #20]
 8006dc8:	4453      	add	r3, sl
 8006dca:	930e      	str	r3, [sp, #56]	; 0x38
 8006dcc:	3301      	adds	r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	9308      	str	r3, [sp, #32]
 8006dd2:	f340 8101 	ble.w	8006fd8 <_dtoa_r+0xb68>
 8006dd6:	9d08      	ldr	r5, [sp, #32]
 8006dd8:	462e      	mov	r6, r5
 8006dda:	e6f0      	b.n	8006bbe <_dtoa_r+0x74e>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8006de0:	e6e3      	b.n	8006baa <_dtoa_r+0x73a>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f73f ac67 	bgt.w	80066b8 <_dtoa_r+0x248>
 8006dea:	f040 80d4 	bne.w	8006f96 <_dtoa_r+0xb26>
 8006dee:	4640      	mov	r0, r8
 8006df0:	2200      	movs	r2, #0
 8006df2:	4b41      	ldr	r3, [pc, #260]	; (8006ef8 <_dtoa_r+0xa88>)
 8006df4:	4649      	mov	r1, r9
 8006df6:	f7f9 fc27 	bl	8000648 <__aeabi_dmul>
 8006dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dfe:	f7f9 fea9 	bl	8000b54 <__aeabi_dcmpge>
 8006e02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e06:	4646      	mov	r6, r8
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f000 808b 	beq.w	8006f24 <_dtoa_r+0xab4>
 8006e0e:	ea6f 030a 	mvn.w	r3, sl
 8006e12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006e14:	9305      	str	r3, [sp, #20]
 8006e16:	4641      	mov	r1, r8
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f001 fa91 	bl	8008340 <_Bfree>
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	f47f ae2b 	bne.w	8006a7a <_dtoa_r+0x60a>
 8006e24:	e4fb      	b.n	800681e <_dtoa_r+0x3ae>
 8006e26:	4659      	mov	r1, fp
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f001 fbc7 	bl	80085bc <__pow5mult>
 8006e2e:	4683      	mov	fp, r0
 8006e30:	e554      	b.n	80068dc <_dtoa_r+0x46c>
 8006e32:	9b00      	ldr	r3, [sp, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f47f ad63 	bne.w	8006900 <_dtoa_r+0x490>
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f ad90 	bne.w	8006966 <_dtoa_r+0x4f6>
 8006e46:	9b01      	ldr	r3, [sp, #4]
 8006e48:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8006e4c:	0d3f      	lsrs	r7, r7, #20
 8006e4e:	053f      	lsls	r7, r7, #20
 8006e50:	2f00      	cmp	r7, #0
 8006e52:	f000 821c 	beq.w	800728e <_dtoa_r+0xe1e>
 8006e56:	9b07      	ldr	r3, [sp, #28]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	9307      	str	r3, [sp, #28]
 8006e5c:	9b06      	ldr	r3, [sp, #24]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	9306      	str	r3, [sp, #24]
 8006e62:	f04f 0901 	mov.w	r9, #1
 8006e66:	e580      	b.n	800696a <_dtoa_r+0x4fa>
 8006e68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	f000 81a7 	beq.w	80071be <_dtoa_r+0xd4e>
 8006e70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e74:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006e76:	9d07      	ldr	r5, [sp, #28]
 8006e78:	e4f9      	b.n	800686e <_dtoa_r+0x3fe>
 8006e7a:	f001 fa6b 	bl	8008354 <__multadd>
 8006e7e:	4657      	mov	r7, sl
 8006e80:	4606      	mov	r6, r0
 8006e82:	4681      	mov	r9, r0
 8006e84:	e62f      	b.n	8006ae6 <_dtoa_r+0x676>
 8006e86:	4601      	mov	r1, r0
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f8cd c000 	str.w	ip, [sp]
 8006e8e:	f001 fa57 	bl	8008340 <_Bfree>
 8006e92:	2201      	movs	r2, #1
 8006e94:	f8dd c000 	ldr.w	ip, [sp]
 8006e98:	e652      	b.n	8006b40 <_dtoa_r+0x6d0>
 8006e9a:	4658      	mov	r0, fp
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	f001 fc33 	bl	8008708 <__mcmp>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	f6bf ad8f 	bge.w	80069c6 <_dtoa_r+0x556>
 8006ea8:	9f05      	ldr	r7, [sp, #20]
 8006eaa:	4659      	mov	r1, fp
 8006eac:	2300      	movs	r3, #0
 8006eae:	4620      	mov	r0, r4
 8006eb0:	220a      	movs	r2, #10
 8006eb2:	3f01      	subs	r7, #1
 8006eb4:	9705      	str	r7, [sp, #20]
 8006eb6:	f001 fa4d 	bl	8008354 <__multadd>
 8006eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ebc:	4683      	mov	fp, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f47f adee 	bne.w	8006aa0 <_dtoa_r+0x630>
 8006ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f340 81f5 	ble.w	80072b6 <_dtoa_r+0xe46>
 8006ecc:	9308      	str	r3, [sp, #32]
 8006ece:	e581      	b.n	80069d4 <_dtoa_r+0x564>
 8006ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ed2:	f7ff bb04 	b.w	80064de <_dtoa_r+0x6e>
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f47f ad44 	bne.w	8006966 <_dtoa_r+0x4f6>
 8006ede:	e7ac      	b.n	8006e3a <_dtoa_r+0x9ca>
 8006ee0:	08018e58 	.word	0x08018e58
 8006ee4:	08018f30 	.word	0x08018f30
 8006ee8:	3ff00000 	.word	0x3ff00000
 8006eec:	401c0000 	.word	0x401c0000
 8006ef0:	3fe00000 	.word	0x3fe00000
 8006ef4:	40240000 	.word	0x40240000
 8006ef8:	40140000 	.word	0x40140000
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	f77f ad65 	ble.w	80069ce <_dtoa_r+0x55e>
 8006f04:	9b08      	ldr	r3, [sp, #32]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d181      	bne.n	8006e0e <_dtoa_r+0x99e>
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f001 fa20 	bl	8008354 <__multadd>
 8006f14:	4680      	mov	r8, r0
 8006f16:	4641      	mov	r1, r8
 8006f18:	4658      	mov	r0, fp
 8006f1a:	f001 fbf5 	bl	8008708 <__mcmp>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f77f af75 	ble.w	8006e0e <_dtoa_r+0x99e>
 8006f24:	9a05      	ldr	r2, [sp, #20]
 8006f26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f28:	2331      	movs	r3, #49	; 0x31
 8006f2a:	3201      	adds	r2, #1
 8006f2c:	9205      	str	r2, [sp, #20]
 8006f2e:	700b      	strb	r3, [r1, #0]
 8006f30:	1c4d      	adds	r5, r1, #1
 8006f32:	e770      	b.n	8006e16 <_dtoa_r+0x9a6>
 8006f34:	9a05      	ldr	r2, [sp, #20]
 8006f36:	3201      	adds	r2, #1
 8006f38:	9205      	str	r2, [sp, #20]
 8006f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f3c:	2331      	movs	r3, #49	; 0x31
 8006f3e:	7013      	strb	r3, [r2, #0]
 8006f40:	e58b      	b.n	8006a5a <_dtoa_r+0x5ea>
 8006f42:	f8dd b000 	ldr.w	fp, [sp]
 8006f46:	9c03      	ldr	r4, [sp, #12]
 8006f48:	e469      	b.n	800681e <_dtoa_r+0x3ae>
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	f7f9 fb16 	bl	800057c <__aeabi_i2d>
 8006f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f54:	f7f9 fb78 	bl	8000648 <__aeabi_dmul>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4bc2      	ldr	r3, [pc, #776]	; (8007264 <_dtoa_r+0xdf4>)
 8006f5c:	f7f9 f9c2 	bl	80002e4 <__adddf3>
 8006f60:	4606      	mov	r6, r0
 8006f62:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006f66:	2200      	movs	r2, #0
 8006f68:	4bbf      	ldr	r3, [pc, #764]	; (8007268 <_dtoa_r+0xdf8>)
 8006f6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f6e:	f7f9 f9b7 	bl	80002e0 <__aeabi_dsub>
 8006f72:	4632      	mov	r2, r6
 8006f74:	463b      	mov	r3, r7
 8006f76:	4680      	mov	r8, r0
 8006f78:	4689      	mov	r9, r1
 8006f7a:	f7f9 fdf5 	bl	8000b68 <__aeabi_dcmpgt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f040 80b6 	bne.w	80070f0 <_dtoa_r+0xc80>
 8006f84:	4632      	mov	r2, r6
 8006f86:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	f7f9 fdcd 	bl	8000b2c <__aeabi_dcmplt>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d052      	beq.n	800703c <_dtoa_r+0xbcc>
 8006f96:	f04f 0800 	mov.w	r8, #0
 8006f9a:	4646      	mov	r6, r8
 8006f9c:	e737      	b.n	8006e0e <_dtoa_r+0x99e>
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f001 fb0a 	bl	80085bc <__pow5mult>
 8006fa8:	4683      	mov	fp, r0
 8006faa:	e497      	b.n	80068dc <_dtoa_r+0x46c>
 8006fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fb0:	970a      	str	r7, [sp, #40]	; 0x28
 8006fb2:	1afb      	subs	r3, r7, r3
 8006fb4:	441a      	add	r2, r3
 8006fb6:	920c      	str	r2, [sp, #48]	; 0x30
 8006fb8:	2700      	movs	r7, #0
 8006fba:	e452      	b.n	8006862 <_dtoa_r+0x3f2>
 8006fbc:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8006fc0:	f04f 0802 	mov.w	r8, #2
 8006fc4:	ed8d 7b00 	vstr	d7, [sp]
 8006fc8:	e633      	b.n	8006c32 <_dtoa_r+0x7c2>
 8006fca:	2501      	movs	r5, #1
 8006fcc:	950e      	str	r5, [sp, #56]	; 0x38
 8006fce:	9508      	str	r5, [sp, #32]
 8006fd0:	46aa      	mov	sl, r5
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	6461      	str	r1, [r4, #68]	; 0x44
 8006fd6:	e601      	b.n	8006bdc <_dtoa_r+0x76c>
 8006fd8:	461d      	mov	r5, r3
 8006fda:	e7fa      	b.n	8006fd2 <_dtoa_r+0xb62>
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	dd15      	ble.n	800700c <_dtoa_r+0xb9c>
 8006fe0:	4659      	mov	r1, fp
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f8cd c000 	str.w	ip, [sp]
 8006fea:	f001 fb37 	bl	800865c <__lshift>
 8006fee:	4641      	mov	r1, r8
 8006ff0:	4683      	mov	fp, r0
 8006ff2:	f001 fb89 	bl	8008708 <__mcmp>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f8dd c000 	ldr.w	ip, [sp]
 8006ffc:	f340 8154 	ble.w	80072a8 <_dtoa_r+0xe38>
 8007000:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8007004:	f000 8111 	beq.w	800722a <_dtoa_r+0xdba>
 8007008:	f10c 0c01 	add.w	ip, ip, #1
 800700c:	46b2      	mov	sl, r6
 800700e:	f887 c000 	strb.w	ip, [r7]
 8007012:	1c7d      	adds	r5, r7, #1
 8007014:	464e      	mov	r6, r9
 8007016:	e520      	b.n	8006a5a <_dtoa_r+0x5ea>
 8007018:	d104      	bne.n	8007024 <_dtoa_r+0xbb4>
 800701a:	f01c 0f01 	tst.w	ip, #1
 800701e:	d001      	beq.n	8007024 <_dtoa_r+0xbb4>
 8007020:	e50b      	b.n	8006a3a <_dtoa_r+0x5ca>
 8007022:	4615      	mov	r5, r2
 8007024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007028:	2b30      	cmp	r3, #48	; 0x30
 800702a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800702e:	d0f8      	beq.n	8007022 <_dtoa_r+0xbb2>
 8007030:	e513      	b.n	8006a5a <_dtoa_r+0x5ea>
 8007032:	f8dd b000 	ldr.w	fp, [sp]
 8007036:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800703a:	4644      	mov	r4, r8
 800703c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007040:	e9cd 2300 	strd	r2, r3, [sp]
 8007044:	f7ff bb27 	b.w	8006696 <_dtoa_r+0x226>
 8007048:	9b05      	ldr	r3, [sp, #20]
 800704a:	425d      	negs	r5, r3
 800704c:	2d00      	cmp	r5, #0
 800704e:	f000 80bd 	beq.w	80071cc <_dtoa_r+0xd5c>
 8007052:	4b86      	ldr	r3, [pc, #536]	; (800726c <_dtoa_r+0xdfc>)
 8007054:	f005 020f 	and.w	r2, r5, #15
 8007058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007064:	f7f9 faf0 	bl	8000648 <__aeabi_dmul>
 8007068:	112d      	asrs	r5, r5, #4
 800706a:	e9cd 0100 	strd	r0, r1, [sp]
 800706e:	f000 8127 	beq.w	80072c0 <_dtoa_r+0xe50>
 8007072:	4e7f      	ldr	r6, [pc, #508]	; (8007270 <_dtoa_r+0xe00>)
 8007074:	f04f 0802 	mov.w	r8, #2
 8007078:	07eb      	lsls	r3, r5, #31
 800707a:	d505      	bpl.n	8007088 <_dtoa_r+0xc18>
 800707c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007080:	f7f9 fae2 	bl	8000648 <__aeabi_dmul>
 8007084:	f108 0801 	add.w	r8, r8, #1
 8007088:	106d      	asrs	r5, r5, #1
 800708a:	f106 0608 	add.w	r6, r6, #8
 800708e:	d1f3      	bne.n	8007078 <_dtoa_r+0xc08>
 8007090:	e9cd 0100 	strd	r0, r1, [sp]
 8007094:	e5e8      	b.n	8006c68 <_dtoa_r+0x7f8>
 8007096:	9a05      	ldr	r2, [sp, #20]
 8007098:	3201      	adds	r2, #1
 800709a:	9205      	str	r2, [sp, #20]
 800709c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800709e:	2330      	movs	r3, #48	; 0x30
 80070a0:	7013      	strb	r3, [r2, #0]
 80070a2:	2331      	movs	r3, #49	; 0x31
 80070a4:	7013      	strb	r3, [r2, #0]
 80070a6:	f7ff bbba 	b.w	800681e <_dtoa_r+0x3ae>
 80070aa:	6871      	ldr	r1, [r6, #4]
 80070ac:	4620      	mov	r0, r4
 80070ae:	f001 f921 	bl	80082f4 <_Balloc>
 80070b2:	6933      	ldr	r3, [r6, #16]
 80070b4:	1c9a      	adds	r2, r3, #2
 80070b6:	4605      	mov	r5, r0
 80070b8:	0092      	lsls	r2, r2, #2
 80070ba:	f106 010c 	add.w	r1, r6, #12
 80070be:	300c      	adds	r0, #12
 80070c0:	f7f9 fd5c 	bl	8000b7c <memcpy>
 80070c4:	4620      	mov	r0, r4
 80070c6:	4629      	mov	r1, r5
 80070c8:	2201      	movs	r2, #1
 80070ca:	f001 fac7 	bl	800865c <__lshift>
 80070ce:	4681      	mov	r9, r0
 80070d0:	e4ff      	b.n	8006ad2 <_dtoa_r+0x662>
 80070d2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80070d6:	f000 80a8 	beq.w	800722a <_dtoa_r+0xdba>
 80070da:	f10c 0c01 	add.w	ip, ip, #1
 80070de:	46b2      	mov	sl, r6
 80070e0:	f887 c000 	strb.w	ip, [r7]
 80070e4:	1c7d      	adds	r5, r7, #1
 80070e6:	464e      	mov	r6, r9
 80070e8:	e4b7      	b.n	8006a5a <_dtoa_r+0x5ea>
 80070ea:	46b2      	mov	sl, r6
 80070ec:	464e      	mov	r6, r9
 80070ee:	e494      	b.n	8006a1a <_dtoa_r+0x5aa>
 80070f0:	f04f 0800 	mov.w	r8, #0
 80070f4:	4646      	mov	r6, r8
 80070f6:	e715      	b.n	8006f24 <_dtoa_r+0xab4>
 80070f8:	495c      	ldr	r1, [pc, #368]	; (800726c <_dtoa_r+0xdfc>)
 80070fa:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80070fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007102:	4632      	mov	r2, r6
 8007104:	9315      	str	r3, [sp, #84]	; 0x54
 8007106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800710a:	463b      	mov	r3, r7
 800710c:	f7f9 fa9c 	bl	8000648 <__aeabi_dmul>
 8007110:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007114:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007118:	4639      	mov	r1, r7
 800711a:	4630      	mov	r0, r6
 800711c:	f7f9 fdc8 	bl	8000cb0 <__aeabi_d2iz>
 8007120:	4605      	mov	r5, r0
 8007122:	f7f9 fa2b 	bl	800057c <__aeabi_i2d>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4630      	mov	r0, r6
 800712c:	4639      	mov	r1, r7
 800712e:	f7f9 f8d7 	bl	80002e0 <__aeabi_dsub>
 8007132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007134:	3530      	adds	r5, #48	; 0x30
 8007136:	f1b9 0f01 	cmp.w	r9, #1
 800713a:	7015      	strb	r5, [r2, #0]
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	f102 0501 	add.w	r5, r2, #1
 8007144:	d023      	beq.n	800718e <_dtoa_r+0xd1e>
 8007146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007148:	f8cd b000 	str.w	fp, [sp]
 800714c:	444b      	add	r3, r9
 800714e:	4698      	mov	r8, r3
 8007150:	46a9      	mov	r9, r5
 8007152:	46ab      	mov	fp, r5
 8007154:	2200      	movs	r2, #0
 8007156:	4b47      	ldr	r3, [pc, #284]	; (8007274 <_dtoa_r+0xe04>)
 8007158:	f7f9 fa76 	bl	8000648 <__aeabi_dmul>
 800715c:	460f      	mov	r7, r1
 800715e:	4606      	mov	r6, r0
 8007160:	f7f9 fda6 	bl	8000cb0 <__aeabi_d2iz>
 8007164:	4605      	mov	r5, r0
 8007166:	f7f9 fa09 	bl	800057c <__aeabi_i2d>
 800716a:	3530      	adds	r5, #48	; 0x30
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 f8b4 	bl	80002e0 <__aeabi_dsub>
 8007178:	f809 5b01 	strb.w	r5, [r9], #1
 800717c:	45c1      	cmp	r9, r8
 800717e:	d1e9      	bne.n	8007154 <_dtoa_r+0xce4>
 8007180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007182:	465d      	mov	r5, fp
 8007184:	f8dd b000 	ldr.w	fp, [sp]
 8007188:	4606      	mov	r6, r0
 800718a:	460f      	mov	r7, r1
 800718c:	441d      	add	r5, r3
 800718e:	2200      	movs	r2, #0
 8007190:	4b39      	ldr	r3, [pc, #228]	; (8007278 <_dtoa_r+0xe08>)
 8007192:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007196:	f7f9 f8a5 	bl	80002e4 <__adddf3>
 800719a:	4632      	mov	r2, r6
 800719c:	463b      	mov	r3, r7
 800719e:	f7f9 fcc5 	bl	8000b2c <__aeabi_dcmplt>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d047      	beq.n	8007236 <_dtoa_r+0xdc6>
 80071a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071a8:	9305      	str	r3, [sp, #20]
 80071aa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80071ae:	f7ff bb24 	b.w	80067fa <_dtoa_r+0x38a>
 80071b2:	9b07      	ldr	r3, [sp, #28]
 80071b4:	9a08      	ldr	r2, [sp, #32]
 80071b6:	1a9d      	subs	r5, r3, r2
 80071b8:	2300      	movs	r3, #0
 80071ba:	f7ff bb58 	b.w	800686e <_dtoa_r+0x3fe>
 80071be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80071c2:	9d07      	ldr	r5, [sp, #28]
 80071c4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071c8:	f7ff bb51 	b.w	800686e <_dtoa_r+0x3fe>
 80071cc:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80071d0:	f04f 0802 	mov.w	r8, #2
 80071d4:	ed8d 7b00 	vstr	d7, [sp]
 80071d8:	e546      	b.n	8006c68 <_dtoa_r+0x7f8>
 80071da:	9b08      	ldr	r3, [sp, #32]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f43f aeb4 	beq.w	8006f4a <_dtoa_r+0xada>
 80071e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	f77f af29 	ble.w	800703c <_dtoa_r+0xbcc>
 80071ea:	2200      	movs	r2, #0
 80071ec:	4b21      	ldr	r3, [pc, #132]	; (8007274 <_dtoa_r+0xe04>)
 80071ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071f2:	f7f9 fa29 	bl	8000648 <__aeabi_dmul>
 80071f6:	4606      	mov	r6, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	f108 0001 	add.w	r0, r8, #1
 80071fe:	e9cd 6700 	strd	r6, r7, [sp]
 8007202:	f7f9 f9bb 	bl	800057c <__aeabi_i2d>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f9 fa1b 	bl	8000648 <__aeabi_dmul>
 8007212:	4b14      	ldr	r3, [pc, #80]	; (8007264 <_dtoa_r+0xdf4>)
 8007214:	2200      	movs	r2, #0
 8007216:	f7f9 f865 	bl	80002e4 <__adddf3>
 800721a:	9b05      	ldr	r3, [sp, #20]
 800721c:	3b01      	subs	r3, #1
 800721e:	4606      	mov	r6, r0
 8007220:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8007224:	9314      	str	r3, [sp, #80]	; 0x50
 8007226:	46a9      	mov	r9, r5
 8007228:	e53f      	b.n	8006caa <_dtoa_r+0x83a>
 800722a:	2239      	movs	r2, #57	; 0x39
 800722c:	46b2      	mov	sl, r6
 800722e:	703a      	strb	r2, [r7, #0]
 8007230:	464e      	mov	r6, r9
 8007232:	1c7d      	adds	r5, r7, #1
 8007234:	e403      	b.n	8006a3e <_dtoa_r+0x5ce>
 8007236:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800723a:	2000      	movs	r0, #0
 800723c:	490e      	ldr	r1, [pc, #56]	; (8007278 <_dtoa_r+0xe08>)
 800723e:	f7f9 f84f 	bl	80002e0 <__aeabi_dsub>
 8007242:	4632      	mov	r2, r6
 8007244:	463b      	mov	r3, r7
 8007246:	f7f9 fc8f 	bl	8000b68 <__aeabi_dcmpgt>
 800724a:	b908      	cbnz	r0, 8007250 <_dtoa_r+0xde0>
 800724c:	e6f6      	b.n	800703c <_dtoa_r+0xbcc>
 800724e:	4615      	mov	r5, r2
 8007250:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007254:	2b30      	cmp	r3, #48	; 0x30
 8007256:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800725a:	d0f8      	beq.n	800724e <_dtoa_r+0xdde>
 800725c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800725e:	9305      	str	r3, [sp, #20]
 8007260:	f7ff badd 	b.w	800681e <_dtoa_r+0x3ae>
 8007264:	401c0000 	.word	0x401c0000
 8007268:	40140000 	.word	0x40140000
 800726c:	08018e58 	.word	0x08018e58
 8007270:	08018f30 	.word	0x08018f30
 8007274:	40240000 	.word	0x40240000
 8007278:	3fe00000 	.word	0x3fe00000
 800727c:	4643      	mov	r3, r8
 800727e:	f8dd b000 	ldr.w	fp, [sp]
 8007282:	46a0      	mov	r8, r4
 8007284:	461c      	mov	r4, r3
 8007286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007288:	9305      	str	r3, [sp, #20]
 800728a:	f7ff bab6 	b.w	80067fa <_dtoa_r+0x38a>
 800728e:	46b9      	mov	r9, r7
 8007290:	f7ff bb6b 	b.w	800696a <_dtoa_r+0x4fa>
 8007294:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8007298:	d0c7      	beq.n	800722a <_dtoa_r+0xdba>
 800729a:	f1ba 0f00 	cmp.w	sl, #0
 800729e:	f77f aeb5 	ble.w	800700c <_dtoa_r+0xb9c>
 80072a2:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 80072a6:	e6b1      	b.n	800700c <_dtoa_r+0xb9c>
 80072a8:	f47f aeb0 	bne.w	800700c <_dtoa_r+0xb9c>
 80072ac:	f01c 0f01 	tst.w	ip, #1
 80072b0:	f43f aeac 	beq.w	800700c <_dtoa_r+0xb9c>
 80072b4:	e6a4      	b.n	8007000 <_dtoa_r+0xb90>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	dc04      	bgt.n	80072c6 <_dtoa_r+0xe56>
 80072bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072be:	e605      	b.n	8006ecc <_dtoa_r+0xa5c>
 80072c0:	f04f 0802 	mov.w	r8, #2
 80072c4:	e4d0      	b.n	8006c68 <_dtoa_r+0x7f8>
 80072c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072c8:	9308      	str	r3, [sp, #32]
 80072ca:	e61b      	b.n	8006f04 <_dtoa_r+0xa94>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	dcf9      	bgt.n	80072c6 <_dtoa_r+0xe56>
 80072d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d4:	f7ff bbef 	b.w	8006ab6 <_dtoa_r+0x646>
 80072d8:	2500      	movs	r5, #0
 80072da:	6465      	str	r5, [r4, #68]	; 0x44
 80072dc:	4629      	mov	r1, r5
 80072de:	4620      	mov	r0, r4
 80072e0:	f001 f808 	bl	80082f4 <_Balloc>
 80072e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072e8:	9308      	str	r3, [sp, #32]
 80072ea:	930e      	str	r3, [sp, #56]	; 0x38
 80072ec:	2301      	movs	r3, #1
 80072ee:	9009      	str	r0, [sp, #36]	; 0x24
 80072f0:	46aa      	mov	sl, r5
 80072f2:	6420      	str	r0, [r4, #64]	; 0x40
 80072f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f6:	f7ff b9ce 	b.w	8006696 <_dtoa_r+0x226>
 80072fa:	f43f ab4e 	beq.w	800699a <_dtoa_r+0x52a>
 80072fe:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8007302:	f7ff bb43 	b.w	800698c <_dtoa_r+0x51c>
 8007306:	2301      	movs	r3, #1
 8007308:	930b      	str	r3, [sp, #44]	; 0x2c
 800730a:	e55c      	b.n	8006dc6 <_dtoa_r+0x956>
 800730c:	2701      	movs	r7, #1
 800730e:	f7ff b98d 	b.w	800662c <_dtoa_r+0x1bc>
 8007312:	bf00      	nop
 8007314:	f3af 8000 	nop.w

08007318 <__sflush_r>:
 8007318:	898b      	ldrh	r3, [r1, #12]
 800731a:	b29a      	uxth	r2, r3
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	460d      	mov	r5, r1
 8007322:	0711      	lsls	r1, r2, #28
 8007324:	4680      	mov	r8, r0
 8007326:	d43c      	bmi.n	80073a2 <__sflush_r+0x8a>
 8007328:	686a      	ldr	r2, [r5, #4]
 800732a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800732e:	2a00      	cmp	r2, #0
 8007330:	81ab      	strh	r3, [r5, #12]
 8007332:	dd65      	ble.n	8007400 <__sflush_r+0xe8>
 8007334:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007336:	2e00      	cmp	r6, #0
 8007338:	d04b      	beq.n	80073d2 <__sflush_r+0xba>
 800733a:	b29b      	uxth	r3, r3
 800733c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007340:	2100      	movs	r1, #0
 8007342:	b292      	uxth	r2, r2
 8007344:	f8d8 4000 	ldr.w	r4, [r8]
 8007348:	f8c8 1000 	str.w	r1, [r8]
 800734c:	2a00      	cmp	r2, #0
 800734e:	d05b      	beq.n	8007408 <__sflush_r+0xf0>
 8007350:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8007352:	075f      	lsls	r7, r3, #29
 8007354:	d505      	bpl.n	8007362 <__sflush_r+0x4a>
 8007356:	6869      	ldr	r1, [r5, #4]
 8007358:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800735a:	1a52      	subs	r2, r2, r1
 800735c:	b10b      	cbz	r3, 8007362 <__sflush_r+0x4a>
 800735e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007360:	1ad2      	subs	r2, r2, r3
 8007362:	4640      	mov	r0, r8
 8007364:	69e9      	ldr	r1, [r5, #28]
 8007366:	2300      	movs	r3, #0
 8007368:	47b0      	blx	r6
 800736a:	1c46      	adds	r6, r0, #1
 800736c:	d056      	beq.n	800741c <__sflush_r+0x104>
 800736e:	89ab      	ldrh	r3, [r5, #12]
 8007370:	692a      	ldr	r2, [r5, #16]
 8007372:	602a      	str	r2, [r5, #0]
 8007374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007378:	b29b      	uxth	r3, r3
 800737a:	2200      	movs	r2, #0
 800737c:	606a      	str	r2, [r5, #4]
 800737e:	04da      	lsls	r2, r3, #19
 8007380:	81ab      	strh	r3, [r5, #12]
 8007382:	d43b      	bmi.n	80073fc <__sflush_r+0xe4>
 8007384:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8007386:	f8c8 4000 	str.w	r4, [r8]
 800738a:	b311      	cbz	r1, 80073d2 <__sflush_r+0xba>
 800738c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007390:	4299      	cmp	r1, r3
 8007392:	d002      	beq.n	800739a <__sflush_r+0x82>
 8007394:	4640      	mov	r0, r8
 8007396:	f000 f955 	bl	8007644 <_free_r>
 800739a:	2000      	movs	r0, #0
 800739c:	6328      	str	r0, [r5, #48]	; 0x30
 800739e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a2:	692e      	ldr	r6, [r5, #16]
 80073a4:	b1ae      	cbz	r6, 80073d2 <__sflush_r+0xba>
 80073a6:	682c      	ldr	r4, [r5, #0]
 80073a8:	602e      	str	r6, [r5, #0]
 80073aa:	0791      	lsls	r1, r2, #30
 80073ac:	bf0c      	ite	eq
 80073ae:	696b      	ldreq	r3, [r5, #20]
 80073b0:	2300      	movne	r3, #0
 80073b2:	1ba4      	subs	r4, r4, r6
 80073b4:	60ab      	str	r3, [r5, #8]
 80073b6:	e00a      	b.n	80073ce <__sflush_r+0xb6>
 80073b8:	4632      	mov	r2, r6
 80073ba:	4623      	mov	r3, r4
 80073bc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80073be:	69e9      	ldr	r1, [r5, #28]
 80073c0:	4640      	mov	r0, r8
 80073c2:	47b8      	blx	r7
 80073c4:	2800      	cmp	r0, #0
 80073c6:	eba4 0400 	sub.w	r4, r4, r0
 80073ca:	4406      	add	r6, r0
 80073cc:	dd04      	ble.n	80073d8 <__sflush_r+0xc0>
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	dcf2      	bgt.n	80073b8 <__sflush_r+0xa0>
 80073d2:	2000      	movs	r0, #0
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	89ab      	ldrh	r3, [r5, #12]
 80073da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073de:	81ab      	strh	r3, [r5, #12]
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e8:	89ab      	ldrh	r3, [r5, #12]
 80073ea:	692a      	ldr	r2, [r5, #16]
 80073ec:	6069      	str	r1, [r5, #4]
 80073ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	81ab      	strh	r3, [r5, #12]
 80073f6:	04db      	lsls	r3, r3, #19
 80073f8:	602a      	str	r2, [r5, #0]
 80073fa:	d5c3      	bpl.n	8007384 <__sflush_r+0x6c>
 80073fc:	6528      	str	r0, [r5, #80]	; 0x50
 80073fe:	e7c1      	b.n	8007384 <__sflush_r+0x6c>
 8007400:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8007402:	2a00      	cmp	r2, #0
 8007404:	dc96      	bgt.n	8007334 <__sflush_r+0x1c>
 8007406:	e7e4      	b.n	80073d2 <__sflush_r+0xba>
 8007408:	2301      	movs	r3, #1
 800740a:	4640      	mov	r0, r8
 800740c:	69e9      	ldr	r1, [r5, #28]
 800740e:	47b0      	blx	r6
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	4602      	mov	r2, r0
 8007414:	d019      	beq.n	800744a <__sflush_r+0x132>
 8007416:	89ab      	ldrh	r3, [r5, #12]
 8007418:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800741a:	e79a      	b.n	8007352 <__sflush_r+0x3a>
 800741c:	f8d8 1000 	ldr.w	r1, [r8]
 8007420:	2900      	cmp	r1, #0
 8007422:	d0e1      	beq.n	80073e8 <__sflush_r+0xd0>
 8007424:	291d      	cmp	r1, #29
 8007426:	d007      	beq.n	8007438 <__sflush_r+0x120>
 8007428:	2916      	cmp	r1, #22
 800742a:	d005      	beq.n	8007438 <__sflush_r+0x120>
 800742c:	89ab      	ldrh	r3, [r5, #12]
 800742e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007432:	81ab      	strh	r3, [r5, #12]
 8007434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007438:	89ab      	ldrh	r3, [r5, #12]
 800743a:	692a      	ldr	r2, [r5, #16]
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007442:	2200      	movs	r2, #0
 8007444:	81ab      	strh	r3, [r5, #12]
 8007446:	606a      	str	r2, [r5, #4]
 8007448:	e79c      	b.n	8007384 <__sflush_r+0x6c>
 800744a:	f8d8 3000 	ldr.w	r3, [r8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0e1      	beq.n	8007416 <__sflush_r+0xfe>
 8007452:	2b1d      	cmp	r3, #29
 8007454:	d007      	beq.n	8007466 <__sflush_r+0x14e>
 8007456:	2b16      	cmp	r3, #22
 8007458:	d005      	beq.n	8007466 <__sflush_r+0x14e>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007460:	81ab      	strh	r3, [r5, #12]
 8007462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007466:	f8c8 4000 	str.w	r4, [r8]
 800746a:	e7b2      	b.n	80073d2 <__sflush_r+0xba>

0800746c <_fflush_r>:
 800746c:	b510      	push	{r4, lr}
 800746e:	4604      	mov	r4, r0
 8007470:	b082      	sub	sp, #8
 8007472:	b108      	cbz	r0, 8007478 <_fflush_r+0xc>
 8007474:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007476:	b153      	cbz	r3, 800748e <_fflush_r+0x22>
 8007478:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800747c:	b908      	cbnz	r0, 8007482 <_fflush_r+0x16>
 800747e:	b002      	add	sp, #8
 8007480:	bd10      	pop	{r4, pc}
 8007482:	4620      	mov	r0, r4
 8007484:	b002      	add	sp, #8
 8007486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800748a:	f7ff bf45 	b.w	8007318 <__sflush_r>
 800748e:	9101      	str	r1, [sp, #4]
 8007490:	f000 f880 	bl	8007594 <__sinit>
 8007494:	9901      	ldr	r1, [sp, #4]
 8007496:	e7ef      	b.n	8007478 <_fflush_r+0xc>

08007498 <_cleanup_r>:
 8007498:	4901      	ldr	r1, [pc, #4]	; (80074a0 <_cleanup_r+0x8>)
 800749a:	f000 bb37 	b.w	8007b0c <_fwalk_reent>
 800749e:	bf00      	nop
 80074a0:	08008f9d 	.word	0x08008f9d

080074a4 <__sinit.part.1>:
 80074a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	4b35      	ldr	r3, [pc, #212]	; (8007580 <__sinit.part.1+0xdc>)
 80074aa:	6845      	ldr	r5, [r0, #4]
 80074ac:	63c3      	str	r3, [r0, #60]	; 0x3c
 80074ae:	2400      	movs	r4, #0
 80074b0:	4607      	mov	r7, r0
 80074b2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80074b6:	2304      	movs	r3, #4
 80074b8:	2103      	movs	r1, #3
 80074ba:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 80074be:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80074c2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80074c6:	b083      	sub	sp, #12
 80074c8:	602c      	str	r4, [r5, #0]
 80074ca:	606c      	str	r4, [r5, #4]
 80074cc:	60ac      	str	r4, [r5, #8]
 80074ce:	666c      	str	r4, [r5, #100]	; 0x64
 80074d0:	81ec      	strh	r4, [r5, #14]
 80074d2:	612c      	str	r4, [r5, #16]
 80074d4:	616c      	str	r4, [r5, #20]
 80074d6:	61ac      	str	r4, [r5, #24]
 80074d8:	81ab      	strh	r3, [r5, #12]
 80074da:	4621      	mov	r1, r4
 80074dc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80074e0:	2208      	movs	r2, #8
 80074e2:	f7fd f9f1 	bl	80048c8 <memset>
 80074e6:	68be      	ldr	r6, [r7, #8]
 80074e8:	f8df b098 	ldr.w	fp, [pc, #152]	; 8007584 <__sinit.part.1+0xe0>
 80074ec:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007588 <__sinit.part.1+0xe4>
 80074f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800758c <__sinit.part.1+0xe8>
 80074f4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007590 <__sinit.part.1+0xec>
 80074f8:	f8c5 b020 	str.w	fp, [r5, #32]
 80074fc:	2301      	movs	r3, #1
 80074fe:	2209      	movs	r2, #9
 8007500:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8007504:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8007508:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800750c:	61ed      	str	r5, [r5, #28]
 800750e:	4621      	mov	r1, r4
 8007510:	81f3      	strh	r3, [r6, #14]
 8007512:	81b2      	strh	r2, [r6, #12]
 8007514:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8007518:	6034      	str	r4, [r6, #0]
 800751a:	6074      	str	r4, [r6, #4]
 800751c:	60b4      	str	r4, [r6, #8]
 800751e:	6674      	str	r4, [r6, #100]	; 0x64
 8007520:	6134      	str	r4, [r6, #16]
 8007522:	6174      	str	r4, [r6, #20]
 8007524:	61b4      	str	r4, [r6, #24]
 8007526:	2208      	movs	r2, #8
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	f7fd f9cd 	bl	80048c8 <memset>
 800752e:	68fd      	ldr	r5, [r7, #12]
 8007530:	61f6      	str	r6, [r6, #28]
 8007532:	2012      	movs	r0, #18
 8007534:	2202      	movs	r2, #2
 8007536:	f8c6 b020 	str.w	fp, [r6, #32]
 800753a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800753e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8007542:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8007546:	4621      	mov	r1, r4
 8007548:	81a8      	strh	r0, [r5, #12]
 800754a:	81ea      	strh	r2, [r5, #14]
 800754c:	602c      	str	r4, [r5, #0]
 800754e:	606c      	str	r4, [r5, #4]
 8007550:	60ac      	str	r4, [r5, #8]
 8007552:	666c      	str	r4, [r5, #100]	; 0x64
 8007554:	612c      	str	r4, [r5, #16]
 8007556:	616c      	str	r4, [r5, #20]
 8007558:	61ac      	str	r4, [r5, #24]
 800755a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800755e:	2208      	movs	r2, #8
 8007560:	f7fd f9b2 	bl	80048c8 <memset>
 8007564:	9b01      	ldr	r3, [sp, #4]
 8007566:	61ed      	str	r5, [r5, #28]
 8007568:	f8c5 b020 	str.w	fp, [r5, #32]
 800756c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8007570:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8007574:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38
 800757a:	b003      	add	sp, #12
 800757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	08007499 	.word	0x08007499
 8007584:	08008d81 	.word	0x08008d81
 8007588:	08008da5 	.word	0x08008da5
 800758c:	08008ddd 	.word	0x08008ddd
 8007590:	08008dfd 	.word	0x08008dfd

08007594 <__sinit>:
 8007594:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007596:	b103      	cbz	r3, 800759a <__sinit+0x6>
 8007598:	4770      	bx	lr
 800759a:	f7ff bf83 	b.w	80074a4 <__sinit.part.1>
 800759e:	bf00      	nop

080075a0 <__sfp_lock_acquire>:
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop

080075a4 <__sfp_lock_release>:
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop

080075a8 <_malloc_trim_r>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	4f23      	ldr	r7, [pc, #140]	; (8007638 <_malloc_trim_r+0x90>)
 80075ac:	460c      	mov	r4, r1
 80075ae:	4606      	mov	r6, r0
 80075b0:	f000 fe9c 	bl	80082ec <__malloc_lock>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	685d      	ldr	r5, [r3, #4]
 80075b8:	f025 0503 	bic.w	r5, r5, #3
 80075bc:	1b29      	subs	r1, r5, r4
 80075be:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80075c2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80075c6:	f021 010f 	bic.w	r1, r1, #15
 80075ca:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80075ce:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80075d2:	db07      	blt.n	80075e4 <_malloc_trim_r+0x3c>
 80075d4:	4630      	mov	r0, r6
 80075d6:	2100      	movs	r1, #0
 80075d8:	f7fa fa7e 	bl	8001ad8 <_sbrk_r>
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	442b      	add	r3, r5
 80075e0:	4298      	cmp	r0, r3
 80075e2:	d004      	beq.n	80075ee <_malloc_trim_r+0x46>
 80075e4:	4630      	mov	r0, r6
 80075e6:	f000 fe83 	bl	80082f0 <__malloc_unlock>
 80075ea:	2000      	movs	r0, #0
 80075ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ee:	4630      	mov	r0, r6
 80075f0:	4261      	negs	r1, r4
 80075f2:	f7fa fa71 	bl	8001ad8 <_sbrk_r>
 80075f6:	3001      	adds	r0, #1
 80075f8:	d00d      	beq.n	8007616 <_malloc_trim_r+0x6e>
 80075fa:	4b10      	ldr	r3, [pc, #64]	; (800763c <_malloc_trim_r+0x94>)
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	6819      	ldr	r1, [r3, #0]
 8007600:	1b2d      	subs	r5, r5, r4
 8007602:	f045 0501 	orr.w	r5, r5, #1
 8007606:	4630      	mov	r0, r6
 8007608:	1b09      	subs	r1, r1, r4
 800760a:	6055      	str	r5, [r2, #4]
 800760c:	6019      	str	r1, [r3, #0]
 800760e:	f000 fe6f 	bl	80082f0 <__malloc_unlock>
 8007612:	2001      	movs	r0, #1
 8007614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007616:	4630      	mov	r0, r6
 8007618:	2100      	movs	r1, #0
 800761a:	f7fa fa5d 	bl	8001ad8 <_sbrk_r>
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	1a83      	subs	r3, r0, r2
 8007622:	2b0f      	cmp	r3, #15
 8007624:	ddde      	ble.n	80075e4 <_malloc_trim_r+0x3c>
 8007626:	4c06      	ldr	r4, [pc, #24]	; (8007640 <_malloc_trim_r+0x98>)
 8007628:	4904      	ldr	r1, [pc, #16]	; (800763c <_malloc_trim_r+0x94>)
 800762a:	6824      	ldr	r4, [r4, #0]
 800762c:	f043 0301 	orr.w	r3, r3, #1
 8007630:	1b00      	subs	r0, r0, r4
 8007632:	6053      	str	r3, [r2, #4]
 8007634:	6008      	str	r0, [r1, #0]
 8007636:	e7d5      	b.n	80075e4 <_malloc_trim_r+0x3c>
 8007638:	200004d0 	.word	0x200004d0
 800763c:	20000a6c 	.word	0x20000a6c
 8007640:	200008dc 	.word	0x200008dc

08007644 <_free_r>:
 8007644:	2900      	cmp	r1, #0
 8007646:	d04e      	beq.n	80076e6 <_free_r+0xa2>
 8007648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800764c:	460c      	mov	r4, r1
 800764e:	4680      	mov	r8, r0
 8007650:	f000 fe4c 	bl	80082ec <__malloc_lock>
 8007654:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8007658:	4962      	ldr	r1, [pc, #392]	; (80077e4 <_free_r+0x1a0>)
 800765a:	f027 0201 	bic.w	r2, r7, #1
 800765e:	f1a4 0508 	sub.w	r5, r4, #8
 8007662:	18ab      	adds	r3, r5, r2
 8007664:	688e      	ldr	r6, [r1, #8]
 8007666:	6858      	ldr	r0, [r3, #4]
 8007668:	429e      	cmp	r6, r3
 800766a:	f020 0003 	bic.w	r0, r0, #3
 800766e:	d05a      	beq.n	8007726 <_free_r+0xe2>
 8007670:	07fe      	lsls	r6, r7, #31
 8007672:	6058      	str	r0, [r3, #4]
 8007674:	d40b      	bmi.n	800768e <_free_r+0x4a>
 8007676:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800767a:	1bed      	subs	r5, r5, r7
 800767c:	f101 0e08 	add.w	lr, r1, #8
 8007680:	68ac      	ldr	r4, [r5, #8]
 8007682:	4574      	cmp	r4, lr
 8007684:	443a      	add	r2, r7
 8007686:	d067      	beq.n	8007758 <_free_r+0x114>
 8007688:	68ef      	ldr	r7, [r5, #12]
 800768a:	60e7      	str	r7, [r4, #12]
 800768c:	60bc      	str	r4, [r7, #8]
 800768e:	181c      	adds	r4, r3, r0
 8007690:	6864      	ldr	r4, [r4, #4]
 8007692:	07e4      	lsls	r4, r4, #31
 8007694:	d40c      	bmi.n	80076b0 <_free_r+0x6c>
 8007696:	4f54      	ldr	r7, [pc, #336]	; (80077e8 <_free_r+0x1a4>)
 8007698:	689c      	ldr	r4, [r3, #8]
 800769a:	42bc      	cmp	r4, r7
 800769c:	4402      	add	r2, r0
 800769e:	d07c      	beq.n	800779a <_free_r+0x156>
 80076a0:	68d8      	ldr	r0, [r3, #12]
 80076a2:	60e0      	str	r0, [r4, #12]
 80076a4:	f042 0301 	orr.w	r3, r2, #1
 80076a8:	6084      	str	r4, [r0, #8]
 80076aa:	606b      	str	r3, [r5, #4]
 80076ac:	50aa      	str	r2, [r5, r2]
 80076ae:	e003      	b.n	80076b8 <_free_r+0x74>
 80076b0:	f042 0301 	orr.w	r3, r2, #1
 80076b4:	606b      	str	r3, [r5, #4]
 80076b6:	50aa      	str	r2, [r5, r2]
 80076b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80076bc:	d214      	bcs.n	80076e8 <_free_r+0xa4>
 80076be:	08d2      	lsrs	r2, r2, #3
 80076c0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80076c4:	6848      	ldr	r0, [r1, #4]
 80076c6:	689f      	ldr	r7, [r3, #8]
 80076c8:	60af      	str	r7, [r5, #8]
 80076ca:	1092      	asrs	r2, r2, #2
 80076cc:	2401      	movs	r4, #1
 80076ce:	fa04 f202 	lsl.w	r2, r4, r2
 80076d2:	4310      	orrs	r0, r2
 80076d4:	60eb      	str	r3, [r5, #12]
 80076d6:	6048      	str	r0, [r1, #4]
 80076d8:	609d      	str	r5, [r3, #8]
 80076da:	60fd      	str	r5, [r7, #12]
 80076dc:	4640      	mov	r0, r8
 80076de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076e2:	f000 be05 	b.w	80082f0 <__malloc_unlock>
 80076e6:	4770      	bx	lr
 80076e8:	0a53      	lsrs	r3, r2, #9
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d847      	bhi.n	800777e <_free_r+0x13a>
 80076ee:	0993      	lsrs	r3, r2, #6
 80076f0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80076f4:	0060      	lsls	r0, r4, #1
 80076f6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80076fa:	493a      	ldr	r1, [pc, #232]	; (80077e4 <_free_r+0x1a0>)
 80076fc:	6883      	ldr	r3, [r0, #8]
 80076fe:	4283      	cmp	r3, r0
 8007700:	d043      	beq.n	800778a <_free_r+0x146>
 8007702:	6859      	ldr	r1, [r3, #4]
 8007704:	f021 0103 	bic.w	r1, r1, #3
 8007708:	4291      	cmp	r1, r2
 800770a:	d902      	bls.n	8007712 <_free_r+0xce>
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	4298      	cmp	r0, r3
 8007710:	d1f7      	bne.n	8007702 <_free_r+0xbe>
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	60ea      	str	r2, [r5, #12]
 8007716:	60ab      	str	r3, [r5, #8]
 8007718:	4640      	mov	r0, r8
 800771a:	6095      	str	r5, [r2, #8]
 800771c:	60dd      	str	r5, [r3, #12]
 800771e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007722:	f000 bde5 	b.w	80082f0 <__malloc_unlock>
 8007726:	07ff      	lsls	r7, r7, #31
 8007728:	4402      	add	r2, r0
 800772a:	d407      	bmi.n	800773c <_free_r+0xf8>
 800772c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007730:	1aed      	subs	r5, r5, r3
 8007732:	441a      	add	r2, r3
 8007734:	68a8      	ldr	r0, [r5, #8]
 8007736:	68eb      	ldr	r3, [r5, #12]
 8007738:	60c3      	str	r3, [r0, #12]
 800773a:	6098      	str	r0, [r3, #8]
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <_free_r+0x1a8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0001 	orr.w	r0, r2, #1
 8007744:	429a      	cmp	r2, r3
 8007746:	6068      	str	r0, [r5, #4]
 8007748:	608d      	str	r5, [r1, #8]
 800774a:	d3c7      	bcc.n	80076dc <_free_r+0x98>
 800774c:	4b28      	ldr	r3, [pc, #160]	; (80077f0 <_free_r+0x1ac>)
 800774e:	4640      	mov	r0, r8
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	f7ff ff29 	bl	80075a8 <_malloc_trim_r>
 8007756:	e7c1      	b.n	80076dc <_free_r+0x98>
 8007758:	1819      	adds	r1, r3, r0
 800775a:	6849      	ldr	r1, [r1, #4]
 800775c:	07c9      	lsls	r1, r1, #31
 800775e:	d409      	bmi.n	8007774 <_free_r+0x130>
 8007760:	68d9      	ldr	r1, [r3, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	4402      	add	r2, r0
 8007766:	f042 0001 	orr.w	r0, r2, #1
 800776a:	60d9      	str	r1, [r3, #12]
 800776c:	608b      	str	r3, [r1, #8]
 800776e:	6068      	str	r0, [r5, #4]
 8007770:	50aa      	str	r2, [r5, r2]
 8007772:	e7b3      	b.n	80076dc <_free_r+0x98>
 8007774:	f042 0301 	orr.w	r3, r2, #1
 8007778:	606b      	str	r3, [r5, #4]
 800777a:	50aa      	str	r2, [r5, r2]
 800777c:	e7ae      	b.n	80076dc <_free_r+0x98>
 800777e:	2b14      	cmp	r3, #20
 8007780:	d814      	bhi.n	80077ac <_free_r+0x168>
 8007782:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8007786:	0060      	lsls	r0, r4, #1
 8007788:	e7b5      	b.n	80076f6 <_free_r+0xb2>
 800778a:	684a      	ldr	r2, [r1, #4]
 800778c:	10a4      	asrs	r4, r4, #2
 800778e:	2001      	movs	r0, #1
 8007790:	40a0      	lsls	r0, r4
 8007792:	4302      	orrs	r2, r0
 8007794:	604a      	str	r2, [r1, #4]
 8007796:	461a      	mov	r2, r3
 8007798:	e7bc      	b.n	8007714 <_free_r+0xd0>
 800779a:	f042 0301 	orr.w	r3, r2, #1
 800779e:	614d      	str	r5, [r1, #20]
 80077a0:	610d      	str	r5, [r1, #16]
 80077a2:	60ec      	str	r4, [r5, #12]
 80077a4:	60ac      	str	r4, [r5, #8]
 80077a6:	606b      	str	r3, [r5, #4]
 80077a8:	50aa      	str	r2, [r5, r2]
 80077aa:	e797      	b.n	80076dc <_free_r+0x98>
 80077ac:	2b54      	cmp	r3, #84	; 0x54
 80077ae:	d804      	bhi.n	80077ba <_free_r+0x176>
 80077b0:	0b13      	lsrs	r3, r2, #12
 80077b2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 80077b6:	0060      	lsls	r0, r4, #1
 80077b8:	e79d      	b.n	80076f6 <_free_r+0xb2>
 80077ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80077be:	d804      	bhi.n	80077ca <_free_r+0x186>
 80077c0:	0bd3      	lsrs	r3, r2, #15
 80077c2:	f103 0477 	add.w	r4, r3, #119	; 0x77
 80077c6:	0060      	lsls	r0, r4, #1
 80077c8:	e795      	b.n	80076f6 <_free_r+0xb2>
 80077ca:	f240 5054 	movw	r0, #1364	; 0x554
 80077ce:	4283      	cmp	r3, r0
 80077d0:	d804      	bhi.n	80077dc <_free_r+0x198>
 80077d2:	0c93      	lsrs	r3, r2, #18
 80077d4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80077d8:	0060      	lsls	r0, r4, #1
 80077da:	e78c      	b.n	80076f6 <_free_r+0xb2>
 80077dc:	20fc      	movs	r0, #252	; 0xfc
 80077de:	247e      	movs	r4, #126	; 0x7e
 80077e0:	e789      	b.n	80076f6 <_free_r+0xb2>
 80077e2:	bf00      	nop
 80077e4:	200004d0 	.word	0x200004d0
 80077e8:	200004d8 	.word	0x200004d8
 80077ec:	200008d8 	.word	0x200008d8
 80077f0:	20000a68 	.word	0x20000a68

080077f4 <__sfvwrite_r>:
 80077f4:	6893      	ldr	r3, [r2, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d07a      	beq.n	80078f0 <__sfvwrite_r+0xfc>
 80077fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fe:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8007802:	f01e 0f08 	tst.w	lr, #8
 8007806:	b083      	sub	sp, #12
 8007808:	460c      	mov	r4, r1
 800780a:	4681      	mov	r9, r0
 800780c:	4616      	mov	r6, r2
 800780e:	d026      	beq.n	800785e <__sfvwrite_r+0x6a>
 8007810:	690b      	ldr	r3, [r1, #16]
 8007812:	b323      	cbz	r3, 800785e <__sfvwrite_r+0x6a>
 8007814:	f00e 0802 	and.w	r8, lr, #2
 8007818:	fa1f f088 	uxth.w	r0, r8
 800781c:	6835      	ldr	r5, [r6, #0]
 800781e:	b370      	cbz	r0, 800787e <__sfvwrite_r+0x8a>
 8007820:	f04f 0a00 	mov.w	sl, #0
 8007824:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8007b08 <__sfvwrite_r+0x314>
 8007828:	46d0      	mov	r8, sl
 800782a:	45d8      	cmp	r8, fp
 800782c:	4643      	mov	r3, r8
 800782e:	4652      	mov	r2, sl
 8007830:	bf28      	it	cs
 8007832:	465b      	movcs	r3, fp
 8007834:	4648      	mov	r0, r9
 8007836:	f1b8 0f00 	cmp.w	r8, #0
 800783a:	d053      	beq.n	80078e4 <__sfvwrite_r+0xf0>
 800783c:	69e1      	ldr	r1, [r4, #28]
 800783e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007840:	47b8      	blx	r7
 8007842:	2800      	cmp	r0, #0
 8007844:	dd73      	ble.n	800792e <__sfvwrite_r+0x13a>
 8007846:	68b3      	ldr	r3, [r6, #8]
 8007848:	1a1b      	subs	r3, r3, r0
 800784a:	4482      	add	sl, r0
 800784c:	ebc0 0808 	rsb	r8, r0, r8
 8007850:	60b3      	str	r3, [r6, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e9      	bne.n	800782a <__sfvwrite_r+0x36>
 8007856:	2000      	movs	r0, #0
 8007858:	b003      	add	sp, #12
 800785a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785e:	4648      	mov	r0, r9
 8007860:	4621      	mov	r1, r4
 8007862:	f7fe fcb1 	bl	80061c8 <__swsetup_r>
 8007866:	2800      	cmp	r0, #0
 8007868:	f040 8145 	bne.w	8007af6 <__sfvwrite_r+0x302>
 800786c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8007870:	6835      	ldr	r5, [r6, #0]
 8007872:	f00e 0802 	and.w	r8, lr, #2
 8007876:	fa1f f088 	uxth.w	r0, r8
 800787a:	2800      	cmp	r0, #0
 800787c:	d1d0      	bne.n	8007820 <__sfvwrite_r+0x2c>
 800787e:	f01e 0b01 	ands.w	fp, lr, #1
 8007882:	d15d      	bne.n	8007940 <__sfvwrite_r+0x14c>
 8007884:	46d8      	mov	r8, fp
 8007886:	f1b8 0f00 	cmp.w	r8, #0
 800788a:	d025      	beq.n	80078d8 <__sfvwrite_r+0xe4>
 800788c:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8007890:	68a7      	ldr	r7, [r4, #8]
 8007892:	d02f      	beq.n	80078f4 <__sfvwrite_r+0x100>
 8007894:	45b8      	cmp	r8, r7
 8007896:	46ba      	mov	sl, r7
 8007898:	f0c0 80a9 	bcc.w	80079ee <__sfvwrite_r+0x1fa>
 800789c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 80078a0:	f040 80b6 	bne.w	8007a10 <__sfvwrite_r+0x21c>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	4652      	mov	r2, sl
 80078a8:	4659      	mov	r1, fp
 80078aa:	f000 fcbb 	bl	8008224 <memmove>
 80078ae:	68a0      	ldr	r0, [r4, #8]
 80078b0:	6822      	ldr	r2, [r4, #0]
 80078b2:	1bc0      	subs	r0, r0, r7
 80078b4:	eb02 030a 	add.w	r3, r2, sl
 80078b8:	60a0      	str	r0, [r4, #8]
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	4640      	mov	r0, r8
 80078be:	68b3      	ldr	r3, [r6, #8]
 80078c0:	1a1b      	subs	r3, r3, r0
 80078c2:	4483      	add	fp, r0
 80078c4:	ebc0 0808 	rsb	r8, r0, r8
 80078c8:	60b3      	str	r3, [r6, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0c3      	beq.n	8007856 <__sfvwrite_r+0x62>
 80078ce:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 80078d2:	f1b8 0f00 	cmp.w	r8, #0
 80078d6:	d1d9      	bne.n	800788c <__sfvwrite_r+0x98>
 80078d8:	f8d5 b000 	ldr.w	fp, [r5]
 80078dc:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80078e0:	3508      	adds	r5, #8
 80078e2:	e7d0      	b.n	8007886 <__sfvwrite_r+0x92>
 80078e4:	f8d5 a000 	ldr.w	sl, [r5]
 80078e8:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80078ec:	3508      	adds	r5, #8
 80078ee:	e79c      	b.n	800782a <__sfvwrite_r+0x36>
 80078f0:	2000      	movs	r0, #0
 80078f2:	4770      	bx	lr
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	4298      	cmp	r0, r3
 80078fa:	d803      	bhi.n	8007904 <__sfvwrite_r+0x110>
 80078fc:	6962      	ldr	r2, [r4, #20]
 80078fe:	4590      	cmp	r8, r2
 8007900:	f080 80b9 	bcs.w	8007a76 <__sfvwrite_r+0x282>
 8007904:	4547      	cmp	r7, r8
 8007906:	bf28      	it	cs
 8007908:	4647      	movcs	r7, r8
 800790a:	463a      	mov	r2, r7
 800790c:	4659      	mov	r1, fp
 800790e:	f000 fc89 	bl	8008224 <memmove>
 8007912:	68a3      	ldr	r3, [r4, #8]
 8007914:	6822      	ldr	r2, [r4, #0]
 8007916:	1bdb      	subs	r3, r3, r7
 8007918:	443a      	add	r2, r7
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	6022      	str	r2, [r4, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d14a      	bne.n	80079b8 <__sfvwrite_r+0x1c4>
 8007922:	4648      	mov	r0, r9
 8007924:	4621      	mov	r1, r4
 8007926:	f7ff fda1 	bl	800746c <_fflush_r>
 800792a:	2800      	cmp	r0, #0
 800792c:	d044      	beq.n	80079b8 <__sfvwrite_r+0x1c4>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	b003      	add	sp, #12
 800793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007940:	4680      	mov	r8, r0
 8007942:	9000      	str	r0, [sp, #0]
 8007944:	4683      	mov	fp, r0
 8007946:	4682      	mov	sl, r0
 8007948:	f1ba 0f00 	cmp.w	sl, #0
 800794c:	d02c      	beq.n	80079a8 <__sfvwrite_r+0x1b4>
 800794e:	9b00      	ldr	r3, [sp, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d050      	beq.n	80079f6 <__sfvwrite_r+0x202>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	6921      	ldr	r1, [r4, #16]
 8007958:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800795c:	6962      	ldr	r2, [r4, #20]
 800795e:	45d0      	cmp	r8, sl
 8007960:	4643      	mov	r3, r8
 8007962:	bf28      	it	cs
 8007964:	4653      	movcs	r3, sl
 8007966:	4288      	cmp	r0, r1
 8007968:	461f      	mov	r7, r3
 800796a:	d904      	bls.n	8007976 <__sfvwrite_r+0x182>
 800796c:	eb0e 0c02 	add.w	ip, lr, r2
 8007970:	4563      	cmp	r3, ip
 8007972:	f300 8092 	bgt.w	8007a9a <__sfvwrite_r+0x2a6>
 8007976:	4293      	cmp	r3, r2
 8007978:	db20      	blt.n	80079bc <__sfvwrite_r+0x1c8>
 800797a:	4613      	mov	r3, r2
 800797c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800797e:	69e1      	ldr	r1, [r4, #28]
 8007980:	4648      	mov	r0, r9
 8007982:	465a      	mov	r2, fp
 8007984:	47b8      	blx	r7
 8007986:	1e07      	subs	r7, r0, #0
 8007988:	ddd1      	ble.n	800792e <__sfvwrite_r+0x13a>
 800798a:	ebb8 0807 	subs.w	r8, r8, r7
 800798e:	d025      	beq.n	80079dc <__sfvwrite_r+0x1e8>
 8007990:	68b3      	ldr	r3, [r6, #8]
 8007992:	1bdb      	subs	r3, r3, r7
 8007994:	44bb      	add	fp, r7
 8007996:	ebc7 0a0a 	rsb	sl, r7, sl
 800799a:	60b3      	str	r3, [r6, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f43f af5a 	beq.w	8007856 <__sfvwrite_r+0x62>
 80079a2:	f1ba 0f00 	cmp.w	sl, #0
 80079a6:	d1d2      	bne.n	800794e <__sfvwrite_r+0x15a>
 80079a8:	2300      	movs	r3, #0
 80079aa:	f8d5 b000 	ldr.w	fp, [r5]
 80079ae:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	3508      	adds	r5, #8
 80079b6:	e7c7      	b.n	8007948 <__sfvwrite_r+0x154>
 80079b8:	4638      	mov	r0, r7
 80079ba:	e780      	b.n	80078be <__sfvwrite_r+0xca>
 80079bc:	461a      	mov	r2, r3
 80079be:	4659      	mov	r1, fp
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	f000 fc2f 	bl	8008224 <memmove>
 80079c6:	68a2      	ldr	r2, [r4, #8]
 80079c8:	6821      	ldr	r1, [r4, #0]
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	ebb8 0807 	subs.w	r8, r8, r7
 80079d0:	eba2 0203 	sub.w	r2, r2, r3
 80079d4:	440b      	add	r3, r1
 80079d6:	60a2      	str	r2, [r4, #8]
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	d1d9      	bne.n	8007990 <__sfvwrite_r+0x19c>
 80079dc:	4648      	mov	r0, r9
 80079de:	4621      	mov	r1, r4
 80079e0:	f7ff fd44 	bl	800746c <_fflush_r>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1a2      	bne.n	800792e <__sfvwrite_r+0x13a>
 80079e8:	f8cd 8000 	str.w	r8, [sp]
 80079ec:	e7d0      	b.n	8007990 <__sfvwrite_r+0x19c>
 80079ee:	6820      	ldr	r0, [r4, #0]
 80079f0:	4647      	mov	r7, r8
 80079f2:	46c2      	mov	sl, r8
 80079f4:	e757      	b.n	80078a6 <__sfvwrite_r+0xb2>
 80079f6:	4658      	mov	r0, fp
 80079f8:	210a      	movs	r1, #10
 80079fa:	4652      	mov	r2, sl
 80079fc:	f000 fbc8 	bl	8008190 <memchr>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d073      	beq.n	8007aec <__sfvwrite_r+0x2f8>
 8007a04:	3001      	adds	r0, #1
 8007a06:	2301      	movs	r3, #1
 8007a08:	ebcb 0800 	rsb	r8, fp, r0
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	e7a1      	b.n	8007954 <__sfvwrite_r+0x160>
 8007a10:	6967      	ldr	r7, [r4, #20]
 8007a12:	6921      	ldr	r1, [r4, #16]
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8007a20:	1c58      	adds	r0, r3, #1
 8007a22:	107f      	asrs	r7, r7, #1
 8007a24:	4440      	add	r0, r8
 8007a26:	4287      	cmp	r7, r0
 8007a28:	463a      	mov	r2, r7
 8007a2a:	bf3c      	itt	cc
 8007a2c:	4607      	movcc	r7, r0
 8007a2e:	463a      	movcc	r2, r7
 8007a30:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	d046      	beq.n	8007ac6 <__sfvwrite_r+0x2d2>
 8007a38:	4611      	mov	r1, r2
 8007a3a:	4648      	mov	r0, r9
 8007a3c:	f000 f916 	bl	8007c6c <_malloc_r>
 8007a40:	9b00      	ldr	r3, [sp, #0]
 8007a42:	4682      	mov	sl, r0
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d059      	beq.n	8007afc <__sfvwrite_r+0x308>
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6921      	ldr	r1, [r4, #16]
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	f7f9 f895 	bl	8000b7c <memcpy>
 8007a52:	89a2      	ldrh	r2, [r4, #12]
 8007a54:	9b00      	ldr	r3, [sp, #0]
 8007a56:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007a5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a5e:	81a2      	strh	r2, [r4, #12]
 8007a60:	eb0a 0003 	add.w	r0, sl, r3
 8007a64:	1afb      	subs	r3, r7, r3
 8007a66:	f8c4 a010 	str.w	sl, [r4, #16]
 8007a6a:	6167      	str	r7, [r4, #20]
 8007a6c:	6020      	str	r0, [r4, #0]
 8007a6e:	60a3      	str	r3, [r4, #8]
 8007a70:	4647      	mov	r7, r8
 8007a72:	46c2      	mov	sl, r8
 8007a74:	e717      	b.n	80078a6 <__sfvwrite_r+0xb2>
 8007a76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007a7a:	4543      	cmp	r3, r8
 8007a7c:	bf28      	it	cs
 8007a7e:	4643      	movcs	r3, r8
 8007a80:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007a82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a86:	4648      	mov	r0, r9
 8007a88:	fb03 f302 	mul.w	r3, r3, r2
 8007a8c:	69e1      	ldr	r1, [r4, #28]
 8007a8e:	465a      	mov	r2, fp
 8007a90:	47b8      	blx	r7
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f73f af13 	bgt.w	80078be <__sfvwrite_r+0xca>
 8007a98:	e749      	b.n	800792e <__sfvwrite_r+0x13a>
 8007a9a:	4662      	mov	r2, ip
 8007a9c:	4659      	mov	r1, fp
 8007a9e:	f8cd c004 	str.w	ip, [sp, #4]
 8007aa2:	f000 fbbf 	bl	8008224 <memmove>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007aac:	4463      	add	r3, ip
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	4648      	mov	r0, r9
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	f7ff fcda 	bl	800746c <_fflush_r>
 8007ab8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f47f af36 	bne.w	800792e <__sfvwrite_r+0x13a>
 8007ac2:	4667      	mov	r7, ip
 8007ac4:	e761      	b.n	800798a <__sfvwrite_r+0x196>
 8007ac6:	4648      	mov	r0, r9
 8007ac8:	f000 ff36 	bl	8008938 <_realloc_r>
 8007acc:	9b00      	ldr	r3, [sp, #0]
 8007ace:	4682      	mov	sl, r0
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d1c5      	bne.n	8007a60 <__sfvwrite_r+0x26c>
 8007ad4:	4648      	mov	r0, r9
 8007ad6:	6921      	ldr	r1, [r4, #16]
 8007ad8:	f7ff fdb4 	bl	8007644 <_free_r>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	220c      	movs	r2, #12
 8007ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f8c9 2000 	str.w	r2, [r9]
 8007aea:	e721      	b.n	8007930 <__sfvwrite_r+0x13c>
 8007aec:	2301      	movs	r3, #1
 8007aee:	f10a 0801 	add.w	r8, sl, #1
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	e72e      	b.n	8007954 <__sfvwrite_r+0x160>
 8007af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007afa:	e6ad      	b.n	8007858 <__sfvwrite_r+0x64>
 8007afc:	230c      	movs	r3, #12
 8007afe:	f8c9 3000 	str.w	r3, [r9]
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	e714      	b.n	8007930 <__sfvwrite_r+0x13c>
 8007b06:	bf00      	nop
 8007b08:	7ffffc00 	.word	0x7ffffc00

08007b0c <_fwalk_reent>:
 8007b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b10:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8007b14:	d01f      	beq.n	8007b56 <_fwalk_reent+0x4a>
 8007b16:	4688      	mov	r8, r1
 8007b18:	4606      	mov	r6, r0
 8007b1a:	f04f 0900 	mov.w	r9, #0
 8007b1e:	687d      	ldr	r5, [r7, #4]
 8007b20:	68bc      	ldr	r4, [r7, #8]
 8007b22:	3d01      	subs	r5, #1
 8007b24:	d411      	bmi.n	8007b4a <_fwalk_reent+0x3e>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007b2e:	d908      	bls.n	8007b42 <_fwalk_reent+0x36>
 8007b30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8007b34:	3301      	adds	r3, #1
 8007b36:	4621      	mov	r1, r4
 8007b38:	4630      	mov	r0, r6
 8007b3a:	d002      	beq.n	8007b42 <_fwalk_reent+0x36>
 8007b3c:	47c0      	blx	r8
 8007b3e:	ea49 0900 	orr.w	r9, r9, r0
 8007b42:	1c6b      	adds	r3, r5, #1
 8007b44:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8007b48:	d1ed      	bne.n	8007b26 <_fwalk_reent+0x1a>
 8007b4a:	683f      	ldr	r7, [r7, #0]
 8007b4c:	2f00      	cmp	r7, #0
 8007b4e:	d1e6      	bne.n	8007b1e <_fwalk_reent+0x12>
 8007b50:	4648      	mov	r0, r9
 8007b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b56:	46b9      	mov	r9, r7
 8007b58:	4648      	mov	r0, r9
 8007b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5e:	bf00      	nop

08007b60 <__locale_charset>:
 8007b60:	4800      	ldr	r0, [pc, #0]	; (8007b64 <__locale_charset+0x4>)
 8007b62:	4770      	bx	lr
 8007b64:	200004ac 	.word	0x200004ac

08007b68 <__locale_mb_cur_max>:
 8007b68:	4b01      	ldr	r3, [pc, #4]	; (8007b70 <__locale_mb_cur_max+0x8>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	200004cc 	.word	0x200004cc

08007b74 <_localeconv_r>:
 8007b74:	4800      	ldr	r0, [pc, #0]	; (8007b78 <_localeconv_r+0x4>)
 8007b76:	4770      	bx	lr
 8007b78:	20000474 	.word	0x20000474

08007b7c <__smakebuf_r>:
 8007b7c:	898b      	ldrh	r3, [r1, #12]
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	f012 0f02 	tst.w	r2, #2
 8007b84:	d13c      	bne.n	8007c00 <__smakebuf_r+0x84>
 8007b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b88:	460c      	mov	r4, r1
 8007b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8e:	2900      	cmp	r1, #0
 8007b90:	b091      	sub	sp, #68	; 0x44
 8007b92:	4605      	mov	r5, r0
 8007b94:	db19      	blt.n	8007bca <__smakebuf_r+0x4e>
 8007b96:	aa01      	add	r2, sp, #4
 8007b98:	f7f9 ffbb 	bl	8001b12 <_fstat_r>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	db12      	blt.n	8007bc6 <__smakebuf_r+0x4a>
 8007ba0:	9b02      	ldr	r3, [sp, #8]
 8007ba2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007baa:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8007bae:	fab7 f787 	clz	r7, r7
 8007bb2:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8007bb6:	d02a      	beq.n	8007c0e <__smakebuf_r+0x92>
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007bbe:	81a3      	strh	r3, [r4, #12]
 8007bc0:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007bc4:	e00b      	b.n	8007bde <__smakebuf_r+0x62>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007bce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007bd2:	81a3      	strh	r3, [r4, #12]
 8007bd4:	bf0c      	ite	eq
 8007bd6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8007bda:	2640      	movne	r6, #64	; 0x40
 8007bdc:	2700      	movs	r7, #0
 8007bde:	4628      	mov	r0, r5
 8007be0:	4631      	mov	r1, r6
 8007be2:	f000 f843 	bl	8007c6c <_malloc_r>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	b340      	cbz	r0, 8007c3c <__smakebuf_r+0xc0>
 8007bea:	4a1a      	ldr	r2, [pc, #104]	; (8007c54 <__smakebuf_r+0xd8>)
 8007bec:	63ea      	str	r2, [r5, #60]	; 0x3c
 8007bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf2:	81a3      	strh	r3, [r4, #12]
 8007bf4:	6020      	str	r0, [r4, #0]
 8007bf6:	6120      	str	r0, [r4, #16]
 8007bf8:	6166      	str	r6, [r4, #20]
 8007bfa:	b99f      	cbnz	r7, 8007c24 <__smakebuf_r+0xa8>
 8007bfc:	b011      	add	sp, #68	; 0x44
 8007bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c00:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8007c04:	2201      	movs	r2, #1
 8007c06:	600b      	str	r3, [r1, #0]
 8007c08:	610b      	str	r3, [r1, #16]
 8007c0a:	614a      	str	r2, [r1, #20]
 8007c0c:	4770      	bx	lr
 8007c0e:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <__smakebuf_r+0xdc>)
 8007c10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d1d0      	bne.n	8007bb8 <__smakebuf_r+0x3c>
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007c1c:	4333      	orrs	r3, r6
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	64e6      	str	r6, [r4, #76]	; 0x4c
 8007c22:	e7dc      	b.n	8007bde <__smakebuf_r+0x62>
 8007c24:	4628      	mov	r0, r5
 8007c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c2a:	f7f9 ff77 	bl	8001b1c <_isatty_r>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d0e4      	beq.n	8007bfc <__smakebuf_r+0x80>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	e7df      	b.n	8007bfc <__smakebuf_r+0x80>
 8007c3c:	059a      	lsls	r2, r3, #22
 8007c3e:	d4dd      	bmi.n	8007bfc <__smakebuf_r+0x80>
 8007c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c44:	f043 0302 	orr.w	r3, r3, #2
 8007c48:	2101      	movs	r1, #1
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	6022      	str	r2, [r4, #0]
 8007c4e:	6122      	str	r2, [r4, #16]
 8007c50:	6161      	str	r1, [r4, #20]
 8007c52:	e7d3      	b.n	8007bfc <__smakebuf_r+0x80>
 8007c54:	08007499 	.word	0x08007499
 8007c58:	08008ddd 	.word	0x08008ddd

08007c5c <malloc>:
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <malloc+0xc>)
 8007c5e:	4601      	mov	r1, r0
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f000 b803 	b.w	8007c6c <_malloc_r>
 8007c66:	bf00      	nop
 8007c68:	20000470 	.word	0x20000470

08007c6c <_malloc_r>:
 8007c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c70:	f101 050b 	add.w	r5, r1, #11
 8007c74:	2d16      	cmp	r5, #22
 8007c76:	b083      	sub	sp, #12
 8007c78:	4606      	mov	r6, r0
 8007c7a:	d927      	bls.n	8007ccc <_malloc_r+0x60>
 8007c7c:	f035 0507 	bics.w	r5, r5, #7
 8007c80:	f100 80b6 	bmi.w	8007df0 <_malloc_r+0x184>
 8007c84:	42a9      	cmp	r1, r5
 8007c86:	f200 80b3 	bhi.w	8007df0 <_malloc_r+0x184>
 8007c8a:	f000 fb2f 	bl	80082ec <__malloc_lock>
 8007c8e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007c92:	d222      	bcs.n	8007cda <_malloc_r+0x6e>
 8007c94:	4fc2      	ldr	r7, [pc, #776]	; (8007fa0 <_malloc_r+0x334>)
 8007c96:	08e8      	lsrs	r0, r5, #3
 8007c98:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8007c9c:	68dc      	ldr	r4, [r3, #12]
 8007c9e:	429c      	cmp	r4, r3
 8007ca0:	f000 81c8 	beq.w	8008034 <_malloc_r+0x3c8>
 8007ca4:	6863      	ldr	r3, [r4, #4]
 8007ca6:	68e1      	ldr	r1, [r4, #12]
 8007ca8:	68a5      	ldr	r5, [r4, #8]
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	4423      	add	r3, r4
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	60e9      	str	r1, [r5, #12]
 8007cb6:	f042 0201 	orr.w	r2, r2, #1
 8007cba:	608d      	str	r5, [r1, #8]
 8007cbc:	605a      	str	r2, [r3, #4]
 8007cbe:	f000 fb17 	bl	80082f0 <__malloc_unlock>
 8007cc2:	3408      	adds	r4, #8
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	b003      	add	sp, #12
 8007cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ccc:	2910      	cmp	r1, #16
 8007cce:	f200 808f 	bhi.w	8007df0 <_malloc_r+0x184>
 8007cd2:	f000 fb0b 	bl	80082ec <__malloc_lock>
 8007cd6:	2510      	movs	r5, #16
 8007cd8:	e7dc      	b.n	8007c94 <_malloc_r+0x28>
 8007cda:	0a68      	lsrs	r0, r5, #9
 8007cdc:	f000 808f 	beq.w	8007dfe <_malloc_r+0x192>
 8007ce0:	2804      	cmp	r0, #4
 8007ce2:	f200 8154 	bhi.w	8007f8e <_malloc_r+0x322>
 8007ce6:	09a8      	lsrs	r0, r5, #6
 8007ce8:	3038      	adds	r0, #56	; 0x38
 8007cea:	0041      	lsls	r1, r0, #1
 8007cec:	4fac      	ldr	r7, [pc, #688]	; (8007fa0 <_malloc_r+0x334>)
 8007cee:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8007cf2:	68cc      	ldr	r4, [r1, #12]
 8007cf4:	42a1      	cmp	r1, r4
 8007cf6:	d106      	bne.n	8007d06 <_malloc_r+0x9a>
 8007cf8:	e00c      	b.n	8007d14 <_malloc_r+0xa8>
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	f280 8082 	bge.w	8007e04 <_malloc_r+0x198>
 8007d00:	68e4      	ldr	r4, [r4, #12]
 8007d02:	42a1      	cmp	r1, r4
 8007d04:	d006      	beq.n	8007d14 <_malloc_r+0xa8>
 8007d06:	6863      	ldr	r3, [r4, #4]
 8007d08:	f023 0303 	bic.w	r3, r3, #3
 8007d0c:	1b5a      	subs	r2, r3, r5
 8007d0e:	2a0f      	cmp	r2, #15
 8007d10:	ddf3      	ble.n	8007cfa <_malloc_r+0x8e>
 8007d12:	3801      	subs	r0, #1
 8007d14:	3001      	adds	r0, #1
 8007d16:	49a2      	ldr	r1, [pc, #648]	; (8007fa0 <_malloc_r+0x334>)
 8007d18:	693c      	ldr	r4, [r7, #16]
 8007d1a:	f101 0e08 	add.w	lr, r1, #8
 8007d1e:	4574      	cmp	r4, lr
 8007d20:	f000 817d 	beq.w	800801e <_malloc_r+0x3b2>
 8007d24:	6863      	ldr	r3, [r4, #4]
 8007d26:	f023 0303 	bic.w	r3, r3, #3
 8007d2a:	1b5a      	subs	r2, r3, r5
 8007d2c:	2a0f      	cmp	r2, #15
 8007d2e:	f300 8163 	bgt.w	8007ff8 <_malloc_r+0x38c>
 8007d32:	2a00      	cmp	r2, #0
 8007d34:	f8c1 e014 	str.w	lr, [r1, #20]
 8007d38:	f8c1 e010 	str.w	lr, [r1, #16]
 8007d3c:	da73      	bge.n	8007e26 <_malloc_r+0x1ba>
 8007d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d42:	f080 8139 	bcs.w	8007fb8 <_malloc_r+0x34c>
 8007d46:	08db      	lsrs	r3, r3, #3
 8007d48:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8007d4c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8007d50:	684a      	ldr	r2, [r1, #4]
 8007d52:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8007d56:	f8c4 9008 	str.w	r9, [r4, #8]
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	fa03 f30c 	lsl.w	r3, r3, ip
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c4 800c 	str.w	r8, [r4, #12]
 8007d66:	604b      	str	r3, [r1, #4]
 8007d68:	f8c8 4008 	str.w	r4, [r8, #8]
 8007d6c:	f8c9 400c 	str.w	r4, [r9, #12]
 8007d70:	1082      	asrs	r2, r0, #2
 8007d72:	2401      	movs	r4, #1
 8007d74:	4094      	lsls	r4, r2
 8007d76:	429c      	cmp	r4, r3
 8007d78:	d862      	bhi.n	8007e40 <_malloc_r+0x1d4>
 8007d7a:	4223      	tst	r3, r4
 8007d7c:	d106      	bne.n	8007d8c <_malloc_r+0x120>
 8007d7e:	f020 0003 	bic.w	r0, r0, #3
 8007d82:	0064      	lsls	r4, r4, #1
 8007d84:	4223      	tst	r3, r4
 8007d86:	f100 0004 	add.w	r0, r0, #4
 8007d8a:	d0fa      	beq.n	8007d82 <_malloc_r+0x116>
 8007d8c:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8007d90:	46c4      	mov	ip, r8
 8007d92:	4681      	mov	r9, r0
 8007d94:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8007d98:	459c      	cmp	ip, r3
 8007d9a:	d107      	bne.n	8007dac <_malloc_r+0x140>
 8007d9c:	e141      	b.n	8008022 <_malloc_r+0x3b6>
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	f280 8151 	bge.w	8008046 <_malloc_r+0x3da>
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	459c      	cmp	ip, r3
 8007da8:	f000 813b 	beq.w	8008022 <_malloc_r+0x3b6>
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	f022 0203 	bic.w	r2, r2, #3
 8007db2:	1b51      	subs	r1, r2, r5
 8007db4:	290f      	cmp	r1, #15
 8007db6:	ddf2      	ble.n	8007d9e <_malloc_r+0x132>
 8007db8:	461c      	mov	r4, r3
 8007dba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8007dbe:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8007dc2:	195a      	adds	r2, r3, r5
 8007dc4:	f045 0901 	orr.w	r9, r5, #1
 8007dc8:	f041 0501 	orr.w	r5, r1, #1
 8007dcc:	f8c3 9004 	str.w	r9, [r3, #4]
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f8c8 c00c 	str.w	ip, [r8, #12]
 8007dd6:	f8cc 8008 	str.w	r8, [ip, #8]
 8007dda:	617a      	str	r2, [r7, #20]
 8007ddc:	613a      	str	r2, [r7, #16]
 8007dde:	f8c2 e00c 	str.w	lr, [r2, #12]
 8007de2:	f8c2 e008 	str.w	lr, [r2, #8]
 8007de6:	6055      	str	r5, [r2, #4]
 8007de8:	5051      	str	r1, [r2, r1]
 8007dea:	f000 fa81 	bl	80082f0 <__malloc_unlock>
 8007dee:	e769      	b.n	8007cc4 <_malloc_r+0x58>
 8007df0:	2400      	movs	r4, #0
 8007df2:	230c      	movs	r3, #12
 8007df4:	4620      	mov	r0, r4
 8007df6:	6033      	str	r3, [r6, #0]
 8007df8:	b003      	add	sp, #12
 8007dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfe:	217e      	movs	r1, #126	; 0x7e
 8007e00:	203f      	movs	r0, #63	; 0x3f
 8007e02:	e773      	b.n	8007cec <_malloc_r+0x80>
 8007e04:	4423      	add	r3, r4
 8007e06:	68e1      	ldr	r1, [r4, #12]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	68a5      	ldr	r5, [r4, #8]
 8007e0c:	f042 0201 	orr.w	r2, r2, #1
 8007e10:	60e9      	str	r1, [r5, #12]
 8007e12:	4630      	mov	r0, r6
 8007e14:	608d      	str	r5, [r1, #8]
 8007e16:	605a      	str	r2, [r3, #4]
 8007e18:	f000 fa6a 	bl	80082f0 <__malloc_unlock>
 8007e1c:	3408      	adds	r4, #8
 8007e1e:	4620      	mov	r0, r4
 8007e20:	b003      	add	sp, #12
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	4423      	add	r3, r4
 8007e28:	4630      	mov	r0, r6
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	f042 0201 	orr.w	r2, r2, #1
 8007e30:	605a      	str	r2, [r3, #4]
 8007e32:	f000 fa5d 	bl	80082f0 <__malloc_unlock>
 8007e36:	3408      	adds	r4, #8
 8007e38:	4620      	mov	r0, r4
 8007e3a:	b003      	add	sp, #12
 8007e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e40:	68bc      	ldr	r4, [r7, #8]
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	f023 0803 	bic.w	r8, r3, #3
 8007e48:	4545      	cmp	r5, r8
 8007e4a:	d804      	bhi.n	8007e56 <_malloc_r+0x1ea>
 8007e4c:	ebc5 0308 	rsb	r3, r5, r8
 8007e50:	2b0f      	cmp	r3, #15
 8007e52:	f300 808c 	bgt.w	8007f6e <_malloc_r+0x302>
 8007e56:	4b53      	ldr	r3, [pc, #332]	; (8007fa4 <_malloc_r+0x338>)
 8007e58:	f8df a158 	ldr.w	sl, [pc, #344]	; 8007fb4 <_malloc_r+0x348>
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	f8da 3000 	ldr.w	r3, [sl]
 8007e62:	3301      	adds	r3, #1
 8007e64:	442a      	add	r2, r5
 8007e66:	eb04 0b08 	add.w	fp, r4, r8
 8007e6a:	f000 8150 	beq.w	800810e <_malloc_r+0x4a2>
 8007e6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e72:	320f      	adds	r2, #15
 8007e74:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007e78:	f022 020f 	bic.w	r2, r2, #15
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4630      	mov	r0, r6
 8007e80:	9201      	str	r2, [sp, #4]
 8007e82:	f7f9 fe29 	bl	8001ad8 <_sbrk_r>
 8007e86:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007e8a:	4681      	mov	r9, r0
 8007e8c:	9a01      	ldr	r2, [sp, #4]
 8007e8e:	f000 8147 	beq.w	8008120 <_malloc_r+0x4b4>
 8007e92:	4583      	cmp	fp, r0
 8007e94:	f200 80ee 	bhi.w	8008074 <_malloc_r+0x408>
 8007e98:	4b43      	ldr	r3, [pc, #268]	; (8007fa8 <_malloc_r+0x33c>)
 8007e9a:	6819      	ldr	r1, [r3, #0]
 8007e9c:	45cb      	cmp	fp, r9
 8007e9e:	4411      	add	r1, r2
 8007ea0:	6019      	str	r1, [r3, #0]
 8007ea2:	f000 8142 	beq.w	800812a <_malloc_r+0x4be>
 8007ea6:	f8da 0000 	ldr.w	r0, [sl]
 8007eaa:	f8df e108 	ldr.w	lr, [pc, #264]	; 8007fb4 <_malloc_r+0x348>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	bf1b      	ittet	ne
 8007eb2:	ebcb 0b09 	rsbne	fp, fp, r9
 8007eb6:	4459      	addne	r1, fp
 8007eb8:	f8ce 9000 	streq.w	r9, [lr]
 8007ebc:	6019      	strne	r1, [r3, #0]
 8007ebe:	f019 0107 	ands.w	r1, r9, #7
 8007ec2:	f000 8107 	beq.w	80080d4 <_malloc_r+0x468>
 8007ec6:	f1c1 0008 	rsb	r0, r1, #8
 8007eca:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8007ece:	4481      	add	r9, r0
 8007ed0:	3108      	adds	r1, #8
 8007ed2:	444a      	add	r2, r9
 8007ed4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007ed8:	ebc2 0a01 	rsb	sl, r2, r1
 8007edc:	4651      	mov	r1, sl
 8007ede:	4630      	mov	r0, r6
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	f7f9 fdf9 	bl	8001ad8 <_sbrk_r>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	f000 812c 	beq.w	8008146 <_malloc_r+0x4da>
 8007eee:	ebc9 0200 	rsb	r2, r9, r0
 8007ef2:	4452      	add	r2, sl
 8007ef4:	f042 0201 	orr.w	r2, r2, #1
 8007ef8:	6819      	ldr	r1, [r3, #0]
 8007efa:	f8c7 9008 	str.w	r9, [r7, #8]
 8007efe:	4451      	add	r1, sl
 8007f00:	42bc      	cmp	r4, r7
 8007f02:	f8c9 2004 	str.w	r2, [r9, #4]
 8007f06:	6019      	str	r1, [r3, #0]
 8007f08:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007fa8 <_malloc_r+0x33c>
 8007f0c:	d016      	beq.n	8007f3c <_malloc_r+0x2d0>
 8007f0e:	f1b8 0f0f 	cmp.w	r8, #15
 8007f12:	f240 80ee 	bls.w	80080f2 <_malloc_r+0x486>
 8007f16:	6862      	ldr	r2, [r4, #4]
 8007f18:	f1a8 030c 	sub.w	r3, r8, #12
 8007f1c:	f023 0307 	bic.w	r3, r3, #7
 8007f20:	18e0      	adds	r0, r4, r3
 8007f22:	f002 0201 	and.w	r2, r2, #1
 8007f26:	f04f 0e05 	mov.w	lr, #5
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	2b0f      	cmp	r3, #15
 8007f2e:	6062      	str	r2, [r4, #4]
 8007f30:	f8c0 e004 	str.w	lr, [r0, #4]
 8007f34:	f8c0 e008 	str.w	lr, [r0, #8]
 8007f38:	f200 8109 	bhi.w	800814e <_malloc_r+0x4e2>
 8007f3c:	4b1b      	ldr	r3, [pc, #108]	; (8007fac <_malloc_r+0x340>)
 8007f3e:	68bc      	ldr	r4, [r7, #8]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4291      	cmp	r1, r2
 8007f44:	bf88      	it	hi
 8007f46:	6019      	strhi	r1, [r3, #0]
 8007f48:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <_malloc_r+0x344>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	4291      	cmp	r1, r2
 8007f4e:	6862      	ldr	r2, [r4, #4]
 8007f50:	bf88      	it	hi
 8007f52:	6019      	strhi	r1, [r3, #0]
 8007f54:	f022 0203 	bic.w	r2, r2, #3
 8007f58:	4295      	cmp	r5, r2
 8007f5a:	eba2 0305 	sub.w	r3, r2, r5
 8007f5e:	d801      	bhi.n	8007f64 <_malloc_r+0x2f8>
 8007f60:	2b0f      	cmp	r3, #15
 8007f62:	dc04      	bgt.n	8007f6e <_malloc_r+0x302>
 8007f64:	4630      	mov	r0, r6
 8007f66:	f000 f9c3 	bl	80082f0 <__malloc_unlock>
 8007f6a:	2400      	movs	r4, #0
 8007f6c:	e6aa      	b.n	8007cc4 <_malloc_r+0x58>
 8007f6e:	1962      	adds	r2, r4, r5
 8007f70:	f043 0301 	orr.w	r3, r3, #1
 8007f74:	f045 0501 	orr.w	r5, r5, #1
 8007f78:	6065      	str	r5, [r4, #4]
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	60ba      	str	r2, [r7, #8]
 8007f7e:	6053      	str	r3, [r2, #4]
 8007f80:	f000 f9b6 	bl	80082f0 <__malloc_unlock>
 8007f84:	3408      	adds	r4, #8
 8007f86:	4620      	mov	r0, r4
 8007f88:	b003      	add	sp, #12
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	2814      	cmp	r0, #20
 8007f90:	d968      	bls.n	8008064 <_malloc_r+0x3f8>
 8007f92:	2854      	cmp	r0, #84	; 0x54
 8007f94:	f200 8097 	bhi.w	80080c6 <_malloc_r+0x45a>
 8007f98:	0b28      	lsrs	r0, r5, #12
 8007f9a:	306e      	adds	r0, #110	; 0x6e
 8007f9c:	0041      	lsls	r1, r0, #1
 8007f9e:	e6a5      	b.n	8007cec <_malloc_r+0x80>
 8007fa0:	200004d0 	.word	0x200004d0
 8007fa4:	20000a68 	.word	0x20000a68
 8007fa8:	20000a6c 	.word	0x20000a6c
 8007fac:	20000a64 	.word	0x20000a64
 8007fb0:	20000a60 	.word	0x20000a60
 8007fb4:	200008dc 	.word	0x200008dc
 8007fb8:	0a5a      	lsrs	r2, r3, #9
 8007fba:	2a04      	cmp	r2, #4
 8007fbc:	d955      	bls.n	800806a <_malloc_r+0x3fe>
 8007fbe:	2a14      	cmp	r2, #20
 8007fc0:	f200 80a7 	bhi.w	8008112 <_malloc_r+0x4a6>
 8007fc4:	325b      	adds	r2, #91	; 0x5b
 8007fc6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007fca:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8007fce:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800818c <_malloc_r+0x520>
 8007fd2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007fd6:	4561      	cmp	r1, ip
 8007fd8:	d07f      	beq.n	80080da <_malloc_r+0x46e>
 8007fda:	684a      	ldr	r2, [r1, #4]
 8007fdc:	f022 0203 	bic.w	r2, r2, #3
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d202      	bcs.n	8007fea <_malloc_r+0x37e>
 8007fe4:	6889      	ldr	r1, [r1, #8]
 8007fe6:	458c      	cmp	ip, r1
 8007fe8:	d1f7      	bne.n	8007fda <_malloc_r+0x36e>
 8007fea:	68ca      	ldr	r2, [r1, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60e2      	str	r2, [r4, #12]
 8007ff0:	60a1      	str	r1, [r4, #8]
 8007ff2:	6094      	str	r4, [r2, #8]
 8007ff4:	60cc      	str	r4, [r1, #12]
 8007ff6:	e6bb      	b.n	8007d70 <_malloc_r+0x104>
 8007ff8:	1963      	adds	r3, r4, r5
 8007ffa:	f042 0701 	orr.w	r7, r2, #1
 8007ffe:	f045 0501 	orr.w	r5, r5, #1
 8008002:	6065      	str	r5, [r4, #4]
 8008004:	4630      	mov	r0, r6
 8008006:	614b      	str	r3, [r1, #20]
 8008008:	610b      	str	r3, [r1, #16]
 800800a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800800e:	f8c3 e008 	str.w	lr, [r3, #8]
 8008012:	605f      	str	r7, [r3, #4]
 8008014:	509a      	str	r2, [r3, r2]
 8008016:	3408      	adds	r4, #8
 8008018:	f000 f96a 	bl	80082f0 <__malloc_unlock>
 800801c:	e652      	b.n	8007cc4 <_malloc_r+0x58>
 800801e:	684b      	ldr	r3, [r1, #4]
 8008020:	e6a6      	b.n	8007d70 <_malloc_r+0x104>
 8008022:	f109 0901 	add.w	r9, r9, #1
 8008026:	f019 0f03 	tst.w	r9, #3
 800802a:	f10c 0c08 	add.w	ip, ip, #8
 800802e:	f47f aeb1 	bne.w	8007d94 <_malloc_r+0x128>
 8008032:	e02c      	b.n	800808e <_malloc_r+0x422>
 8008034:	f104 0308 	add.w	r3, r4, #8
 8008038:	6964      	ldr	r4, [r4, #20]
 800803a:	42a3      	cmp	r3, r4
 800803c:	bf08      	it	eq
 800803e:	3002      	addeq	r0, #2
 8008040:	f43f ae69 	beq.w	8007d16 <_malloc_r+0xaa>
 8008044:	e62e      	b.n	8007ca4 <_malloc_r+0x38>
 8008046:	441a      	add	r2, r3
 8008048:	461c      	mov	r4, r3
 800804a:	6851      	ldr	r1, [r2, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008052:	f041 0101 	orr.w	r1, r1, #1
 8008056:	6051      	str	r1, [r2, #4]
 8008058:	4630      	mov	r0, r6
 800805a:	60eb      	str	r3, [r5, #12]
 800805c:	609d      	str	r5, [r3, #8]
 800805e:	f000 f947 	bl	80082f0 <__malloc_unlock>
 8008062:	e62f      	b.n	8007cc4 <_malloc_r+0x58>
 8008064:	305b      	adds	r0, #91	; 0x5b
 8008066:	0041      	lsls	r1, r0, #1
 8008068:	e640      	b.n	8007cec <_malloc_r+0x80>
 800806a:	099a      	lsrs	r2, r3, #6
 800806c:	3238      	adds	r2, #56	; 0x38
 800806e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008072:	e7aa      	b.n	8007fca <_malloc_r+0x35e>
 8008074:	42bc      	cmp	r4, r7
 8008076:	4b45      	ldr	r3, [pc, #276]	; (800818c <_malloc_r+0x520>)
 8008078:	f43f af0e 	beq.w	8007e98 <_malloc_r+0x22c>
 800807c:	689c      	ldr	r4, [r3, #8]
 800807e:	6862      	ldr	r2, [r4, #4]
 8008080:	f022 0203 	bic.w	r2, r2, #3
 8008084:	e768      	b.n	8007f58 <_malloc_r+0x2ec>
 8008086:	f8d8 8000 	ldr.w	r8, [r8]
 800808a:	4598      	cmp	r8, r3
 800808c:	d17c      	bne.n	8008188 <_malloc_r+0x51c>
 800808e:	f010 0f03 	tst.w	r0, #3
 8008092:	f1a8 0308 	sub.w	r3, r8, #8
 8008096:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800809a:	d1f4      	bne.n	8008086 <_malloc_r+0x41a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	ea23 0304 	bic.w	r3, r3, r4
 80080a2:	607b      	str	r3, [r7, #4]
 80080a4:	0064      	lsls	r4, r4, #1
 80080a6:	429c      	cmp	r4, r3
 80080a8:	f63f aeca 	bhi.w	8007e40 <_malloc_r+0x1d4>
 80080ac:	2c00      	cmp	r4, #0
 80080ae:	f43f aec7 	beq.w	8007e40 <_malloc_r+0x1d4>
 80080b2:	4223      	tst	r3, r4
 80080b4:	4648      	mov	r0, r9
 80080b6:	f47f ae69 	bne.w	8007d8c <_malloc_r+0x120>
 80080ba:	0064      	lsls	r4, r4, #1
 80080bc:	4223      	tst	r3, r4
 80080be:	f100 0004 	add.w	r0, r0, #4
 80080c2:	d0fa      	beq.n	80080ba <_malloc_r+0x44e>
 80080c4:	e662      	b.n	8007d8c <_malloc_r+0x120>
 80080c6:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80080ca:	d818      	bhi.n	80080fe <_malloc_r+0x492>
 80080cc:	0be8      	lsrs	r0, r5, #15
 80080ce:	3077      	adds	r0, #119	; 0x77
 80080d0:	0041      	lsls	r1, r0, #1
 80080d2:	e60b      	b.n	8007cec <_malloc_r+0x80>
 80080d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080d8:	e6fb      	b.n	8007ed2 <_malloc_r+0x266>
 80080da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080de:	1092      	asrs	r2, r2, #2
 80080e0:	f04f 0c01 	mov.w	ip, #1
 80080e4:	fa0c f202 	lsl.w	r2, ip, r2
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80080ee:	460a      	mov	r2, r1
 80080f0:	e77d      	b.n	8007fee <_malloc_r+0x382>
 80080f2:	2301      	movs	r3, #1
 80080f4:	f8c9 3004 	str.w	r3, [r9, #4]
 80080f8:	464c      	mov	r4, r9
 80080fa:	2200      	movs	r2, #0
 80080fc:	e72c      	b.n	8007f58 <_malloc_r+0x2ec>
 80080fe:	f240 5354 	movw	r3, #1364	; 0x554
 8008102:	4298      	cmp	r0, r3
 8008104:	d81c      	bhi.n	8008140 <_malloc_r+0x4d4>
 8008106:	0ca8      	lsrs	r0, r5, #18
 8008108:	307c      	adds	r0, #124	; 0x7c
 800810a:	0041      	lsls	r1, r0, #1
 800810c:	e5ee      	b.n	8007cec <_malloc_r+0x80>
 800810e:	3210      	adds	r2, #16
 8008110:	e6b4      	b.n	8007e7c <_malloc_r+0x210>
 8008112:	2a54      	cmp	r2, #84	; 0x54
 8008114:	d823      	bhi.n	800815e <_malloc_r+0x4f2>
 8008116:	0b1a      	lsrs	r2, r3, #12
 8008118:	326e      	adds	r2, #110	; 0x6e
 800811a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800811e:	e754      	b.n	8007fca <_malloc_r+0x35e>
 8008120:	68bc      	ldr	r4, [r7, #8]
 8008122:	6862      	ldr	r2, [r4, #4]
 8008124:	f022 0203 	bic.w	r2, r2, #3
 8008128:	e716      	b.n	8007f58 <_malloc_r+0x2ec>
 800812a:	f3cb 000b 	ubfx	r0, fp, #0, #12
 800812e:	2800      	cmp	r0, #0
 8008130:	f47f aeb9 	bne.w	8007ea6 <_malloc_r+0x23a>
 8008134:	4442      	add	r2, r8
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	e6fd      	b.n	8007f3c <_malloc_r+0x2d0>
 8008140:	21fc      	movs	r1, #252	; 0xfc
 8008142:	207e      	movs	r0, #126	; 0x7e
 8008144:	e5d2      	b.n	8007cec <_malloc_r+0x80>
 8008146:	2201      	movs	r2, #1
 8008148:	f04f 0a00 	mov.w	sl, #0
 800814c:	e6d4      	b.n	8007ef8 <_malloc_r+0x28c>
 800814e:	f104 0108 	add.w	r1, r4, #8
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff fa76 	bl	8007644 <_free_r>
 8008158:	f8da 1000 	ldr.w	r1, [sl]
 800815c:	e6ee      	b.n	8007f3c <_malloc_r+0x2d0>
 800815e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008162:	d804      	bhi.n	800816e <_malloc_r+0x502>
 8008164:	0bda      	lsrs	r2, r3, #15
 8008166:	3277      	adds	r2, #119	; 0x77
 8008168:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800816c:	e72d      	b.n	8007fca <_malloc_r+0x35e>
 800816e:	f240 5154 	movw	r1, #1364	; 0x554
 8008172:	428a      	cmp	r2, r1
 8008174:	d804      	bhi.n	8008180 <_malloc_r+0x514>
 8008176:	0c9a      	lsrs	r2, r3, #18
 8008178:	327c      	adds	r2, #124	; 0x7c
 800817a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800817e:	e724      	b.n	8007fca <_malloc_r+0x35e>
 8008180:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8008184:	227e      	movs	r2, #126	; 0x7e
 8008186:	e720      	b.n	8007fca <_malloc_r+0x35e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	e78b      	b.n	80080a4 <_malloc_r+0x438>
 800818c:	200004d0 	.word	0x200004d0

08008190 <memchr>:
 8008190:	0783      	lsls	r3, r0, #30
 8008192:	b470      	push	{r4, r5, r6}
 8008194:	b2c9      	uxtb	r1, r1
 8008196:	d040      	beq.n	800821a <memchr+0x8a>
 8008198:	1e54      	subs	r4, r2, #1
 800819a:	2a00      	cmp	r2, #0
 800819c:	d03f      	beq.n	800821e <memchr+0x8e>
 800819e:	7803      	ldrb	r3, [r0, #0]
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf18      	it	ne
 80081a4:	1c43      	addne	r3, r0, #1
 80081a6:	d106      	bne.n	80081b6 <memchr+0x26>
 80081a8:	e01d      	b.n	80081e6 <memchr+0x56>
 80081aa:	b1f4      	cbz	r4, 80081ea <memchr+0x5a>
 80081ac:	7802      	ldrb	r2, [r0, #0]
 80081ae:	428a      	cmp	r2, r1
 80081b0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80081b4:	d017      	beq.n	80081e6 <memchr+0x56>
 80081b6:	f013 0f03 	tst.w	r3, #3
 80081ba:	4618      	mov	r0, r3
 80081bc:	f103 0301 	add.w	r3, r3, #1
 80081c0:	d1f3      	bne.n	80081aa <memchr+0x1a>
 80081c2:	2c03      	cmp	r4, #3
 80081c4:	d814      	bhi.n	80081f0 <memchr+0x60>
 80081c6:	b184      	cbz	r4, 80081ea <memchr+0x5a>
 80081c8:	7803      	ldrb	r3, [r0, #0]
 80081ca:	428b      	cmp	r3, r1
 80081cc:	d00b      	beq.n	80081e6 <memchr+0x56>
 80081ce:	1905      	adds	r5, r0, r4
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	e002      	b.n	80081da <memchr+0x4a>
 80081d4:	7802      	ldrb	r2, [r0, #0]
 80081d6:	428a      	cmp	r2, r1
 80081d8:	d005      	beq.n	80081e6 <memchr+0x56>
 80081da:	42ab      	cmp	r3, r5
 80081dc:	4618      	mov	r0, r3
 80081de:	f103 0301 	add.w	r3, r3, #1
 80081e2:	d1f7      	bne.n	80081d4 <memchr+0x44>
 80081e4:	2000      	movs	r0, #0
 80081e6:	bc70      	pop	{r4, r5, r6}
 80081e8:	4770      	bx	lr
 80081ea:	4620      	mov	r0, r4
 80081ec:	bc70      	pop	{r4, r5, r6}
 80081ee:	4770      	bx	lr
 80081f0:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80081f4:	4602      	mov	r2, r0
 80081f6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80081fa:	4610      	mov	r0, r2
 80081fc:	3204      	adds	r2, #4
 80081fe:	6803      	ldr	r3, [r0, #0]
 8008200:	4073      	eors	r3, r6
 8008202:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8008206:	ea25 0303 	bic.w	r3, r5, r3
 800820a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800820e:	d1da      	bne.n	80081c6 <memchr+0x36>
 8008210:	3c04      	subs	r4, #4
 8008212:	2c03      	cmp	r4, #3
 8008214:	4610      	mov	r0, r2
 8008216:	d8f0      	bhi.n	80081fa <memchr+0x6a>
 8008218:	e7d5      	b.n	80081c6 <memchr+0x36>
 800821a:	4614      	mov	r4, r2
 800821c:	e7d1      	b.n	80081c2 <memchr+0x32>
 800821e:	4610      	mov	r0, r2
 8008220:	e7e1      	b.n	80081e6 <memchr+0x56>
 8008222:	bf00      	nop

08008224 <memmove>:
 8008224:	4288      	cmp	r0, r1
 8008226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008228:	d90d      	bls.n	8008246 <memmove+0x22>
 800822a:	188b      	adds	r3, r1, r2
 800822c:	4298      	cmp	r0, r3
 800822e:	d20a      	bcs.n	8008246 <memmove+0x22>
 8008230:	1881      	adds	r1, r0, r2
 8008232:	2a00      	cmp	r2, #0
 8008234:	d054      	beq.n	80082e0 <memmove+0xbc>
 8008236:	1a9a      	subs	r2, r3, r2
 8008238:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800823c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008240:	4293      	cmp	r3, r2
 8008242:	d1f9      	bne.n	8008238 <memmove+0x14>
 8008244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008246:	2a0f      	cmp	r2, #15
 8008248:	d948      	bls.n	80082dc <memmove+0xb8>
 800824a:	ea40 0301 	orr.w	r3, r0, r1
 800824e:	079b      	lsls	r3, r3, #30
 8008250:	d147      	bne.n	80082e2 <memmove+0xbe>
 8008252:	f100 0410 	add.w	r4, r0, #16
 8008256:	f101 0310 	add.w	r3, r1, #16
 800825a:	4615      	mov	r5, r2
 800825c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8008260:	f844 6c10 	str.w	r6, [r4, #-16]
 8008264:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8008268:	f844 6c0c 	str.w	r6, [r4, #-12]
 800826c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8008270:	f844 6c08 	str.w	r6, [r4, #-8]
 8008274:	3d10      	subs	r5, #16
 8008276:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800827a:	f844 6c04 	str.w	r6, [r4, #-4]
 800827e:	2d0f      	cmp	r5, #15
 8008280:	f103 0310 	add.w	r3, r3, #16
 8008284:	f104 0410 	add.w	r4, r4, #16
 8008288:	d8e8      	bhi.n	800825c <memmove+0x38>
 800828a:	f1a2 0310 	sub.w	r3, r2, #16
 800828e:	f023 030f 	bic.w	r3, r3, #15
 8008292:	f002 0e0f 	and.w	lr, r2, #15
 8008296:	3310      	adds	r3, #16
 8008298:	f1be 0f03 	cmp.w	lr, #3
 800829c:	4419      	add	r1, r3
 800829e:	4403      	add	r3, r0
 80082a0:	d921      	bls.n	80082e6 <memmove+0xc2>
 80082a2:	1f1e      	subs	r6, r3, #4
 80082a4:	460d      	mov	r5, r1
 80082a6:	4674      	mov	r4, lr
 80082a8:	3c04      	subs	r4, #4
 80082aa:	f855 7b04 	ldr.w	r7, [r5], #4
 80082ae:	f846 7f04 	str.w	r7, [r6, #4]!
 80082b2:	2c03      	cmp	r4, #3
 80082b4:	d8f8      	bhi.n	80082a8 <memmove+0x84>
 80082b6:	f1ae 0404 	sub.w	r4, lr, #4
 80082ba:	f024 0403 	bic.w	r4, r4, #3
 80082be:	3404      	adds	r4, #4
 80082c0:	4423      	add	r3, r4
 80082c2:	4421      	add	r1, r4
 80082c4:	f002 0203 	and.w	r2, r2, #3
 80082c8:	b152      	cbz	r2, 80082e0 <memmove+0xbc>
 80082ca:	3b01      	subs	r3, #1
 80082cc:	440a      	add	r2, r1
 80082ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082d6:	4291      	cmp	r1, r2
 80082d8:	d1f9      	bne.n	80082ce <memmove+0xaa>
 80082da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082dc:	4603      	mov	r3, r0
 80082de:	e7f3      	b.n	80082c8 <memmove+0xa4>
 80082e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e2:	4603      	mov	r3, r0
 80082e4:	e7f1      	b.n	80082ca <memmove+0xa6>
 80082e6:	4672      	mov	r2, lr
 80082e8:	e7ee      	b.n	80082c8 <memmove+0xa4>
 80082ea:	bf00      	nop

080082ec <__malloc_lock>:
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop

080082f0 <__malloc_unlock>:
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop

080082f4 <_Balloc>:
 80082f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80082f6:	b570      	push	{r4, r5, r6, lr}
 80082f8:	4605      	mov	r5, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	b14b      	cbz	r3, 8008312 <_Balloc+0x1e>
 80082fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008302:	b180      	cbz	r0, 8008326 <_Balloc+0x32>
 8008304:	6802      	ldr	r2, [r0, #0]
 8008306:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800830a:	2300      	movs	r3, #0
 800830c:	6103      	str	r3, [r0, #16]
 800830e:	60c3      	str	r3, [r0, #12]
 8008310:	bd70      	pop	{r4, r5, r6, pc}
 8008312:	2104      	movs	r1, #4
 8008314:	2221      	movs	r2, #33	; 0x21
 8008316:	f000 fe11 	bl	8008f3c <_calloc_r>
 800831a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800831c:	4603      	mov	r3, r0
 800831e:	2800      	cmp	r0, #0
 8008320:	d1ed      	bne.n	80082fe <_Balloc+0xa>
 8008322:	2000      	movs	r0, #0
 8008324:	bd70      	pop	{r4, r5, r6, pc}
 8008326:	2101      	movs	r1, #1
 8008328:	fa01 f604 	lsl.w	r6, r1, r4
 800832c:	1d72      	adds	r2, r6, #5
 800832e:	4628      	mov	r0, r5
 8008330:	0092      	lsls	r2, r2, #2
 8008332:	f000 fe03 	bl	8008f3c <_calloc_r>
 8008336:	2800      	cmp	r0, #0
 8008338:	d0f3      	beq.n	8008322 <_Balloc+0x2e>
 800833a:	6044      	str	r4, [r0, #4]
 800833c:	6086      	str	r6, [r0, #8]
 800833e:	e7e4      	b.n	800830a <_Balloc+0x16>

08008340 <_Bfree>:
 8008340:	b131      	cbz	r1, 8008350 <_Bfree+0x10>
 8008342:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008344:	684a      	ldr	r2, [r1, #4]
 8008346:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800834a:	6008      	str	r0, [r1, #0]
 800834c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop

08008354 <__multadd>:
 8008354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008356:	690c      	ldr	r4, [r1, #16]
 8008358:	b083      	sub	sp, #12
 800835a:	460d      	mov	r5, r1
 800835c:	4606      	mov	r6, r0
 800835e:	f101 0e14 	add.w	lr, r1, #20
 8008362:	2700      	movs	r7, #0
 8008364:	f8de 1000 	ldr.w	r1, [lr]
 8008368:	b288      	uxth	r0, r1
 800836a:	0c09      	lsrs	r1, r1, #16
 800836c:	fb02 3300 	mla	r3, r2, r0, r3
 8008370:	fb02 f101 	mul.w	r1, r2, r1
 8008374:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8008378:	3701      	adds	r7, #1
 800837a:	b29b      	uxth	r3, r3
 800837c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8008380:	42bc      	cmp	r4, r7
 8008382:	f84e 3b04 	str.w	r3, [lr], #4
 8008386:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800838a:	dceb      	bgt.n	8008364 <__multadd+0x10>
 800838c:	b13b      	cbz	r3, 800839e <__multadd+0x4a>
 800838e:	68aa      	ldr	r2, [r5, #8]
 8008390:	4294      	cmp	r4, r2
 8008392:	da07      	bge.n	80083a4 <__multadd+0x50>
 8008394:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8008398:	3401      	adds	r4, #1
 800839a:	6153      	str	r3, [r2, #20]
 800839c:	612c      	str	r4, [r5, #16]
 800839e:	4628      	mov	r0, r5
 80083a0:	b003      	add	sp, #12
 80083a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a4:	6869      	ldr	r1, [r5, #4]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	3101      	adds	r1, #1
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff ffa2 	bl	80082f4 <_Balloc>
 80083b0:	692a      	ldr	r2, [r5, #16]
 80083b2:	3202      	adds	r2, #2
 80083b4:	f105 010c 	add.w	r1, r5, #12
 80083b8:	4607      	mov	r7, r0
 80083ba:	0092      	lsls	r2, r2, #2
 80083bc:	300c      	adds	r0, #12
 80083be:	f7f8 fbdd 	bl	8000b7c <memcpy>
 80083c2:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80083c4:	6869      	ldr	r1, [r5, #4]
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80083cc:	6028      	str	r0, [r5, #0]
 80083ce:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80083d2:	463d      	mov	r5, r7
 80083d4:	e7de      	b.n	8008394 <__multadd+0x40>
 80083d6:	bf00      	nop

080083d8 <__hi0bits>:
 80083d8:	0c03      	lsrs	r3, r0, #16
 80083da:	041b      	lsls	r3, r3, #16
 80083dc:	b9b3      	cbnz	r3, 800840c <__hi0bits+0x34>
 80083de:	0400      	lsls	r0, r0, #16
 80083e0:	2310      	movs	r3, #16
 80083e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80083e6:	bf04      	itt	eq
 80083e8:	0200      	lsleq	r0, r0, #8
 80083ea:	3308      	addeq	r3, #8
 80083ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80083f0:	bf04      	itt	eq
 80083f2:	0100      	lsleq	r0, r0, #4
 80083f4:	3304      	addeq	r3, #4
 80083f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80083fa:	bf04      	itt	eq
 80083fc:	0080      	lsleq	r0, r0, #2
 80083fe:	3302      	addeq	r3, #2
 8008400:	2800      	cmp	r0, #0
 8008402:	db07      	blt.n	8008414 <__hi0bits+0x3c>
 8008404:	0042      	lsls	r2, r0, #1
 8008406:	d403      	bmi.n	8008410 <__hi0bits+0x38>
 8008408:	2020      	movs	r0, #32
 800840a:	4770      	bx	lr
 800840c:	2300      	movs	r3, #0
 800840e:	e7e8      	b.n	80083e2 <__hi0bits+0xa>
 8008410:	1c58      	adds	r0, r3, #1
 8008412:	4770      	bx	lr
 8008414:	4618      	mov	r0, r3
 8008416:	4770      	bx	lr

08008418 <__lo0bits>:
 8008418:	6803      	ldr	r3, [r0, #0]
 800841a:	f013 0207 	ands.w	r2, r3, #7
 800841e:	d007      	beq.n	8008430 <__lo0bits+0x18>
 8008420:	07d9      	lsls	r1, r3, #31
 8008422:	d420      	bmi.n	8008466 <__lo0bits+0x4e>
 8008424:	079a      	lsls	r2, r3, #30
 8008426:	d420      	bmi.n	800846a <__lo0bits+0x52>
 8008428:	089b      	lsrs	r3, r3, #2
 800842a:	6003      	str	r3, [r0, #0]
 800842c:	2002      	movs	r0, #2
 800842e:	4770      	bx	lr
 8008430:	b299      	uxth	r1, r3
 8008432:	b909      	cbnz	r1, 8008438 <__lo0bits+0x20>
 8008434:	0c1b      	lsrs	r3, r3, #16
 8008436:	2210      	movs	r2, #16
 8008438:	f013 0fff 	tst.w	r3, #255	; 0xff
 800843c:	bf04      	itt	eq
 800843e:	0a1b      	lsreq	r3, r3, #8
 8008440:	3208      	addeq	r2, #8
 8008442:	0719      	lsls	r1, r3, #28
 8008444:	bf04      	itt	eq
 8008446:	091b      	lsreq	r3, r3, #4
 8008448:	3204      	addeq	r2, #4
 800844a:	0799      	lsls	r1, r3, #30
 800844c:	bf04      	itt	eq
 800844e:	089b      	lsreq	r3, r3, #2
 8008450:	3202      	addeq	r2, #2
 8008452:	07d9      	lsls	r1, r3, #31
 8008454:	d404      	bmi.n	8008460 <__lo0bits+0x48>
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	d101      	bne.n	800845e <__lo0bits+0x46>
 800845a:	2020      	movs	r0, #32
 800845c:	4770      	bx	lr
 800845e:	3201      	adds	r2, #1
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	4610      	mov	r0, r2
 8008464:	4770      	bx	lr
 8008466:	2000      	movs	r0, #0
 8008468:	4770      	bx	lr
 800846a:	085b      	lsrs	r3, r3, #1
 800846c:	6003      	str	r3, [r0, #0]
 800846e:	2001      	movs	r0, #1
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop

08008474 <__i2b>:
 8008474:	b510      	push	{r4, lr}
 8008476:	460c      	mov	r4, r1
 8008478:	2101      	movs	r1, #1
 800847a:	f7ff ff3b 	bl	80082f4 <_Balloc>
 800847e:	2201      	movs	r2, #1
 8008480:	6144      	str	r4, [r0, #20]
 8008482:	6102      	str	r2, [r0, #16]
 8008484:	bd10      	pop	{r4, pc}
 8008486:	bf00      	nop

08008488 <__multiply>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	690f      	ldr	r7, [r1, #16]
 800848e:	6916      	ldr	r6, [r2, #16]
 8008490:	42b7      	cmp	r7, r6
 8008492:	b083      	sub	sp, #12
 8008494:	460d      	mov	r5, r1
 8008496:	4614      	mov	r4, r2
 8008498:	f2c0 808d 	blt.w	80085b6 <__multiply+0x12e>
 800849c:	4633      	mov	r3, r6
 800849e:	463e      	mov	r6, r7
 80084a0:	461f      	mov	r7, r3
 80084a2:	68ab      	ldr	r3, [r5, #8]
 80084a4:	6869      	ldr	r1, [r5, #4]
 80084a6:	eb06 0807 	add.w	r8, r6, r7
 80084aa:	4598      	cmp	r8, r3
 80084ac:	bfc8      	it	gt
 80084ae:	3101      	addgt	r1, #1
 80084b0:	f7ff ff20 	bl	80082f4 <_Balloc>
 80084b4:	f100 0c14 	add.w	ip, r0, #20
 80084b8:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80084bc:	45cc      	cmp	ip, r9
 80084be:	9000      	str	r0, [sp, #0]
 80084c0:	d205      	bcs.n	80084ce <__multiply+0x46>
 80084c2:	4663      	mov	r3, ip
 80084c4:	2100      	movs	r1, #0
 80084c6:	f843 1b04 	str.w	r1, [r3], #4
 80084ca:	4599      	cmp	r9, r3
 80084cc:	d8fb      	bhi.n	80084c6 <__multiply+0x3e>
 80084ce:	f104 0214 	add.w	r2, r4, #20
 80084d2:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80084d6:	f105 0314 	add.w	r3, r5, #20
 80084da:	4552      	cmp	r2, sl
 80084dc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80084e0:	d254      	bcs.n	800858c <__multiply+0x104>
 80084e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80084e6:	4699      	mov	r9, r3
 80084e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80084ec:	fa1f fb83 	uxth.w	fp, r3
 80084f0:	f1bb 0f00 	cmp.w	fp, #0
 80084f4:	d020      	beq.n	8008538 <__multiply+0xb0>
 80084f6:	2000      	movs	r0, #0
 80084f8:	464f      	mov	r7, r9
 80084fa:	4666      	mov	r6, ip
 80084fc:	4605      	mov	r5, r0
 80084fe:	e000      	b.n	8008502 <__multiply+0x7a>
 8008500:	461e      	mov	r6, r3
 8008502:	f857 4b04 	ldr.w	r4, [r7], #4
 8008506:	6830      	ldr	r0, [r6, #0]
 8008508:	b2a1      	uxth	r1, r4
 800850a:	b283      	uxth	r3, r0
 800850c:	fb0b 3101 	mla	r1, fp, r1, r3
 8008510:	0c24      	lsrs	r4, r4, #16
 8008512:	0c00      	lsrs	r0, r0, #16
 8008514:	194b      	adds	r3, r1, r5
 8008516:	fb0b 0004 	mla	r0, fp, r4, r0
 800851a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800851e:	b299      	uxth	r1, r3
 8008520:	4633      	mov	r3, r6
 8008522:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008526:	45be      	cmp	lr, r7
 8008528:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800852c:	f843 1b04 	str.w	r1, [r3], #4
 8008530:	d8e6      	bhi.n	8008500 <__multiply+0x78>
 8008532:	6075      	str	r5, [r6, #4]
 8008534:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008538:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800853c:	d020      	beq.n	8008580 <__multiply+0xf8>
 800853e:	f8dc 3000 	ldr.w	r3, [ip]
 8008542:	4667      	mov	r7, ip
 8008544:	4618      	mov	r0, r3
 8008546:	464d      	mov	r5, r9
 8008548:	2100      	movs	r1, #0
 800854a:	e000      	b.n	800854e <__multiply+0xc6>
 800854c:	4637      	mov	r7, r6
 800854e:	882c      	ldrh	r4, [r5, #0]
 8008550:	0c00      	lsrs	r0, r0, #16
 8008552:	fb0b 0004 	mla	r0, fp, r4, r0
 8008556:	4401      	add	r1, r0
 8008558:	b29c      	uxth	r4, r3
 800855a:	463e      	mov	r6, r7
 800855c:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008560:	f846 3b04 	str.w	r3, [r6], #4
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f855 4b04 	ldr.w	r4, [r5], #4
 800856a:	b283      	uxth	r3, r0
 800856c:	0c24      	lsrs	r4, r4, #16
 800856e:	fb0b 3404 	mla	r4, fp, r4, r3
 8008572:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8008576:	45ae      	cmp	lr, r5
 8008578:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800857c:	d8e6      	bhi.n	800854c <__multiply+0xc4>
 800857e:	607b      	str	r3, [r7, #4]
 8008580:	4592      	cmp	sl, r2
 8008582:	f10c 0c04 	add.w	ip, ip, #4
 8008586:	d8af      	bhi.n	80084e8 <__multiply+0x60>
 8008588:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800858c:	f1b8 0f00 	cmp.w	r8, #0
 8008590:	dd0b      	ble.n	80085aa <__multiply+0x122>
 8008592:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008596:	f1a9 0904 	sub.w	r9, r9, #4
 800859a:	b11b      	cbz	r3, 80085a4 <__multiply+0x11c>
 800859c:	e005      	b.n	80085aa <__multiply+0x122>
 800859e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80085a2:	b913      	cbnz	r3, 80085aa <__multiply+0x122>
 80085a4:	f1b8 0801 	subs.w	r8, r8, #1
 80085a8:	d1f9      	bne.n	800859e <__multiply+0x116>
 80085aa:	9800      	ldr	r0, [sp, #0]
 80085ac:	f8c0 8010 	str.w	r8, [r0, #16]
 80085b0:	b003      	add	sp, #12
 80085b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b6:	4615      	mov	r5, r2
 80085b8:	460c      	mov	r4, r1
 80085ba:	e772      	b.n	80084a2 <__multiply+0x1a>

080085bc <__pow5mult>:
 80085bc:	f012 0303 	ands.w	r3, r2, #3
 80085c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c4:	4614      	mov	r4, r2
 80085c6:	4607      	mov	r7, r0
 80085c8:	460e      	mov	r6, r1
 80085ca:	d12d      	bne.n	8008628 <__pow5mult+0x6c>
 80085cc:	10a4      	asrs	r4, r4, #2
 80085ce:	d01c      	beq.n	800860a <__pow5mult+0x4e>
 80085d0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80085d2:	b395      	cbz	r5, 800863a <__pow5mult+0x7e>
 80085d4:	07e3      	lsls	r3, r4, #31
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	d406      	bmi.n	80085ea <__pow5mult+0x2e>
 80085dc:	1064      	asrs	r4, r4, #1
 80085de:	d014      	beq.n	800860a <__pow5mult+0x4e>
 80085e0:	6828      	ldr	r0, [r5, #0]
 80085e2:	b1a8      	cbz	r0, 8008610 <__pow5mult+0x54>
 80085e4:	4605      	mov	r5, r0
 80085e6:	07e3      	lsls	r3, r4, #31
 80085e8:	d5f8      	bpl.n	80085dc <__pow5mult+0x20>
 80085ea:	4638      	mov	r0, r7
 80085ec:	4631      	mov	r1, r6
 80085ee:	462a      	mov	r2, r5
 80085f0:	f7ff ff4a 	bl	8008488 <__multiply>
 80085f4:	b1b6      	cbz	r6, 8008624 <__pow5mult+0x68>
 80085f6:	6872      	ldr	r2, [r6, #4]
 80085f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085fa:	1064      	asrs	r4, r4, #1
 80085fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008600:	6031      	str	r1, [r6, #0]
 8008602:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008606:	4606      	mov	r6, r0
 8008608:	d1ea      	bne.n	80085e0 <__pow5mult+0x24>
 800860a:	4630      	mov	r0, r6
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	4629      	mov	r1, r5
 8008612:	462a      	mov	r2, r5
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ff37 	bl	8008488 <__multiply>
 800861a:	6028      	str	r0, [r5, #0]
 800861c:	f8c0 8000 	str.w	r8, [r0]
 8008620:	4605      	mov	r5, r0
 8008622:	e7e0      	b.n	80085e6 <__pow5mult+0x2a>
 8008624:	4606      	mov	r6, r0
 8008626:	e7d9      	b.n	80085dc <__pow5mult+0x20>
 8008628:	1e5a      	subs	r2, r3, #1
 800862a:	4d0b      	ldr	r5, [pc, #44]	; (8008658 <__pow5mult+0x9c>)
 800862c:	2300      	movs	r3, #0
 800862e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008632:	f7ff fe8f 	bl	8008354 <__multadd>
 8008636:	4606      	mov	r6, r0
 8008638:	e7c8      	b.n	80085cc <__pow5mult+0x10>
 800863a:	2101      	movs	r1, #1
 800863c:	4638      	mov	r0, r7
 800863e:	f7ff fe59 	bl	80082f4 <_Balloc>
 8008642:	f240 2171 	movw	r1, #625	; 0x271
 8008646:	2201      	movs	r2, #1
 8008648:	2300      	movs	r3, #0
 800864a:	6141      	str	r1, [r0, #20]
 800864c:	6102      	str	r2, [r0, #16]
 800864e:	4605      	mov	r5, r0
 8008650:	64b8      	str	r0, [r7, #72]	; 0x48
 8008652:	6003      	str	r3, [r0, #0]
 8008654:	e7be      	b.n	80085d4 <__pow5mult+0x18>
 8008656:	bf00      	nop
 8008658:	08018f20 	.word	0x08018f20

0800865c <__lshift>:
 800865c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	690f      	ldr	r7, [r1, #16]
 8008662:	688b      	ldr	r3, [r1, #8]
 8008664:	ea4f 1962 	mov.w	r9, r2, asr #5
 8008668:	444f      	add	r7, r9
 800866a:	1c7d      	adds	r5, r7, #1
 800866c:	429d      	cmp	r5, r3
 800866e:	460e      	mov	r6, r1
 8008670:	4614      	mov	r4, r2
 8008672:	6849      	ldr	r1, [r1, #4]
 8008674:	4680      	mov	r8, r0
 8008676:	dd04      	ble.n	8008682 <__lshift+0x26>
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	429d      	cmp	r5, r3
 800867c:	f101 0101 	add.w	r1, r1, #1
 8008680:	dcfa      	bgt.n	8008678 <__lshift+0x1c>
 8008682:	4640      	mov	r0, r8
 8008684:	f7ff fe36 	bl	80082f4 <_Balloc>
 8008688:	f1b9 0f00 	cmp.w	r9, #0
 800868c:	f100 0114 	add.w	r1, r0, #20
 8008690:	dd09      	ble.n	80086a6 <__lshift+0x4a>
 8008692:	2300      	movs	r3, #0
 8008694:	469e      	mov	lr, r3
 8008696:	460a      	mov	r2, r1
 8008698:	3301      	adds	r3, #1
 800869a:	454b      	cmp	r3, r9
 800869c:	f842 eb04 	str.w	lr, [r2], #4
 80086a0:	d1fa      	bne.n	8008698 <__lshift+0x3c>
 80086a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80086a6:	6932      	ldr	r2, [r6, #16]
 80086a8:	f106 0314 	add.w	r3, r6, #20
 80086ac:	f014 0c1f 	ands.w	ip, r4, #31
 80086b0:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 80086b4:	d01f      	beq.n	80086f6 <__lshift+0x9a>
 80086b6:	f1cc 0920 	rsb	r9, ip, #32
 80086ba:	2200      	movs	r2, #0
 80086bc:	681c      	ldr	r4, [r3, #0]
 80086be:	fa04 f40c 	lsl.w	r4, r4, ip
 80086c2:	4314      	orrs	r4, r2
 80086c4:	468a      	mov	sl, r1
 80086c6:	f841 4b04 	str.w	r4, [r1], #4
 80086ca:	f853 4b04 	ldr.w	r4, [r3], #4
 80086ce:	459e      	cmp	lr, r3
 80086d0:	fa24 f209 	lsr.w	r2, r4, r9
 80086d4:	d8f2      	bhi.n	80086bc <__lshift+0x60>
 80086d6:	f8ca 2004 	str.w	r2, [sl, #4]
 80086da:	b102      	cbz	r2, 80086de <__lshift+0x82>
 80086dc:	1cbd      	adds	r5, r7, #2
 80086de:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80086e2:	6872      	ldr	r2, [r6, #4]
 80086e4:	3d01      	subs	r5, #1
 80086e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086ea:	6105      	str	r5, [r0, #16]
 80086ec:	6031      	str	r1, [r6, #0]
 80086ee:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80086f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f6:	3904      	subs	r1, #4
 80086f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008700:	459e      	cmp	lr, r3
 8008702:	d8f9      	bhi.n	80086f8 <__lshift+0x9c>
 8008704:	e7eb      	b.n	80086de <__lshift+0x82>
 8008706:	bf00      	nop

08008708 <__mcmp>:
 8008708:	6902      	ldr	r2, [r0, #16]
 800870a:	690b      	ldr	r3, [r1, #16]
 800870c:	1ad2      	subs	r2, r2, r3
 800870e:	d113      	bne.n	8008738 <__mcmp+0x30>
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	3014      	adds	r0, #20
 8008714:	3114      	adds	r1, #20
 8008716:	4419      	add	r1, r3
 8008718:	b410      	push	{r4}
 800871a:	4403      	add	r3, r0
 800871c:	e001      	b.n	8008722 <__mcmp+0x1a>
 800871e:	4298      	cmp	r0, r3
 8008720:	d20c      	bcs.n	800873c <__mcmp+0x34>
 8008722:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008726:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800872a:	4294      	cmp	r4, r2
 800872c:	d0f7      	beq.n	800871e <__mcmp+0x16>
 800872e:	d309      	bcc.n	8008744 <__mcmp+0x3c>
 8008730:	2001      	movs	r0, #1
 8008732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	4610      	mov	r0, r2
 800873a:	4770      	bx	lr
 800873c:	2000      	movs	r0, #0
 800873e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop

08008750 <__mdiff>:
 8008750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008754:	460e      	mov	r6, r1
 8008756:	4605      	mov	r5, r0
 8008758:	4611      	mov	r1, r2
 800875a:	4630      	mov	r0, r6
 800875c:	4614      	mov	r4, r2
 800875e:	f7ff ffd3 	bl	8008708 <__mcmp>
 8008762:	1e07      	subs	r7, r0, #0
 8008764:	d054      	beq.n	8008810 <__mdiff+0xc0>
 8008766:	db4d      	blt.n	8008804 <__mdiff+0xb4>
 8008768:	f04f 0800 	mov.w	r8, #0
 800876c:	6871      	ldr	r1, [r6, #4]
 800876e:	4628      	mov	r0, r5
 8008770:	f7ff fdc0 	bl	80082f4 <_Balloc>
 8008774:	6937      	ldr	r7, [r6, #16]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	f8c0 800c 	str.w	r8, [r0, #12]
 800877c:	3614      	adds	r6, #20
 800877e:	f104 0214 	add.w	r2, r4, #20
 8008782:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8008786:	f100 0514 	add.w	r5, r0, #20
 800878a:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 800878e:	2300      	movs	r3, #0
 8008790:	f856 8b04 	ldr.w	r8, [r6], #4
 8008794:	f852 4b04 	ldr.w	r4, [r2], #4
 8008798:	fa13 f388 	uxtah	r3, r3, r8
 800879c:	b2a1      	uxth	r1, r4
 800879e:	0c24      	lsrs	r4, r4, #16
 80087a0:	1a59      	subs	r1, r3, r1
 80087a2:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 80087a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80087aa:	b289      	uxth	r1, r1
 80087ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80087b0:	4594      	cmp	ip, r2
 80087b2:	f845 1b04 	str.w	r1, [r5], #4
 80087b6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80087ba:	4634      	mov	r4, r6
 80087bc:	d8e8      	bhi.n	8008790 <__mdiff+0x40>
 80087be:	45b6      	cmp	lr, r6
 80087c0:	46ac      	mov	ip, r5
 80087c2:	d915      	bls.n	80087f0 <__mdiff+0xa0>
 80087c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80087c8:	fa13 f182 	uxtah	r1, r3, r2
 80087cc:	0c13      	lsrs	r3, r2, #16
 80087ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80087d2:	b289      	uxth	r1, r1
 80087d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80087d8:	45a6      	cmp	lr, r4
 80087da:	f845 1b04 	str.w	r1, [r5], #4
 80087de:	ea4f 4323 	mov.w	r3, r3, asr #16
 80087e2:	d8ef      	bhi.n	80087c4 <__mdiff+0x74>
 80087e4:	43f6      	mvns	r6, r6
 80087e6:	4476      	add	r6, lr
 80087e8:	f026 0503 	bic.w	r5, r6, #3
 80087ec:	3504      	adds	r5, #4
 80087ee:	4465      	add	r5, ip
 80087f0:	3d04      	subs	r5, #4
 80087f2:	b921      	cbnz	r1, 80087fe <__mdiff+0xae>
 80087f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80087f8:	3f01      	subs	r7, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0fa      	beq.n	80087f4 <__mdiff+0xa4>
 80087fe:	6107      	str	r7, [r0, #16]
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	4633      	mov	r3, r6
 8008806:	f04f 0801 	mov.w	r8, #1
 800880a:	4626      	mov	r6, r4
 800880c:	461c      	mov	r4, r3
 800880e:	e7ad      	b.n	800876c <__mdiff+0x1c>
 8008810:	4628      	mov	r0, r5
 8008812:	4639      	mov	r1, r7
 8008814:	f7ff fd6e 	bl	80082f4 <_Balloc>
 8008818:	2301      	movs	r3, #1
 800881a:	6147      	str	r7, [r0, #20]
 800881c:	6103      	str	r3, [r0, #16]
 800881e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008822:	bf00      	nop

08008824 <__d2b>:
 8008824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008828:	ec57 6b10 	vmov	r6, r7, d0
 800882c:	b083      	sub	sp, #12
 800882e:	4688      	mov	r8, r1
 8008830:	2101      	movs	r1, #1
 8008832:	463c      	mov	r4, r7
 8008834:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008838:	4617      	mov	r7, r2
 800883a:	f7ff fd5b 	bl	80082f4 <_Balloc>
 800883e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008842:	4681      	mov	r9, r0
 8008844:	b10d      	cbz	r5, 800884a <__d2b+0x26>
 8008846:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800884a:	9401      	str	r4, [sp, #4]
 800884c:	b31e      	cbz	r6, 8008896 <__d2b+0x72>
 800884e:	a802      	add	r0, sp, #8
 8008850:	f840 6d08 	str.w	r6, [r0, #-8]!
 8008854:	f7ff fde0 	bl	8008418 <__lo0bits>
 8008858:	2800      	cmp	r0, #0
 800885a:	d134      	bne.n	80088c6 <__d2b+0xa2>
 800885c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008860:	f8c9 2014 	str.w	r2, [r9, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	bf14      	ite	ne
 8008868:	2402      	movne	r4, #2
 800886a:	2401      	moveq	r4, #1
 800886c:	f8c9 3018 	str.w	r3, [r9, #24]
 8008870:	f8c9 4010 	str.w	r4, [r9, #16]
 8008874:	b9dd      	cbnz	r5, 80088ae <__d2b+0x8a>
 8008876:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 800887a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800887e:	f8c8 0000 	str.w	r0, [r8]
 8008882:	6918      	ldr	r0, [r3, #16]
 8008884:	f7ff fda8 	bl	80083d8 <__hi0bits>
 8008888:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800888c:	6038      	str	r0, [r7, #0]
 800888e:	4648      	mov	r0, r9
 8008890:	b003      	add	sp, #12
 8008892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008896:	a801      	add	r0, sp, #4
 8008898:	f7ff fdbe 	bl	8008418 <__lo0bits>
 800889c:	2401      	movs	r4, #1
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	f8c9 3014 	str.w	r3, [r9, #20]
 80088a4:	3020      	adds	r0, #32
 80088a6:	f8c9 4010 	str.w	r4, [r9, #16]
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	d0e3      	beq.n	8008876 <__d2b+0x52>
 80088ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088b2:	4405      	add	r5, r0
 80088b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088b8:	f8c8 5000 	str.w	r5, [r8]
 80088bc:	6038      	str	r0, [r7, #0]
 80088be:	4648      	mov	r0, r9
 80088c0:	b003      	add	sp, #12
 80088c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088c6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80088ca:	f1c0 0120 	rsb	r1, r0, #32
 80088ce:	fa03 f101 	lsl.w	r1, r3, r1
 80088d2:	430a      	orrs	r2, r1
 80088d4:	40c3      	lsrs	r3, r0
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	f8c9 2014 	str.w	r2, [r9, #20]
 80088dc:	e7c2      	b.n	8008864 <__d2b+0x40>
 80088de:	bf00      	nop

080088e0 <_putc_r>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	460d      	mov	r5, r1
 80088e4:	4614      	mov	r4, r2
 80088e6:	4606      	mov	r6, r0
 80088e8:	b108      	cbz	r0, 80088ee <_putc_r+0xe>
 80088ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80088ec:	b1d3      	cbz	r3, 8008924 <_putc_r+0x44>
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	60a3      	str	r3, [r4, #8]
 80088f6:	db06      	blt.n	8008906 <_putc_r+0x26>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	701d      	strb	r5, [r3, #0]
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	6022      	str	r2, [r4, #0]
 8008902:	7818      	ldrb	r0, [r3, #0]
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	69a2      	ldr	r2, [r4, #24]
 8008908:	4293      	cmp	r3, r2
 800890a:	db0e      	blt.n	800892a <_putc_r+0x4a>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	701d      	strb	r5, [r3, #0]
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	7819      	ldrb	r1, [r3, #0]
 8008914:	290a      	cmp	r1, #10
 8008916:	d1f2      	bne.n	80088fe <_putc_r+0x1e>
 8008918:	4630      	mov	r0, r6
 800891a:	4622      	mov	r2, r4
 800891c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008920:	f000 bab8 	b.w	8008e94 <__swbuf_r>
 8008924:	f7fe fe36 	bl	8007594 <__sinit>
 8008928:	e7e1      	b.n	80088ee <_putc_r+0xe>
 800892a:	4630      	mov	r0, r6
 800892c:	4629      	mov	r1, r5
 800892e:	4622      	mov	r2, r4
 8008930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008934:	f000 baae 	b.w	8008e94 <__swbuf_r>

08008938 <_realloc_r>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	4617      	mov	r7, r2
 800893e:	b083      	sub	sp, #12
 8008940:	460e      	mov	r6, r1
 8008942:	2900      	cmp	r1, #0
 8008944:	f000 80e7 	beq.w	8008b16 <_realloc_r+0x1de>
 8008948:	4681      	mov	r9, r0
 800894a:	f107 050b 	add.w	r5, r7, #11
 800894e:	f7ff fccd 	bl	80082ec <__malloc_lock>
 8008952:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008956:	2d16      	cmp	r5, #22
 8008958:	f023 0403 	bic.w	r4, r3, #3
 800895c:	f1a6 0808 	sub.w	r8, r6, #8
 8008960:	d84c      	bhi.n	80089fc <_realloc_r+0xc4>
 8008962:	2210      	movs	r2, #16
 8008964:	4615      	mov	r5, r2
 8008966:	42af      	cmp	r7, r5
 8008968:	d84d      	bhi.n	8008a06 <_realloc_r+0xce>
 800896a:	4294      	cmp	r4, r2
 800896c:	f280 8084 	bge.w	8008a78 <_realloc_r+0x140>
 8008970:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8008d20 <_realloc_r+0x3e8>
 8008974:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008978:	eb08 0104 	add.w	r1, r8, r4
 800897c:	4288      	cmp	r0, r1
 800897e:	f000 80d6 	beq.w	8008b2e <_realloc_r+0x1f6>
 8008982:	6848      	ldr	r0, [r1, #4]
 8008984:	f020 0e01 	bic.w	lr, r0, #1
 8008988:	448e      	add	lr, r1
 800898a:	f8de e004 	ldr.w	lr, [lr, #4]
 800898e:	f01e 0f01 	tst.w	lr, #1
 8008992:	d13f      	bne.n	8008a14 <_realloc_r+0xdc>
 8008994:	f020 0003 	bic.w	r0, r0, #3
 8008998:	4420      	add	r0, r4
 800899a:	4290      	cmp	r0, r2
 800899c:	f280 80c1 	bge.w	8008b22 <_realloc_r+0x1ea>
 80089a0:	07db      	lsls	r3, r3, #31
 80089a2:	f100 808f 	bmi.w	8008ac4 <_realloc_r+0x18c>
 80089a6:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80089aa:	ebc3 0a08 	rsb	sl, r3, r8
 80089ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 80089b2:	f023 0303 	bic.w	r3, r3, #3
 80089b6:	eb00 0e03 	add.w	lr, r0, r3
 80089ba:	4596      	cmp	lr, r2
 80089bc:	db34      	blt.n	8008a28 <_realloc_r+0xf0>
 80089be:	68cb      	ldr	r3, [r1, #12]
 80089c0:	688a      	ldr	r2, [r1, #8]
 80089c2:	4657      	mov	r7, sl
 80089c4:	60d3      	str	r3, [r2, #12]
 80089c6:	609a      	str	r2, [r3, #8]
 80089c8:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80089cc:	f8da 300c 	ldr.w	r3, [sl, #12]
 80089d0:	60cb      	str	r3, [r1, #12]
 80089d2:	1f22      	subs	r2, r4, #4
 80089d4:	2a24      	cmp	r2, #36	; 0x24
 80089d6:	6099      	str	r1, [r3, #8]
 80089d8:	f200 8136 	bhi.w	8008c48 <_realloc_r+0x310>
 80089dc:	2a13      	cmp	r2, #19
 80089de:	f240 80fd 	bls.w	8008bdc <_realloc_r+0x2a4>
 80089e2:	6833      	ldr	r3, [r6, #0]
 80089e4:	f8ca 3008 	str.w	r3, [sl, #8]
 80089e8:	6873      	ldr	r3, [r6, #4]
 80089ea:	f8ca 300c 	str.w	r3, [sl, #12]
 80089ee:	2a1b      	cmp	r2, #27
 80089f0:	f200 8140 	bhi.w	8008c74 <_realloc_r+0x33c>
 80089f4:	3608      	adds	r6, #8
 80089f6:	f10a 0310 	add.w	r3, sl, #16
 80089fa:	e0f0      	b.n	8008bde <_realloc_r+0x2a6>
 80089fc:	f025 0507 	bic.w	r5, r5, #7
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	462a      	mov	r2, r5
 8008a04:	daaf      	bge.n	8008966 <_realloc_r+0x2e>
 8008a06:	230c      	movs	r3, #12
 8008a08:	2000      	movs	r0, #0
 8008a0a:	f8c9 3000 	str.w	r3, [r9]
 8008a0e:	b003      	add	sp, #12
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	07d9      	lsls	r1, r3, #31
 8008a16:	d455      	bmi.n	8008ac4 <_realloc_r+0x18c>
 8008a18:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008a1c:	ebc3 0a08 	rsb	sl, r3, r8
 8008a20:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008a24:	f023 0303 	bic.w	r3, r3, #3
 8008a28:	4423      	add	r3, r4
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	db4a      	blt.n	8008ac4 <_realloc_r+0x18c>
 8008a2e:	4657      	mov	r7, sl
 8008a30:	f8da 100c 	ldr.w	r1, [sl, #12]
 8008a34:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8008a38:	1f22      	subs	r2, r4, #4
 8008a3a:	2a24      	cmp	r2, #36	; 0x24
 8008a3c:	60c1      	str	r1, [r0, #12]
 8008a3e:	6088      	str	r0, [r1, #8]
 8008a40:	f200 810e 	bhi.w	8008c60 <_realloc_r+0x328>
 8008a44:	2a13      	cmp	r2, #19
 8008a46:	f240 8109 	bls.w	8008c5c <_realloc_r+0x324>
 8008a4a:	6831      	ldr	r1, [r6, #0]
 8008a4c:	f8ca 1008 	str.w	r1, [sl, #8]
 8008a50:	6871      	ldr	r1, [r6, #4]
 8008a52:	f8ca 100c 	str.w	r1, [sl, #12]
 8008a56:	2a1b      	cmp	r2, #27
 8008a58:	f200 8121 	bhi.w	8008c9e <_realloc_r+0x366>
 8008a5c:	3608      	adds	r6, #8
 8008a5e:	f10a 0210 	add.w	r2, sl, #16
 8008a62:	6831      	ldr	r1, [r6, #0]
 8008a64:	6011      	str	r1, [r2, #0]
 8008a66:	6871      	ldr	r1, [r6, #4]
 8008a68:	6051      	str	r1, [r2, #4]
 8008a6a:	68b1      	ldr	r1, [r6, #8]
 8008a6c:	6091      	str	r1, [r2, #8]
 8008a6e:	461c      	mov	r4, r3
 8008a70:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008a74:	463e      	mov	r6, r7
 8008a76:	46d0      	mov	r8, sl
 8008a78:	1b62      	subs	r2, r4, r5
 8008a7a:	2a0f      	cmp	r2, #15
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	d80e      	bhi.n	8008aa0 <_realloc_r+0x168>
 8008a82:	4323      	orrs	r3, r4
 8008a84:	4444      	add	r4, r8
 8008a86:	f8c8 3004 	str.w	r3, [r8, #4]
 8008a8a:	6863      	ldr	r3, [r4, #4]
 8008a8c:	f043 0301 	orr.w	r3, r3, #1
 8008a90:	6063      	str	r3, [r4, #4]
 8008a92:	4648      	mov	r0, r9
 8008a94:	f7ff fc2c 	bl	80082f0 <__malloc_unlock>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	b003      	add	sp, #12
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	eb08 0105 	add.w	r1, r8, r5
 8008aa4:	431d      	orrs	r5, r3
 8008aa6:	f042 0301 	orr.w	r3, r2, #1
 8008aaa:	440a      	add	r2, r1
 8008aac:	f8c8 5004 	str.w	r5, [r8, #4]
 8008ab0:	604b      	str	r3, [r1, #4]
 8008ab2:	6853      	ldr	r3, [r2, #4]
 8008ab4:	f043 0301 	orr.w	r3, r3, #1
 8008ab8:	3108      	adds	r1, #8
 8008aba:	6053      	str	r3, [r2, #4]
 8008abc:	4648      	mov	r0, r9
 8008abe:	f7fe fdc1 	bl	8007644 <_free_r>
 8008ac2:	e7e6      	b.n	8008a92 <_realloc_r+0x15a>
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4648      	mov	r0, r9
 8008ac8:	f7ff f8d0 	bl	8007c6c <_malloc_r>
 8008acc:	4607      	mov	r7, r0
 8008ace:	b1d8      	cbz	r0, 8008b08 <_realloc_r+0x1d0>
 8008ad0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ad4:	f023 0201 	bic.w	r2, r3, #1
 8008ad8:	4442      	add	r2, r8
 8008ada:	f1a0 0108 	sub.w	r1, r0, #8
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	f000 80ac 	beq.w	8008c3c <_realloc_r+0x304>
 8008ae4:	1f22      	subs	r2, r4, #4
 8008ae6:	2a24      	cmp	r2, #36	; 0x24
 8008ae8:	f200 8099 	bhi.w	8008c1e <_realloc_r+0x2e6>
 8008aec:	2a13      	cmp	r2, #19
 8008aee:	d86a      	bhi.n	8008bc6 <_realloc_r+0x28e>
 8008af0:	4603      	mov	r3, r0
 8008af2:	4632      	mov	r2, r6
 8008af4:	6811      	ldr	r1, [r2, #0]
 8008af6:	6019      	str	r1, [r3, #0]
 8008af8:	6851      	ldr	r1, [r2, #4]
 8008afa:	6059      	str	r1, [r3, #4]
 8008afc:	6892      	ldr	r2, [r2, #8]
 8008afe:	609a      	str	r2, [r3, #8]
 8008b00:	4631      	mov	r1, r6
 8008b02:	4648      	mov	r0, r9
 8008b04:	f7fe fd9e 	bl	8007644 <_free_r>
 8008b08:	4648      	mov	r0, r9
 8008b0a:	f7ff fbf1 	bl	80082f0 <__malloc_unlock>
 8008b0e:	4638      	mov	r0, r7
 8008b10:	b003      	add	sp, #12
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	4611      	mov	r1, r2
 8008b18:	b003      	add	sp, #12
 8008b1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1e:	f7ff b8a5 	b.w	8007c6c <_malloc_r>
 8008b22:	68ca      	ldr	r2, [r1, #12]
 8008b24:	6889      	ldr	r1, [r1, #8]
 8008b26:	4604      	mov	r4, r0
 8008b28:	60ca      	str	r2, [r1, #12]
 8008b2a:	6091      	str	r1, [r2, #8]
 8008b2c:	e7a4      	b.n	8008a78 <_realloc_r+0x140>
 8008b2e:	6841      	ldr	r1, [r0, #4]
 8008b30:	f021 0103 	bic.w	r1, r1, #3
 8008b34:	4421      	add	r1, r4
 8008b36:	f105 0010 	add.w	r0, r5, #16
 8008b3a:	4281      	cmp	r1, r0
 8008b3c:	da5b      	bge.n	8008bf6 <_realloc_r+0x2be>
 8008b3e:	07db      	lsls	r3, r3, #31
 8008b40:	d4c0      	bmi.n	8008ac4 <_realloc_r+0x18c>
 8008b42:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008b46:	ebc3 0a08 	rsb	sl, r3, r8
 8008b4a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	eb01 0c03 	add.w	ip, r1, r3
 8008b56:	4560      	cmp	r0, ip
 8008b58:	f73f af66 	bgt.w	8008a28 <_realloc_r+0xf0>
 8008b5c:	4657      	mov	r7, sl
 8008b5e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008b62:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008b66:	1f22      	subs	r2, r4, #4
 8008b68:	2a24      	cmp	r2, #36	; 0x24
 8008b6a:	60cb      	str	r3, [r1, #12]
 8008b6c:	6099      	str	r1, [r3, #8]
 8008b6e:	f200 80b8 	bhi.w	8008ce2 <_realloc_r+0x3aa>
 8008b72:	2a13      	cmp	r2, #19
 8008b74:	f240 80a9 	bls.w	8008cca <_realloc_r+0x392>
 8008b78:	6833      	ldr	r3, [r6, #0]
 8008b7a:	f8ca 3008 	str.w	r3, [sl, #8]
 8008b7e:	6873      	ldr	r3, [r6, #4]
 8008b80:	f8ca 300c 	str.w	r3, [sl, #12]
 8008b84:	2a1b      	cmp	r2, #27
 8008b86:	f200 80b5 	bhi.w	8008cf4 <_realloc_r+0x3bc>
 8008b8a:	3608      	adds	r6, #8
 8008b8c:	f10a 0310 	add.w	r3, sl, #16
 8008b90:	6832      	ldr	r2, [r6, #0]
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	6872      	ldr	r2, [r6, #4]
 8008b96:	605a      	str	r2, [r3, #4]
 8008b98:	68b2      	ldr	r2, [r6, #8]
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	eb0a 0205 	add.w	r2, sl, r5
 8008ba0:	ebc5 030c 	rsb	r3, r5, ip
 8008ba4:	f043 0301 	orr.w	r3, r3, #1
 8008ba8:	f8cb 2008 	str.w	r2, [fp, #8]
 8008bac:	6053      	str	r3, [r2, #4]
 8008bae:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	431d      	orrs	r5, r3
 8008bb8:	4648      	mov	r0, r9
 8008bba:	f8ca 5004 	str.w	r5, [sl, #4]
 8008bbe:	f7ff fb97 	bl	80082f0 <__malloc_unlock>
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	e769      	b.n	8008a9a <_realloc_r+0x162>
 8008bc6:	6833      	ldr	r3, [r6, #0]
 8008bc8:	6003      	str	r3, [r0, #0]
 8008bca:	6873      	ldr	r3, [r6, #4]
 8008bcc:	6043      	str	r3, [r0, #4]
 8008bce:	2a1b      	cmp	r2, #27
 8008bd0:	d829      	bhi.n	8008c26 <_realloc_r+0x2ee>
 8008bd2:	f100 0308 	add.w	r3, r0, #8
 8008bd6:	f106 0208 	add.w	r2, r6, #8
 8008bda:	e78b      	b.n	8008af4 <_realloc_r+0x1bc>
 8008bdc:	463b      	mov	r3, r7
 8008bde:	6832      	ldr	r2, [r6, #0]
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	6872      	ldr	r2, [r6, #4]
 8008be4:	605a      	str	r2, [r3, #4]
 8008be6:	68b2      	ldr	r2, [r6, #8]
 8008be8:	609a      	str	r2, [r3, #8]
 8008bea:	463e      	mov	r6, r7
 8008bec:	4674      	mov	r4, lr
 8008bee:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008bf2:	46d0      	mov	r8, sl
 8008bf4:	e740      	b.n	8008a78 <_realloc_r+0x140>
 8008bf6:	eb08 0205 	add.w	r2, r8, r5
 8008bfa:	1b4b      	subs	r3, r1, r5
 8008bfc:	f043 0301 	orr.w	r3, r3, #1
 8008c00:	f8cb 2008 	str.w	r2, [fp, #8]
 8008c04:	6053      	str	r3, [r2, #4]
 8008c06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	431d      	orrs	r5, r3
 8008c10:	4648      	mov	r0, r9
 8008c12:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c16:	f7ff fb6b 	bl	80082f0 <__malloc_unlock>
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	e73d      	b.n	8008a9a <_realloc_r+0x162>
 8008c1e:	4631      	mov	r1, r6
 8008c20:	f7ff fb00 	bl	8008224 <memmove>
 8008c24:	e76c      	b.n	8008b00 <_realloc_r+0x1c8>
 8008c26:	68b3      	ldr	r3, [r6, #8]
 8008c28:	6083      	str	r3, [r0, #8]
 8008c2a:	68f3      	ldr	r3, [r6, #12]
 8008c2c:	60c3      	str	r3, [r0, #12]
 8008c2e:	2a24      	cmp	r2, #36	; 0x24
 8008c30:	d02c      	beq.n	8008c8c <_realloc_r+0x354>
 8008c32:	f100 0310 	add.w	r3, r0, #16
 8008c36:	f106 0210 	add.w	r2, r6, #16
 8008c3a:	e75b      	b.n	8008af4 <_realloc_r+0x1bc>
 8008c3c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008c40:	f022 0203 	bic.w	r2, r2, #3
 8008c44:	4414      	add	r4, r2
 8008c46:	e717      	b.n	8008a78 <_realloc_r+0x140>
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	4674      	mov	r4, lr
 8008c4e:	463e      	mov	r6, r7
 8008c50:	f7ff fae8 	bl	8008224 <memmove>
 8008c54:	46d0      	mov	r8, sl
 8008c56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008c5a:	e70d      	b.n	8008a78 <_realloc_r+0x140>
 8008c5c:	463a      	mov	r2, r7
 8008c5e:	e700      	b.n	8008a62 <_realloc_r+0x12a>
 8008c60:	4631      	mov	r1, r6
 8008c62:	4638      	mov	r0, r7
 8008c64:	461c      	mov	r4, r3
 8008c66:	463e      	mov	r6, r7
 8008c68:	f7ff fadc 	bl	8008224 <memmove>
 8008c6c:	46d0      	mov	r8, sl
 8008c6e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008c72:	e701      	b.n	8008a78 <_realloc_r+0x140>
 8008c74:	68b3      	ldr	r3, [r6, #8]
 8008c76:	f8ca 3010 	str.w	r3, [sl, #16]
 8008c7a:	68f3      	ldr	r3, [r6, #12]
 8008c7c:	f8ca 3014 	str.w	r3, [sl, #20]
 8008c80:	2a24      	cmp	r2, #36	; 0x24
 8008c82:	d018      	beq.n	8008cb6 <_realloc_r+0x37e>
 8008c84:	3610      	adds	r6, #16
 8008c86:	f10a 0318 	add.w	r3, sl, #24
 8008c8a:	e7a8      	b.n	8008bde <_realloc_r+0x2a6>
 8008c8c:	6933      	ldr	r3, [r6, #16]
 8008c8e:	6103      	str	r3, [r0, #16]
 8008c90:	6973      	ldr	r3, [r6, #20]
 8008c92:	6143      	str	r3, [r0, #20]
 8008c94:	f106 0218 	add.w	r2, r6, #24
 8008c98:	f100 0318 	add.w	r3, r0, #24
 8008c9c:	e72a      	b.n	8008af4 <_realloc_r+0x1bc>
 8008c9e:	68b1      	ldr	r1, [r6, #8]
 8008ca0:	f8ca 1010 	str.w	r1, [sl, #16]
 8008ca4:	68f1      	ldr	r1, [r6, #12]
 8008ca6:	f8ca 1014 	str.w	r1, [sl, #20]
 8008caa:	2a24      	cmp	r2, #36	; 0x24
 8008cac:	d00f      	beq.n	8008cce <_realloc_r+0x396>
 8008cae:	3610      	adds	r6, #16
 8008cb0:	f10a 0218 	add.w	r2, sl, #24
 8008cb4:	e6d5      	b.n	8008a62 <_realloc_r+0x12a>
 8008cb6:	6933      	ldr	r3, [r6, #16]
 8008cb8:	f8ca 3018 	str.w	r3, [sl, #24]
 8008cbc:	6973      	ldr	r3, [r6, #20]
 8008cbe:	f8ca 301c 	str.w	r3, [sl, #28]
 8008cc2:	3618      	adds	r6, #24
 8008cc4:	f10a 0320 	add.w	r3, sl, #32
 8008cc8:	e789      	b.n	8008bde <_realloc_r+0x2a6>
 8008cca:	463b      	mov	r3, r7
 8008ccc:	e760      	b.n	8008b90 <_realloc_r+0x258>
 8008cce:	6932      	ldr	r2, [r6, #16]
 8008cd0:	f8ca 2018 	str.w	r2, [sl, #24]
 8008cd4:	6972      	ldr	r2, [r6, #20]
 8008cd6:	f8ca 201c 	str.w	r2, [sl, #28]
 8008cda:	3618      	adds	r6, #24
 8008cdc:	f10a 0220 	add.w	r2, sl, #32
 8008ce0:	e6bf      	b.n	8008a62 <_realloc_r+0x12a>
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	f8cd c004 	str.w	ip, [sp, #4]
 8008cea:	f7ff fa9b 	bl	8008224 <memmove>
 8008cee:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008cf2:	e753      	b.n	8008b9c <_realloc_r+0x264>
 8008cf4:	68b3      	ldr	r3, [r6, #8]
 8008cf6:	f8ca 3010 	str.w	r3, [sl, #16]
 8008cfa:	68f3      	ldr	r3, [r6, #12]
 8008cfc:	f8ca 3014 	str.w	r3, [sl, #20]
 8008d00:	2a24      	cmp	r2, #36	; 0x24
 8008d02:	d003      	beq.n	8008d0c <_realloc_r+0x3d4>
 8008d04:	3610      	adds	r6, #16
 8008d06:	f10a 0318 	add.w	r3, sl, #24
 8008d0a:	e741      	b.n	8008b90 <_realloc_r+0x258>
 8008d0c:	6933      	ldr	r3, [r6, #16]
 8008d0e:	f8ca 3018 	str.w	r3, [sl, #24]
 8008d12:	6973      	ldr	r3, [r6, #20]
 8008d14:	f8ca 301c 	str.w	r3, [sl, #28]
 8008d18:	3618      	adds	r6, #24
 8008d1a:	f10a 0320 	add.w	r3, sl, #32
 8008d1e:	e737      	b.n	8008b90 <_realloc_r+0x258>
 8008d20:	200004d0 	.word	0x200004d0

08008d24 <__fpclassifyd>:
 8008d24:	ec53 2b10 	vmov	r2, r3, d0
 8008d28:	b410      	push	{r4}
 8008d2a:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 8008d2e:	d008      	beq.n	8008d42 <__fpclassifyd+0x1e>
 8008d30:	4911      	ldr	r1, [pc, #68]	; (8008d78 <__fpclassifyd+0x54>)
 8008d32:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8008d36:	4288      	cmp	r0, r1
 8008d38:	d808      	bhi.n	8008d4c <__fpclassifyd+0x28>
 8008d3a:	2004      	movs	r0, #4
 8008d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	b91a      	cbnz	r2, 8008d4c <__fpclassifyd+0x28>
 8008d44:	2002      	movs	r0, #2
 8008d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8008d50:	4909      	ldr	r1, [pc, #36]	; (8008d78 <__fpclassifyd+0x54>)
 8008d52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008d56:	428b      	cmp	r3, r1
 8008d58:	d9ef      	bls.n	8008d3a <__fpclassifyd+0x16>
 8008d5a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008d5e:	d201      	bcs.n	8008d64 <__fpclassifyd+0x40>
 8008d60:	2003      	movs	r0, #3
 8008d62:	e7eb      	b.n	8008d3c <__fpclassifyd+0x18>
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <__fpclassifyd+0x58>)
 8008d66:	429c      	cmp	r4, r3
 8008d68:	d001      	beq.n	8008d6e <__fpclassifyd+0x4a>
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	e7e6      	b.n	8008d3c <__fpclassifyd+0x18>
 8008d6e:	fab2 f082 	clz	r0, r2
 8008d72:	0940      	lsrs	r0, r0, #5
 8008d74:	e7e2      	b.n	8008d3c <__fpclassifyd+0x18>
 8008d76:	bf00      	nop
 8008d78:	7fdfffff 	.word	0x7fdfffff
 8008d7c:	7ff00000 	.word	0x7ff00000

08008d80 <__sread>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	460c      	mov	r4, r1
 8008d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d88:	f7f8 ff1c 	bl	8001bc4 <_read_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	db03      	blt.n	8008d98 <__sread+0x18>
 8008d90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008d92:	4403      	add	r3, r0
 8008d94:	6523      	str	r3, [r4, #80]	; 0x50
 8008d96:	bd10      	pop	{r4, pc}
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	bd10      	pop	{r4, pc}
 8008da2:	bf00      	nop

08008da4 <__swrite>:
 8008da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da8:	4616      	mov	r6, r2
 8008daa:	898a      	ldrh	r2, [r1, #12]
 8008dac:	461d      	mov	r5, r3
 8008dae:	05d3      	lsls	r3, r2, #23
 8008db0:	460c      	mov	r4, r1
 8008db2:	4607      	mov	r7, r0
 8008db4:	d506      	bpl.n	8008dc4 <__swrite+0x20>
 8008db6:	2200      	movs	r2, #0
 8008db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	f7f8 feaf 	bl	8001b20 <_lseek_r>
 8008dc2:	89a2      	ldrh	r2, [r4, #12]
 8008dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008dcc:	81a2      	strh	r2, [r4, #12]
 8008dce:	4638      	mov	r0, r7
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	462b      	mov	r3, r5
 8008dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd8:	f7f8 bf7e 	b.w	8001cd8 <_write_r>

08008ddc <__sseek>:
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	460c      	mov	r4, r1
 8008de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de4:	f7f8 fe9c 	bl	8001b20 <_lseek_r>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	1c42      	adds	r2, r0, #1
 8008dec:	bf0e      	itee	eq
 8008dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008df6:	6520      	strne	r0, [r4, #80]	; 0x50
 8008df8:	81a3      	strh	r3, [r4, #12]
 8008dfa:	bd10      	pop	{r4, pc}

08008dfc <__sclose>:
 8008dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e00:	f7f8 be84 	b.w	8001b0c <_close_r>

08008e04 <__sprint_r.part.0>:
 8008e04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e0a:	049c      	lsls	r4, r3, #18
 8008e0c:	460f      	mov	r7, r1
 8008e0e:	4692      	mov	sl, r2
 8008e10:	d52b      	bpl.n	8008e6a <__sprint_r.part.0+0x66>
 8008e12:	6893      	ldr	r3, [r2, #8]
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	b333      	cbz	r3, 8008e66 <__sprint_r.part.0+0x62>
 8008e18:	4680      	mov	r8, r0
 8008e1a:	f102 0908 	add.w	r9, r2, #8
 8008e1e:	e919 0060 	ldmdb	r9, {r5, r6}
 8008e22:	08b6      	lsrs	r6, r6, #2
 8008e24:	d017      	beq.n	8008e56 <__sprint_r.part.0+0x52>
 8008e26:	3d04      	subs	r5, #4
 8008e28:	2400      	movs	r4, #0
 8008e2a:	e001      	b.n	8008e30 <__sprint_r.part.0+0x2c>
 8008e2c:	42a6      	cmp	r6, r4
 8008e2e:	d010      	beq.n	8008e52 <__sprint_r.part.0+0x4e>
 8008e30:	4640      	mov	r0, r8
 8008e32:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8008e36:	463a      	mov	r2, r7
 8008e38:	f000 f94a 	bl	80090d0 <_fputwc_r>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	f104 0401 	add.w	r4, r4, #1
 8008e42:	d1f3      	bne.n	8008e2c <__sprint_r.part.0+0x28>
 8008e44:	2300      	movs	r3, #0
 8008e46:	f8ca 3008 	str.w	r3, [sl, #8]
 8008e4a:	f8ca 3004 	str.w	r3, [sl, #4]
 8008e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e52:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008e56:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8008e5a:	f8ca 3008 	str.w	r3, [sl, #8]
 8008e5e:	f109 0908 	add.w	r9, r9, #8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1db      	bne.n	8008e1e <__sprint_r.part.0+0x1a>
 8008e66:	2000      	movs	r0, #0
 8008e68:	e7ec      	b.n	8008e44 <__sprint_r.part.0+0x40>
 8008e6a:	f7fe fcc3 	bl	80077f4 <__sfvwrite_r>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f8ca 3008 	str.w	r3, [sl, #8]
 8008e74:	f8ca 3004 	str.w	r3, [sl, #4]
 8008e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008e7c <__sprint_r>:
 8008e7c:	6893      	ldr	r3, [r2, #8]
 8008e7e:	b410      	push	{r4}
 8008e80:	b11b      	cbz	r3, 8008e8a <__sprint_r+0xe>
 8008e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e86:	f7ff bfbd 	b.w	8008e04 <__sprint_r.part.0>
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	6053      	str	r3, [r2, #4]
 8008e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <__swbuf_r>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	460d      	mov	r5, r1
 8008e98:	4614      	mov	r4, r2
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	b110      	cbz	r0, 8008ea4 <__swbuf_r+0x10>
 8008e9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d048      	beq.n	8008f36 <__swbuf_r+0xa2>
 8008ea4:	89a2      	ldrh	r2, [r4, #12]
 8008ea6:	69a3      	ldr	r3, [r4, #24]
 8008ea8:	60a3      	str	r3, [r4, #8]
 8008eaa:	b291      	uxth	r1, r2
 8008eac:	0708      	lsls	r0, r1, #28
 8008eae:	d538      	bpl.n	8008f22 <__swbuf_r+0x8e>
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d035      	beq.n	8008f22 <__swbuf_r+0x8e>
 8008eb6:	0489      	lsls	r1, r1, #18
 8008eb8:	b2ed      	uxtb	r5, r5
 8008eba:	d515      	bpl.n	8008ee8 <__swbuf_r+0x54>
 8008ebc:	6822      	ldr	r2, [r4, #0]
 8008ebe:	6961      	ldr	r1, [r4, #20]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	428b      	cmp	r3, r1
 8008ec4:	da1c      	bge.n	8008f00 <__swbuf_r+0x6c>
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	68a1      	ldr	r1, [r4, #8]
 8008eca:	1c50      	adds	r0, r2, #1
 8008ecc:	3901      	subs	r1, #1
 8008ece:	60a1      	str	r1, [r4, #8]
 8008ed0:	6020      	str	r0, [r4, #0]
 8008ed2:	7015      	strb	r5, [r2, #0]
 8008ed4:	6962      	ldr	r2, [r4, #20]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d01a      	beq.n	8008f10 <__swbuf_r+0x7c>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	07db      	lsls	r3, r3, #31
 8008ede:	d501      	bpl.n	8008ee4 <__swbuf_r+0x50>
 8008ee0:	2d0a      	cmp	r5, #10
 8008ee2:	d015      	beq.n	8008f10 <__swbuf_r+0x7c>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008eea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eee:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8008ef2:	81a2      	strh	r2, [r4, #12]
 8008ef4:	6822      	ldr	r2, [r4, #0]
 8008ef6:	6661      	str	r1, [r4, #100]	; 0x64
 8008ef8:	6961      	ldr	r1, [r4, #20]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	428b      	cmp	r3, r1
 8008efe:	dbe2      	blt.n	8008ec6 <__swbuf_r+0x32>
 8008f00:	4630      	mov	r0, r6
 8008f02:	4621      	mov	r1, r4
 8008f04:	f7fe fab2 	bl	800746c <_fflush_r>
 8008f08:	b940      	cbnz	r0, 8008f1c <__swbuf_r+0x88>
 8008f0a:	6822      	ldr	r2, [r4, #0]
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e7db      	b.n	8008ec8 <__swbuf_r+0x34>
 8008f10:	4630      	mov	r0, r6
 8008f12:	4621      	mov	r1, r4
 8008f14:	f7fe faaa 	bl	800746c <_fflush_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0e3      	beq.n	8008ee4 <__swbuf_r+0x50>
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
 8008f22:	4630      	mov	r0, r6
 8008f24:	4621      	mov	r1, r4
 8008f26:	f7fd f94f 	bl	80061c8 <__swsetup_r>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d1f6      	bne.n	8008f1c <__swbuf_r+0x88>
 8008f2e:	89a2      	ldrh	r2, [r4, #12]
 8008f30:	6923      	ldr	r3, [r4, #16]
 8008f32:	b291      	uxth	r1, r2
 8008f34:	e7bf      	b.n	8008eb6 <__swbuf_r+0x22>
 8008f36:	f7fe fb2d 	bl	8007594 <__sinit>
 8008f3a:	e7b3      	b.n	8008ea4 <__swbuf_r+0x10>

08008f3c <_calloc_r>:
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	fb02 f101 	mul.w	r1, r2, r1
 8008f42:	f7fe fe93 	bl	8007c6c <_malloc_r>
 8008f46:	4604      	mov	r4, r0
 8008f48:	b168      	cbz	r0, 8008f66 <_calloc_r+0x2a>
 8008f4a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008f4e:	f022 0203 	bic.w	r2, r2, #3
 8008f52:	3a04      	subs	r2, #4
 8008f54:	2a24      	cmp	r2, #36	; 0x24
 8008f56:	d818      	bhi.n	8008f8a <_calloc_r+0x4e>
 8008f58:	2a13      	cmp	r2, #19
 8008f5a:	d806      	bhi.n	8008f6a <_calloc_r+0x2e>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	605a      	str	r2, [r3, #4]
 8008f64:	609a      	str	r2, [r3, #8]
 8008f66:	4620      	mov	r0, r4
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	2a1b      	cmp	r2, #27
 8008f6e:	6003      	str	r3, [r0, #0]
 8008f70:	6043      	str	r3, [r0, #4]
 8008f72:	d90f      	bls.n	8008f94 <_calloc_r+0x58>
 8008f74:	2a24      	cmp	r2, #36	; 0x24
 8008f76:	6083      	str	r3, [r0, #8]
 8008f78:	60c3      	str	r3, [r0, #12]
 8008f7a:	bf05      	ittet	eq
 8008f7c:	6103      	streq	r3, [r0, #16]
 8008f7e:	6143      	streq	r3, [r0, #20]
 8008f80:	f100 0310 	addne.w	r3, r0, #16
 8008f84:	f100 0318 	addeq.w	r3, r0, #24
 8008f88:	e7e9      	b.n	8008f5e <_calloc_r+0x22>
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	f7fb fc9c 	bl	80048c8 <memset>
 8008f90:	4620      	mov	r0, r4
 8008f92:	bd10      	pop	{r4, pc}
 8008f94:	f100 0308 	add.w	r3, r0, #8
 8008f98:	e7e1      	b.n	8008f5e <_calloc_r+0x22>
 8008f9a:	bf00      	nop

08008f9c <_fclose_r>:
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	d03d      	beq.n	800901c <_fclose_r+0x80>
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	b108      	cbz	r0, 8008fac <_fclose_r+0x10>
 8008fa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008faa:	b37b      	cbz	r3, 800900c <_fclose_r+0x70>
 8008fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb0:	b90b      	cbnz	r3, 8008fb6 <_fclose_r+0x1a>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	bd70      	pop	{r4, r5, r6, pc}
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	4621      	mov	r1, r4
 8008fba:	f7fe f9ad 	bl	8007318 <__sflush_r>
 8008fbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	b133      	cbz	r3, 8008fd2 <_fclose_r+0x36>
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	69e1      	ldr	r1, [r4, #28]
 8008fc8:	4798      	blx	r3
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	bfb8      	it	lt
 8008fce:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	061b      	lsls	r3, r3, #24
 8008fd6:	d41c      	bmi.n	8009012 <_fclose_r+0x76>
 8008fd8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008fda:	b141      	cbz	r1, 8008fee <_fclose_r+0x52>
 8008fdc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008fe0:	4299      	cmp	r1, r3
 8008fe2:	d002      	beq.n	8008fea <_fclose_r+0x4e>
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f7fe fb2d 	bl	8007644 <_free_r>
 8008fea:	2300      	movs	r3, #0
 8008fec:	6323      	str	r3, [r4, #48]	; 0x30
 8008fee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008ff0:	b121      	cbz	r1, 8008ffc <_fclose_r+0x60>
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f7fe fb26 	bl	8007644 <_free_r>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	6463      	str	r3, [r4, #68]	; 0x44
 8008ffc:	f7fe fad0 	bl	80075a0 <__sfp_lock_acquire>
 8009000:	2300      	movs	r3, #0
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	f7fe face 	bl	80075a4 <__sfp_lock_release>
 8009008:	4630      	mov	r0, r6
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	f7fe fac2 	bl	8007594 <__sinit>
 8009010:	e7cc      	b.n	8008fac <_fclose_r+0x10>
 8009012:	4628      	mov	r0, r5
 8009014:	6921      	ldr	r1, [r4, #16]
 8009016:	f7fe fb15 	bl	8007644 <_free_r>
 800901a:	e7dd      	b.n	8008fd8 <_fclose_r+0x3c>
 800901c:	2000      	movs	r0, #0
 800901e:	4770      	bx	lr

08009020 <__fputwc>:
 8009020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	4607      	mov	r7, r0
 8009028:	460e      	mov	r6, r1
 800902a:	4614      	mov	r4, r2
 800902c:	f7fe fd9c 	bl	8007b68 <__locale_mb_cur_max>
 8009030:	2801      	cmp	r0, #1
 8009032:	d041      	beq.n	80090b8 <__fputwc+0x98>
 8009034:	4638      	mov	r0, r7
 8009036:	a901      	add	r1, sp, #4
 8009038:	4632      	mov	r2, r6
 800903a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800903e:	f000 f859 	bl	80090f4 <_wcrtomb_r>
 8009042:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009046:	4680      	mov	r8, r0
 8009048:	d02f      	beq.n	80090aa <__fputwc+0x8a>
 800904a:	2800      	cmp	r0, #0
 800904c:	d03c      	beq.n	80090c8 <__fputwc+0xa8>
 800904e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009052:	2500      	movs	r5, #0
 8009054:	e009      	b.n	800906a <__fputwc+0x4a>
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	7019      	strb	r1, [r3, #0]
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	3301      	adds	r3, #1
 800905e:	6023      	str	r3, [r4, #0]
 8009060:	3501      	adds	r5, #1
 8009062:	45a8      	cmp	r8, r5
 8009064:	d930      	bls.n	80090c8 <__fputwc+0xa8>
 8009066:	ab01      	add	r3, sp, #4
 8009068:	5d59      	ldrb	r1, [r3, r5]
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	3b01      	subs	r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	daf0      	bge.n	8009056 <__fputwc+0x36>
 8009074:	69a2      	ldr	r2, [r4, #24]
 8009076:	4293      	cmp	r3, r2
 8009078:	db07      	blt.n	800908a <__fputwc+0x6a>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	7019      	strb	r1, [r3, #0]
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	7819      	ldrb	r1, [r3, #0]
 8009082:	290a      	cmp	r1, #10
 8009084:	f103 0301 	add.w	r3, r3, #1
 8009088:	d1e9      	bne.n	800905e <__fputwc+0x3e>
 800908a:	4638      	mov	r0, r7
 800908c:	4622      	mov	r2, r4
 800908e:	f7ff ff01 	bl	8008e94 <__swbuf_r>
 8009092:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8009096:	fab0 f080 	clz	r0, r0
 800909a:	0940      	lsrs	r0, r0, #5
 800909c:	2800      	cmp	r0, #0
 800909e:	d0df      	beq.n	8009060 <__fputwc+0x40>
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a4:	b002      	add	sp, #8
 80090a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	b002      	add	sp, #8
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	1e73      	subs	r3, r6, #1
 80090ba:	2bfe      	cmp	r3, #254	; 0xfe
 80090bc:	d8ba      	bhi.n	8009034 <__fputwc+0x14>
 80090be:	b2f1      	uxtb	r1, r6
 80090c0:	4680      	mov	r8, r0
 80090c2:	f88d 1004 	strb.w	r1, [sp, #4]
 80090c6:	e7c4      	b.n	8009052 <__fputwc+0x32>
 80090c8:	4630      	mov	r0, r6
 80090ca:	b002      	add	sp, #8
 80090cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090d0 <_fputwc_r>:
 80090d0:	8993      	ldrh	r3, [r2, #12]
 80090d2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80090d6:	d10b      	bne.n	80090f0 <_fputwc_r+0x20>
 80090d8:	b410      	push	{r4}
 80090da:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80090dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090e0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80090e4:	6654      	str	r4, [r2, #100]	; 0x64
 80090e6:	8193      	strh	r3, [r2, #12]
 80090e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ec:	f7ff bf98 	b.w	8009020 <__fputwc>
 80090f0:	f7ff bf96 	b.w	8009020 <__fputwc>

080090f4 <_wcrtomb_r>:
 80090f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f8:	4605      	mov	r5, r0
 80090fa:	b086      	sub	sp, #24
 80090fc:	461e      	mov	r6, r3
 80090fe:	460c      	mov	r4, r1
 8009100:	b1a1      	cbz	r1, 800912c <_wcrtomb_r+0x38>
 8009102:	4b10      	ldr	r3, [pc, #64]	; (8009144 <_wcrtomb_r+0x50>)
 8009104:	4617      	mov	r7, r2
 8009106:	f8d3 8000 	ldr.w	r8, [r3]
 800910a:	f7fe fd29 	bl	8007b60 <__locale_charset>
 800910e:	9600      	str	r6, [sp, #0]
 8009110:	4603      	mov	r3, r0
 8009112:	4621      	mov	r1, r4
 8009114:	463a      	mov	r2, r7
 8009116:	4628      	mov	r0, r5
 8009118:	47c0      	blx	r8
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	d103      	bne.n	8009126 <_wcrtomb_r+0x32>
 800911e:	2200      	movs	r2, #0
 8009120:	238a      	movs	r3, #138	; 0x8a
 8009122:	6032      	str	r2, [r6, #0]
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	b006      	add	sp, #24
 8009128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912c:	4b05      	ldr	r3, [pc, #20]	; (8009144 <_wcrtomb_r+0x50>)
 800912e:	681f      	ldr	r7, [r3, #0]
 8009130:	f7fe fd16 	bl	8007b60 <__locale_charset>
 8009134:	9600      	str	r6, [sp, #0]
 8009136:	4603      	mov	r3, r0
 8009138:	4622      	mov	r2, r4
 800913a:	4628      	mov	r0, r5
 800913c:	a903      	add	r1, sp, #12
 800913e:	47b8      	blx	r7
 8009140:	e7eb      	b.n	800911a <_wcrtomb_r+0x26>
 8009142:	bf00      	nop
 8009144:	200008e0 	.word	0x200008e0

08009148 <__ascii_wctomb>:
 8009148:	b121      	cbz	r1, 8009154 <__ascii_wctomb+0xc>
 800914a:	2aff      	cmp	r2, #255	; 0xff
 800914c:	d804      	bhi.n	8009158 <__ascii_wctomb+0x10>
 800914e:	700a      	strb	r2, [r1, #0]
 8009150:	2001      	movs	r0, #1
 8009152:	4770      	bx	lr
 8009154:	4608      	mov	r0, r1
 8009156:	4770      	bx	lr
 8009158:	238a      	movs	r3, #138	; 0x8a
 800915a:	6003      	str	r3, [r0, #0]
 800915c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop

08009164 <atan2>:
 8009164:	f000 b800 	b.w	8009168 <__ieee754_atan2>

08009168 <__ieee754_atan2>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	ec57 6b11 	vmov	r6, r7, d1
 8009170:	4273      	negs	r3, r6
 8009172:	4333      	orrs	r3, r6
 8009174:	f027 4c00 	bic.w	ip, r7, #2147483648	; 0x80000000
 8009178:	4883      	ldr	r0, [pc, #524]	; (8009388 <__ieee754_atan2+0x220>)
 800917a:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
 800917e:	4283      	cmp	r3, r0
 8009180:	ee11 2a10 	vmov	r2, s2
 8009184:	4639      	mov	r1, r7
 8009186:	ec55 4b10 	vmov	r4, r5, d0
 800918a:	d851      	bhi.n	8009230 <__ieee754_atan2+0xc8>
 800918c:	4263      	negs	r3, r4
 800918e:	4323      	orrs	r3, r4
 8009190:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 8009194:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 8009198:	4283      	cmp	r3, r0
 800919a:	ee10 ea10 	vmov	lr, s0
 800919e:	46a9      	mov	r9, r5
 80091a0:	d846      	bhi.n	8009230 <__ieee754_atan2+0xc8>
 80091a2:	f107 4340 	add.w	r3, r7, #3221225472	; 0xc0000000
 80091a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80091aa:	4333      	orrs	r3, r6
 80091ac:	d05c      	beq.n	8009268 <__ieee754_atan2+0x100>
 80091ae:	ea4f 78a7 	mov.w	r8, r7, asr #30
 80091b2:	f008 0802 	and.w	r8, r8, #2
 80091b6:	ea5a 0304 	orrs.w	r3, sl, r4
 80091ba:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
 80091be:	d041      	beq.n	8009244 <__ieee754_atan2+0xdc>
 80091c0:	ea5c 0302 	orrs.w	r3, ip, r2
 80091c4:	d049      	beq.n	800925a <__ieee754_atan2+0xf2>
 80091c6:	4b70      	ldr	r3, [pc, #448]	; (8009388 <__ieee754_atan2+0x220>)
 80091c8:	459c      	cmp	ip, r3
 80091ca:	d05b      	beq.n	8009284 <__ieee754_atan2+0x11c>
 80091cc:	4b6e      	ldr	r3, [pc, #440]	; (8009388 <__ieee754_atan2+0x220>)
 80091ce:	459a      	cmp	sl, r3
 80091d0:	d043      	beq.n	800925a <__ieee754_atan2+0xf2>
 80091d2:	ebcc 0c0a 	rsb	ip, ip, sl
 80091d6:	ea4f 5c2c 	mov.w	ip, ip, asr #20
 80091da:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
 80091de:	dc4d      	bgt.n	800927c <__ieee754_atan2+0x114>
 80091e0:	2900      	cmp	r1, #0
 80091e2:	f2c0 8085 	blt.w	80092f0 <__ieee754_atan2+0x188>
 80091e6:	4632      	mov	r2, r6
 80091e8:	463b      	mov	r3, r7
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 fb55 	bl	800089c <__aeabi_ddiv>
 80091f2:	ec41 0b10 	vmov	d0, r0, r1
 80091f6:	f000 fa7f 	bl	80096f8 <fabs>
 80091fa:	f000 f8c9 	bl	8009390 <atan>
 80091fe:	ec51 0b10 	vmov	r0, r1, d0
 8009202:	f1b8 0f01 	cmp.w	r8, #1
 8009206:	d06d      	beq.n	80092e4 <__ieee754_atan2+0x17c>
 8009208:	f1b8 0f02 	cmp.w	r8, #2
 800920c:	d05a      	beq.n	80092c4 <__ieee754_atan2+0x15c>
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	d053      	beq.n	80092bc <__ieee754_atan2+0x154>
 8009214:	a346      	add	r3, pc, #280	; (adr r3, 8009330 <__ieee754_atan2+0x1c8>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f7f7 f861 	bl	80002e0 <__aeabi_dsub>
 800921e:	a346      	add	r3, pc, #280	; (adr r3, 8009338 <__ieee754_atan2+0x1d0>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f7 f85c 	bl	80002e0 <__aeabi_dsub>
 8009228:	ec41 0b10 	vmov	d0, r0, r1
 800922c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	4622      	mov	r2, r4
 8009236:	462b      	mov	r3, r5
 8009238:	f7f7 f854 	bl	80002e4 <__adddf3>
 800923c:	ec41 0b10 	vmov	d0, r0, r1
 8009240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009244:	f1b8 0f03 	cmp.w	r8, #3
 8009248:	d8ba      	bhi.n	80091c0 <__ieee754_atan2+0x58>
 800924a:	e8df f008 	tbb	[pc, r8]
 800924e:	1515      	.short	0x1515
 8009250:	1102      	.short	0x1102
 8009252:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8009338 <__ieee754_atan2+0x1d0>
 8009256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800925a:	f1b9 0f00 	cmp.w	r9, #0
 800925e:	db29      	blt.n	80092b4 <__ieee754_atan2+0x14c>
 8009260:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8009340 <__ieee754_atan2+0x1d8>
 8009264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009268:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	f000 b890 	b.w	8009390 <atan>
 8009270:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8009348 <__ieee754_atan2+0x1e0>
 8009274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927c:	a130      	add	r1, pc, #192	; (adr r1, 8009340 <__ieee754_atan2+0x1d8>)
 800927e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009282:	e7be      	b.n	8009202 <__ieee754_atan2+0x9a>
 8009284:	45e2      	cmp	sl, ip
 8009286:	d03a      	beq.n	80092fe <__ieee754_atan2+0x196>
 8009288:	f1b8 0f03 	cmp.w	r8, #3
 800928c:	d89e      	bhi.n	80091cc <__ieee754_atan2+0x64>
 800928e:	a301      	add	r3, pc, #4	; (adr r3, 8009294 <__ieee754_atan2+0x12c>)
 8009290:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
 8009294:	080092a5 	.word	0x080092a5
 8009298:	080092ad 	.word	0x080092ad
 800929c:	08009253 	.word	0x08009253
 80092a0:	08009271 	.word	0x08009271
 80092a4:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8009350 <__ieee754_atan2+0x1e8>
 80092a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ac:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8009358 <__ieee754_atan2+0x1f0>
 80092b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b4:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8009360 <__ieee754_atan2+0x1f8>
 80092b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092bc:	ec41 0b10 	vmov	d0, r0, r1
 80092c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c4:	a31a      	add	r3, pc, #104	; (adr r3, 8009330 <__ieee754_atan2+0x1c8>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f7 f809 	bl	80002e0 <__aeabi_dsub>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	a119      	add	r1, pc, #100	; (adr r1, 8009338 <__ieee754_atan2+0x1d0>)
 80092d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d8:	f7f7 f802 	bl	80002e0 <__aeabi_dsub>
 80092dc:	ec41 0b10 	vmov	d0, r0, r1
 80092e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80092e8:	ec41 0b10 	vmov	d0, r0, r1
 80092ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f0:	f11c 0f3c 	cmn.w	ip, #60	; 0x3c
 80092f4:	f6bf af77 	bge.w	80091e6 <__ieee754_atan2+0x7e>
 80092f8:	2000      	movs	r0, #0
 80092fa:	2100      	movs	r1, #0
 80092fc:	e781      	b.n	8009202 <__ieee754_atan2+0x9a>
 80092fe:	f1b8 0f03 	cmp.w	r8, #3
 8009302:	d8aa      	bhi.n	800925a <__ieee754_atan2+0xf2>
 8009304:	e8df f008 	tbb	[pc, r8]
 8009308:	060a0e02 	.word	0x060a0e02
 800930c:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8009368 <__ieee754_atan2+0x200>
 8009310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009314:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8009370 <__ieee754_atan2+0x208>
 8009318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931c:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8009378 <__ieee754_atan2+0x210>
 8009320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009324:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8009380 <__ieee754_atan2+0x218>
 8009328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932c:	f3af 8000 	nop.w
 8009330:	33145c07 	.word	0x33145c07
 8009334:	3ca1a626 	.word	0x3ca1a626
 8009338:	54442d18 	.word	0x54442d18
 800933c:	400921fb 	.word	0x400921fb
 8009340:	54442d18 	.word	0x54442d18
 8009344:	3ff921fb 	.word	0x3ff921fb
 8009348:	54442d18 	.word	0x54442d18
 800934c:	c00921fb 	.word	0xc00921fb
	...
 800935c:	80000000 	.word	0x80000000
 8009360:	54442d18 	.word	0x54442d18
 8009364:	bff921fb 	.word	0xbff921fb
 8009368:	54442d18 	.word	0x54442d18
 800936c:	3fe921fb 	.word	0x3fe921fb
 8009370:	7f3321d2 	.word	0x7f3321d2
 8009374:	c002d97c 	.word	0xc002d97c
 8009378:	7f3321d2 	.word	0x7f3321d2
 800937c:	4002d97c 	.word	0x4002d97c
 8009380:	54442d18 	.word	0x54442d18
 8009384:	bfe921fb 	.word	0xbfe921fb
 8009388:	7ff00000 	.word	0x7ff00000
 800938c:	f3af 8000 	nopal.w

08009390 <atan>:
 8009390:	e92d 4ff8 	stmdbal	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	ec55 4b10 	vmov	r4, r5, d0
 8009398:	4bcd      	ldr	r3, [pc, #820]	; (80096d0 <atan+0x340>)
 800939a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800939e:	429e      	cmp	r6, r3
 80093a0:	46ab      	mov	fp, r5
 80093a2:	dd10      	ble.n	80093c6 <atan+0x36>
 80093a4:	4bcb      	ldr	r3, [pc, #812]	; (80096d4 <atan+0x344>)
 80093a6:	429e      	cmp	r6, r3
 80093a8:	f300 80b2 	bgt.w	8009510 <atan+0x180>
 80093ac:	f000 80ad 	beq.w	800950a <atan+0x17a>
 80093b0:	f1bb 0f00 	cmp.w	fp, #0
 80093b4:	f340 80f6 	ble.w	80095a4 <atan+0x214>
 80093b8:	a5a9      	add	r5, pc, #676	; (adr r5, 8009660 <atan+0x2d0>)
 80093ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093be:	ec45 4b10 	vmov	d0, r4, r5
 80093c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c6:	4bc4      	ldr	r3, [pc, #784]	; (80096d8 <atan+0x348>)
 80093c8:	429e      	cmp	r6, r3
 80093ca:	f300 80c0 	bgt.w	800954e <atan+0x1be>
 80093ce:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80093d2:	429e      	cmp	r6, r3
 80093d4:	f340 80a8 	ble.w	8009528 <atan+0x198>
 80093d8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80093dc:	4622      	mov	r2, r4
 80093de:	462b      	mov	r3, r5
 80093e0:	4620      	mov	r0, r4
 80093e2:	4629      	mov	r1, r5
 80093e4:	f7f7 f930 	bl	8000648 <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4680      	mov	r8, r0
 80093ee:	4689      	mov	r9, r1
 80093f0:	f7f7 f92a 	bl	8000648 <__aeabi_dmul>
 80093f4:	a39c      	add	r3, pc, #624	; (adr r3, 8009668 <atan+0x2d8>)
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	4606      	mov	r6, r0
 80093fc:	460f      	mov	r7, r1
 80093fe:	f7f7 f923 	bl	8000648 <__aeabi_dmul>
 8009402:	a39b      	add	r3, pc, #620	; (adr r3, 8009670 <atan+0x2e0>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	f7f6 ff6c 	bl	80002e4 <__adddf3>
 800940c:	4632      	mov	r2, r6
 800940e:	463b      	mov	r3, r7
 8009410:	f7f7 f91a 	bl	8000648 <__aeabi_dmul>
 8009414:	a398      	add	r3, pc, #608	; (adr r3, 8009678 <atan+0x2e8>)
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	f7f6 ff63 	bl	80002e4 <__adddf3>
 800941e:	4632      	mov	r2, r6
 8009420:	463b      	mov	r3, r7
 8009422:	f7f7 f911 	bl	8000648 <__aeabi_dmul>
 8009426:	a396      	add	r3, pc, #600	; (adr r3, 8009680 <atan+0x2f0>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f7f6 ff5a 	bl	80002e4 <__adddf3>
 8009430:	4632      	mov	r2, r6
 8009432:	463b      	mov	r3, r7
 8009434:	f7f7 f908 	bl	8000648 <__aeabi_dmul>
 8009438:	a393      	add	r3, pc, #588	; (adr r3, 8009688 <atan+0x2f8>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7f6 ff51 	bl	80002e4 <__adddf3>
 8009442:	4632      	mov	r2, r6
 8009444:	463b      	mov	r3, r7
 8009446:	f7f7 f8ff 	bl	8000648 <__aeabi_dmul>
 800944a:	a391      	add	r3, pc, #580	; (adr r3, 8009690 <atan+0x300>)
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f7f6 ff48 	bl	80002e4 <__adddf3>
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	f7f7 f8f6 	bl	8000648 <__aeabi_dmul>
 800945c:	a38e      	add	r3, pc, #568	; (adr r3, 8009698 <atan+0x308>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	4680      	mov	r8, r0
 8009464:	4689      	mov	r9, r1
 8009466:	4630      	mov	r0, r6
 8009468:	4639      	mov	r1, r7
 800946a:	f7f7 f8ed 	bl	8000648 <__aeabi_dmul>
 800946e:	a38c      	add	r3, pc, #560	; (adr r3, 80096a0 <atan+0x310>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f6 ff34 	bl	80002e0 <__aeabi_dsub>
 8009478:	4632      	mov	r2, r6
 800947a:	463b      	mov	r3, r7
 800947c:	f7f7 f8e4 	bl	8000648 <__aeabi_dmul>
 8009480:	a389      	add	r3, pc, #548	; (adr r3, 80096a8 <atan+0x318>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f7f6 ff2b 	bl	80002e0 <__aeabi_dsub>
 800948a:	4632      	mov	r2, r6
 800948c:	463b      	mov	r3, r7
 800948e:	f7f7 f8db 	bl	8000648 <__aeabi_dmul>
 8009492:	a387      	add	r3, pc, #540	; (adr r3, 80096b0 <atan+0x320>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f7f6 ff22 	bl	80002e0 <__aeabi_dsub>
 800949c:	4632      	mov	r2, r6
 800949e:	463b      	mov	r3, r7
 80094a0:	f7f7 f8d2 	bl	8000648 <__aeabi_dmul>
 80094a4:	a384      	add	r3, pc, #528	; (adr r3, 80096b8 <atan+0x328>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f6 ff19 	bl	80002e0 <__aeabi_dsub>
 80094ae:	4632      	mov	r2, r6
 80094b0:	463b      	mov	r3, r7
 80094b2:	f7f7 f8c9 	bl	8000648 <__aeabi_dmul>
 80094b6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	d079      	beq.n	80095b4 <atan+0x224>
 80094c0:	4640      	mov	r0, r8
 80094c2:	4649      	mov	r1, r9
 80094c4:	f7f6 ff0e 	bl	80002e4 <__adddf3>
 80094c8:	4622      	mov	r2, r4
 80094ca:	462b      	mov	r3, r5
 80094cc:	f7f7 f8bc 	bl	8000648 <__aeabi_dmul>
 80094d0:	4e82      	ldr	r6, [pc, #520]	; (80096dc <atan+0x34c>)
 80094d2:	4b83      	ldr	r3, [pc, #524]	; (80096e0 <atan+0x350>)
 80094d4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80094d8:	4456      	add	r6, sl
 80094da:	449a      	add	sl, r3
 80094dc:	e9da 2300 	ldrd	r2, r3, [sl]
 80094e0:	f7f6 fefe 	bl	80002e0 <__aeabi_dsub>
 80094e4:	4622      	mov	r2, r4
 80094e6:	462b      	mov	r3, r5
 80094e8:	f7f6 fefa 	bl	80002e0 <__aeabi_dsub>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80094f4:	f7f6 fef4 	bl	80002e0 <__aeabi_dsub>
 80094f8:	f1bb 0f00 	cmp.w	fp, #0
 80094fc:	db56      	blt.n	80095ac <atan+0x21c>
 80094fe:	4604      	mov	r4, r0
 8009500:	460d      	mov	r5, r1
 8009502:	ec45 4b10 	vmov	d0, r4, r5
 8009506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950a:	2c00      	cmp	r4, #0
 800950c:	f43f af50 	beq.w	80093b0 <atan+0x20>
 8009510:	4620      	mov	r0, r4
 8009512:	4629      	mov	r1, r5
 8009514:	4622      	mov	r2, r4
 8009516:	462b      	mov	r3, r5
 8009518:	f7f6 fee4 	bl	80002e4 <__adddf3>
 800951c:	4604      	mov	r4, r0
 800951e:	460d      	mov	r5, r1
 8009520:	ec45 4b10 	vmov	d0, r4, r5
 8009524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009528:	a365      	add	r3, pc, #404	; (adr r3, 80096c0 <atan+0x330>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	ee10 0a10 	vmov	r0, s0
 8009532:	4629      	mov	r1, r5
 8009534:	f7f6 fed6 	bl	80002e4 <__adddf3>
 8009538:	2200      	movs	r2, #0
 800953a:	4b6a      	ldr	r3, [pc, #424]	; (80096e4 <atan+0x354>)
 800953c:	f7f7 fb14 	bl	8000b68 <__aeabi_dcmpgt>
 8009540:	2800      	cmp	r0, #0
 8009542:	f43f af49 	beq.w	80093d8 <atan+0x48>
 8009546:	ec45 4b10 	vmov	d0, r4, r5
 800954a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	f000 f8d3 	bl	80096f8 <fabs>
 8009552:	4b65      	ldr	r3, [pc, #404]	; (80096e8 <atan+0x358>)
 8009554:	429e      	cmp	r6, r3
 8009556:	ec55 4b10 	vmov	r4, r5, d0
 800955a:	dc3c      	bgt.n	80095d6 <atan+0x246>
 800955c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009560:	429e      	cmp	r6, r3
 8009562:	ee10 0a10 	vmov	r0, s0
 8009566:	4629      	mov	r1, r5
 8009568:	dc62      	bgt.n	8009630 <atan+0x2a0>
 800956a:	ee10 2a10 	vmov	r2, s0
 800956e:	462b      	mov	r3, r5
 8009570:	f7f6 feb8 	bl	80002e4 <__adddf3>
 8009574:	2200      	movs	r2, #0
 8009576:	4b5b      	ldr	r3, [pc, #364]	; (80096e4 <atan+0x354>)
 8009578:	f7f6 feb2 	bl	80002e0 <__aeabi_dsub>
 800957c:	2200      	movs	r2, #0
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800958a:	f7f6 feab 	bl	80002e4 <__adddf3>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f7 f981 	bl	800089c <__aeabi_ddiv>
 800959a:	f04f 0a00 	mov.w	sl, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	460d      	mov	r5, r1
 80095a2:	e71b      	b.n	80093dc <atan+0x4c>
 80095a4:	a548      	add	r5, pc, #288	; (adr r5, 80096c8 <atan+0x338>)
 80095a6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095aa:	e7b9      	b.n	8009520 <atan+0x190>
 80095ac:	4604      	mov	r4, r0
 80095ae:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80095b2:	e7b5      	b.n	8009520 <atan+0x190>
 80095b4:	4640      	mov	r0, r8
 80095b6:	4649      	mov	r1, r9
 80095b8:	f7f6 fe94 	bl	80002e4 <__adddf3>
 80095bc:	4622      	mov	r2, r4
 80095be:	462b      	mov	r3, r5
 80095c0:	f7f7 f842 	bl	8000648 <__aeabi_dmul>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4620      	mov	r0, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	f7f6 fe88 	bl	80002e0 <__aeabi_dsub>
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	e7a4      	b.n	8009520 <atan+0x190>
 80095d6:	4b45      	ldr	r3, [pc, #276]	; (80096ec <atan+0x35c>)
 80095d8:	429e      	cmp	r6, r3
 80095da:	dc1d      	bgt.n	8009618 <atan+0x288>
 80095dc:	ee10 0a10 	vmov	r0, s0
 80095e0:	4629      	mov	r1, r5
 80095e2:	2200      	movs	r2, #0
 80095e4:	4b42      	ldr	r3, [pc, #264]	; (80096f0 <atan+0x360>)
 80095e6:	f7f6 fe7b 	bl	80002e0 <__aeabi_dsub>
 80095ea:	2200      	movs	r2, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	4620      	mov	r0, r4
 80095f2:	4629      	mov	r1, r5
 80095f4:	4b3e      	ldr	r3, [pc, #248]	; (80096f0 <atan+0x360>)
 80095f6:	f7f7 f827 	bl	8000648 <__aeabi_dmul>
 80095fa:	2200      	movs	r2, #0
 80095fc:	4b39      	ldr	r3, [pc, #228]	; (80096e4 <atan+0x354>)
 80095fe:	f7f6 fe71 	bl	80002e4 <__adddf3>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4630      	mov	r0, r6
 8009608:	4639      	mov	r1, r7
 800960a:	f7f7 f947 	bl	800089c <__aeabi_ddiv>
 800960e:	f04f 0a02 	mov.w	sl, #2
 8009612:	4604      	mov	r4, r0
 8009614:	460d      	mov	r5, r1
 8009616:	e6e1      	b.n	80093dc <atan+0x4c>
 8009618:	462b      	mov	r3, r5
 800961a:	ee10 2a10 	vmov	r2, s0
 800961e:	2000      	movs	r0, #0
 8009620:	4934      	ldr	r1, [pc, #208]	; (80096f4 <atan+0x364>)
 8009622:	f7f7 f93b 	bl	800089c <__aeabi_ddiv>
 8009626:	f04f 0a03 	mov.w	sl, #3
 800962a:	4604      	mov	r4, r0
 800962c:	460d      	mov	r5, r1
 800962e:	e6d5      	b.n	80093dc <atan+0x4c>
 8009630:	2200      	movs	r2, #0
 8009632:	4b2c      	ldr	r3, [pc, #176]	; (80096e4 <atan+0x354>)
 8009634:	f7f6 fe54 	bl	80002e0 <__aeabi_dsub>
 8009638:	2200      	movs	r2, #0
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	4b28      	ldr	r3, [pc, #160]	; (80096e4 <atan+0x354>)
 8009644:	f7f6 fe4e 	bl	80002e4 <__adddf3>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4630      	mov	r0, r6
 800964e:	4639      	mov	r1, r7
 8009650:	f7f7 f924 	bl	800089c <__aeabi_ddiv>
 8009654:	f04f 0a01 	mov.w	sl, #1
 8009658:	4604      	mov	r4, r0
 800965a:	460d      	mov	r5, r1
 800965c:	e6be      	b.n	80093dc <atan+0x4c>
 800965e:	bf00      	nop
 8009660:	54442d18 	.word	0x54442d18
 8009664:	3ff921fb 	.word	0x3ff921fb
 8009668:	e322da11 	.word	0xe322da11
 800966c:	3f90ad3a 	.word	0x3f90ad3a
 8009670:	24760deb 	.word	0x24760deb
 8009674:	3fa97b4b 	.word	0x3fa97b4b
 8009678:	a0d03d51 	.word	0xa0d03d51
 800967c:	3fb10d66 	.word	0x3fb10d66
 8009680:	c54c206e 	.word	0xc54c206e
 8009684:	3fb745cd 	.word	0x3fb745cd
 8009688:	920083ff 	.word	0x920083ff
 800968c:	3fc24924 	.word	0x3fc24924
 8009690:	5555550d 	.word	0x5555550d
 8009694:	3fd55555 	.word	0x3fd55555
 8009698:	2c6a6c2f 	.word	0x2c6a6c2f
 800969c:	bfa2b444 	.word	0xbfa2b444
 80096a0:	52defd9a 	.word	0x52defd9a
 80096a4:	3fadde2d 	.word	0x3fadde2d
 80096a8:	af749a6d 	.word	0xaf749a6d
 80096ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80096b0:	fe231671 	.word	0xfe231671
 80096b4:	3fbc71c6 	.word	0x3fbc71c6
 80096b8:	9998ebc4 	.word	0x9998ebc4
 80096bc:	3fc99999 	.word	0x3fc99999
 80096c0:	8800759c 	.word	0x8800759c
 80096c4:	7e37e43c 	.word	0x7e37e43c
 80096c8:	54442d18 	.word	0x54442d18
 80096cc:	bff921fb 	.word	0xbff921fb
 80096d0:	440fffff 	.word	0x440fffff
 80096d4:	7ff00000 	.word	0x7ff00000
 80096d8:	3fdbffff 	.word	0x3fdbffff
 80096dc:	08018f78 	.word	0x08018f78
 80096e0:	08018f58 	.word	0x08018f58
 80096e4:	3ff00000 	.word	0x3ff00000
 80096e8:	3ff2ffff 	.word	0x3ff2ffff
 80096ec:	40037fff 	.word	0x40037fff
 80096f0:	3ff80000 	.word	0x3ff80000
 80096f4:	bff00000 	.word	0xbff00000

080096f8 <fabs>:
 80096f8:	ec53 2b10 	vmov	r2, r3, d0
 80096fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009700:	ec43 2b10 	vmov	d0, r2, r3
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
